c   #include "Zep3Vec.h" must preceed this.
#include "ZepMaxdef.h"
#include "Zcnfig2.h"

c           configuration of detector

        integer  maxCnArea   ! max size to memorize comp. numbers.
        parameter( maxCnArea = MAX_CN_AREA )

        integer maxcom        ! max comment lines printable
        parameter (maxcom = EPMAX_COMMENT)


 
	integer ncmax         ! max components
        parameter ( ncmax = MAX_COMPONENT )
c((((((((((
c        integer MaxMatreska   ! max number of matreska
c        parameter ( MaxMatreska = MAX_MATRESKA )
c))))))))))
        integer ncmaxInSubD   ! max number of components in a sub det.
        parameter ( ncmaxInSubD = MAX_COMPONENT_IN_SUBD )

        integer maxSubD       ! max number of sub detectors
        parameter ( maxSubD = MAX_SUBD )

        integer maxSubDRef    ! max number of sub detectors referrable
        parameter ( maxSubDRef = MAX_SUBD_REF )

c        integer NPreDefName   ! number of predefined structures
c        parameter ( NPreDefName = 5 )
  
c        integer MaxNewStruc   ! max number of new structures constructable
c        parameter ( MaxNewStruc = MAX_NEW_STRUC )

c           location of attribute characterizing a volume
        integer boxa, boxb, boxc  ! location for a,b,c edges of a box
        parameter (boxa =1, boxb = 2, boxc = 3)

        integer pipeir, pipeor, pipeh ! location for inner, outer and height 
                                      ! of a pipe
        parameter (pipeir = 1, pipeor = 2, pipeh = 3)
     
        integer cylr, cylh   ! location for radius and height of a cylinder
        parameter( cylr = 1, cylh = 2 )

        integer sphr        ! location for radius of a sphere
        parameter( sphr = 1 )

        integer prisma, prismb, prismc, prismh  ! a, b, c and h of a prism
        parameter( prisma=1, prismb=2, prismc=3, prismh=4 )

        integer maxattr      ! max total number of attributes of all 
                              ! the components
        parameter ( maxattr = MAX_ATTR ) 
 
        integer maxiattr    ! max number of attributes of an individul
                         ! comp.
        parameter (maxiattr = MAX_IATTR )

        integer maxvertex    ! max number of vertexes of a given volume
                             !  that can be treated in Epics
        parameter (maxvertex =MAX_VERTEX)

        real*8 MaxErrDirCos ! permissible error in sum of direction cos^2
        parameter( MaxErrDirCos = MAX_ERR_DIR_COS )

        real*8 EpsFor90     ! scaler prod. of orthogonal unit vectors must
                            ! be smaller than this.
        parameter( EpsFor90 = EPS_FOR_90 )
        integer maxEq       !  max num. of #equate  efinable
        parameter ( maxEq = MAX_EQUATE )
c  -------------------------------------------------------------------------

       structure /Component/
         real*8 orgx, orgy, orgz,
     *          direc(9)
         real   offsetx, offsety, offsetz, MaxPathL
         character*8 struc, matter
c         integer  Nattributes,
c     *            NMatreska,
c     *            NContainer, vol,
         integer  NMatreska, vol

c               vol; vol+i is the i-th attribute of the component
c                    in Volat
c ((((((((((
c     *            Contains(MaxMatreska),
c     *            ContainsR(MaxMatreska),
         integer  Contains,
     *            ContainsR,
c )))))))))))
c (((((((((((
c     *            PContained(MaxMatreska),
     *            PContained, cn, chno
c            cn: component number assigned to this cmponent
c )))))))))))


         integer*2 NPContainer, CountIO,  CountDE
         integer*2 level

         integer*2  Nattributes, NContainer
         integer*2 strucNo         ! number expressing the structure
         logical*2 rotation
       end structure

       structure /Detector/
          record /Component/cmp(ncmax)
          integer Cn2media(ncmax)
          integer nct
c          integer  nbox, ncyl, npip, nprs, nsph,           
          integer*2 nworld, nnew(MaxNewStruc)

       end structure

       record /Component/SubdArea(ncmaxInSubD)

       structure /SubDetector/
          integer  loc
          integer nct
c          integer  nbox, ncyl, npip, nprs, nsph,           
          integer*2 nworld, nnew(MaxNewStruc)
       end structure                 
       integer  cumsubdloc

       real*8  PlusF, EqualF, MinusF
       integer NotGiven
       parameter( NotGiven = -9999999 )
       integer*2  EqualFshort
       record /ep3Vec/ XYZthick(maxSubD)

c       ********************
        record /Detector/Det
        record /SubDetector/SubD(maxSubD)
c       ********************



	integer Nfield, NsubD, mode, SubDUsed, coment,
     *          PosInDet(maxSubDRef), SubDNumb(maxSubDRef),
     *          SumOffset(maxSubDRef), wrtcom, comcounter,
     *          comflag(maxcom), comloc 

c
#if defined IBMAIX
        character*500  confdata
#else
        character*1024 confdata
#endif
        character*80 comarea(maxcom)
        character*24  Field(50), FieldAsItis(50)
        character*4 form
c        character*8 SubDName(maxSubD),  PreDefName(NPreDefName)
        character*8 SubDName(maxSubD)
        character*16 EqName(maxEq)
        real*8  EqValue(maxEq)
        integer Nequates
        integer CnArea(maxCnArea)
        integer CnCounter   ! CnArea already used. 
        integer AttrCounter ! Volat already used.

        real*8  Volat(maxattr)
        real*8  VTXx(maxvertex), VTXy(maxvertex), VTXz(maxvertex)
        integer NVTX       ! number of points in VTX*  
c          above are given by calling epqenvlper or epenvlpAll
c         if NVTX = 0, volume is assumed to be contained in a box
c         
        common /Zcnfig/ Det, SubdArea,
     1  SubD,  XYZthick, PlusF, EqualF, MinusF,
     2  EqValue, Volat,  VTXx, VTXy, VTXz,
     3  PosInDet, SubDNumb, SumOffset,
     4  CnArea, comflag, CnCounter, AttrCounter, NVTX,
     5  coment, Nequates, cumsubdloc,
     6  Nfield, NsubD,  mode, SubDUsed, wrtcom, comcounter,
     7  comloc, EqualFshort

        common /Zcnfic/ confdata, comarea, Field, FieldAsItis,
     *    SubDName, EqName, form

