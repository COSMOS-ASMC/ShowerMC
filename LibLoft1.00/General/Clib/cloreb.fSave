#include "ZsaveStruc.h"
cc              to test cloreb
c        include 'clorez.f'
c        include 'cgetRotMat4.f'
c        include 'clorep.f'
c  -----------------------------
c      implicit none
c      include '../Zptcl.h'
c      record /fmom/ p, q, r, s, gb, gbn
c      real*8  rm(4,4), rmz(4,4), rmy(4,4), g, bx, by, bz
c      real*8  fai1, fai2, tmp, pabs, gba
c      real*8  am/.938/ 
c      integer i, j
c 
c      g=1.1
c      do j=1, 45
c         gba=g*sqrt(1.d0-1.d0/g/g)
c         bx=-sqrt(2.d0)/2.
c         by=sqrt(2.d0)/5.
c         bz=sqrt(1.d0 - bx**2 - by**2)
c         gb.p(1) = bx*gba
c         gb.p(2) = by*gba
c         gb.p(3) = - bz*gba
c         gb.p(4) = g
c         gbn.x = - gb.p(1)
c         gbn.y = - gb.p(2)
c         gbn.z = - gb.p(3)
c         gbn.t= gb.p(4)
cc                 matrix for z-axis
c         fai1=atan2(gb.p(2), gb.p(1))
c         call cgetRotMat4(3, fai1, rmz)
c         tmp=gb.p(1)**2 + gb.p(2)**2
cc               matrix for y-axis
c         fai2=atan2(sqrt(tmp), gb.p(3))
c         call cgetRotMat4(2, fai2, rmy)
cc                 combined rotaion matrix
c         call cmultRotMat4(rmy, rmz, rm)
c         p.px=1.
c         p.py=10.
c         p.pz=10000.
c         call cpxyzp(p, pabs)
c         p.e=sqrt( pabs**2 + am**2)
c         call cloreb(1, gb, p, q)
cc
c         call clorep(1, gbn, q, r)
cc                 do rotaion
c         call capplyRot4(rm, r.p, s.p)
c         s.e = r.e
c         write(*, *) " ------ gamma=", g
c         write(*,*) ( (p.p(i)-s.p(i))/p.p(i), i=1, 4)
cc        write(*,*)   (p.p(i),s.p(i), i=1, 4)
c         g = g * 10.d0**.25
c      enddo   
c      end
c       **************************************************************
c       *
c       *    cloreb: General Lorentz transformation.
c       *            The z axis is on the beta direction.
c       *
c       **************************************************************
c
c /usage/   call cloreb(i, gb, q,  p)
c
c          suppose a system (K') moving with a velocity beta
c          (3-d vector) and gamma factor g relative to another
c          system (K).  q is  4 momentum given in
c          K' (of which the z axis is parallel to beta.)
c                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c          This routine converts q into p seen from K.
c
c          4 moemnta are assumed to be in the order of (px, py,
c          pz, e)
c
c     i: input. integer*4.  if 1, gb is assumed to be new
c                           else they are the same as previous call.
c    gb: input. structure /fmom/ (g*beta, g)
c     q: input. structure /ptcl/. 4 momentum and mass of a particle.
c     p: output. structure /ptcl/ transformed one ( p may be q)
c
c        Use clorez first ( for z component ) and 
c        then rotate obtained 4 momentum so that
c        the axis be parallel to the K coordinate axis. 
c
c
      subroutine cloreb(i, gb, q, p)
         implicit none
c----         include '../Zptcl.h'
#include  "Zptcl.h"
         record /fmom/ gb
         record /ptcl/  q, p
         integer i
c
         record /fmom/ agb
         record /ptcl/ pt
         real*8 rm(4,4), rmz(4,4), rmy(4,4),  tmp, fai2, fai1
c//////////
         common /debug/ go
         logical go
c///////////
#ifdef   USESAVE
         save agb
#endif
         save rm
c                z component only, transvers direction not affected
         p = q
         if(i .eq. 1) then
            tmp=gb.p(1)**2 + gb.p(2)**2
            agb.p(1) = 0.
            agb.p(2) = 0.
            agb.p(3) = sqrt(tmp+gb.p(3)**2)   ! |g*beta|
            agb.p(4) = gb.p(4)
         endif
         call clorez(agb, q, pt)

         if(agb.p(3) .ne. 0.) then
            if(i .eq. 1) then
c                 matrix for y-axis
               if(tmp .eq. 0. .and. gb.p(3) .eq. 0.) then
                  fai2 =0.
               else
                  fai2 = -atan2(sqrt(tmp), gb.p(3))
               endif
               call cgetRotMat4(2, fai2, rmy)
c                      matrix for z-axis
               if(gb.p(2) .eq. 0. and. gb.p(1) .eq. 0.) then
                  fai1 = 0.
               else
                  fai1 = -atan2(gb.p(2), gb.p(1))
               endif
               call cgetRotMat4(3, fai1, rmz)
c                 combined rotaion matrix
               call cmultRotMat4(rmz, rmy, rm)

            endif
c                 do rotaion
            call capplyRot4(rm, pt.fm.p,  p.fm.p)
c///////////////
            if(go) then
               write(*,*) 
     *        sngl(pt.fm.p(1)), sngl(pt.fm.p(2)), sngl(pt.fm.p(3)),
     *         sngl(p.fm.p(1)), sngl(p.fm.p(2)), sngl(p.fm.p(3))
            endif
c////////////////
            p.fm.p(4)=pt.fm.p(4)
         endif
      end





