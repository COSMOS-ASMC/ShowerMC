#include "Zcondc.h"
#if USEDPMJET == 1
c
c    +-------------------------------------------------------------+
c    |                                                             |
c    |                                                             |
c    |                        DPMJET 3.0                           |
c    |                                                             |
c    |                                                             |
c    |         S. Roesler+), R. Engel#), J. Ranft*)                |
c    |                                                             |
c    |         +) SLAC, M.S.48, P.O.Box 4349                       |
c    |            Stanford, CA 94309, USA                          |
c    |            Email: Stefan.Roesler@cern.ch                    |
c    |                                                             |
c    |         #) University of Delaware, BRI                      |
c    |            Newark, DE 19716, USA                            |
c    |                                                             |
c    |         *) University of Siegen, Dept. of Physics           |
c    |            D-57068 Siegen, Germany                          |
c    |                                                             |
c    |                                                             |
c    |       http://home.cern.ch/sroesler/dpmjet3.html             |
c    |                                                             |
c    |                                                             |
c    |       Monte Carlo models used for event generation:         |
c    |          PHOJET 1.12, JETSET 7.4 and LEPTO 6.5.1            |
c    |                                                             |
c    +-------------------------------------------------------------+
c
c
c===init===============================================================*
c
CDECK  ID>, DT_INIT
      SUBROUTINE DT_INIT(NCASES,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,
     &                                             IDP,IGLAU)

c***********************************************************************
c Initialization of event generation                                   *
c This version dated  7.4.98  is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

      PARAMETER (LIN=5,LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c names of hadrons used in input-cards
      CHARACTER*8 BTYPE
      COMMON /DTPAIN/ BTYPE(30)

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c interface HADRIN-DPM
      COMMON /HNTHRE/ EHADTH,EHADLO,EHADHI,INTHAD,IDXTA

c central particle production, impact parameter biasing
      COMMON /DTIMPA/ BIMIN,BIMAX,XSFRAC,ICENTR

c parameter for intranuclear cascade
      LOGICAL LPAULI
      COMMON /DTFOTI/ TAUFOR,KTAUGE,ITAUVE,INCMOD,LPAULI

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT

c threshold values for x-sampling (DTUNUC 1.x)
      COMMON /DTXCUT/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     &                SSMIMQ,VVMTHR

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c n-n cross section fluctuations
      PARAMETER (NBINS = 1000)
      COMMON /DTXSFL/ FLUIXX(NBINS),IFLUCT

c flags for particle decays
      COMMON /DTFRPA/ MSTUX(20),PARUX(20),MSTJX(20),PARJX(20),
     &                IMSTU(20),IPARU(20),IMSTJ(20),IPARJ(20),
     &                NMSTU,NPARU,NMSTJ,NPARJ,PDB,PDBSEA(3),ISIG0,IPI0

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF

c parameters for hA-diffraction
      COMMON /DTDIHA/ DIBETA,DIALPH

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c kinematical cuts for lepton-nucleus interactions
      COMMON /DTLCUT/ ECMIN,ECMAX,XBJMIN,ELMIN,EGMIN,EGMAX,YMIN,YMAX,
     &                Q2MIN,Q2MAX,THMIN,THMAX,Q2LI,Q2HI,ECMLI,ECMHI

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD

c cuts for variable energy runs
      COMMON /DTVARE/ VARELO,VAREHI,VARCLO,VARCHI

c flags for activated histograms
      COMMON /DTHIS3/ IHISPP(50),IHISXS(50),IXSTBL


      COMMON/PYDAT1/MSTU(200),PARU(200),MSTJ(200),PARJ(200)



      COMMON/PYDAT3/MDCY(500,3),MDME(4000,2),BRAT(4000),KFDP(4000,5)


c LEPTO
c*LUND single / double precision
      REAL CUT,PARL,TMPX,TMPY,TMPW2,TMPQ2,TMPU
      COMMON /LEPTOU/ CUT(14),LST(40),PARL(30),
     &                TMPX,TMPY,TMPW2,TMPQ2,TMPU

c LEPTO
      REAL RPPN
      COMMON /LEPTOI/ RPPN,LEPIN,INTER

c steering flags for qel neutrino scattering modules
      COMMON /QNEUTO/ DSIGSU,DSIGMC,NDSIG,NEUTYP,NEUDEC



      INTEGER PYCOMP


C     DIMENSION XPARA(5)
      DIMENSION XDUMB(40),IPRANG(5)

      PARAMETER (MXCARD=58)
      CHARACTER*78 CLINE,CTITLE
      CHARACTER*60 CWHAT
      CHARACTER*8  BLANK,SDUM
      CHARACTER*10 CODE,CODEWD
      CHARACTER*72 HEADER
      LOGICAL LSTART,LEINP,LXSTAB
      DIMENSION WHAT(6),CODE(MXCARD)
      DATA CODE/
     &   'TITLE     ','PROJPAR   ','TARPAR    ','ENERGY    ',
     &   'MOMENTUM  ','CMENERGY  ','EMULSION  ','FERMI     ',
     &   'TAUFOR    ','PAULI     ','COULOMB   ','HADRIN    ',
     &   'EVAP      ','EMCCHECK  ','MODEL     ','PHOINPUT  ',
     &   'GLAUBERI  ','FLUCTUAT  ','CENTRAL   ','RECOMBIN  ',
     &   'COMBIJET  ','XCUTS     ','INTPT     ','CRONINPT  ',
     &   'SEADISTR  ','SEASU3    ','DIQUARKS  ','RESONANC  ',
     &   'DIFFRACT  ','SINGLECH  ','NOFRAGME  ','HADRONIZE ',
     &   'POPCORN   ','PARDECAY  ','BEAM      ','LUND-MSTU ',
     &   'LUND-MSTJ ','LUND-MDCY ','LUND-PARJ ','LUND-PARU ',
     &   'OUTLEVEL  ','FRAME     ','L-TAG     ','L-ETAG    ',
     &   'ECMS-CUT  ','VDM-PAR1  ','HISTOGRAM ','XS-TABLE  ',
     &   'GLAUB-PAR ','GLAUB-INI ','VDM-PAR2  ','XS-QELPRO ',
     &   'RNDMINIT  ','LEPTO-CUT ','LEPTO-LST ','LEPTO-PARL',
     &   'START     ','STOP      '/
      DATA BLANK /'        '/

      DATA LSTART,LXSTAB,IFIRST /.TRUE.,.FALSE.,1/
      DATA CMEOLD /0.0D0/
c//////////////////
c      write(0,*) ' DT_INIT(NCASES,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,'
c      write(0,*) '           IDP,IGLAU)'
c      write(0,*) NCASES,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR, IDP,IGLAU
c///////////////
c---------------------------------------------------------------------
c at the first call of INIT: initialize event generation
      IF (LSTART) THEN
         CALL DT_TITLE
c   initialization and test of the random number generator
         CALL DT_RNDMST(22,54,76,92)
         CALL DT_RNDMTE(1)
c   initialization of BAMJET, DECAY and HADRIN
         CALL DT_DDATAR
         CALL DT_DHADDE
         CALL DT_DCHANT
         CALL DT_DCHANH
c   set default values for input variables
         CALL DT_DEFAUL(EPN,PPN)
         IGLAU  = 0
         IXSQEL = 0
c   flag for collision energy input
         LEINP  = .FALSE.
         LSTART = .FALSE.
      ENDIF

c---------------------------------------------------------------------
   10 CONTINUE

c read control card from input-unit LIN
      READ(TempDev,'(A78)',END=9999) CLINE
      IF (CLINE(1:1).EQ.'*') THEN
c comment-line
         WRITE(ErrorOut,'(A78)') CLINE
         GOTO 10
      ENDIF
C     READ(CLINE,1000,END=9999) CODEWD,(WHAT(I),I=1,6),SDUM
C1000 FORMAT(A10,6E10.0,A8)
      DO 1008 I=1,6
         WHAT(I) = ZERO
 1008 CONTINUE
      READ(CLINE,1006,END=9999) CODEWD,CWHAT,SDUM
 1006 FORMAT(A10,A60,A8)
      READ(CWHAT,*,END=1007) (WHAT(I),I=1,6)
 1007 CONTINUE
      WRITE(ErrorOut,1001) CODEWD,(WHAT(I),I=1,6),SDUM
 1001 FORMAT(A10,6G10.3,A8)

c check for valid control card and get card index
      ICW = 0
      DO 11 I=1,MXCARD
         IF (CODEWD.EQ.CODE(I)) ICW = I
   11 CONTINUE
      IF (ICW.EQ.0) THEN
         WRITE(ErrorOut,1002) CODEWD
 1002    FORMAT(/,1X,'---> ',A10,': INVALID CONTROL-CARD !',/)
         GOTO 10
      ENDIF

      GOTO(
c------------------------------------------------------------
c       TITLE   ,  PROJPAR ,  TARPAR  ,  ENERGY  ,  MOMENTUM,
     &  100     ,  110     ,  120     ,  130     ,  140     ,
c
c------------------------------------------------------------
c       CMENERGY,  EMULSION,  FERMI   ,  TAUFOR  ,  PAULI   ,
     &  150     ,  160     ,  170     ,  180     ,  190     ,
c
c------------------------------------------------------------
c       COULOMB ,  HADRIN  ,  EVAP    ,  EMCCHECK,  MODEL   ,
     &  200     ,  210     ,  220     ,  230     ,  240     ,
c
c------------------------------------------------------------
c       PHOINPUT,  GLAUBERI,  FLUCTUAT,  CENTRAL ,  RECOMBIN,
     &  250     ,  260     ,  270     ,  280     ,  290     ,
c
c------------------------------------------------------------
c       COMBIJET,  XCUTS   ,  INTPT   ,  CRONINPT,  SEADISTR,
     &  300     ,  310     ,  320     ,  330     ,  340     ,
c
c------------------------------------------------------------
c       SEASU3  ,  DIQUARKS,  RESONANC,  DIFFRACT,  SINGLECH,
     &  350     ,  360     ,  370     ,  380     ,  390     ,
c
c------------------------------------------------------------
c       NOFRAGME, HADRONIZE,  POPCORN ,  PARDECAY,  BEAM    ,
     &  400     ,  410     ,  420     ,  430     ,  440     ,
c
c------------------------------------------------------------
c      LUND-MSTU, LUND-MSTJ, LUND-MDCY, LUND-PARJ, LUND-PARU,
     &  450     ,  451     ,  452     ,  460     ,  470     ,
c
c------------------------------------------------------------
c       OUTLEVEL,  FRAME   , L-TAG    ,  L-ETAG  ,  ECMS-CUT,
     &  480     ,  490     ,  500     ,  510     ,  520     ,
c
c------------------------------------------------------------
c       VDM-PAR1, HISTOGRAM, XS-TABLE , GLAUB-PAR, GLAUB-INI,
     &  530     ,  540     ,  550     ,  560     ,  565     ,
c
c------------------------------------------------------------
c               ,          ,  VDM-PAR2, XS-QELPRO, RNDMINIT ,
     &                        570     ,  580     ,  590     ,
c
c------------------------------------------------------------
c      LEPTO-CUT, LEPTO-LST,LEPTO-PARL,  START   ,  STOP    )
     &  600     ,  610     ,  620     ,  630     ,  640     ) , ICW
c
c------------------------------------------------------------

      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = TITLE                       *
c                                                                   *
c       what (1..6), sdum   no meaning                              *
c                                                                   *
c       Note:  The control-card following this must consist of      *
c              a string of characters usually giving the title of   *
c              the run.                                             *
c                                                                   *
c********************************************************************

  100 CONTINUE
      READ(TempDev,'(A78)') CTITLE
      WRITE(ErrorOut,'(//,5X,A78,//)') CTITLE
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = PROJPAR                     *
c                                                                   *
c       what (1) =  mass number of projectile nucleus  default: 1   *
c       what (2) =  charge of projectile nucleus       default: 1   *
c       what (3..6)   no meaning                                    *
c       sdum        projectile particle code word                   *
c                                                                   *
c       Note: If sdum is defined what (1..2) have no meaning.       *
c                                                                   *
c********************************************************************

  110 CONTINUE
      IF (SDUM.EQ.BLANK) THEN
         IP     = INT(WHAT(1))
         IPZ    = INT(WHAT(2))
         IJPROJ = 1
         IBPROJ = 1
      ELSE
         IJPROJ = 0
         DO 111 II=1,30
            IF (SDUM.EQ.BTYPE(II)) THEN
               IP     = 1
               IPZ    = 1
               IF (II.EQ.26) THEN
                  IJPROJ = 135
               ELSEIF (II.EQ.27) THEN
                  IJPROJ = 136
               ELSEIF (II.EQ.28) THEN
                  IJPROJ = 133
               ELSEIF (II.EQ.29) THEN
                  IJPROJ = 134
               ELSE
                  IJPROJ = II
               ENDIF
               IBPROJ = IIBAR(IJPROJ)
c photon
               IF ((IJPROJ.EQ.7).AND.(WHAT(1).GT.ZERO)) VIRT = WHAT(1)
c lepton
               IF (((IJPROJ.EQ. 3).OR.(IJPROJ.EQ. 4).OR.
     &              (IJPROJ.EQ.10).OR.(IJPROJ.EQ.11)).AND.
     &                              (WHAT(1).GT.ZERO)) Q2HI = WHAT(1)
            ENDIF
  111    CONTINUE
         IF (IJPROJ.EQ.0) THEN
            WRITE(ErrorOut,1110)
 1110       FORMAT(/,1X,'INVALID PROJPAR CARD !',/)
            GOTO 9999
         ENDIF
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = TARPAR                      *
c                                                                   *
c       what (1) =  mass number of target nucleus      default: 1   *
c       what (2) =  charge of target nucleus           default: 1   *
c       what (3..6)   no meaning                                    *
c       sdum        target particle code word                       *
c                                                                   *
c       Note: If sdum is defined what (1..2) have no meaning.       *
c                                                                   *
c********************************************************************

  120 CONTINUE
      IF (SDUM.EQ.BLANK) THEN
         IT     = INT(WHAT(1))
         ITZ    = INT(WHAT(2))
         IJTARG = 1
         IBTARG = 1
      ELSE
         IJTARG = 0
         DO 121 II=1,30
            IF (SDUM.EQ.BTYPE(II)) THEN
               IT     = 1
               ITZ    = 1
               IJTARG = II
               IBTARG = IIBAR(IJTARG)
            ENDIF
  121    CONTINUE
         IF (IJTARG.EQ.0) THEN
            WRITE(ErrorOut,1120)
 1120       FORMAT(/,1X,'INVALID TARPAR CARD !',/)
            GOTO 9999
         ENDIF
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = ENERGY                      *
c                                                                   *
c       what (1) =  energy (GeV) of projectile in Lab.              *
c                   if what(1) < 0:  |what(1)| = kinetic energy     *
c                                                default: 200 GeV   *
c                   if |what(2)| > 0: min. energy for variable      *
c                                     energy runs                   *
c       what (2) =  max. energy for variable energy runs            *
c                   if what(2) < 0:  |what(2)| = kinetic energy     *
c                                                                   *
c********************************************************************

  130 CONTINUE
      EPN    = WHAT(1)
      PPN    = ZERO
      CMENER = ZERO
      IF ((ABS(WHAT(2)).GT.ZERO).AND.
     &    (ABS(WHAT(2)).GT.ABS(WHAT(1)))) THEN
         VARELO = WHAT(1)
         VAREHI = WHAT(2)
         EPN    = VAREHI
      ENDIF
      LEINP  = .TRUE.
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = MOMENTUM                    *
c                                                                   *
c       what (1) =  momentum (GeV/c) of projectile in Lab.          *
c                                                default: 200 GeV/c *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  140 CONTINUE
      EPN    = ZERO
      PPN    = WHAT(1)
      CMENER = ZERO
      LEINP  = .TRUE.
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = CMENERGY                    *
c                                                                   *
c       what (1) =  energy in nucleon-nucleon cms.                  *
c                                                default: none      *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  150 CONTINUE
      EPN    = ZERO
      PPN    = ZERO
      CMENER = WHAT(1)
      LEINP  = .TRUE.
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = EMULSION                    *
c                                                                   *
c               definition of nuclear emulsions                     *
c                                                                   *
c     what(1)      mass number of emulsion component                *
c     what(2)      charge of emulsion component                     *
c     what(3)      fraction of events in which a scattering on a    *
c                  nucleus of this properties is performed          *
c     what(4,5,6)  as what(1,2,3) but for another component         *
c                                             default: no emulsion  *
c     sdum         no meaning                                       *
c                                                                   *
c     Note: If this input-card is once used with valid parameters   *
c           TARPAR is obsolete.                                     *
c           Not the absolute values of the fractions are important  *
c           but only the ratios of fractions of different comp.     *
c           This control card can be repeatedly used to define      *
c           emulsions consisting of up to 10 elements.              *
c                                                                   *
c********************************************************************

  160 CONTINUE
      IF ((WHAT(1).GT.ZERO).AND.(WHAT(2).GT.ZERO)
     &                     .AND.(ABS(WHAT(3)).GT.ZERO)) THEN
         NCOMPO = NCOMPO+1
         IF (NCOMPO.GT.NCOMPX) THEN
            WRITE(ErrorOut,1600)
            STOP
         ENDIF
         IEMUMA(NCOMPO) = INT(WHAT(1))
         IEMUCH(NCOMPO) = INT(WHAT(2))
         EMUFRA(NCOMPO) = WHAT(3)
         IEMUL = 1
C        CALL SHMAKF(IDUM,IDUM,IEMUMA(NCOMPO),IEMUCH(NCOMPO))
      ENDIF
      IF ((WHAT(4).GT.ZERO).AND.(WHAT(5).GT.ZERO)
     &                     .AND.(ABS(WHAT(6)).GT.ZERO)) THEN
         NCOMPO = NCOMPO+1
         IF (NCOMPO.GT.NCOMPX) THEN
            WRITE(ErrorOut,1001)
            STOP
         ENDIF
         IEMUMA(NCOMPO) = INT(WHAT(4))
         IEMUCH(NCOMPO) = INT(WHAT(5))
         EMUFRA(NCOMPO) = WHAT(6)
C        CALL SHMAKF(IDUM,IDUM,IEMUMA(NCOMPO),IEMUCH(NCOMPO))
      ENDIF
 1600 FORMAT(1X,'TOO MANY EMULSION COMPONENTS - PROGRAM STOPPED')
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = FERMI                       *
c                                                                   *
c       what (1) = -1 Fermi-motion of nucleons not treated          *
c                                                 default: 1        *
c       what (2) =    scale factor for Fermi-momentum               *
c                                                 default: 0.75     *
c       what (3..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  170 CONTINUE
      IF (WHAT(1).EQ.-1.0D0) THEN
         LFERMI = .FALSE.
      ELSE
         LFERMI = .TRUE.
      ENDIF
      XMOD = WHAT(2)
      IF (XMOD.GE.ZERO) FERMOD = XMOD
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = TAUFOR                      *
c                                                                   *
c          formation time supressed intranuclear cascade            *
c                                                                   *
c    what (1)      formation time (in fm/c)                         *
c                  note: what(1)=10. corresponds roughly to an      *
c                        average formation time of 1 fm/c           *
c                                                 default: 5. fm/c  *
c    what (2)      number of generations followed                   *
c                                                 default: 25       *
c    what (3) = 1. p_t-dependent formation zone                     *
c             = 2. constant formation zone                          *
c                                                 default: 1        *
c    what (4)      modus of selection of nucleus where the          *
c                  cascade if followed first                        *
c             = 1.  proj./target-nucleus with probab. 1/2           *
c             = 2.  nucleus with highest mass                       *
c             = 3.  proj. nucleus if particle is moving in pos. z   *
c                   targ. nucleus if particle is moving in neg. z   *
c                                                 default: 1        *
c    what (5..6), sdum   no meaning                                 *
c                                                                   *
c********************************************************************

  180 CONTINUE
      TAUFOR = WHAT(1)
      KTAUGE = INT(WHAT(2))
      INCMOD = 1
      IF ((WHAT(3).GE.1.0D0).AND.(WHAT(3).LE.2.0D0))
     &                                    ITAUVE = INT(WHAT(3))
      IF ((WHAT(4).GE.1.0D0).AND.(WHAT(4).LE.3.0D0))
     &                                    INCMOD = INT(WHAT(4))
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = PAULI                       *
c                                                                   *
c       what (1) =  -1  Pauli's principle for secondary             *
c                       interactions not treated                    *
c                                                    default: 1     *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  190 CONTINUE
      IF (WHAT(1).EQ.-1.0D0) THEN
         LPAULI = .FALSE.
      ELSE
         LPAULI = .TRUE.
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = COULOMB                     *
c                                                                   *
c       what (1) = -1. Coulomb-energy treatment switched off        *
c                                                    default: 1     *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  200 CONTINUE
      ICOUL = 1
      IF (WHAT(1).EQ.-1.0D0) THEN
         ICOUL = 0
      ELSE
         ICOUL = 1
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = HADRIN                      *
c                                                                   *
c                       HADRIN module                               *
c                                                                   *
c    what (1) = 0. elastic/inelastic interactions with probab.      *
c                  as defined by cross-sections                     *
c             = 1. inelastic interactions forced                    *
c             = 2. elastic interactions forced                      *
c                                                 default: 1        *
c    what (2)      upper threshold in total energy (GeV) below      *
c                  which interactions are sampled by HADRIN         *
c                                                 default: 5. GeV   *
c    what (3..6), sdum   no meaning                                 *
c                                                                   *
c********************************************************************

  210 CONTINUE
      IWHAT = INT(WHAT(1))
      IF ((IWHAT.GE.0).AND.(IWHAT.LE.2)) INTHAD = IWHAT
      IF ((WHAT(2).GT.ZERO).AND.(WHAT(2).LT.15.0D0)) EHADTH = WHAT(2)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = EVAP                        *
c                                                                   *
c                    evaporation module                             *
c                                                                   *
c  what (1) =< -1 ==> evaporation is switched off                   *
c           >=  1 ==> evaporation is performed                      *
c                                                                   *
c         what (1) = i1 + i2*10 + i3*100 + i4*10000                 *
c                    (i1, i2, i3, i4 >= 0 )                         *
c                                                                   *
c   i1 is the flag for selecting the T=0 level density option used  *
c      =  1: standard EVAP level densities with Cook pairing        *
c            energies                                               *
c      =  2: Z,N-dependent Gilbert & Cameron level densities        *
c                                                        (default)  *
c      =  3: Julich A-dependent level densities                     *
c      =  4: Z,N-dependent Brancazio & Cameron level densities      *
c                                                                   *
c   i2 >= 1: high energy fission activated                          *
c            (default high energy fission activated)                *
c                                                                   *
c   i3 =  0: No energy dependence for level densities               *
c      =  1: Standard Ignyatuk (1975, 1st) energy dependence        *
c            for level densities (default)                          *
c      =  2: Standard Ignyatuk (1975, 1st) energy dependence        *
c            for level densities with NOT used set of parameters    *
c      =  3: Standard Ignyatuk (1975, 1st) energy dependence        *
c            for level densities with NOT used set of parameters    *
c      =  4: Second   Ignyatuk (1975, 2nd) energy dependence        *
c            for level densities                                    *
c      =  5: Second   Ignyatuk (1975, 2nd) energy dependence        *
c            for level densities with fit 1 Iljinov & Mebel set of  *
c            parameters                                             *
c      =  6: Second   Ignyatuk (1975, 2nd) energy dependence        *
c            for level densities with fit 2 Iljinov & Mebel set of  *
c            parameters                                             *
c      =  7: Second   Ignyatuk (1975, 2nd) energy dependence        *
c            for level densities with fit 3 Iljinov & Mebel set of  *
c            parameters                                             *
c      =  8: Second   Ignyatuk (1975, 2nd) energy dependence        *
c            for level densities with fit 4 Iljinov & Mebel set of  *
c            parameters                                             *
c                                                                   *
c   i4 >= 1: Original Gilbert and Cameron pairing energies used     *
c            (default Cook's modified pairing energies)             *
c                                                                   *
c  what (2) = ig + 10 * if   (ig and if must have the same sign)    *
c                                                                   *
c   ig =< -1 ==> deexcitation gammas are not produced               *
c                (if the evaporation step is not performed          *
c                 they are never produced)                          *
c   if =< -1 ==> Fermi Break Up is not invoked                      *
c                (if the evaporation step is not performed          *
c                 it is never invoked)                              *
c   The default is: deexcitation gamma produced and Fermi break up  *
c                   activated for the new  preequilibrium, not      *
c                   activated otherwise.                            *
c  what (3..6), sdum   no meaning                                   *
c                                                                   *
c********************************************************************

 220  CONTINUE
      IF (WHAT(1).LE.-1.0D0) THEN
         LEVPRT = .FALSE.
         LDEEXG = .FALSE.
         LHEAVY = .FALSE.
         GOTO 10
      ENDIF
      WHTSAV = WHAT (1)
      IF ( NINT (WHAT (1)) .GE. 10000 ) THEN
         LLVMOD   = .FALSE.
         JLVHLP   = NINT (WHAT (1)) / 10000
         WHAT (1) = WHAT (1) - 10000.D+00 * JLVHLP
      END IF
      IF ( NINT (WHAT (1)) .GE. 100 ) THEN
         JLVMOD   = NINT (WHAT (1)) / 100
         WHAT (1) = WHAT (1) - 100.D+00 * JLVMOD
      END IF
      IF ( NINT (WHAT (1)) .GE. 10  ) THEN
         IFISS    = 1
         JLVHLP   = NINT (WHAT (1)) / 10
         WHAT (1) = WHAT (1) - 10.D+00 * JLVHLP
      ELSE IF ( NINT (WHTSAV) .NE. 0 ) THEN
         IFISS    = 0
      END IF
      IF ( NINT (WHAT (1)) .GE. 0 ) THEN
         LEVPRT = .TRUE.
         ILVMOD = NINT (WHAT(1))
         IF ( ABS (NINT (WHAT (2))) .GE. 10  ) THEN
            LFRMBK   = .TRUE.
            JLVHLP   = NINT (WHAT (2)) / 10
            WHAT (2) = WHAT (2) - 10.D+00 * JLVHLP
         ELSE IF ( NINT (WHAT (2)) .NE. 0 ) THEN
            LFRMBK   = .FALSE.
         END IF
         IF ( NINT (WHAT (2)) .GE. 0 ) THEN
            LDEEXG = .TRUE.
         ELSE
            LDEEXG = .FALSE.
         END IF
c*sr heavies are always put to /FKFHVY/
C        IF ( NINT (WHAT(3)) .GE. 1 ) THEN
C           LHEAVY = .TRUE.
C        ELSE
C           LHEAVY = .FALSE.
C        END IF
         LHEAVY = .TRUE.
      ELSE
         LEVPRT = .FALSE.
         LDEEXG = .FALSE.
         LHEAVY = .FALSE.
      END IF

      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = EMCCHECK                    *
c                                                                   *
c    extended energy-momentum / quantum-number conservation check   *
c                                                                   *
c       what (1) = -1   extended check not performed                *
c                                                    default: 1.    *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  230 CONTINUE
      IF (WHAT(1).EQ.-1) THEN
         LEMCCK = .FALSE.
      ELSE
         LEMCCK = .TRUE.
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = MODEL                       *
c                                                                   *
c     Model to be used to treat nucleon-nucleon interactions        *
c                                                                   *
c       sdum = DTUNUC    two-chain model                            *
c            = PHOJET    multiple chains including minijets         *
c            = LEPTO     DIS                                        *
c            = QNEUTRIN  quasi-elastic neutrino scattering          *
c                                                  default: PHOJET  *
c                                                                   *
c       if sdum = LEPTO:                                            *
c       what (1)         (variable INTER)                           *
c                        = 1  gamma exchange                        *
c                        = 2  W+-   exchange                        *
c                        = 3  Z0    exchange                        *
c                        = 4  gamma/Z0 exchange                     *
c                                                                   *
c       if sdum = QNEUTRIN:                                         *
c       what (1)         = 0  elastic scattering on nucleon and     *
c                             tau does not decay (default)          *
c                        = 1  decay of tau into mu..                *
c                        = 2  decay of tau into e..                 *
c                        = 10 CC events on p and n                  *
c                        = 11 NC events on p and n                  *
c                                                                   *
c       what (2..6)      no meaning                                 *
c                                                                   *
c********************************************************************

  240 CONTINUE
      IF (SDUM.EQ.CMODEL(1)) THEN
         MCGENE = 1
      ELSEIF (SDUM.EQ.CMODEL(2)) THEN
         MCGENE = 2
      ELSEIF (SDUM.EQ.CMODEL(3)) THEN
         MCGENE = 3
         IF ((WHAT(1).GE.1.0D0).AND.(WHAT(1).LE.4.0D0))
     &      INTER = INT(WHAT(1))
      ELSEIF (SDUM.EQ.CMODEL(4)) THEN
         MCGENE = 4
         IWHAT  = INT(WHAT(1))
         IF ((IWHAT.EQ.1 ).OR.(IWHAT.EQ.2 ).OR.
     &       (IWHAT.EQ.10).OR.(IWHAT.EQ.11))
     &      NEUDEC = IWHAT
      ELSE
         STOP ' UNKNOWN MODEL !'
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = PHOINPUT                    *
c                                                                   *
c       Start of input-section for PHOJET-specific input-cards      *
c       Note:  This section will not be finished before giving      *
c              ENDINPUT-card                                        *
c       what (1..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  250 CONTINUE
      IF (LPHOIN) THEN

         CALL PHO_INIT(TempDev,IREJ1)

         IF (IREJ1.NE.0) THEN
            WRITE(ErrorOut,
     * '(1X,A)')'INIT:   reading PHOJET-input failed'
            STOP
         ENDIF
         LPHOIN = .FALSE.
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = GLAUBERI                    *
c                                                                   *
c        Pre-initialization of impact parameter selection           *
c                                                                   *
c        what (1..6), sdum   no meaning                             *
c                                                                   *
c********************************************************************

  260 CONTINUE
      IF (IFIRST.NE.99) THEN
         CALL DT_RNDMST(12,34,56,78)
         CALL DT_RNDMTE(1)
         OPEN(40,FILE='OUTDATA0/SHM.OUT',STATUS='UNKNOWN')
C        OPEN(11,FILE='outdata0/shm.dbg',STATUS='UNKNOWN')
         IFIRST = 99
      ENDIF

      IPPN = 8
      PLOW = 10.0D0
C     IPPN = 1
C     PLOW = 100.0D0
      PHI  = 1.0D5
      APLOW = LOG10(PLOW)
      APHI  = LOG10(PHI)
      ADP   = (APHI-APLOW)/DBLE(IPPN)

      IPLOW = 1
      IDIP  = 1
      IIP   = 5
C     IPLOW = 1
C     IDIP  = 1
C     IIP   = 1
      IPRANG(1) = 1
      IPRANG(2) = 2
      IPRANG(3) = 5
      IPRANG(4) = 10
      IPRANG(5) = 20

      ITLOW = 30
      IDIT  = 3
      IIT   = 60
C     IDIT  = 10
C     IIT   = 21

      DO 473 NCIT=1,IIT
         IT   = ITLOW+(NCIT-1)*IDIT
C        IPHI = IT
C        IDIP = 10
C        IIP  = (IPHI-IPLOW)/IDIP
C        IF (IIP.EQ.0) IIP = 1
C        IF (IT.EQ.IPLOW) IIP = 0

         DO 472 NCIP=1,IIP
            IP = IPRANG(NCIP)
CC           IF (NCIP.LE.IIP) THEN
C               IP = IPLOW+(NCIP-1)*IDIP
CC           ELSE
CC              IP = IT
CC           ENDIF
            IF (IP.GT.IT) GOTO 472

            DO 471 NCP=1,IPPN+1
               APPN = APLOW+DBLE(NCP-1)*ADP
               PPN  = 10**APPN

               OPEN(12,FILE='OUTDATA0/SHM.STA',STATUS='UNKNOWN')
               WRITE(12,'(1X,2I5,E15.3)') IP,IT,PPN
               CLOSE(12)

               XLIM1 = 0.0D0
               XLIM2 = 50.0D0
               XLIM3 = ZERO
               IBIN  = 50
               CALL DT_NEWHGR(XDUM,XDUM,XDUM,XDUMB,-1,IHDUM)
               CALL DT_NEWHGR(XLIM1,XLIM2,XLIM3,XDUMB,IBIN,IHSHMA)

               NEVFIT = 5
C              IF ((IP.GT.10).OR.(IT.GT.10)) THEN
C                 NEVFIT = 5
C              ELSE
C                 NEVFIT = 10
C              ENDIF
               SIGAV  = 0.0D0

               DO 478 I=1,NEVFIT
                  CALL DT_SHMAKI(IP,IDUM1,IT,IDUM1,IJPROJ,PPN,99)
                  SIGAV = SIGAV+XSPRO(1,1,1)
                  DO 479 J=1,50
                     XC = DBLE(J)
                     CALL DT_FILHGR(XC,BSITE(1,1,1,J),IHSHMA,I)
  479             CONTINUE
  478          CONTINUE

               CALL DT_EVTHIS(IDUM)
               HEADER = ' BSITE'
C              CALL OUTGEN(IHSHMA,0,0,0,0,0,HEADER,0,NEVFIT,ONE,0,1,-1)

C              CALL GENFIT(XPARA)
C              WRITE(40,'(2I4,E11.3,F6.0,5E11.3)')
C    &              IP,IT,PPN,SIGAV/DBLE(NEVFIT),XPARA

  471       CONTINUE

  472    CONTINUE

  473 CONTINUE

      STOP

c********************************************************************
c                                                                   *
c               control card:  codewd = FLUCTUAT                    *
c                                                                   *
c           Treatment of cross section fluctuations                 *
c                                                                   *
c       what (1) = 1  treat cross section fluctuations              *
c                                                    default: 0.    *
c       what (1..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

 270  CONTINUE
      IFLUCT = 0
      IF (WHAT(1).EQ.ONE) THEN
         IFLUCT = 1
         CALL DT_FLUINI
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = CENTRAL                     *
c                                                                   *
c       what (1) = 1.  central production forced     default: 0     *
c  if what (1) < 0 and > -100                                       *
c       what (2) = min. impact parameter             default: 0     *
c       what (3) = max. impact parameter             default: b_max *
c  if what (1) < -99                                                *
c       what (2) = fraction of cross section         default: 1     *
c  if what (1) = -1 : evaporation/fzc suppressed                    *
c  if what (1) < -1 : evaporation/fzc allowed                       *
c                                                                   *
c       what (4..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  280 CONTINUE
      ICENTR = INT(WHAT(1))
      IF (ICENTR.LT.0) THEN
         IF (ICENTR.GT.-100) THEN
            BIMIN = WHAT(2)
            BIMAX = WHAT(3)
         ELSE
            XSFRAC = WHAT(2)
         ENDIF
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = RECOMBIN                    *
c                                                                   *
c                     Chain recombination                           *
c        (recombine S-S and V-V chains to V-S chains)               *
c                                                                   *
c       what (1) = -1. recombination switched off    default: 1     *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  290 CONTINUE
      IRECOM = 1
      IF (WHAT(1).EQ.-1.0D0) IRECOM = 0
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = COMBIJET                    *
c                                                                   *
c               chain fusion (2 q-aq --> qq-aqaq)                   *
c                                                                   *
c       what (1) = 1   fusion treated                               *
c                                                    default: 0.    *
c       what (2)       minimum number of uncombined chains from     *
c                      single projectile or target nucleons         *
c                                                    default: 0.    *
c       what (3..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  300 CONTINUE
      LCO2CR = .FALSE.
      IF (INT(WHAT(1)).EQ.1) LCO2CR = .TRUE.
      IF (WHAT(2).GE.ZERO) CUTOF = WHAT(2)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = XCUTS                       *
c                                                                   *
c                 thresholds for x-sampling                         *
c                                                                   *
c    what (1)    defines lower threshold for val.-q x-value (CVQ)   *
c                                                 default: 1.       *
c    what (2)    defines lower threshold for val.-qq x-value (CDQ)  *
c                                                 default: 2.       *
c    what (3)    defines lower threshold for sea-q x-value (CSEA)   *
c                                                 default: 0.2      *
c    what (4)    sea-q x-values in S-S chains (SSMIMA)              *
c                                                 default: 0.14     *
c    what (5)    not used                                           *
c                                                 default: 2.       *
c    what (6), sdum   no meaning                                    *
c                                                                   *
c    Note: Lower thresholds (what(1..3)) are def. as x_thr=CXXX/ECM *
c                                                                   *
c********************************************************************

  310 CONTINUE
      IF (WHAT(1).GE.0.5D0) CVQ    = WHAT(1)
      IF (WHAT(2).GE.ONE)   CDQ    = WHAT(2)
      IF (WHAT(3).GE.0.1D0) CSEA   = WHAT(3)
      IF (WHAT(4).GE.ZERO) THEN
         SSMIMA = WHAT(4)
         SSMIMQ = SSMIMA**2
      ENDIF
      IF (WHAT(5).GT.2.0D0) VVMTHR = WHAT(5)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = INTPT                       *
c                                                                   *
c     what (1) = -1   intrinsic transverse momenta of partons       *
c                     not treated                default: 1         *
c     what (2..6), sdum   no meaning                                *
c                                                                   *
c********************************************************************

  320 CONTINUE
      IF (WHAT(1).EQ.-1.0D0) THEN
         LINTPT = .FALSE.
      ELSE
         LINTPT = .TRUE.
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = CRONINPT                    *
c                                                                   *
c    Cronin effect (multiple scattering of partons at chain ends)   *
c                                                                   *
c       what (1) = -1  Cronin effect not treated     default: 1     *
c       what (2) = 0   scattering parameter          default: 0.64  *
c       what (3..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  330 CONTINUE
      IF (WHAT(1).EQ.-1.0D0) THEN
         MKCRON = 0
      ELSE
         MKCRON = 1
      ENDIF
      CRONCO = WHAT(2)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = SEADISTR                    *
c                                                                   *
c     what (1)  (XSEACO)  sea(x) prop. 1/x**what (1)   default: 1.  *
c     what (2)  (UNON)                                 default: 2.  *
c     what (3)  (UNOM)                                 default: 1.5 *
c     what (4)  (UNOSEA)                               default: 5.  *
c                        qdis(x) prop. (1-x)**what (1)  etc.        *
c     what (5..6), sdum   no meaning                                *
c                                                                   *
c********************************************************************

  340 CONTINUE
      XSEACO = WHAT(1)
      XSEACU = 1.05D0-XSEACO
      UNON   = WHAT(2)
      IF (UNON.LT.0.1D0) UNON = 2.0D0
      UNOM   = WHAT(3)
      IF (UNOM.LT.0.1D0) UNOM = 1.5D0
      UNOSEA = WHAT(4)
      IF (UNOSEA.LT.0.1D0) UNOSEA = 5.0D0
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = SEASU3                      *
c                                                                   *
c          Treatment of strange-quarks at chain ends                *
c                                                                   *
c       what (1)   (SEASQ)  strange-quark supression factor         *
c                  iflav = 1.+rndm*(2.+SEASQ)                       *
c                                                    default: 1.    *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  350 CONTINUE
      SEASQ = WHAT(1)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = DIQUARKS                    *
c                                                                   *
c     what (1) = -1.  sea-diquark/antidiquark-pairs not treated     *
c                                                    default: 1.    *
c     what (2..6), sdum   no meaning                                *
c                                                                   *
c********************************************************************

 360  CONTINUE
      IF (WHAT(1).EQ.-1.0D0) THEN
         LSEADI = .FALSE.
      ELSE
         LSEADI = .TRUE.
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = RESONANC                    *
c                                                                   *
c                 treatment of low mass chains                      *
c                                                                   *
c    what (1) = -1 low chain masses are not corrected for resonance *
c                  masses (obsolete for BAMJET-fragmentation)       *
c                                       default: 1.                 *
c    what (2) = -1 massless partons     default: 1. (massive)       *
c                                       default: 1. (massive)       *
c    what (3) = -1 chain-system containing chain of too small       *
c                  mass is rejected (note: this does not fully      *
c                  apply to S-S chains) default: 0.                 *
c    what (4..6), sdum   no meaning                                 *
c                                                                   *
c********************************************************************

  370 CONTINUE
      IRESCO = 1
      IMSHL  = 1
      IRESRJ = 0
      IF (WHAT(1).EQ.-ONE) IRESCO = 0
      IF (WHAT(2).EQ.-ONE) IMSHL  = 0
      IF (WHAT(3).EQ.-ONE) IRESRJ = 1
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = DIFFRACT                    *
c                                                                   *
c                Treatment of diffractive events                    *
c                                                                   *
c     what (1) = (ISINGD) 0  no single diffraction                  *
c                         1  single diffraction included            *
c                       +-2  single diffractive events only         *
c                       +-3  projectile single diffraction only     *
c                       +-4  target single diffraction only         *
c                        -5  double pomeron exchange only           *
c                      (neg. sign applies to PHOJET events)         *
c                                                     default: 0.   *
c                                                                   *
c     what (2) = (IDOUBD) 0  no double diffraction                  *
c                         1  double diffraction included            *
c                         2  double diffractive events only         *
c                                                     default: 0.   *
c     what (3) = 1 projectile diffraction treated (2-channel form.) *
c                                                     default: 0.   *
c     what (4) = alpha-parameter in projectile diffraction          *
c                                                     default: 0.   *
c     what (5..6), sdum   no meaning                                *
c                                                                   *
c********************************************************************

  380 CONTINUE
      IF (ABS(WHAT(1)).GT.ZERO) ISINGD = INT(WHAT(1))
      IF (ABS(WHAT(2)).GT.ZERO) IDOUBD = INT(WHAT(2))
      IF ((ISINGD.GT.1).AND.(IDOUBD.GT.1)) THEN
         WRITE(ErrorOut,1380)
 1380    FORMAT(1X,'INIT:   INCONSISTENT DIFFRACT - INPUT !',/,
     &          11X,'IDOUBD IS RESET TO ZERO')
         IDOUBD = 0
      ENDIF
      IF (WHAT(3).GT.ZERO) DIBETA = WHAT(3)
      IF (WHAT(4).GT.ZERO) DIALPH = WHAT(4)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = SINGLECH                    *
c                                                                   *
c       what (1) = 1.  Regge contribution (one chain) included      *
c                                                   default: 0.     *
c       what (2..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

 390  CONTINUE
      ISICHA = 0
      IF (WHAT(1).EQ.ONE) ISICHA = 1
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = NOFRAGME                    *
c                                                                   *
c                 biased chain hadronization                        *
c                                                                   *
c       what (1..6) = -1  no of hadronizsation of S-S chains        *
c                   = -2  no of hadronizsation of D-S chains        *
c                   = -3  no of hadronizsation of S-D chains        *
c                   = -4  no of hadronizsation of S-V chains        *
c                   = -5  no of hadronizsation of D-V chains        *
c                   = -6  no of hadronizsation of V-S chains        *
c                   = -7  no of hadronizsation of V-D chains        *
c                   = -8  no of hadronizsation of V-V chains        *
c                   = -9  no of hadronizsation of comb. chains      *
c                                  default:  complete hadronization *
c       sdum   no meaning                                           *
c                                                                   *
c********************************************************************

  400 CONTINUE
      DO 401 I=1,6
         ICHAIN = INT(WHAT(I))
         IF ((ICHAIN.LE.-1).AND.(ICHAIN.GE.-9))
     &      LHADRO(ABS(ICHAIN)) = .FALSE.
  401 CONTINUE
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = HADRONIZE                   *
c                                                                   *
c           hadronization model and parameter switch                *
c                                                                   *
c       what (1) = 1    hadronization via BAMJET                    *
c                = 2    hadronization via JETSET                    *
c                                                    default: 2     *
c       what (2) = 1..3 parameter set to be used                    *
c                       JETSET: 3 sets available                    *
c                               ( = 3 default JETSET-parameters)    *
c                       BAMJET: 1 set available                     *
c                                                    default: 1     *
c       what (3..6), sdum   no meaning                              *
c                                                                   *
c********************************************************************

  410 CONTINUE
      IWHAT1 = INT(WHAT(1))
      IWHAT2 = INT(WHAT(2))
      IF ((IWHAT1.EQ.1).OR.(IWHAT1.EQ.2)) IFRAG(1) = IWHAT1
      IF ((IWHAT1.EQ.2).AND.(IWHAT2.GE.1).AND.(IWHAT2.LE.3))
     &                                    IFRAG(2) = IWHAT2
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = POPCORN                     *
c                                                                   *
c  "Popcorn-effect" in fragmentation and diquark breaking diagrams  *
c                                                                   *
c   what (1) = (PDB) frac. of diquark fragmenting directly into     *
c                    baryons (PYTHIA/JETSET fragmentation)          *
c                    (JETSET: = 0. Popcorn mechanism switched off)  *
c                                                    default: 0.5   *
c   what (2) = probability for accepting a diquark breaking         *
c              diagram involving the generation of a u/d quark-     *
c              antiquark pair                        default: 0.0   *
c   what (3) = same a what (2), here for s quark-antiquark pair     *
c                                                    default: 0.0   *
c   what (4..6), sdum   no meaning                                  *
c                                                                   *
c********************************************************************

  420 CONTINUE
      IF (WHAT(1).GE.0.0D0) PDB = WHAT(1)
      IF (WHAT(2).GE.0.0D0) THEN
         PDBSEA(1) = WHAT(2)
         PDBSEA(2) = WHAT(2)
      ENDIF
      IF (WHAT(3).GE.0.0D0) PDBSEA(3) = WHAT(3)
      DO 421 I=1,8
         DBRKA(1,I) = DBRKR(1,I)*PDBSEA(1)/(1.D0-PDBSEA(1))
         DBRKA(2,I) = DBRKR(2,I)*PDBSEA(2)/(1.D0-PDBSEA(2))
         DBRKA(3,I) = DBRKR(3,I)*PDBSEA(3)/(1.D0-PDBSEA(3))
  421 CONTINUE
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = PARDECAY                    *
c                                                                   *
c      what (1) = 1.  Sigma0/Asigma0 are decaying within JETSET     *
c               = 2.  pion^0 decay after intranucl. cascade         *
c                                                default: no decay  *
c      what (2..6), sdum   no meaning                               *
c                                                                   *
c********************************************************************

 430  CONTINUE
      IF (WHAT(1).EQ.ONE)  ISIG0 = 1
      IF (WHAT(1).EQ.2.0D0) IPI0 = 1
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = BEAM                        *
c                                                                   *
c              definition of beam parameters                        *
c                                                                   *
c      what (1/2)  > 0 : energy of beam 1/2 (GeV)                   *
c                  < 0 : abs(what(1/2)) energy per charge of        *
c                        beam 1/2 (GeV)                             *
c                  (beam 1 is directed into positive z-direction)   *
c      what (3)    beam crossing angle, defined as 2x angle between *
c                  one beam and the z-axis (micro rad)              *
c      what (4)    angle with x-axis defining the collision plane   *
c      what (5..6), sdum   no meaning                               *
c                                                                   *
c      Note: this card requires previously defined projectile and   *
c            target identities (PROJPAR, TARPAR)                    *
c                                                                   *
c********************************************************************

  440 CONTINUE
      CALL DT_BEAMPR(WHAT,PPN,1)
      EPN    = ZERO
      CMENER = ZERO
      LEINP  = .TRUE.
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LUND-MSTU                   *
c                                                                   *
c          set parameter MSTU in JETSET-common /LUDAT1/             *
c                                                                   *
c       what (1) =  index according to LUND-common block            *
c       what (2) =  new value of MSTU( int(what(1)) )               *
c       what (3), what(4) and what (5), what(6) further             *
c                   parameter in the same way as what (1) and       *
c                   what (2)                                        *
c                        default: default-Lund or corresponding to  *
c                                 the set given in HADRONIZE        *
c                                                                   *
c********************************************************************

  450 CONTINUE
      IF (WHAT(1).GT.ZERO) THEN
         NMSTU = NMSTU+1
         IMSTU(NMSTU) = INT(WHAT(1))
         MSTUX(NMSTU) = INT(WHAT(2))
      ENDIF
      IF (WHAT(3).GT.ZERO) THEN
         NMSTU = NMSTU+1
         IMSTU(NMSTU) = INT(WHAT(3))
         MSTUX(NMSTU) = INT(WHAT(4))
      ENDIF
      IF (WHAT(5).GT.ZERO) THEN
         NMSTU = NMSTU+1
         IMSTU(NMSTU) = INT(WHAT(5))
         MSTUX(NMSTU) = INT(WHAT(6))
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LUND-MSTJ                   *
c                                                                   *
c          set parameter MSTJ in JETSET-common /LUDAT1/             *
c                                                                   *
c       what (1) =  index according to LUND-common block            *
c       what (2) =  new value of MSTJ( int(what(1)) )               *
c       what (3), what(4) and what (5), what(6) further             *
c                   parameter in the same way as what (1) and       *
c                   what (2)                                        *
c                        default: default-Lund or corresponding to  *
c                                 the set given in HADRONIZE        *
c                                                                   *
c********************************************************************

  451 CONTINUE
      IF (WHAT(1).GT.ZERO) THEN
         NMSTJ = NMSTJ+1
         IMSTJ(NMSTJ) = INT(WHAT(1))
         MSTJX(NMSTJ) = INT(WHAT(2))
      ENDIF
      IF (WHAT(3).GT.ZERO) THEN
         NMSTJ = NMSTJ+1
         IMSTJ(NMSTJ) = INT(WHAT(3))
         MSTJX(NMSTJ) = INT(WHAT(4))
      ENDIF
      IF (WHAT(5).GT.ZERO) THEN
         NMSTJ = NMSTJ+1
         IMSTJ(NMSTJ) = INT(WHAT(5))
         MSTJX(NMSTJ) = INT(WHAT(6))
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LUND-MDCY                   *
c                                                                   *
c  set parameter MDCY(I,1) for particle decays in JETSET-common     *
c                                                      /LUDAT3/     *
c                                                                   *
c       what (1-6) = PDG particle index of particle which should    *
c                    not decay                                      *
c                        default: default-Lund or forced in         *
c                                 DT_INITJS                         *
c                                                                   *
c********************************************************************

  452 CONTINUE
      DO 4521 I=1,6
         IF (WHAT(I).NE.ZERO) THEN

            KC = PYCOMP(INT(WHAT(I)))

            MDCY(KC,1) = 0
         ENDIF
 4521 CONTINUE
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LUND-PARJ                   *
c                                                                   *
c          set parameter PARJ in JETSET-common /LUDAT1/             *
c                                                                   *
c       what (1) =  index according to LUND-common block            *
c       what (2) =  new value of PARJ( int(what(1)) )               *
c       what (3), what(4) and what (5), what(6) further             *
c                   parameter in the same way as what (1) and       *
c                   what (2)                                        *
c                        default: default-Lund or corresponding to  *
c                                 the set given in HADRONIZE        *
c                                                                   *
c********************************************************************

  460 CONTINUE
      IF (WHAT(1).NE.ZERO) THEN
         NPARJ = NPARJ+1
         IPARJ(NPARJ) = INT(WHAT(1))
         PARJX(NPARJ) = WHAT(2)
      ENDIF
      IF (WHAT(3).NE.ZERO) THEN
         NPARJ = NPARJ+1
         IPARJ(NPARJ) = INT(WHAT(3))
         PARJX(NPARJ) = WHAT(4)
      ENDIF
      IF (WHAT(5).NE.ZERO) THEN
         NPARJ = NPARJ+1
         IPARJ(NPARJ) = INT(WHAT(5))
         PARJX(NPARJ) = WHAT(6)
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LUND-PARU                   *
c                                                                   *
c          set parameter PARJ in JETSET-common /LUDAT1/             *
c                                                                   *
c       what (1) =  index according to LUND-common block            *
c       what (2) =  new value of PARU( int(what(1)) )               *
c       what (3), what(4) and what (5), what(6) further             *
c                   parameter in the same way as what (1) and       *
c                   what (2)                                        *
c                        default: default-Lund or corresponding to  *
c                                 the set given in HADRONIZE        *
c                                                                   *
c********************************************************************

  470 CONTINUE
      IF (WHAT(1).GT.ZERO) THEN
         NPARU = NPARU+1
         IPARU(NPARU) = INT(WHAT(1))
         PARUX(NPARU) = WHAT(2)
      ENDIF
      IF (WHAT(3).GT.ZERO) THEN
         NPARU = NPARU+1
         IPARU(NPARU) = INT(WHAT(3))
         PARUX(NPARU) = WHAT(4)
      ENDIF
      IF (WHAT(5).GT.ZERO) THEN
         NPARU = NPARU+1
         IPARU(NPARU) = INT(WHAT(5))
         PARUX(NPARU) = WHAT(6)
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = OUTLEVEL                    *
c                                                                   *
c                    output control switches                        *
c                                                                   *
c       what (1) =  internal rejection informations  default: 0     *
c       what (2) =  energy-momentum conservation check output       *
c                                                    default: 0     *
c       what (3) =  internal warning messages        default: 0     *
c       what (4..6), sdum    not yet used                           *
c                                                                   *
c********************************************************************

  480 CONTINUE
      DO 481 K=1,6
         IOULEV(K) = INT(WHAT(K))
  481 CONTINUE
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = FRAME                       *
c                                                                   *
c          frame in which final state is given in DTEVT1            *
c                                                                   *
c       what (1) = 1  target rest frame (laboratory)                *
c                = 2  nucleon-nucleon cms                           *
c                                                    default: 1     *
c                                                                   *
c********************************************************************

  490 CONTINUE
      KFRAME = INT(WHAT(1))
      IF ((KFRAME.GE.1).AND.(KFRAME.LE.2)) IFRAME = KFRAME
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = L-TAG                       *
c                                                                   *
c                        lepton tagger:                             *
c   definition of kinematical cuts for radiated photon and          *
c   outgoing lepton detection in lepton-nucleus interactions        *
c                                                                   *
c       what (1) = y_min                                            *
c       what (2) = y_max                                            *
c       what (3) = Q^2_min                                          *
c       what (4) = Q^2_max                                          *
c       what (5) = theta_min  (Lab)                                 *
c       what (6) = theta_max  (Lab)                                 *
c                                       default: no cuts            *
c       sdum    no meaning                                          *
c                                                                   *
c********************************************************************

  500 CONTINUE
      YMIN  = WHAT(1)
      YMAX  = WHAT(2)
      Q2MIN = WHAT(3)
      Q2MAX = WHAT(4)
      THMIN = WHAT(5)
      THMAX = WHAT(6)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = L-ETAG                      *
c                                                                   *
c                        lepton tagger:                             *
c       what (1) = min. outgoing lepton energy  (in Lab)            *
c       what (2) = min. photon energy           (in Lab)            *
c       what (3) = max. photon energy           (in Lab)            *
c                                       default: no cuts            *
c       what (2..6), sdum    no meaning                             *
c                                                                   *
c********************************************************************

  510 CONTINUE
      ELMIN = MAX(WHAT(1),ZERO)
      EGMIN = MAX(WHAT(2),ZERO)
      EGMAX = MAX(WHAT(3),ZERO)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = ECMS-CUT                    *
c                                                                   *
c     what (1) = min. c.m. energy to be sampled                     *
c     what (2) = max. c.m. energy to be sampled                     *
c     what (3) = min x_Bj         to be sampled                     *
c                                       default: no cuts            *
c     what (3..6), sdum    no meaning                               *
c                                                                   *
c********************************************************************

  520 CONTINUE
      ECMIN  = WHAT(1)
      ECMAX  = WHAT(2)
      IF (ECMIN.GT.ECMAX) ECMIN = ECMAX
      XBJMIN = MAX(WHAT(3),ZERO)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = VDM-PAR1                    *
c                                                                   *
c      parameters in gamma-nucleus cross section calculation        *
c                                                                   *
c       what (1) =  Lambda^2                       default: 2.      *
c       what (2)    lower limit in M^2 integration                  *
c                =  1  (3m_pi)^2                                    *
c                =  2  (m_rho0)^2                                   *
c                =  3  (m_phi)^2                   default: 1       *
c       what (3)    upper limit in M^2 integration                  *
c                =  1   s/2                                         *
c                =  2   s/4                                         *
c                =  3   s                          default: 3       *
c       what (4)    CKMT F_2 structure function                     *
c                =  2212  proton                                    *
c                =  100   deuteron                 default: 2212    *
c       what (5)    calculation of gamma-nucleon xsections          *
c                =  1  according to CKMT-parametrization of F_2     *
c                =  2  integrating SIGVP over M^2                   *
c                =  3  using SIGGA                                  *
c                =  4  PHOJET cross sections       default:  4      *
c                                                                   *
c       what (6), sdum    no meaning                                *
c                                                                   *
c********************************************************************

  530 CONTINUE
      IF (WHAT(1).GE.ZERO) RL2 = WHAT(1)
      IF ((WHAT(2).GE.1).AND.(WHAT(2).LE.3)) INTRGE(1) = INT(WHAT(2))
      IF ((WHAT(3).GE.1).AND.(WHAT(3).LE.3)) INTRGE(2) = INT(WHAT(3))
      IF ((WHAT(4).EQ.2212).OR.(WHAT(4).EQ.100)) IDPDF = INT(WHAT(4))
      IF ((WHAT(5).GE.1).AND.(WHAT(5).LE.4)) MODEGA = INT(WHAT(5))
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = HISTOGRAM                   *
c                                                                   *
c           activate different classes of histograms                *
c                                                                   *
c                                default: no histograms             *
c                                                                   *
c********************************************************************

  540 CONTINUE
      DO 541 J=1,6
         IF ((WHAT(J).GE.100).AND.(WHAT(J).LE.150)) THEN
            IHISPP(INT(WHAT(J))-100) = 1
         ELSEIF ((ABS(WHAT(J)).GE.200).AND.(ABS(WHAT(J)).LE.250)) THEN
            IHISXS(INT(ABS(WHAT(J)))-200) = 1
            IF (WHAT(J).LT.ZERO) IXSTBL = 1
         ENDIF
  541 CONTINUE
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = XS-TABLE                    *
c                                                                   *
c    output of cross section table for requested interaction        *
c              - particle production deactivated ! -                *
c                                                                   *
c       what (1)      lower energy limit for tabulation             *
c                > 0  Lab. frame                                    *
c                < 0  nucleon-nucleon cms                           *
c       what (2)      upper energy limit for tabulation             *
c                > 0  Lab. frame                                    *
c                < 0  nucleon-nucleon cms                           *
c       what (3) > 0  # of equidistant lin. bins in E               *
c                < 0  # of equidistant log. bins in E               *
c       what (4)      lower limit of particle virtuality (photons)  *
c       what (5)      upper limit of particle virtuality (photons)  *
c       what (6) > 0  # of equidistant lin. bins in Q^2             *
c                < 0  # of equidistant log. bins in Q^2             *
c                                                                   *
c********************************************************************

  550 CONTINUE
      IF (WHAT(1).EQ.99999.0D0) THEN
         IRATIO = INT(WHAT(2))
         GOTO 10
      ENDIF
      CMENER = ABS(WHAT(2))
      IF (.NOT.LXSTAB) THEN
         CALL DT_BERTTP
         CALL DT_INCINI
      ENDIF
      IF ((.NOT.LXSTAB).OR.(CMENER.NE.CMEOLD)) THEN
         CMEOLD = CMENER
         IF (WHAT(2).GT.ZERO)
     &      CMENER = SQRT(2.0D0*AAM(1)**2+2.0D0*WHAT(2)*AAM(1))
         EPN = ZERO
         PPN = ZERO
C        WRITE(LOUT,*) 'CMENER = ',CMENER
         CALL DT_LTINI(IJPROJ,IJTARG,EPN,PPN,CMENER,1)
         CALL DT_PHOINI
      ENDIF
      CALL DT_BERTTP
      CALL DT_INCINI
      CALL DT_XSTABL(WHAT,IXSQEL,IRATIO)
      IXSQEL = 0
      LXSTAB = .TRUE.
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = GLAUB-PAR                   *
c                                                                   *
c                parameters in Glauber-formalism                    *
c                                                                   *
c    what (1)  # of nucleon configurations sampled in integration   *
c              over nuclear desity                default: 1000     *
c    what (2)  # of bins for integration over impact-parameter and  *
c              for profile-function calculation   default: 49       *
c    what (3)  = 1 calculation of tot., el. and qel. cross sections *
c                                                 default: 0        *
c    what (4)  = 1   read pre-calculated impact-parameter distrib.  *
c                    from "sdum".glb                                *
c              =-1   dump pre-calculated impact-parameter distrib.  *
c                    into "sdum".glb                                *
c              = 100 read pre-calculated impact-parameter distrib.  *
c                    for variable projectile/target/energy runs     *
c                    from "sdum".glb                                *
c                                                 default: 0        *
c    what (5..6)   no meaning                                       *
c    sdum      if |what (4)| = 1 name of in/output-file (sdum.glb)  *
c                                                                   *
c********************************************************************

  560 CONTINUE
      IF (WHAT(1).GT.ZERO) JSTATB = INT(WHAT(1))
      IF (WHAT(2).GT.ZERO) JBINSB = INT(WHAT(2))
      IF (WHAT(3).EQ.ONE) LPROD = .FALSE.
      IF ((ABS(WHAT(4)).EQ.ONE).OR.(WHAT(4).EQ.100)) THEN
         IOGLB = INT(WHAT(4))
         CGLB  = SDUM
      ENDIF
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = GLAUB-INI                   *
c                                                                   *
c             pre-initialization of profile function                *
c                                                                   *
c       what (1)      lower energy limit for initialization         *
c                > 0  Lab. frame                                    *
c                < 0  nucleon-nucleon cms                           *
c       what (2)      upper energy limit for initialization         *
c                > 0  Lab. frame                                    *
c                < 0  nucleon-nucleon cms                           *
c       what (3) > 0  # of equidistant lin. bins in E               *
c                < 0  # of equidistant log. bins in E               *
c       what (4)      maximum projectile mass number for which the  *
c                     Glauber data are initialized for each         *
c                     projectile mass number                        *
c                     (if <= mass given with the PROJPAR-card)      *
c                                              default: 18          *
c       what (5)      steps in mass number starting from what (4)   *
c                     up to mass number defined with PROJPAR-card   *
c                     for which Glauber data are initialized        *
c                                              default: 5           *
c       what (6)      no meaning                                    *
c       sdum          no meaning                                    *
c                                                                   *
c********************************************************************

  565 CONTINUE
      IOGLB = -100
      CALL DT_GLBINI(WHAT)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = VDM-PAR2                    *
c                                                                   *
c      parameters in gamma-nucleus cross section calculation        *
c                                                                   *
c      what (1) = 0 no suppression of shadowing by direct photon    *
c                   processes                                       *
c               = 1 suppression ..                   default: 1     *
c      what (2) = 0 no suppression of shadowing by anomalous        *
c                   component if photon-F_2                         *
c               = 1 suppression ..                   default: 1     *
c      what (3) = 0 no suppression of shadowing by coherence        *
c                   length of the photon                            *
c               = 1 suppression ..                   default: 1     *
c      what (4) = 1 longitudinal polarized photons are taken into   *
c                   account                                         *
c                   eps*R*Q^2/M^2 = what(4)*Q^2/M^2  default: 0     *
c      what (5..6), sdum    no meaning                              *
c                                                                   *
c********************************************************************

  570 CONTINUE
      IF ((WHAT(1).EQ.ZERO).OR.(WHAT(1).EQ.ONE)) ISHAD(1) = INT(WHAT(1))
      IF ((WHAT(2).EQ.ZERO).OR.(WHAT(2).EQ.ONE)) ISHAD(2) = INT(WHAT(2))
      IF ((WHAT(3).EQ.ZERO).OR.(WHAT(3).EQ.ONE)) ISHAD(3) = INT(WHAT(3))
      EPSPOL  = WHAT(4)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  XS-QELPRO                            *
c                                                                   *
c     what (1..6), sdum    no meaning                               *
c                                                                   *
c********************************************************************

  580 CONTINUE
      IXSQEL = ABS(WHAT(1))
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  RNDMINIT                             *
c                                                                   *
c           initialization of random number generator               *
c                                                                   *
c     what (1..4)    values for initialization (= 1..168)           *
c     what (5..6), sdum    no meaning                               *
c                                                                   *
c********************************************************************

  590 CONTINUE
      IF ((WHAT(1).LT.1.0D0).OR.(WHAT(1).GT.168.0D0)) THEN
         NA1 = 22
      ELSE
         NA1 = WHAT(1)
      ENDIF
      IF ((WHAT(2).LT.1.0D0).OR.(WHAT(2).GT.168.0D0)) THEN
         NA2 = 54
      ELSE
         NA2 = WHAT(2)
      ENDIF
      IF ((WHAT(3).LT.1.0D0).OR.(WHAT(3).GT.168.0D0)) THEN
         NA3 = 76
      ELSE
         NA3 = WHAT(3)
      ENDIF
      IF ((WHAT(4).LT.1.0D0).OR.(WHAT(4).GT.168.0D0)) THEN
         NA4 = 92
      ELSE
         NA4 = WHAT(4)
      ENDIF
      CALL DT_RNDMST(NA1,NA2,NA3,NA4)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LEPTO-CUT                   *
c                                                                   *
c          set parameter CUT in LEPTO-common /LEPTOU/               *
c                                                                   *
c       what (1) =  index in CUT-array                              *
c       what (2) =  new value of CUT( int(what(1)) )                *
c       what (3), what(4) and what (5), what(6) further             *
c                   parameter in the same way as what (1) and       *
c                   what (2)                                        *
c                        default: default-LEPTO parameters          *
c                                                                   *
c********************************************************************

  600 CONTINUE
      IF (WHAT(1).GT.ZERO) CUT(INT(WHAT(1))) = WHAT(2)
      IF (WHAT(3).GT.ZERO) CUT(INT(WHAT(3))) = WHAT(4)
      IF (WHAT(5).GT.ZERO) CUT(INT(WHAT(5))) = WHAT(6)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LEPTO-LST                   *
c                                                                   *
c          set parameter LST in LEPTO-common /LEPTOU/               *
c                                                                   *
c       what (1) =  index in LST-array                              *
c       what (2) =  new value of LST( int(what(1)) )                *
c       what (3), what(4) and what (5), what(6) further             *
c                   parameter in the same way as what (1) and       *
c                   what (2)                                        *
c                        default: default-LEPTO parameters          *
c                                                                   *
c********************************************************************

  610 CONTINUE
      IF (WHAT(1).GT.ZERO) LST(INT(WHAT(1))) = INT(WHAT(2))
      IF (WHAT(3).GT.ZERO) LST(INT(WHAT(3))) = INT(WHAT(4))
      IF (WHAT(5).GT.ZERO) LST(INT(WHAT(5))) = INT(WHAT(6))
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = LEPTO-PARL                  *
c                                                                   *
c          set parameter PARL in LEPTO-common /LEPTOU/              *
c                                                                   *
c       what (1) =  index in PARL-array                             *
c       what (2) =  new value of PARL( int(what(1)) )               *
c       what (3), what(4) and what (5), what(6) further             *
c                   parameter in the same way as what (1) and       *
c                   what (2)                                        *
c                        default: default-LEPTO parameters          *
c                                                                   *
c********************************************************************

  620 CONTINUE
      IF (WHAT(1).GT.ZERO) PARL(INT(WHAT(1))) = WHAT(2)
      IF (WHAT(3).GT.ZERO) PARL(INT(WHAT(3))) = WHAT(4)
      IF (WHAT(5).GT.ZERO) PARL(INT(WHAT(5))) = WHAT(6)
      GOTO 10

c********************************************************************
c                                                                   *
c               control card:  codewd = START                       *
c                                                                   *
c       what (1) =   number of events                default: 100.  *
c       what (2) = 0 Glauber initialization follows                 *
c                = 1 Glauber initialization supressed, fitted       *
c                    results are used instead                       *
c                    (this does not apply if emulsion-treatment     *
c                     is requested)                                 *
c                = 2 Glauber initialization is written to           *
c                    output-file shmakov.out                        *
c                = 3 Glauber initialization is read from input-file *
c                    shmakov.out                     default: 0     *
c       what (3..6)  no meaning                                     *
c       what (3..6)  no meaning                                     *
c                                                                   *
c********************************************************************

  630 CONTINUE

c check for cross-section table output only
      IF (LXSTAB) STOP

      NCASES = INT(WHAT(1))
      IF (NCASES.LE.0) NCASES = 100
      IGLAU = INT(WHAT(2))
      IF ((IGLAU.NE.1).AND.(IGLAU.NE.2).AND.(IGLAU.NE.3))
     &                                            IGLAU = 0

      NPMASS = IP
      NPCHAR = IPZ
      NTMASS = IT
      NTCHAR = ITZ
      IDP    = IJPROJ
      IDT    = IJTARG
      IF (IDP.LE.0) IDP = 1
c muon neutrinos: temporary (missing index)
c (new patch in projpar: therefore the following this is probably not
c  necessary anymore..)
C     IF (IDP.EQ.26) IDP = 5
C     IF (IDP.EQ.27) IDP = 6

c redefine collision energy
      IF (LEINP) THEN
         IF (ABS(VAREHI).GT.ZERO) THEN
            PDUM = ZERO
            IF (VARELO.LT.EHADLO) VARELO = EHADLO
            CALL DT_LTINI(IDP,IDT,VARELO,PDUM,VARCLO,1)
            PDUM = ZERO
            CALL DT_LTINI(IDP,IDT,VAREHI,PDUM,VARCHI,1)
         ENDIF
         CALL DT_LTINI(IDP,IDT,EPN,PPN,CMENER,1)
      ELSE
         WRITE(ErrorOut,1003)
 1003    FORMAT(1X,'INIT:   COLLISION ENERGY NOT DEFINED!',/,
     &          1X,'              -PROGRAM STOPPED-      ')
         STOP
      ENDIF

c switch off evaporation (even if requested) if central coll. requ.
      IF ((ICENTR.EQ.-1).OR.(ICENTR.GT.0).OR.(XSFRAC.LT.0.5D0)) THEN
         IF (LEVPRT) THEN
            WRITE(ErrorOut,1004)
 1004       FORMAT(1X,/,'WARNING!  EVAPORATION REQUEST REJECTED SINCE',
     &             ' CENTRAL COLLISIONS FORCED.')
            LEVPRT = .FALSE.
            LDEEXG = .FALSE.
            LHEAVY = .FALSE.
         ENDIF
      ENDIF

c initialization of evaporation-module
      CALL DT_BERTTP
      CALL DT_INCINI
c save the default JETSET-parameter
      CALL DT_JSPARA(0)

c force use of phojet for g-A
      IF ((IDP.EQ.7).AND.(MCGENE.NE.3)) MCGENE = 2
c initialization of nucleon-nucleon event generator
      IF (MCGENE.EQ.2) CALL DT_PHOINI
c initialization of LEPTO event generator
      IF (MCGENE.EQ.3) THEN

         STOP ' THIS VERSION DOES NOT CONTAIN LEPTO !'

      ENDIF

c initialization of quasi-elastic neutrino scattering
      IF (MCGENE.EQ.4) THEN
         IF (IJPROJ.EQ.5) THEN
            NEUTYP = 1
         ELSEIF (IJPROJ.EQ.6) THEN
            NEUTYP = 2
         ELSEIF (IJPROJ.EQ.135) THEN
            NEUTYP = 3
         ELSEIF (IJPROJ.EQ.136) THEN
            NEUTYP = 4
         ELSEIF (IJPROJ.EQ.133) THEN
            NEUTYP = 5
         ELSEIF (IJPROJ.EQ.134) THEN
            NEUTYP = 6
         ENDIF
      ENDIF

c normalize fractions of emulsion components
      IF (NCOMPO.GT.0) THEN
         SUMFRA = ZERO
         DO 491 I=1,NCOMPO
            SUMFRA = SUMFRA+EMUFRA(I)
  491    CONTINUE
         IF (SUMFRA.GT.ZERO) THEN
            DO 492 I=1,NCOMPO
               EMUFRA(I) = EMUFRA(I)/SUMFRA
  492       CONTINUE
         ENDIF
      ENDIF

c disallow Cronin's multiple scattering for nucleus-nucleus interactions
      IF ((IP.GT.1).AND.(MKCRON.GT.0)) THEN
         WRITE(ErrorOut,1005)
 1005    FORMAT(/,1X,'INIT:  MULTIPLE SCATTERING DISALLOWED',/)
         MKCRON = 0
      ENDIF

c initialization of Glauber-formalism (moved to xAEVT, sr 26.3.96)
C     IF (NCOMPO.LE.0) THEN
C        CALL DT_SHMAKI(IP,IPZ,IT,ITZ,IDP,PPN,IGLAU)
C     ELSE
C        DO 493 I=1,NCOMPO
C           CALL DT_SHMAKI(IP,IPZ,IEMUMA(I),IEMUCH(I),IDP,PPN,0)
C 493    CONTINUE
C     ENDIF

c pre-tabulation of elastic cross-sections
      CALL DT_SIGTBL(JDUM,JDUM,DUM,DUM,-1)

      CALL DT_XTIME

      RETURN

c********************************************************************
c                                                                   *
c               control card:  codewd = STOP                        *
c                                                                   *
c               stop of the event generation                        *
c                                                                   *
c       what (1..6)  no meaning                                     *
c                                                                   *
c********************************************************************

 9999 CONTINUE
      WRITE(ErrorOut,9000)
 9000 FORMAT(1X,'---> UNEXPECTED END OF INPUT !')

  640 CONTINUE
      STOP

      END
c
c===kkinc==============================================================*
c
CDECK  ID>, DT_KKINC
      SUBROUTINE DT_KKINC(NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,KKMAT,
     &                                                         IREJ)

c***********************************************************************
c Treatment of complete nucleus-nucleus or hadron-nucleus scattering   *
c This subroutine is an update of the previous version written         *
c by J. Ranft/ H.-J. Moehring.                                         *
c This version dated 19.11.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY5=1.0D-5,
     &           TINY2=1.0D-2,TINY3=1.0D-3)

      LOGICAL LFZC

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c flags for particle decays
      COMMON /DTFRPA/ MSTUX(20),PARUX(20),MSTJX(20),PARJX(20),
     &                IMSTU(20),IPARU(20),IMSTJ(20),IPARJ(20),
     &                NMSTU,NPARU,NMSTJ,NPARJ,PDB,PDBSEA(3),ISIG0,IPI0

c cuts for variable energy runs
      COMMON /DTVARE/ VARELO,VAREHI,VARCLO,VARCHI

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD


      DIMENSION WHAT(6)
c///////////////
c      write(0,*) 'DT_KKINC(NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,KKMAT,'
c      write(0,*) '         IREJ'
c      write(0,*)  NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,KKMAT, IREJ
c/////////////////////
      IREJ  = 0
      ILOOP = 0
  100 CONTINUE
      IF (ILOOP.EQ.4) THEN
         WRITE(ErrorOut,1000) NEVHKK
 1000    FORMAT(1X,'KKINC: EVENT ',I8,' REJECTED!')
         GOTO 9999
      ENDIF
      ILOOP = ILOOP+1

c variable energy-runs, recalculate parameters for LT's
      IF ((ABS(VAREHI).GT.ZERO).OR.(IOGLB.EQ.100)) THEN
         PDUM = ZERO
         CDUM = ZERO
         CALL DT_LTINI(IDP,1,EPN,PDUM,CDUM,1)
      ENDIF
      IF (EPN.GT.EPROJ) THEN
         WRITE(ErrorOut,'(A,E9.3,2A,E9.3,A)')
     &      ' REQUESTED ENERGY (',EPN,'GEV) EXCEEDS',
     &      ' INITIALIZATION ENERGY (',EPROJ,'GEV) !'
         STOP
      ENDIF

c re-initialize /DTPRTA/
      IP  = NPMASS
      IPZ = NPCHAR
      IT  = NTMASS
      ITZ = NTCHAR
      IJPROJ = IDP
      IBPROJ = IIBAR(IJPROJ)

c calculate nuclear potentials (common /DTNPOT/)
      CALL DT_NCLPOT(IPZ,IP,ITZ,IT,ZERO,ZERO,0)

c initialize treatment for residual nuclei
      CALL DT_RESNCL(EPN,NLOOP,1)

c sample hadron/nucleus-nucleus interaction
c/////////////
c      write(0,*) ' calling KKEVNT with KKMAT', KKMAT
c/////////////////
      CALL DT_KKEVNT(KKMAT,IREJ1)
      IF (IREJ1.GT.0) THEN
         IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in KKINC'
         GOTO 9999
      ENDIF

      IF ((NPMASS.GT.1).OR.(NTMASS.GT.1)) THEN

c intranuclear cascade of final state particles for KTAUGE generations
c of secondaries
         CALL DT_FOZOCA(LFZC,IREJ1)
         IF (IREJ1.GT.0) THEN
            IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 2 in KKINC'
            GOTO 9999
         ENDIF

c baryons unable to escape the nuclear potential are treated as
c excited nucleons (ISTHKK=15,16)
         CALL DT_SCN4BA

c decay of resonances produced in intranuclear cascade processes
c*sr 15-11-95 should be obsolete
C        IF (LFZC) CALL DT_DECAY1

  101    CONTINUE
c treatment of residual nuclei
         CALL DT_RESNCL(EPN,NLOOP,2)

c evaporation / fission / fragmentation
c (if intranuclear cascade was sampled only)
         IF (LFZC) THEN
            CALL DT_FICONF(IJPROJ,IP,IPZ,IT,ITZ,NLOOP,IREJ1)
            IF (IREJ1.GT.1) GOTO 101
            IF (IREJ1.EQ.1) GOTO 100
         ENDIF

      ENDIF

c transform finale state into Lab.
      IFLAG = 2
      CALL DT_BEAMPR(WHAT,DUM,IFLAG)
      IF ((IFRAME.EQ.1).AND.(IFLAG.EQ.-1)) CALL DT_LT2LAB

      IF (IPI0.EQ.1) CALL DT_DECPI0

C     IF (NEVHKK.EQ.5) CALL DT_EVTOUT(4)

      RETURN
 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===defaul=============================================================*
c
CDECK  ID>, DT_DEFAUL
      SUBROUTINE DT_DEFAUL(EPN,PPN)

c***********************************************************************
c Variables are set to default values.                                 *
c This version dated 8.5.95 is written by S. Roesler.                  *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY10=1.0D-10)
      PARAMETER (TWOPI  = 6.283185307179586454D+00)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c interface HADRIN-DPM
      COMMON /HNTHRE/ EHADTH,EHADLO,EHADHI,INTHAD,IDXTA

c central particle production, impact parameter biasing
      COMMON /DTIMPA/ BIMIN,BIMAX,XSFRAC,ICENTR

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c parameter for intranuclear cascade
      LOGICAL LPAULI
      COMMON /DTFOTI/ TAUFOR,KTAUGE,ITAUVE,INCMOD,LPAULI

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT

c threshold values for x-sampling (DTUNUC 1.x)
      COMMON /DTXCUT/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     &                SSMIMQ,VVMTHR

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c n-n cross section fluctuations
      PARAMETER (NBINS = 1000)
      COMMON /DTXSFL/ FLUIXX(NBINS),IFLUCT

c flags for particle decays
      COMMON /DTFRPA/ MSTUX(20),PARUX(20),MSTJX(20),PARJX(20),
     &                IMSTU(20),IPARU(20),IMSTJ(20),IPARJ(20),
     &                NMSTU,NPARU,NMSTJ,NPARJ,PDB,PDBSEA(3),ISIG0,IPI0

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD

c kinematical cuts for lepton-nucleus interactions
      COMMON /DTLCUT/ ECMIN,ECMAX,XBJMIN,ELMIN,EGMIN,EGMAX,YMIN,YMAX,
     &                Q2MIN,Q2MAX,THMIN,THMAX,Q2LI,Q2HI,ECMLI,ECMHI

c flags for activated histograms
      COMMON /DTHIS3/ IHISPP(50),IHISXS(50),IXSTBL

c cuts for variable energy runs
      COMMON /DTVARE/ VARELO,VAREHI,VARCLO,VARCHI

c parameters for hA-diffraction
      COMMON /DTDIHA/ DIBETA,DIALPH

c LEPTO
      REAL RPPN
      COMMON /LEPTOI/ RPPN,LEPIN,INTER

c steering flags for qel neutrino scattering modules
      COMMON /QNEUTO/ DSIGSU,DSIGMC,NDSIG,NEUTYP,NEUDEC

c event flag
      COMMON /DTEVNO/ NEVENT,ICASCA


      DATA POTMES /0.002D0/

c common /DTNPOT/
      DO 10 I=1,2
         PFERMP(I) = ZERO
         PFERMN(I) = ZERO
         EBINDP(I) = ZERO
         EBINDN(I) = ZERO
         DO 11 J=1,210
            EPOT(I,J) = ZERO
   11    CONTINUE
c nucleus independent meson potential
         EPOT(I,13) = POTMES
         EPOT(I,14) = POTMES
         EPOT(I,15) = POTMES
         EPOT(I,16) = POTMES
         EPOT(I,23) = POTMES
         EPOT(I,24) = POTMES
         EPOT(I,25) = POTMES
   10 CONTINUE
c*sr 7.4.98: changed after corrected B-sampling
C     FERMOD    = 0.55D0
      FERMOD    = 0.68D0
      ETACOU(1) = ZERO
      ETACOU(2) = ZERO
      ICOUL     = 1
      LFERMI    = .TRUE.

c common /HNTHRE/
      EHADTH = -99.0D0
      EHADLO = 4.06D0
      EHADHI = 6.0D0
      INTHAD = 1
      IDXTA  = 2

c common /DTIMPA/
      ICENTR = 0
      BIMIN  = ZERO
      BIMAX  = 1.0D10
      XSFRAC = 1.0D0

c common /DTPRTA/
      IP  = 1
      IPZ = 1
      IT  = 1
      ITZ = 1
      IJPROJ = 1
      IBPROJ = 1
      IJTARG = 1
      IBTARG = 1
c common /DTGPRO/
      VIRT = ZERO
      DO 14 I=1,4
         PGAMM(I)  = ZERO
         PLEPT0(I) = ZERO
         PLEPT1(I) = ZERO
         PNUCL(I)  = ZERO
   14 CONTINUE
      IDIREC   = 0

c common /DTCOMP/
      NCOMPO = 0
      IEMUL  = 0
      DO 12 I=1,NCOMPX
         EMUFRA(I) = ZERO
         IEMUMA(I) = 1
         IEMUCH(I) = 1
   12 CONTINUE

c common /DTFOTI/
c*sr 7.4.98: changed after corrected B-sampling
C     TAUFOR = 4.4D0
      TAUFOR = 3.1D0
      KTAUGE = 25
      ITAUVE = 1
      INCMOD = 1
      LPAULI = .TRUE.

c common /DTCHAI/
      SEASQ  = ONE
      MKCRON = 1
      CRONCO = 0.64D0
      ISICHA = 0
      CUTOF  = 100.0D0
      LCO2CR = .FALSE.
      IRECOM = 1
      LINTPT = .TRUE.

c common /DTXCUT/
c  definition of soft quark distributions
      XSEACU = 0.05D0
      UNON   = 2.0D0
      UNOM   = 1.5D0
      UNOSEA = 5.0D0
c  cutoff parameters for x-sampling
      CVQ    = 1.0D0
      CDQ    = 2.0D0
C     CSEA   = 0.3D0
      CSEA   = 0.1D0
      SSMIMA = 1.2D0
      SSMIMQ = SSMIMA**2
      VVMTHR = 2.0D0

c common /DTFLG1/
      IFRAG(1) = 2
      IFRAG(2) = 1
      IRESCO   = 1
      IMSHL    = 1
      IRESRJ   = 0
      LEMCCK   = .FALSE.
      LHADRO(0) = .FALSE.
      DO 13 I=1,9
         LHADRO(I) = .TRUE.
         IF (I.LE.6) IOULEV(I) = -1
   13 CONTINUE
      LSEADI = .TRUE.
      LEVAPO = .TRUE.
      IFRAME = 1

c common /DTXSFL/
      IFLUCT = 0

c common /DTFRPA/
      PDB = 0.15D0
      PDBSEA(1) = 0.0D0
      PDBSEA(2) = 0.0D0
      PDBSEA(3) = 0.0D0
      ISIG0 = 0
      IPI0  = 0
      NMSTU = 0
      NPARU = 0
      NMSTJ = 0
      NPARJ = 0

c common /DTDIQB/
      DO 15 I=1,8
         DBRKR(1,I) = 5.0D0
         DBRKR(2,I) = 5.0D0
         DBRKR(3,I) = 10.0D0
         DBRKA(1,I) = ZERO
         DBRKA(2,I) = ZERO
         DBRKA(3,I) = ZERO
   15 CONTINUE
      CHAM1 = 0.2D0
      CHAM3 = 0.5D0
      CHAB1 = 0.7D0
      CHAB3 = 1.0D0

c common /DTFLG3/
      ISINGD = 0
      IDOUBD = 0
      IFLAGD = 0
      IDIFF  = 0

c common /DTMODL/
      MCGENE    = 2
      CMODEL(1) = 'DTUNUC  '
      CMODEL(2) = 'PHOJET  '
      CMODEL(3) = 'LEPTO   '
      CMODEL(4) = 'QNEUTRIN'
      LPHOIN    = .TRUE.
      ELOJET    = 5.0D0

c common /DTLCUT/
      ECMIN  = 3.5D0
      ECMAX  = 1.0D10
      XBJMIN = ZERO
      ELMIN = ZERO
      EGMIN = ZERO
      EGMAX = 1.0D10
      YMIN  = TINY10
      YMAX  = 0.999D0
      Q2MIN = TINY10
      Q2MAX = 10.0D0
      THMIN = ZERO
      THMAX = TWOPI
      Q2LI  = ZERO
      Q2HI  = 1.0D10
      ECMLI = ZERO
      ECMHI = 1.0D10

c common /DTVDMP/
      RL2       = 2.0D0
      INTRGE(1) = 1
      INTRGE(2) = 3
      IDPDF     = 2212
      MODEGA    = 4
      ISHAD(1)  = 1
      ISHAD(2)  = 1
      ISHAD(3)  = 1
      EPSPOL    = ZERO

c common /DTGLGP/
      JSTATB = 1000
      JBINSB = 49
      CGLB   = '        '
      IOGLB  = 0
      LPROD  = .TRUE.

c common /DTHIS3/
      DO 16 I=1,50
         IHISPP(I) = 0
         IHISXS(I) = 0
   16 CONTINUE
      IXSTBL = 0

c common /DTVARE/
      VARELO = ZERO
      VAREHI = ZERO
      VARCLO = ZERO
      VARCHI = ZERO

c common /DTDIHA/
      DIBETA = -1.0D0
      DIALPH = ZERO

c common /LEPTOI/
      RPPN  = 0.0
      LEPIN = 0
      INTER = 0

c common /QNEUTO/
      NEUTYP = 1
      NEUDEC = 0

c common /DTEVNO/
      NEVENT = 1
      ICASCA = 0

c default Lab.-energy
      EPN = 200.0D0
      PPN = SQRT((EPN-AAM(IJPROJ))*(EPN+AAM(IJPROJ)))

      RETURN
      END
c
c===aaevt==============================================================*
c
CDECK  ID>, DT_AAEVT
      SUBROUTINE DT_AAEVT(NEVTS,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,
     &                                             IDP,IGLAU)

c***********************************************************************
c This version dated 22.03.96 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c event flag
      COMMON /DTEVNO/ NEVENT,ICASCA


      CHARACTER*8 DATE,HHMMSS
      DIMENSION IDMNYR(3)

      KKMAT  = 1
      NMSG   = MAX(NEVTS/100,1)

c initialization of run-statistics and histograms
      CALL DT_STATIS(1)

      CALL PHO_PHIST(1000,DUM)


c initialization of Glauber-formalism
      IF (NCOMPO.LE.0) THEN
         CALL DT_SHMAKI(NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,IGLAU)
      ELSE
         DO 1 I=1,NCOMPO
            CALL DT_SHMAKI(NPMASS,NPCHAR,IEMUMA(I),IEMUCH(I),IDP,EPN,0)
    1    CONTINUE
      ENDIF
      CALL DT_SIGEMU

      CALL IDATE(IDMNYR)
      WRITE(DATE,'(I2,''/'',I2,''/'',I2)')
     &   IDMNYR(1),IDMNYR(2),MOD(IDMNYR(3),100)
      CALL ITIME(IDMNYR)
      WRITE(HHMMSS,'(I2,'':'',I2,'':'',I2)')
     &   IDMNYR(1),IDMNYR(2),IDMNYR(3)
      WRITE(ErrorOut,1001) DATE,HHMMSS
 1001 FORMAT(/,' DT_AAEVT: INITIALISATION FINISHED. ( DATE: ',A8,
     &       '   TIME: ',A8,' )')

c generate NEVTS events
      DO 2 IEVT=1,NEVTS

c  print run-status message
         IF (MOD(IEVT,NMSG).EQ.0) THEN
            CALL IDATE(IDMNYR)
            WRITE(DATE,'(I2,''/'',I2,''/'',I2)')
     &         IDMNYR(1),IDMNYR(2),MOD(IDMNYR(3),100)
            CALL ITIME(IDMNYR)
            WRITE(HHMMSS,'(I2,'':'',I2,'':'',I2)')
     &         IDMNYR(1),IDMNYR(2),IDMNYR(3)
            WRITE(ErrorOut,1000) IEVT-1,NEVTS,DATE,HHMMSS
 1000       FORMAT(/,1X,I8,' OUT OF ',I8,' EVENTS SAMPLED ( DATE: ',A,
     &             '   TIME: ',A,' )',/)
C           WRITE(LOUT,1000) IEVT-1
C1000       FORMAT(1X,I8,' events sampled')
         ENDIF
         NEVENT = IEVT
c  treat nuclear emulsions
         IF (IEMUL.GT.0) CALL DT_GETEMU(NTMASS,NTCHAR,KKMAT,0)
c  composite targets only
         KKMAT = -KKMAT
c  sample this event
         CALL DT_KKINC(NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,KKMAT,IREJ)


         CALL PHO_PHIST(2000,DUM)


    2 CONTINUE

c print run-statistics and histograms to output-unit 6

      CALL PHO_PHIST(3000,DUM)

      CALL DT_STATIS(2)

      RETURN
      END
c
c===laevt==============================================================*
c
CDECK  ID>, DT_LAEVT
      SUBROUTINE DT_LAEVT(NEVTS,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,
     &                                             IDP,IGLAU)

c***********************************************************************
c Interface to run DPMJET for lepton-nucleus interactions.             *
c Kinematics is sampled using the equivalent photon approximation      *
c Based on GPHERA-routine by R. Engel.                                 *
c This version dated 23.03.96 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY4=1.0D-4,
     &           ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,THREE=3.0D0)
      PARAMETER (TWOPI  = 6.283185307179586454D+00,
     &           PI     = TWOPI/TWO,
     &           ALPHEM = ONE/137.0D0)

C     CHARACTER*72 HEADER

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c kinematical cuts for lepton-nucleus interactions
      COMMON /DTLCUT/ ECMIN,ECMAX,XBJMIN,ELMIN,EGMIN,EGMAX,YMIN,YMAX,
     &                Q2MIN,Q2MAX,THMIN,THMAX,Q2LI,Q2HI,ECMLI,ECMHI

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c kinematics at lepton-gamma vertex
      COMMON /DTLGVX/ PPL0(4),PPL1(4),PPG(4),PPA(4)

c flags for activated histograms
      COMMON /DTHIS3/ IHISPP(50),IHISXS(50),IXSTBL

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c event flag
      COMMON /DTEVNO/ NEVENT,ICASCA


      DIMENSION XDUMB(40),BGTA(4)

c LEPTO
      IF (MCGENE.EQ.3) THEN

         STOP ' THIS VERSION DOES NOT CONTAIN LEPTO !'

      ENDIF

      KKMAT  = 1
      NMSG   = MAX(NEVTS/10,1)

c mass of incident lepton
      AMLPT  = AAM(IDP)
      AMLPT2 = AMLPT**2
      IDPPDG = IDT_IPDGHA(IDP)

c consistency of kinematical limits
      Q2MIN  = MAX(Q2MIN,TINY10)
      Q2MAX  = MAX(Q2MAX,TINY10)
      YMIN   = MIN(MAX(YMIN,TINY10),0.999D0)
      YMAX   = MIN(MAX(YMAX,TINY10),0.999D0)

c total energy of the lepton-nucleon system
      PTOTLN = SQRT( (PLEPT0(1)+PNUCL(1))**2+(PLEPT0(2)+PNUCL(2))**2
     &                                      +(PLEPT0(3)+PNUCL(3))**2 )
      ETOTLN = PLEPT0(4)+PNUCL(4)
      ECMLN  = SQRT((ETOTLN-PTOTLN)*(ETOTLN+PTOTLN))
      ECMAX  = MIN(ECMAX,ECMLN)
      WRITE(ErrorOut,
     * 1003) ECMIN,ECMAX,YMIN,YMAX,Q2MIN,Q2MAX,EGMIN,
     &                 THMIN,THMAX,ELMIN
 1003 FORMAT(1X,'LAEVT:',16X,'KINEMATICAL CUTS',/,22X,
     &       '------------------',/,9X,'W (MIN)   =',
     &       F7.1,' GEV    (MAX) =',F7.1,' GEV',/,9X,'Y (MIN)   =',
     &       F7.3,8X,'(MAX) =',F7.3,/,9X,'Q^2 (MIN) =',F7.1,
     &       ' GEV^2  (MAX) =',F7.1,' GEV^2',/,' (LAB)   E_G (MIN) ='
     &       ,F7.1,' GEV',/,' (LAB) THETA (MIN) =',F7.4,8X,'(MAX) =',
     &       F7.4,'   FOR E_LPT >',F7.1,' GEV',/)

c Lorentz-parameter for transf. into Lab
      BGTA(1) = PNUCL(1)/AAM(1)
      BGTA(2) = PNUCL(2)/AAM(1)
      BGTA(3) = PNUCL(3)/AAM(1)
      BGTA(4) = PNUCL(4)/AAM(1)
c LT of incident lepton into Lab and dump it in DTEVT1
      CALL DT_DALTRA(BGTA(4),-BGTA(1),-BGTA(2),-BGTA(3),
     &            PLEPT0(1),PLEPT0(2),PLEPT0(3),PLEPT0(4),
     &            PLTOT,PPL0(1),PPL0(2),PPL0(3),PPL0(4))
      CALL DT_DALTRA(BGTA(4),-BGTA(1),-BGTA(2),-BGTA(3),
     &            PNUCL(1),PNUCL(2),PNUCL(3),PNUCL(4),
     &            PLTOT,PPA(1),PPA(2),PPA(3),PPA(4))
c maximum energy of photon nucleon system
      PTOTGN = SQRT((YMAX*PPL0(1)+PPA(1))**2+(YMAX*PPL0(2)+PPA(2))**2
     &                                      +(YMAX*PPL0(3)+PPA(3))**2)
      ETOTGN = YMAX*PPL0(4)+PPA(4)
      EGNMAX = SQRT((ETOTGN-PTOTGN)*(ETOTGN+PTOTGN))
      EGNMAX = MIN(EGNMAX,ECMAX)
c minimum energy of photon nucleon system
      PTOTGN = SQRT((YMIN*PPL0(1)+PPA(1))**2+(YMIN*PPL0(2)+PPA(2))**2
     &                                      +(YMIN*PPL0(3)+PPA(3))**2)
      ETOTGN = YMIN*PPL0(4)+PPA(4)
      EGNMIN = SQRT((ETOTGN-PTOTGN)*(ETOTGN+PTOTGN))
      EGNMIN = MAX(EGNMIN,ECMIN)

c limits for Glauber-initialization
      Q2LI  = Q2MIN
      Q2HI  = MAX(Q2LI,MIN(Q2HI,Q2MAX))
      ECMLI = MAX(EGNMIN,THREE)
      ECMHI = EGNMAX
      WRITE(ErrorOut,1004) EGNMIN,EGNMAX,ECMLI,ECMHI,Q2LI,Q2HI
 1004 FORMAT(1X,'RESULTING LIMITS:',/,9X,'W (MIN)   =',F7.1,
     &       ' GEV    (MAX) =',F7.1,' GEV',/,/,' LIMITS FOR ',
     &       'GLAUBER-INITIALIZATION:',/,9X,'W (MIN)   =',F7.1,
     &       ' GEV    (MAX) =',F7.1,' GEV',/,9X,'Q^2 (MIN) =',F7.1,
     &       ' GEV^2  (MAX) =',F7.1,' GEV^2',/)
c initialization of Glauber-formalism
      IF (NCOMPO.LE.0) THEN
         CALL DT_SHMAKI(NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,IGLAU)
      ELSE
         DO 9 I=1,NCOMPO
            CALL DT_SHMAKI(NPMASS,NPCHAR,IEMUMA(I),IEMUCH(I),IDP,EPN,0)
    9    CONTINUE
      ENDIF
      CALL DT_SIGEMU

c initialization of run-statistics and histograms
      CALL DT_STATIS(1)

      CALL PHO_PHIST(1000,DUM)


c maximum photon-nucleus cross section
      I1  = 1
      I2  = 1
      RAT = ONE
      IF (EGNMAX.GE.ECMNN(NEBINI)) THEN
         I1  = NEBINI
         I2  = NEBINI
         RAT = ONE
      ELSEIF (EGNMAX.GT.ECMNN(1)) THEN
         DO 5 I=2,NEBINI
            IF (EGNMAX.LT.ECMNN(I)) THEN
               I1  = I-1
               I2  = I
               RAT = (EGNMAX-ECMNN(I1))/(ECMNN(I2)-ECMNN(I1))
               GOTO 6
            ENDIF
    5    CONTINUE
    6    CONTINUE
      ENDIF
      SIGMAX = XSTOT(I1,1,1)+RAT*(XSTOT(I2,1,1)-XSTOT(I1,1,1))
      EGNXX  = EGNMAX
      I1  = 1
      I2  = 1
      RAT = ONE
      IF (EGNMIN.GE.ECMNN(NEBINI)) THEN
         I1  = NEBINI
         I2  = NEBINI
         RAT = ONE
      ELSEIF (EGNMIN.GT.ECMNN(1)) THEN
         DO 7 I=2,NEBINI
            IF (EGNMIN.LT.ECMNN(I)) THEN
               I1  = I-1
               I2  = I
               RAT = (EGNMIN-ECMNN(I1))/(ECMNN(I2)-ECMNN(I1))
               GOTO 8
            ENDIF
    7    CONTINUE
    8    CONTINUE
      ENDIF
      SIGXX = XSTOT(I1,1,1)+RAT*(XSTOT(I2,1,1)-XSTOT(I1,1,1))
      IF (SIGXX.GT.SIGMAX) EGNXX = EGNMIN
      SIGMAX = MAX(SIGMAX,SIGXX)
      WRITE(ErrorOut,
     * '(9X,A,F8.3,A)') 'Sigma_tot (max) =',SIGMAX,' mb'

c plot photon flux table
      AYMIN = LOG(YMIN)
      AYMAX = LOG(YMAX)
      AYRGE = AYMAX-AYMIN
      MAXTAB = 50
      ADY    = LOG(YMAX/YMIN)/DBLE(MAXTAB-1)
C     WRITE(LOUT,'(/,1X,A)') 'LAEVT:   photon flux '
      DO 1 I=1,MAXTAB
         Y     = EXP(AYMIN+ADY*DBLE(I-1))
         Q2LOW = MAX(Q2MIN,AMLPT2*Y**2/(ONE-Y))
         FF1   = ALPHEM/TWOPI * ((ONE+(ONE-Y)**2)/Y*LOG(Q2MAX/Q2LOW)
     &                           -TWO*AMLPT2*Y*(ONE/Q2LOW-ONE/Q2MAX))
         FF2   = ALPHEM/TWOPI * ((ONE+(ONE-Y)**2)/Y*LOG(Q2MAX/Q2LOW)
     &                           -TWO*(ONE-Y)/Y*(ONE-Q2LOW/Q2MAX))
C        WRITE(LOUT,'(5X,3E15.4)') Y,FF1,FF2
    1 CONTINUE

c maximum residual weight for flux sampling (dy/y)
      YY     = YMIN
      Q2LOW  = MAX(Q2MIN,AMLPT2*YY**2/(ONE-YY))
      WGHMAX = (ONE+(ONE-YY)**2)*LOG(Q2MAX/Q2LOW)
     &         -TWO*AMLPT2*YY*(ONE/Q2LOW-ONE/Q2MAX)*YY

      CALL DT_NEWHGR(YMIN,YMAX,ZERO,XDUMB,49,IHFLY0)
      CALL DT_NEWHGR(YMIN,YMAX,ZERO,XDUMB,49,IHFLY1)
      CALL DT_NEWHGR(YMIN,YMAX,ZERO,XDUMB,49,IHFLY2)
      CALL DT_NEWHGR(Q2LOW,Q2MAX,ZERO,XDUMB,20,IHFLQ0)
      CALL DT_NEWHGR(Q2LOW,Q2MAX,ZERO,XDUMB,20,IHFLQ1)
      CALL DT_NEWHGR(Q2LOW,Q2MAX,ZERO,XDUMB,20,IHFLQ2)
      CALL DT_NEWHGR(EGNMIN,EGNMAX,ZERO,XDUMB,20,IHFLE0)
      CALL DT_NEWHGR(EGNMIN,EGNMAX,ZERO,XDUMB,20,IHFLE1)
      CALL DT_NEWHGR(EGNMIN,EGNMAX,ZERO,XDUMB,20,IHFLE2)
      CALL DT_NEWHGR(ZERO,EGMAX,ZERO,XDUMB,20,IHFLU0)
      CALL DT_NEWHGR(ZERO,EGMAX,ZERO,XDUMB,20,IHFLU1)
      CALL DT_NEWHGR(ZERO,EGMAX,ZERO,XDUMB,20,IHFLU2)
      XBLOW = 0.001D0
      CALL DT_NEWHGR(XBLOW,ONE,ZERO,XDUMB,-40,IHFLX0)
      CALL DT_NEWHGR(XBLOW,ONE,ZERO,XDUMB,-40,IHFLX1)
      CALL DT_NEWHGR(XBLOW,ONE,ZERO,XDUMB,-40,IHFLX2)

      ITRY = 0
      ITRW = 0
      NC0  = 0
      NC1  = 0

c generate events
      DO 2 IEVT=1,NEVTS
         IF (MOD(IEVT,NMSG).EQ.0) THEN
C           OPEN(LLOOK,FILE='/scrtch3/hr/sroesler/statusd5.out',
C    &                                         STATUS='UNKNOWN')
            WRITE(ErrorOut,'(1X,I8,A)') IEVT-1,' events sampled'
C           CLOSE(LLOOK)
         ENDIF
         NEVENT = IEVT

  100    CONTINUE
         ITRY = ITRY+1

c  sample y
  101    CONTINUE
         ITRW  = ITRW+1
         YY    = EXP(AYRGE*DT_RNDM(RAT)+AYMIN)
         Q2LOW = MAX(Q2MIN,AMLPT2*YY**2/(ONE-YY))
         Q2LOG = LOG(Q2MAX/Q2LOW)
         WGH   = (ONE+(ONE-YY)**2)*Q2LOG
     &           -TWO*AMLPT2*YY*(ONE/Q2LOW-ONE/Q2MAX)*YY
         IF (WGHMAX.LT.WGH) WRITE(ErrorOut,1000) YY,WGHMAX,WGH
 1000    FORMAT(1X,'LAEVT:   WEIGHT ERROR!',3E12.5)
         IF (DT_RNDM(YY)*WGHMAX.GT.WGH) GOTO 101

c  sample Q2
         YEFF = ONE+(ONE-YY)**2
  102    CONTINUE
         Q2  = Q2LOW*EXP(Q2LOG*DT_RNDM(YY))
         WGH = (YEFF-TWO*(ONE-YY)*Q2LOW/Q2)/YEFF
         IF (WGH.LT.DT_RNDM(Q2)) GOTO 102

c        NC0 = NC0+1
c        CALL DT_FILHGR(YY,ONE,IHFLY0,NC0)
c        CALL DT_FILHGR(Q2,ONE,IHFLQ0,NC0)

c  kinematics at lepton-photon vertex
c   scattered electron
         YQ2 = SQRT((ONE-YY)*Q2)
         Q2E = Q2/(4.0D0*PLEPT0(4))
         E1Y = (ONE-YY)*PLEPT0(4)
         CALL DT_DSFECF(SIF,COF)
         PLEPT1(1) = YQ2*COF
         PLEPT1(2) = YQ2*SIF
         PLEPT1(3) = E1Y-Q2E
         PLEPT1(4) = E1Y+Q2E
C        THETA = ACOS( (E1Y-Q2E)/(E1Y+Q2E) )
c   radiated photon
         PGAMM(1) = -PLEPT1(1)
         PGAMM(2) = -PLEPT1(2)
         PGAMM(3) = PLEPT0(3)-PLEPT1(3)
         PGAMM(4) = PLEPT0(4)-PLEPT1(4)
c   E_cm cut
         PTOTGN = SQRT( (PGAMM(1)+PNUCL(1))**2+(PGAMM(2)+PNUCL(2))**2
     &                                        +(PGAMM(3)+PNUCL(3))**2 )
         ETOTGN = PGAMM(4)+PNUCL(4)
         ECMGN  = (ETOTGN-PTOTGN)*(ETOTGN+PTOTGN)
         IF (ECMGN.LT.0.1D0) GOTO 101
         ECMGN  = SQRT(ECMGN)
         IF ((ECMGN.LT.ECMIN).OR.(ECMGN.GT.ECMAX)) GOTO 101

c  Lorentz-transformation into nucleon-rest system
         CALL DT_DALTRA(BGTA(4),-BGTA(1),-BGTA(2),-BGTA(3),
     &               PGAMM(1),PGAMM(2),PGAMM(3),PGAMM(4),
     &               PGTOT,PPG(1),PPG(2),PPG(3),PPG(4))
         CALL DT_DALTRA(BGTA(4),-BGTA(1),-BGTA(2),-BGTA(3),
     &               PLEPT1(1),PLEPT1(2),PLEPT1(3),PLEPT1(4),
     &               PLTOT,PPL1(1),PPL1(2),PPL1(3),PPL1(4))
c  temporary checks..
         Q2TMP = ABS(PPG(4)**2-PGTOT**2)
         IF (ABS(Q2-Q2TMP).GT.0.01D0) WRITE(ErrorOut,
     * 1001) Q2,Q2TMP
 1001    FORMAT(1X,'LAEVT:    INCONSISTENT KINEMATICS (Q2,Q2TMP) ',
     &          2F10.4)
         ECMTMP = SQRT((PPG(4)+AAM(1)-PGTOT)*(PPG(4)+AAM(1)+PGTOT))
         IF (ABS(ECMGN-ECMTMP).GT.TINY10) WRITE(ErrorOut,
     * 1002) ECMGN,ECMTMP
 1002    FORMAT(1X,'LAEVT:    INCONSISTENT KINEMATICS (ECMGN,ECMTMP) ',
     &          2F10.2)
         YYTMP = PPG(4)/PPL0(4)
         IF (ABS(YY-YYTMP).GT.0.01D0) WRITE(ErrorOut,
     * 1005) YY,YYTMP
 1005    FORMAT(1X,'LAEVT:    INCONSISTENT KINEMATICS (YY,YYTMP) ',
     &          2F10.4)

c  lepton tagger (Lab)
         THETA = ACOS( PPL1(3)/PLTOT )
         IF (PPL1(4).GT.ELMIN) THEN
            IF ((THETA.LT.THMIN).OR.(THETA.GT.THMAX)) GOTO 101
         ENDIF
c  photon energy-cut (Lab)
         IF (PPG(4).LT.EGMIN) GOTO 101
         IF (PPG(4).GT.EGMAX) GOTO 101
c   x_Bj cut
         XBJ = ABS(Q2/(1.876D0*PPG(4)))
         IF (XBJ.LT.XBJMIN) GOTO 101

         NC0 = NC0+1
         CALL DT_FILHGR(    Q2,ONE,IHFLQ0,NC0)
         CALL DT_FILHGR(    YY,ONE,IHFLY0,NC0)
         CALL DT_FILHGR(   XBJ,ONE,IHFLX0,NC0)
         CALL DT_FILHGR(PPG(4),ONE,IHFLU0,NC0)
         CALL DT_FILHGR( ECMGN,ONE,IHFLE0,NC0)

c  rotation angles against z-axis
         COD = PPG(3)/PGTOT
C        SID = SQRT((ONE-COD)*(ONE+COD))
         PPT = SQRT(PPG(1)**2+PPG(2)**2)
         SID = PPT/PGTOT
         COF = ONE
         SIF = ZERO
         IF (PGTOT*SID.GT.TINY10) THEN
            COF   = PPG(1)/(SID*PGTOT)
            SIF   = PPG(2)/(SID*PGTOT)
            ANORF = SQRT(COF*COF+SIF*SIF)
            COF   = COF/ANORF
            SIF   = SIF/ANORF
         ENDIF

         IF (IXSTBL.EQ.0) THEN
c  change to photon projectile
            IJPROJ = 7
c  set virtuality
            VIRT = Q2
c  re-initialize LTs with new kinematics
c  !!PGAMM ist set in cms (ECMGN) along z
            EPN = ZERO
            PPN = ZERO
            CALL DT_LTINI(IJPROJ,IJTARG,EPN,PPN,ECMGN,0)
c  force Lab-system
            IFRAME = 1
c  get emulsion component if requested
            IF (IEMUL.GT.0) CALL DT_GETEMU(NTMASS,NTCHAR,KKMAT,0)
c  convolute with cross section
            CALL DT_SIGGAT(Q2LOW,EGNXX,STOTX,KKMAT)
            CALL DT_SIGGAT(Q2,ECMGN,STOT,KKMAT)
            IF (STOTX.LT.STOT) WRITE(ErrorOut,'(1X,A,/,6E12.3)')
     &         'LAEVT: WARNING STOTX<STOT ! ',Q2LOW,EGNMAX,STOTX,
     &                                        Q2,ECMGN,STOT
            IF (DT_RNDM(Q2)*STOTX.GT.STOT) GOTO 100
            NC1 = NC1+1
            CALL DT_FILHGR(    Q2,ONE,IHFLQ1,NC1)
            CALL DT_FILHGR(    YY,ONE,IHFLY1,NC1)
            CALL DT_FILHGR(   XBJ,ONE,IHFLX1,NC1)
            CALL DT_FILHGR(PPG(4),ONE,IHFLU1,NC1)
            CALL DT_FILHGR( ECMGN,ONE,IHFLE1,NC1)
c  composite targets only
            KKMAT = -KKMAT
c  sample this event
            CALL DT_KKINC(NPMASS,NPCHAR,NTMASS,NTCHAR,IJPROJ,EPN,KKMAT,
     &                                                            IREJ)
c  rotate momenta of final state particles back in photon-nucleon syst.
            DO 4 I=NPOINT(4),NHKK
               IF ((ABS(ISTHKK(I)).EQ.1).OR.(ISTHKK(I).EQ.1000).OR.
     &                                      (ISTHKK(I).EQ.1001)) THEN
                  PX = PHKK(1,I)
                  PY = PHKK(2,I)
                  PZ = PHKK(3,I)
                  CALL DT_MYTRAN(1,PX,PY,PZ,COD,SID,COF,SIF,
     &                        PHKK(1,I),PHKK(2,I),PHKK(3,I))
               ENDIF
    4       CONTINUE
         ENDIF

         CALL DT_FILHGR(    Q2,ONE,IHFLQ2,NC1)
         CALL DT_FILHGR(    YY,ONE,IHFLY2,NC1)
         CALL DT_FILHGR(   XBJ,ONE,IHFLX2,NC1)
         CALL DT_FILHGR(PPG(4),ONE,IHFLU2,NC1)
         CALL DT_FILHGR( ECMGN,ONE,IHFLE2,NC1)

c  dump this event to histograms

         CALL PHO_PHIST(2000,DUM)


    2 CONTINUE

      WGY    = ALPHEM/TWOPI*WGHMAX*DBLE(ITRY)/DBLE(ITRW)
      WGY    = WGY*LOG(YMAX/YMIN)
      WEIGHT = WGY*SIGMAX*DBLE(NEVTS)/DBLE(ITRY)

C     HEADER = ' LAEVT:  Q^2 distribution 0'
C     CALL DT_OUTHGR(IHFLQ0,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  Q^2 distribution 1'
C     CALL DT_OUTHGR(IHFLQ1,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  Q^2 distribution 2'
C     CALL DT_OUTHGR(IHFLQ2,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  y   distribution 0'
C     CALL DT_OUTHGR(IHFLY0,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  y   distribution 1'
C     CALL DT_OUTHGR(IHFLY1,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  y   distribution 2'
C     CALL DT_OUTHGR(IHFLY2,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  x   distribution 0'
C     CALL DT_OUTHGR(IHFLX0,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  x   distribution 1'
C     CALL DT_OUTHGR(IHFLX1,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  x   distribution 2'
C     CALL DT_OUTHGR(IHFLX2,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  E_g distribution 0'
C     CALL DT_OUTHGR(IHFLU0,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  E_g distribution 1'
C     CALL DT_OUTHGR(IHFLU1,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  E_g distribution 2'
C     CALL DT_OUTHGR(IHFLU2,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  E_c distribution 0'
C     CALL DT_OUTHGR(IHFLE0,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  E_c distribution 1'
C     CALL DT_OUTHGR(IHFLE1,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)
C     HEADER = ' LAEVT:  E_c distribution 2'
C     CALL DT_OUTHGR(IHFLE2,0,0,0,0,0,HEADER,0,NEVTS,ONE,1,1,-1)

c print run-statistics and histograms to output-unit 6

      CALL PHO_PHIST(3000,DUM)

      IF (IXSTBL.EQ.0) CALL DT_STATIS(2)

      RETURN
      END
c
c===dtuini=============================================================*
c
CDECK  ID>, DT_DTUINI
      SUBROUTINE DT_DTUINI(NEVTS,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,
     &                                               IDP,IEMU)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD
c/////////////
c      write(0,*) ' DT_DTUINI(NEVTS,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,'
c      write(0,*) ' IDP,IEMU'
c      write(0,*)  NEVTS,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,IEMU
c///////////////////

      CALL DT_INIT(NEVTS,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,IGLAU)
      CALL DT_STATIS(1)

      CALL PHO_PHIST(1000,DUM)

      IF (NCOMPO.LE.0) THEN
c///////////////
c         write(0,*) ' NCOMPO=',NCOMPO
c         write(0,*) ' calling shmaki'
c//////////////
         CALL DT_SHMAKI(NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,IGLAU)
      ELSE
         DO 1 I=1,NCOMPO
            CALL DT_SHMAKI(NPMASS,NPCHAR,IEMUMA(I),IEMUCH(I),IDP,EPN,0)
    1    CONTINUE
      ENDIF
c////////////////
c      write(0,*) ' IOGLB=',IOGLB, ' IEMUL->IEMU =', IEMUL
c///////////////
      IF (IOGLB.NE.100) CALL DT_SIGEMU
      IEMU = IEMUL

      RETURN
      END
c
c===dtuout=============================================================*
c
CDECK  ID>, DT_DTUOUT
      SUBROUTINE DT_DTUOUT

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE


      CALL PHO_PHIST(3000,DUM)

      CALL DT_STATIS(2)

      RETURN
      END
c
c===beam===============================================================*
c
CDECK  ID>, DT_BEAMPR
      SUBROUTINE DT_BEAMPR(WHAT,PLAB,MODE)

c***********************************************************************
c Initialization of event generation                                   *
c This version dated  7.4.98  is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER (LIN=5,LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY10=1.0D-10)
      PARAMETER (TWOPI=6.283185307D0,BOG=TWOPI/360.0D0)

      LOGICAL LBEAM

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c beam momenta
      COMMON /DTBEAM/ P1(4),P2(4)


C     DIMENSION WHAT(6),P1(4),P2(4),P1CMS(4),P2CMS(4)
      DIMENSION WHAT(6),P1CMS(4),P2CMS(4)

      DATA LBEAM /.FALSE./

      GOTO (1,2) MODE

    1 CONTINUE

      E1  = WHAT(1)
      IF (E1.LT.ZERO) E1 = DBLE(IPZ)/DBLE(IP)*ABS(WHAT(1))
      E2  = WHAT(2)
      IF (E2.LT.ZERO) E2 = DBLE(ITZ)/DBLE(IT)*ABS(WHAT(2))
      PP1 = SQRT( (E1+AAM(IJPROJ))*(E1-AAM(IJPROJ)) )
      PP2 = SQRT( (E2+AAM(IJTARG))*(E2-AAM(IJTARG)) )
      TH  = 1.D-6*WHAT(3)/2.D0
      PH  = WHAT(4)*BOG
      P1(1) = PP1*SIN(TH)*COS(PH)
      P1(2) = PP1*SIN(TH)*SIN(PH)
      P1(3) = PP1*COS(TH)
      P1(4) = E1
      P2(1) = PP2*SIN(TH)*COS(PH)
      P2(2) = PP2*SIN(TH)*SIN(PH)
      P2(3) = -PP2*COS(TH)
      P2(4) = E2
      ECM  = SQRT( (P1(4)+P2(4))**2-(P1(1)+P2(1))**2-(P1(2)+P2(2))**2
     &                                              -(P1(3)+P2(3))**2 )
      ELAB = (ECM**2-AAM(IJPROJ)**2-AAM(IJTARG)**2)/(2.0D0*AAM(IJTARG))
      PLAB = SQRT( (ELAB+AAM(IJPROJ))*(ELAB-AAM(IJPROJ)) )
      BGX  = (P1(1)+P2(1))/ECM
      BGY  = (P1(2)+P2(2))/ECM
      BGZ  = (P1(3)+P2(3))/ECM
      BGE  = (P1(4)+P2(4))/ECM
      CALL DT_DALTRA(BGE,-BGX,-BGY,-BGZ,P1(1),P1(2),P1(3),P1(4),
     &            P1TOT,P1CMS(1),P1CMS(2),P1CMS(3),P1CMS(4))
      CALL DT_DALTRA(BGE,-BGX,-BGY,-BGZ,P2(1),P2(2),P2(3),P2(4),
     &            P2TOT,P2CMS(1),P2CMS(2),P2CMS(3),P2CMS(4))
      COD = P1CMS(3)/P1TOT
C     SID = SQRT((ONE-COD)*(ONE+COD))
      PPT = SQRT(P1CMS(1)**2+P1CMS(2)**2)
      SID = PPT/P1TOT
      COF = ONE
      SIF = ZERO
      IF (P1TOT*SID.GT.TINY10) THEN
         COF   = P1CMS(1)/(SID*P1TOT)
         SIF   = P1CMS(2)/(SID*P1TOT)
         ANORF = SQRT(COF*COF+SIF*SIF)
         COF   = COF/ANORF
         SIF   = SIF/ANORF
      ENDIF
c*check
C     WRITE(LOUT,'(4E15.4)') P1(1),P1(2),P1(3),P1(4)
C     WRITE(LOUT,'(4E15.4)') P2(1),P2(2),P2(3),P2(4)
C     WRITE(LOUT,'(5E15.4)') P1CMS(1),P1CMS(2),P1CMS(3),P1CMS(4),P1TOT
C     WRITE(LOUT,'(5E15.4)') P2CMS(1),P2CMS(2),P2CMS(3),P2CMS(4),P2TOT
C     PAX = ZERO
C     PAY = ZERO
C     PAZ = P1TOT
C     PAE = SQRT(AAM(IJPROJ)**2+PAZ**2)
C     PBX = ZERO
C     PBY = ZERO
C     PBZ = -P2TOT
C     PBE = SQRT(AAM(IJTARG)**2+PBZ**2)
C     WRITE(LOUT,'(4E15.4)') PAX,PAY,PAZ,PAE
C     WRITE(LOUT,'(4E15.4)') PBX,PBY,PBZ,PBE
C     CALL DT_MYTRAN(1,PAX,PAY,PAZ,COD,SID,COF,SIF,
C    &            P1CMS(1),P1CMS(2),P1CMS(3))
C     CALL DT_MYTRAN(1,PBX,PBY,PBZ,COD,SID,COF,SIF,
C    &            P2CMS(1),P2CMS(2),P2CMS(3))
C     WRITE(LOUT,'(4E15.4)') P1CMS(1),P1CMS(2),P1CMS(3),P1CMS(4)
C     WRITE(LOUT,'(4E15.4)') P2CMS(1),P2CMS(2),P2CMS(3),P2CMS(4)
C     CALL DT_DALTRA(BGE,BGX,BGY,BGZ,P1CMS(1),P1CMS(2),P1CMS(3),P1CMS(4),
C    &            P1TOT,P1(1),P1(2),P1(3),P1(4))
C     CALL DT_DALTRA(BGE,BGX,BGY,BGZ,P2CMS(1),P2CMS(2),P2CMS(3),P2CMS(4),
C    &            P2TOT,P2(1),P2(2),P2(3),P2(4))
C     WRITE(LOUT,'(4E15.4)') P1(1),P1(2),P1(3),P1(4)
C     WRITE(LOUT,'(4E15.4)') P2(1),P2(2),P2(3),P2(4)
C     STOP
c*

      LBEAM = .TRUE.

      RETURN

    2 CONTINUE

      IF (LBEAM) THEN
         IF ( (NPOINT(4).EQ.0).OR.(NHKK.LT.NPOINT(4)) ) RETURN
         DO 20 I=NPOINT(4),NHKK
            IF ((ABS(ISTHKK(I)).EQ.1).OR.(ISTHKK(I).EQ.1000).OR.
     &                                   (ISTHKK(I).EQ.1001)) THEN
               CALL DT_MYTRAN(1,PHKK(1,I),PHKK(2,I),PHKK(3,I),
     &                     COD,SID,COF,SIF,PXCMS,PYCMS,PZCMS)
               PECMS = PHKK(4,I)
               CALL DT_DALTRA(BGE,BGX,BGY,BGZ,PXCMS,PYCMS,PZCMS,PECMS,
     &                     PTOT,PHKK(1,I),PHKK(2,I),PHKK(3,I),PHKK(4,I))
            ENDIF
   20    CONTINUE
      ELSE
         MODE = -1
      ENDIF

      RETURN
      END
c
c===eventb=============================================================*
c
CDECK  ID>, DT_EVENTB
      SUBROUTINE DT_EVENTB(NCSY,IREJ)

c***********************************************************************
c Treatment of nucleon-nucleon interactions with full two-component    *
c Dual Parton Model.                                                   *
c          NCSY     number of nucleon-nucleon interactions             *
c          IREJ     rejection flag                                     *
c This version dated 14.01.2000 is written by S. Roesler               *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ZERO=0.0D0,ONE=1.0D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c! uncomment this line for internal phojet-fragmentation
C #include "dtu_dtevtp.inc"
c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c DTUNUC-PHOJET interface, Lorentz-param. of n-n subsystem
      COMMON /DTLTSU/ BGX,BGY,BGZ,GAM

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF

c statistics: double-Pomeron exchange
      COMMON /DTFLG2/ INTFLG,IPOPO

c flags for particle decays
      COMMON /DTFRPA/ MSTUX(20),PARUX(20),MSTJX(20),PARJX(20),
     &                IMSTU(20),IPARU(20),IMSTJ(20),IPARJ(20),
     &                NMSTU,NPARU,NMSTJ,NPARJ,PDB,PDBSEA(3),ISIG0,IPI0

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

C  nucleon-nucleus / nucleus-nucleus interface to DTUNUC
      INTEGER IDEQP,IDEQB,IHFLD,IHFLS
      DOUBLE PRECISION ECMN,PCMN,SECM,SPCM,XPSUB,XTSUB
      COMMON /POHDFL/ ECMN,PCMN,SECM,SPCM,XPSUB,XTSUB,
     &                IDEQP(2),IDEQB(2),IHFLD(2,2),IHFLS(2)

C  model switches and parameters
      CHARACTER*8 MDLNA
      INTEGER ISWMDL,IPAMDL
      DOUBLE PRECISION PARMDL
      COMMON /POMDLS/ MDLNA(50),ISWMDL(50),PARMDL(400),IPAMDL(400)

C  initial state parton radiation (internal part)
      INTEGER MXISR3,MXISR4
      PARAMETER ( MXISR3 = 50, MXISR4 = 100 )
      INTEGER IFL1,IFL2,IBRA,IFANO,ISH,NACC
      DOUBLE PRECISION Q2SH,PT2SH,XPSH,ZPSH,THSH,SHAT
      COMMON /POINT6/ Q2SH(2,MXISR3),PT2SH(2,MXISR3),XPSH(2,MXISR3),
     &                ZPSH(2,MXISR3),THSH(2,MXISR3),SHAT(MXISR3),
     &                IFL1(2,MXISR3),IFL2(2,MXISR3),
     &                IBRA(2,MXISR4),IFANO(2),ISH(2),NACC

C  event debugging information
      INTEGER NMAXD
      PARAMETER (NMAXD=100)
      INTEGER IDEB,KSPOM,KHPOM,KSREG,KHDIR,KACCEP,KSTRG,KHTRG,KSLOO,
     &        KHLOO,KSDPO,KHDPO,KEVENT,KSOFT,KHARD
      COMMON /PODEBG/ IDEB(NMAXD),KSPOM,KHPOM,KSREG,KHDIR,KACCEP,KSTRG,
     &                KHTRG,KSLOO,KHLOO,KSDPO,KHDPO,KEVENT,KSOFT,KHARD

C  general process information
      INTEGER IPROCE,IDNODF,IDIFR1,IDIFR2,IDDPOM,IPRON
      COMMON /POPRCS/ IPROCE,IDNODF,IDIFR1,IDIFR2,IDDPOM,IPRON(15,4)


      DIMENSION PP(4),PT(4),PTOT(4),PP1(4),PP2(4),PT1(4),PT2(4),
     &          PPNN(4),PTNN(4),PTOTNN(4),PPSUB(4),PTSUB(4),
     &          PPTCMS(4),PTTCMS(4),PPTMP(4),PTTMP(4),
     &          KPRON(15),ISINGL(2000)

c initial values for max. number of phojet scatterings and dtunuc chains
c to be fragmented with one pyexec call
      DATA MXPHFR,MXDTFR /10,100/

      IREJ      = 0
c pointer to first parton of the first chain in dtevt common
      NPOINT(3) = NHKK+1
c special flag for double-Pomeron statistics
      IPOPO = 1
c counter for low-mass (DTUNUC) interactions
      NDTUSC = 0
c counter for interactions treated by PHOJET
      NPHOSC = 0

c scan interactions for single nucleon-nucleon interactions
c (this has to be checked here because Cronin modifies parton momenta)
      NC = NPOINT(2)
      IF (NCSY.GT.2000) STOP ' DT_EVENTB: NCSY > 2000 ! '
      DO 8 I=1,NCSY
         ISINGL(I) = 0
         MOP = JMOHKK(1,NC)
         MOT = JMOHKK(1,NC+1)
         DIFF1 = ABS(PHKK(4,MOP)-PHKK(4,  NC)-PHKK(4,NC+2))
         DIFF2 = ABS(PHKK(4,MOT)-PHKK(4,NC+1)-PHKK(4,NC+3))
         IF ((DIFF1.LT.TINY10).AND.(DIFF2.LT.TINY10)) ISINGL(I) = 1
         NC = NC+4
    8 CONTINUE

c multiple scattering of chain ends
      IF ((IP.GT.1).AND.(MKCRON.NE.0)) CALL DT_CRONIN(1)
      IF ((IT.GT.1).AND.(MKCRON.NE.0)) CALL DT_CRONIN(2)

c switch to PHOJET-settings for JETSET parameter
      CALL DT_INITJS(1)

c loop over nucleon-nucleon interaction
      NC = NPOINT(2)
      DO 2 I=1,NCSY
c
c   pick up one nucleon-nucleon interaction from DTEVT1
c     ppnn  / ptnn   - momenta of the interacting nucleons (cms)
c     ptotnn         - total momentum of the interacting nucleons (cms)
c     pp1,2 / pt1,2  - momenta of the four partons
c     pp    / pt     - total momenta of the proj / targ partons
c     ptot           - total momentum of the four partons
         MOP = JMOHKK(1,NC)
         MOT = JMOHKK(1,NC+1)
         DO 3 K=1,4
            PPNN(K)   = PHKK(K,MOP)
            PTNN(K)   = PHKK(K,MOT)
            PTOTNN(K) = PPNN(K)+PTNN(K)
            PP1(K)    = PHKK(K,NC)
            PT1(K)    = PHKK(K,NC+1)
            PP2(K)    = PHKK(K,NC+2)
            PT2(K)    = PHKK(K,NC+3)
            PP(K)     = PP1(K)+PP2(K)
            PT(K)     = PT1(K)+PT2(K)
            PTOT(K)   = PP(K)+PT(K)
    3    CONTINUE
c
c-----------------------------------------------------------------------
c   this is a complete nucleon-nucleon interaction
c
         IF (ISINGL(I).EQ.1) THEN
c
c     initialize PHOJET-variables for remnant/valence-partons
            IHFLD(1,1) = 0
            IHFLD(1,2) = 0
            IHFLD(2,1) = 0
            IHFLD(2,2) = 0
            IHFLS(1) = 1
            IHFLS(2) = 1
c     save current settings of PHOJET process and min. bias flags
            DO 9 K=1,11
               KPRON(K) = IPRON(K,1)
    9       CONTINUE
            ISWSAV   = ISWMDL(2)
c
c     check if forced sampling of diffractive interaction requested
            IF (ISINGD.LT.-1) THEN
               DO 90 K=1,11
                  IPRON(K,1) = 0
   90          CONTINUE
               IF ((ISINGD.EQ.-2).OR.(ISINGD.EQ.-3)) IPRON(5,1) = 1
               IF ((ISINGD.EQ.-2).OR.(ISINGD.EQ.-4)) IPRON(6,1) = 1
               IF (ISINGD.EQ.-5) IPRON(4,1) = 1
            ENDIF
c
c     for photons: a direct/anomalous interaction is not sampled
c     in PHOJET but already in Glauber-formalism. Here we check if such
c     an interaction is requested
            IF (IJPROJ.EQ.7) THEN
c       first switch off direct interactions
               IPRON(8,1) = 0
c       this is a direct interactions
               IF (IDIREC.EQ.1) THEN
                  DO 12 K=1,11
                     IPRON(K,1) = 0
   12             CONTINUE
                  IPRON(8,1) = 1
c       this is an anomalous interactions
c         (iswmdl(2) = 0 only hard int. generated ( = 1 min. bias) )
               ELSEIF (IDIREC.EQ.2) THEN
                  ISWMDL(2) = 0
               ENDIF
            ELSE
               IF (IDIREC.NE.0) STOP ' DT_EVENTB: IDIREC > 0 ! '
            ENDIF
c
c     make sure that total momenta of partons, pp and pt, are on mass
c     shell (Cronin may have srewed this up..)
            CALL DT_MASHEL(PP,PT,PHKK(5,MOP),PHKK(5,MOT),PPNN,PTNN,IR1)
            IF (IR1.NE.0) THEN
               IF (IOULEV(1).GT.0) WRITE(ErrorOut,'(1X,A)')
     &              'EVENTB:  MASS SHELL CORRECTION REJECTED'
               GOTO 9999
            ENDIF
c
c     initialize the incoming particles in PHOJET
            IF ((IP.EQ.1).AND.(IJPROJ.EQ.7)) THEN

               CALL PHO_SETPAR(1,22,0,VIRT)

            ELSE

               CALL PHO_SETPAR(1,IDHKK(MOP),0,ZERO)

            ENDIF

            CALL PHO_SETPAR(2,IDHKK(MOT),0,ZERO)

c
c     initialize rejection loop counter for anomalous processes
            IRJANO = 0
  800       CONTINUE
            IRJANO = IRJANO+1
c
c     temporary fix for ifano problem
            IFANO(1) = 0
            IFANO(2) = 0
c
c     generate complete hadron/nucleon/photon-nucleon event with PHOJET

            CALL PHO_EVENT(2,PPNN,PTNN,DUM,IREJ1)

c
c     for photons: special consistency check for anomalous interactions
            IF (IJPROJ.EQ.7) THEN
               IF (IRJANO.LT.30) THEN
                  IF (IFANO(1).NE.0) THEN
c       here, an anomalous interaction was generated. Check if it
c       was also requested. Otherwise reject this event.
                     IF (IDIREC.EQ.0) GOTO 800
                  ELSE
c       here, an anomalous interaction was not generated. Check if it
c       was requested in which case we need to reject this event.
                     IF (IDIREC.EQ.2) GOTO 800
                  ENDIF
               ELSE
                  WRITE(ErrorOut,
     * *) ' DT_EVENTB: Warning! IRJANO > 30 ',
     &                          IRJANO,IDIREC,NEVHKK
               ENDIF
            ENDIF
c
c     copy back original settings of PHOJET process and min. bias flags
            DO 10 K=1,11
               IPRON(K,1) = KPRON(K)
   10       CONTINUE
            ISWMDL(2) = ISWSAV
c
c     check if PHOJET has rejected this event
            IF (IREJ1.NE.0) THEN
C              IF (IOULEV(1).GT.0) WRITE(LOUT,'(1X,A,I4)')
               WRITE(ErrorOut,'(1X,A,I4)')
     &            'EVENTB:  CHAIN SYSTEM REJECTED',IDIREC

               CALL PHO_PREVNT(0)

               GOTO 9999
            ENDIF
c
c     copy partons and strings from PHOJET common back into DTEVT for
c     external fragmentation
            MO1 = NC
            MO2 = NC+3
c!      uncomment this line for internal phojet-fragmentation
C           CALL DT_GETFSP(MO1,MO2,PPNN,PTNN,-1)
            NPHOSC = NPHOSC+1
            CALL DT_GETPJE(MO1,MO2,PPNN,PTNN,-1,NPHOSC,IREJ1)
            IF (IREJ1.NE.0) THEN
               IF (IOULEV(1).GT.0)
     &         WRITE(ErrorOut,
     * '(1X,A,I4)') 'EVENTB: chain system rejected 1'
               GOTO 9999
            ENDIF
c
c     update statistics counter
            ICEVTG(IDCH(NC),29) = ICEVTG(IDCH(NC),29)+1
c
c-----------------------------------------------------------------------
c   this interaction involves "remnants"
c
         ELSE
c
c     total mass of this system
            PPTOT  = SQRT(PTOT(1)**2+PTOT(2)**2+PTOT(3)**2)
            AMTOT2 = (PTOT(4)-PPTOT)*(PTOT(4)+PPTOT)
            IF (AMTOT2.LT.ZERO) THEN
               AMTOT = ZERO
            ELSE
               AMTOT = SQRT(AMTOT2)
            ENDIF
c
c     systems with masses larger than elojet are treated with PHOJET
            IF (AMTOT.GT.ELOJET) THEN
c
c     initialize PHOJET-variables for remnant/valence-partons
c       projectile parton flavors and valence flag
               IHFLD(1,1) = IDHKK(NC)
               IHFLD(1,2) = IDHKK(NC+2)
               IHFLS(1)   = 0
               IF ((IDCH(NC).EQ.6).OR.(IDCH(NC).EQ.7)
     &                            .OR.(IDCH(NC).EQ.8)) IHFLS(1) = 1
c       target parton flavors and valence flag
               IHFLD(2,1) = IDHKK(NC+1)
               IHFLD(2,2) = IDHKK(NC+3)
               IHFLS(2)   = 0
               IF ((IDCH(NC).EQ.4).OR.(IDCH(NC).EQ.5)
     &                            .OR.(IDCH(NC).EQ.8)) IHFLS(2) = 1
c       flag signalizing PHOJET how to treat the remnant:
c         iremn = -1 sea-quark remnant: PHOJET takes flavors from ihfld
c         iremn > -1 valence remnant: PHOJET assumes flavors according
c                    to mother particle
               IREMN1 = IHFLS(1)-1
               IREMN2 = IHFLS(2)-1
c
c     initialize the incoming particles in PHOJET
               IF ((IP.EQ.1).AND.(IJPROJ.EQ.7)) THEN

                  CALL PHO_SETPAR(1,22,IREMN1,VIRT)

               ELSE

                  CALL PHO_SETPAR(1,IDHKK(MOP),IREMN1,ZERO)

               ENDIF

               CALL PHO_SETPAR(2,IDHKK(MOT),IREMN2,ZERO)

c
c     calculate Lorentz parameter of the nucleon-nucleon cm-system
               PPTOTN = SQRT(PTOTNN(1)**2+PTOTNN(2)**2+PTOTNN(3)**2)
               AMNN   = SQRT( (PTOTNN(4)-PPTOTN)*(PTOTNN(4)+PPTOTN) )
               BGX    = PTOTNN(1)/AMNN
               BGY    = PTOTNN(2)/AMNN
               BGZ    = PTOTNN(3)/AMNN
               GAM    = PTOTNN(4)/AMNN
c     transform interacting nucleons into nucleon-nucleon cm-system
               CALL DT_DALTRA(GAM,-BGX,-BGY,-BGZ,
     &                     PPNN(1),PPNN(2),PPNN(3),PPNN(4),PPCMS,
     &                     PPTCMS(1),PPTCMS(2),PPTCMS(3),PPTCMS(4))
               CALL DT_DALTRA(GAM,-BGX,-BGY,-BGZ,
     &                     PTNN(1),PTNN(2),PTNN(3),PTNN(4),PTCMS,
     &                     PTTCMS(1),PTTCMS(2),PTTCMS(3),PTTCMS(4))
c     transform (total) momenta of the proj and targ partons into
c     nucleon-nucleon cm-system
               CALL DT_DALTRA(GAM,-BGX,-BGY,-BGZ,
     &                     PP(1),PP(2),PP(3),PP(4),
     &                     PPTSUB,PPSUB(1),PPSUB(2),PPSUB(3),PPSUB(4))
               CALL DT_DALTRA(GAM,-BGX,-BGY,-BGZ,
     &                     PT(1),PT(2),PT(3),PT(4),
     &                     PTTSUB,PTSUB(1),PTSUB(2),PTSUB(3),PTSUB(4))
c     energy fractions of the proj and targ partons
               XPSUB = MIN(PPSUB(4)/PPTCMS(4),ONE)
               XTSUB = MIN(PTSUB(4)/PTTCMS(4),ONE)
c**
c testprint
c              PTOTCM = SQRT( (PPTCMS(1)+PTTCMS(1))**2 +
c    &                        (PPTCMS(2)+PTTCMS(2))**2 +
c    &                        (PPTCMS(3)+PTTCMS(3))**2 )
c              EOLDCM = SQRT( (PPTCMS(4)+PTTCMS(4)-PTOTCM) *
c    &                        (PPTCMS(4)+PTTCMS(4)+PTOTCM) )
c              PTOTSU = SQRT( (PPSUB(1)+PTSUB(1))**2 +
c    &                        (PPSUB(2)+PTSUB(2))**2 +
c    &                        (PPSUB(3)+PTSUB(3))**2 )
c              EOLDSU = SQRT( (PPSUB(4)+PTSUB(4)-PTOTSU) *
c    &                        (PPSUB(4)+PTSUB(4)+PTOTSU) )
c**
c
c     save current settings of PHOJET process and min. bias flags
               DO 7 K=1,11
                  KPRON(K) = IPRON(K,1)
    7          CONTINUE
c     disallow direct photon int. (does not make sense here anyway)
               IPRON(8,1) = 0
c     disallow double pomeron processes (due to technical problems
c     in PHOJET, needs to be solved sometime)
               IPRON(4,1) = 0
c     disallow diffraction for sea-diquarks
               IF ((IABS(IHFLD(1,1)).GT.1100).AND.
     &             (IABS(IHFLD(1,2)).GT.1100)) THEN
                  IPRON(3,1) = 0
                  IPRON(6,1) = 0
               ENDIF
               IF ((IABS(IHFLD(2,1)).GT.1100).AND.
     &             (IABS(IHFLD(2,2)).GT.1100)) THEN
                  IPRON(3,1) = 0
                  IPRON(5,1) = 0
               ENDIF
c
c     we need massless partons: transform them on mass shell
               XMP = ZERO
               XMT = ZERO
               DO 6 K=1,4
                  PPTMP(K) = PPSUB(K)
                  PTTMP(K) = PTSUB(K)
    6          CONTINUE
               CALL DT_MASHEL(PPTMP,PTTMP,XMP,XMT,PPSUB,PTSUB,IREJ1)
               PPSUTO  = SQRT(PPSUB(1)**2+PPSUB(2)**2+PPSUB(3)**2)
               PTSUTO  = SQRT(PTSUB(1)**2+PTSUB(2)**2+PTSUB(3)**2)
               PSUTOT = SQRT((PPSUB(1)+PTSUB(1))**2+
     &                  (PPSUB(2)+PTSUB(2))**2+(PPSUB(3)+PTSUB(3))**2)
c     total energy of the subsysten after mass transformation
c      (should be the same as before..)
               SECM = SQRT( (PPSUB(4)+PTSUB(4)-PSUTOT)*
     &                      (PPSUB(4)+PTSUB(4)+PSUTOT) )
c
c     after mass shell transformation the x_sub - relation has to be
c     corrected. We therefore create "pseudo-momenta" of mother-nucleons.
c
c     The old version was to scale based on the original x_sub and the
c     4-momenta of the subsystem. At very high energy this could lead to
c     "pseudo-cm energies" of the parent system considerably exceeding
c     the true cm energy. Now we keep the true cm energy and calculate
c     new x_sub instead.
C old version  PPTCMS(4) = PPSUB(4)/XPSUB
               PPTCMS(4) = MAX(PPTCMS(4),PPSUB(4))
               XPSUB = PPSUB(4)/PPTCMS(4)
               IF (IJPROJ.EQ.7) THEN
                  AMP2  = PHKK(5,MOT)**2
                  PTOT1 = SQRT(PPTCMS(4)**2-AMP2)
               ELSE
c???????
                  PTOT1 = SQRT((PPTCMS(4)-PHKK(5,MOP))
     &                        *(PPTCMS(4)+PHKK(5,MOP)))
C                 PTOT1 = SQRT((PPTCMS(4)-PHKK(5,MOT))
C    &                        *(PPTCMS(4)+PHKK(5,MOT)))
               ENDIF
C old version  PTTCMS(4) = PTSUB(4)/XTSUB
               PTTCMS(4) = MAX(PTTCMS(4),PTSUB(4))
               XTSUB = PTSUB(4)/PTTCMS(4)
               PTOT2 = SQRT((PTTCMS(4)-PHKK(5,MOT))
     &                     *(PTTCMS(4)+PHKK(5,MOT)))
               DO 4 K=1,3
                  PPTCMS(K) = PTOT1*PPSUB(K)/PPSUTO
                  PTTCMS(K) = PTOT2*PTSUB(K)/PTSUTO
    4          CONTINUE
c**
c testprint
c
c     ppnn  / ptnn   - momenta of the int. nucleons (cms, negl. Fermi)
c     ptotnn         - total momentum of the int. nucleons (cms, negl. Fermi)
c     pptcms/ pttcms - momenta of the interacting nucleons (cms)
c     pp1,2 / pt1,2  - momenta of the four partons
c
c     pp    / pt     - total momenta of the pr/ta partons (cms, negl. Fermi)
c     ptot           - total momentum of the four partons (cms, negl. Fermi)
c     ppsub / ptsub  - total momenta of the proj / targ partons (cms)
c
c              PTOTCM = SQRT( (PPTCMS(1)+PTTCMS(1))**2 +
c    &                        (PPTCMS(2)+PTTCMS(2))**2 +
c    &                        (PPTCMS(3)+PTTCMS(3))**2 )
c              ENEWCM = SQRT( (PPTCMS(4)+PTTCMS(4)-PTOTCM) *
c    &                        (PPTCMS(4)+PTTCMS(4)+PTOTCM) )
c              PTOTSU = SQRT( (PPSUB(1)+PTSUB(1))**2 +
c    &                        (PPSUB(2)+PTSUB(2))**2 +
c    &                        (PPSUB(3)+PTSUB(3))**2 )
c              ENEWSU = SQRT( (PPSUB(4)+PTSUB(4)-PTOTSU) *
c    &                        (PPSUB(4)+PTSUB(4)+PTOTSU) )
c              IF (ENEWCM/EOLDCM.GT.1.1D0) THEN
c                 WRITE(*,*) ' EOLDCM, ENEWCM : ',EOLDCM,ENEWCM
c                 WRITE(*,*) ' EOLDSU, ENEWSU : ',EOLDSU,ENEWSU
c                 WRITE(*,*) ' XPSUB,  XTSUB  : ',XPSUB,XTSUB
c              ENDIF
c              BBGX = (PPTCMS(1)+PTTCMS(1))/ENEWCM
c              BBGY = (PPTCMS(2)+PTTCMS(2))/ENEWCM
c              BBGZ = (PPTCMS(3)+PTTCMS(3))/ENEWCM
c              BGAM = (PPTCMS(4)+PTTCMS(4))/ENEWCM
c     transform interacting nucleons into nucleon-nucleon cm-system
c              CALL DT_DALTRA(BGAM,-BBGX,-BBGY,-BBGZ,
c    &                    PPTCMS(1),PPTCMS(2),PPTCMS(3),PPTCMS(4),PPTOT,
c    &                     PPNEW1,PPNEW2,PPNEW3,PPNEW4)
c              CALL DT_DALTRA(BGAM,-BBGX,-BBGY,-BBGZ,
c    &                    PTTCMS(1),PTTCMS(2),PTTCMS(3),PTTCMS(4),PTTOT,
c    &                     PTNEW1,PTNEW2,PTNEW3,PTNEW4)
c              CALL DT_DALTRA(BGAM,-BBGX,-BBGY,-BBGZ,
c    &                     PPSUB(1),PPSUB(2),PPSUB(3),PPSUB(4),PPTOT,
c    &                     PPSUB1,PPSUB2,PPSUB3,PPSUB4)
c              CALL DT_DALTRA(BGAM,-BBGX,-BBGY,-BBGZ,
c    &                     PTSUB(1),PTSUB(2),PTSUB(3),PTSUB(4),PTTOT,
c    &                     PTSUB1,PTSUB2,PTSUB3,PTSUB4)
c              PTSTCM = SQRT( (PPNEW1+PTNEW1)**2 +
c    &                        (PPNEW2+PTNEW2)**2 +
c    &                        (PPNEW3+PTNEW3)**2 )
c              ETSTCM = SQRT( (PPNEW4+PTNEW4-PTSTCM) *
c    &                        (PPNEW4+PTNEW4+PTSTCM) )
c              PTSTSU = SQRT( (PPSUB1+PTSUB1)**2 +
c    &                        (PPSUB2+PTSUB2)**2 +
c    &                        (PPSUB3+PTSUB3)**2 )
c              ETSTSU = SQRT( (PPSUB4+PTSUB4-PTSTSU) *
c    &                        (PPSUB4+PTSUB4+PTSTSU) )
C              WRITE(*,*) ' mother cmE :'
C              WRITE(*,*) ETSTCM,ENEWCM
C              WRITE(*,*) ' subsystem cmE :'
C              WRITE(*,*) ETSTSU,ENEWSU
C              WRITE(*,*) ' projectile mother :'
C              WRITE(*,*) PPNEW1,PPNEW2,PPNEW3,PPNEW4
C              WRITE(*,*) ' target mother :'
C              WRITE(*,*) PTNEW1,PTNEW2,PTNEW3,PTNEW4
C              WRITE(*,*) ' projectile subsystem:'
C              WRITE(*,*) PPSUB1,PPSUB2,PPSUB3,PPSUB4
C              WRITE(*,*) ' target subsystem:'
C              WRITE(*,*) PTSUB1,PTSUB2,PTSUB3,PTSUB4
C              WRITE(*,*) ' projectile subsystem should be:'
C              WRITE(*,*) ZERO,ZERO,XPSUB*ETSTCM/2.0D0,
C    &                    XPSUB*ETSTCM/2.0D0
C              WRITE(*,*) ' target subsystem should be:'
C              WRITE(*,*) ZERO,ZERO,-XTSUB*ETSTCM/2.0D0,
C    &                    XTSUB*ETSTCM/2.0D0
C              WRITE(*,*) ' subsystem cmE should be: '
C              WRITE(*,*) SQRT(XPSUB*XTSUB)*ETSTCM,XPSUB,XTSUB
c**
c
c     generate complete remnant - nucleon/remnant event with PHOJET

               CALL PHO_EVENT(3,PPTCMS,PTTCMS,DUM,IREJ1)

c
c     copy back original settings of PHOJET process flags
               DO 11 K=1,11
                  IPRON(K,1) = KPRON(K)
   11          CONTINUE
c
c     check if PHOJET has rejected this event
               IF (IREJ1.NE.0) THEN
                  IF (IOULEV(1).GT.0)
     &            WRITE(ErrorOut,
     * '(1X,A)') 'EVENTB:  chain system rejected'
                  WRITE(ErrorOut,*)
     &                 'XPSUB,XTSUB,SECM ',XPSUB,XTSUB,SECM,AMTOT

                  CALL PHO_PREVNT(0)

                  GOTO 9999
               ENDIF
c
c     copy partons and strings from PHOJET common back into DTEVT for
c     external fragmentation
               MO1 = NC
               MO2 = NC+3
c!      uncomment this line for internal phojet-fragmentation
C              CALL DT_GETFSP(MO1,MO2,PP,PT,1)
               NPHOSC = NPHOSC+1
               CALL DT_GETPJE(MO1,MO2,PP,PT,1,NPHOSC,IREJ1)
               IF (IREJ1.NE.0) THEN
                  IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * '(1X,A,I4)')
     &               'EVENTB: CHAIN SYSTEM REJECTED 2'
                  GOTO 9999
               ENDIF
c
c     update statistics counter
               ICEVTG(IDCH(NC),2) = ICEVTG(IDCH(NC),2)+1
c
c-----------------------------------------------------------------------
c two-chain approx. for smaller systems
c
            ELSE
c
               NDTUSC = NDTUSC+1
c   special flag for double-Pomeron statistics
               IPOPO = 0
c
c   pick up flavors at the ends of the two chains
               IFP1 = IDHKK(NC)
               IFT1 = IDHKK(NC+1)
               IFP2 = IDHKK(NC+2)
               IFT2 = IDHKK(NC+3)
c   ..and the indices of the mothers
               MOP1 = NC
               MOT1 = NC+1
               MOP2 = NC+2
               MOT2 = NC+3
               CALL DT_GETCSY(IFP1,PP1,MOP1,IFP2,PP2,MOP2,
     &                     IFT1,PT1,MOT1,IFT2,PT2,MOT2,IREJ1)
c
c   check if this chain system was rejected
               IF (IREJ1.GT.0) THEN
                  IF (IOULEV(1).GT.0) THEN
                     WRITE(ErrorOut,*) 'rejected 1 in EVENTB'
                     WRITE(ErrorOut,'(1X,4(I6,4E12.3,/),E12.3)')
     &                  IFP1,PP1,IFT1,PT1,IFP2,PP2,IFT2,PT2,AMTOT
                  ENDIF
                  IRHHA = IRHHA+1
                  GOTO 9999
               ENDIF
c   the following lines are for sea-sea chains rejected in GETCSY
               IF (IREJ1.EQ.-1) NDTUSC = NDTUSC-1
               ICEVTG(IDCH(NC),1) = ICEVTG(IDCH(NC),1)+1
            ENDIF
c
         ENDIF
c
c     update statistics counter
         ICEVTG(IDCH(NC),0) = ICEVTG(IDCH(NC),0)+1
c
         NC = NC+4
c
    2 CONTINUE
c
c-----------------------------------------------------------------------
c treatment of low-mass chains (if there are any)
c
      IF (NDTUSC.GT.0) THEN
c
c   correct chains of very low masses for possible resonances
         IF (IRESCO.EQ.1) THEN
            CALL DT_EVTRES(IREJ1)
            IF (IREJ1.GT.0) THEN
               IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 2a in EVENTB'
               IRRES(1) = IRRES(1)+1
               GOTO 9999
            ENDIF
         ENDIF
c   fragmentation of low-mass chains
c!  uncomment this line for internal phojet-fragmentation
c   (of course it will still be fragmented by DPMJET-routines but it
c    has to be done here instead of further below)
C        CALL DT_EVTFRA(IREJ1)
C        IF (IREJ1.GT.0) THEN
C           IF (IOULEV(1).GT.0) WRITE(LOUT,*) 'rejected 2b in EVENTB'
C           IRFRAG = IRFRAG+1
C           GOTO 9999
C        ENDIF
      ELSE
c! uncomment this line for internal phojet-fragmentation
C        NPOINT(4) = NHKK+1
         IF (NPOINT(4).LE.NPOINT(3)) NPOINT(4) = NHKK+1
      ENDIF
c
c-----------------------------------------------------------------------
c new di-quark breaking mechanisms
c
      MXLEFT = 2
      CALL DT_CHASTA(0)
      IF ((PDBSEA(1).GT.0.0D0).OR.(PDBSEA(2).GT.0.0D0)
     &                        .OR.(PDBSEA(3).GT.0.0D0)) THEN
         CALL DT_DIQBRK
         MXLEFT = 4
      ENDIF
c
c-----------------------------------------------------------------------
c hadronize this event
c
c   hadronize PHOJET chain systems
      NPYMAX = 0
      NPJE   = NPHOSC/MXPHFR
      IF (MXPHFR.LT.MXLEFT) MXLEFT = 2
      IF (NPJE.GT.1) THEN
         NLEFT = NPHOSC-NPJE*MXPHFR
         DO 20 JFRG=1,NPJE
            NFRG = JFRG*MXPHFR
            IF ((JFRG.EQ.NPJE).AND.(NLEFT.LE.MXLEFT)) THEN
               CALL DT_EVTFRG(1,NPHOSC,NPYMEM,IREJ1)
               IF (IREJ1.GT.0) GOTO 22
               NLEFT = 0
            ELSE
               CALL DT_EVTFRG(1,NFRG,NPYMEM,IREJ1)
               IF (IREJ1.GT.0) GOTO 22
            ENDIF
            IF (NPYMEM.GT.NPYMAX) NPYMAX = NPYMEM
   20    CONTINUE
         IF (NLEFT.GT.0) THEN
            CALL DT_EVTFRG(1,NPHOSC,NPYMEM,IREJ1)
            IF (IREJ1.GT.0) GOTO 22
            IF (NPYMEM.GT.NPYMAX) NPYMAX = NPYMEM
         ENDIF
      ELSE
         CALL DT_EVTFRG(1,NPHOSC,NPYMEM,IREJ1)
         IF (IREJ1.GT.0) GOTO 22
         IF (NPYMEM.GT.NPYMAX) NPYMAX = NPYMEM
      ENDIF
c
c   check max. filling level of jetset common and
c   reduce mxphfr if necessary
      IF (NPYMAX.GT.3000) THEN
         IF (NPYMAX.GT.3500) THEN
            MXPHFR = MAX(1,MXPHFR-2)
         ELSE
            MXPHFR = MAX(1,MXPHFR-1)
         ENDIF
C        WRITE(LOUT,*) ' EVENTB: Mxphfr reduced to ',MXPHFR
      ENDIF
c
c   hadronize DTUNUC chain systems
   23 CONTINUE
      IBACK = MXDTFR
      CALL DT_EVTFRG(2,IBACK,NPYMEM,IREJ2)
      IF (IREJ2.GT.0) GOTO 22
c
c   check max. filling level of jetset common and
c   reduce mxdtfr if necessary
      IF (NPYMEM.GT.3000) THEN
         IF (NPYMEM.GT.3500) THEN
            MXDTFR = MAX(1,MXDTFR-20)
         ELSE
            MXDTFR = MAX(1,MXDTFR-10)
         ENDIF
C        WRITE(LOUT,*) ' EVENTB: Mxdtfr reduced to ',MXDTFR
      ENDIF
c
      IF (IBACK.EQ.-1) GOTO 23
c
   22 CONTINUE
C     CALL DT_EVTFRG(1,IREJ1)
C     CALL DT_EVTFRG(2,IREJ2)
      IF ((IREJ1.GT.0).OR.(IREJ2.GT.0)) THEN
         IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in EVENTB'
         IRFRAG = IRFRAG+1
         GOTO 9999
      ENDIF
c
c get final state particles from /DTEVTP/
c! uncomment this line for internal phojet-fragmentation
C     CALL DT_GETFSP(IDUM,IDUM,PP,PT,2)

      IF (IJPROJ.NE.7)
     &   CALL DT_EMC2(9,10,0,0,0,3,1,0,0,0,0,3,4,88,IREJ3)
C     IF (IREJ3.NE.0) GOTO 9999

      RETURN

 9999 CONTINUE
      IREVT = IREVT+1
      IREJ  = 1
      RETURN
      END
c
c===getpje=============================================================*
c
CDECK  ID>, DT_GETPJE
      SUBROUTINE DT_GETPJE(MO1,MO2,PP,PT,MODE,IPJE,IREJ)

c***********************************************************************
c This subroutine copies PHOJET partons and strings from POEVT1 into   *
c DTEVT1.                                                              *
c      MO1,MO2   indices of first and last mother-parton in DTEVT1     *
c      PP,PT     4-momenta of projectile/target being handled by       *
c                PHOJET                                                *
c This version dated 11.12.99 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY1=1.0D-1,
     &           ZERO=0.0D0,ONE=1.0D0,OHALF=0.5D0)

      LOGICAL LFLIP

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c DTUNUC-PHOJET interface, Lorentz-param. of n-n subsystem
      COMMON /DTLTSU/ BGX,BGY,BGZ,GAM

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c statistics: double-Pomeron exchange
      COMMON /DTFLG2/ INTFLG,IPOPO

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC



C  standard particle data interface
      INTEGER NMXHEP

      PARAMETER (NMXHEP=4000)

      INTEGER NEVHEP,NHEP,ISTHEP,IDHEP,JMOHEP,JDAHEP
      DOUBLE PRECISION PHEP,VHEP
      COMMON /POEVT1/ NEVHEP,NHEP,ISTHEP(NMXHEP),IDHEP(NMXHEP),
     &                JMOHEP(2,NMXHEP),JDAHEP(2,NMXHEP),PHEP(5,NMXHEP),
     &                VHEP(4,NMXHEP)
C  extension to standard particle data interface (PHOJET specific)
      INTEGER IMPART,IPHIST,ICOLOR
      COMMON /POEVT2/ IMPART(NMXHEP),IPHIST(2,NMXHEP),ICOLOR(2,NMXHEP)


C  color string configurations including collapsed strings and hadrons
      INTEGER MSTR
      PARAMETER (MSTR=500)
      INTEGER NPOS,NCODE,IPAR1,IPAR2,IPAR3,IPAR4,NNCH,IBHAD
      COMMON /POSTRG/ NPOS(4,MSTR),NCODE(MSTR),
     &                IPAR1(MSTR),IPAR2(MSTR),IPAR3(MSTR),IPAR4(MSTR),
     &                NNCH(MSTR),IBHAD(MSTR),ISTR

C  general process information
      INTEGER IPROCE,IDNODF,IDIFR1,IDIFR2,IDDPOM,IPRON
      COMMON /POPRCS/ IPROCE,IDNODF,IDIFR1,IDIFR2,IDDPOM,IPRON(15,4)

C  model switches and parameters
      CHARACTER*8 MDLNA
      INTEGER ISWMDL,IPAMDL
      DOUBLE PRECISION PARMDL
      COMMON /POMDLS/ MDLNA(50),ISWMDL(50),PARMDL(400),IPAMDL(400)

C  event debugging information
      INTEGER NMAXD
      PARAMETER (NMAXD=100)
      INTEGER IDEB,KSPOM,KHPOM,KSREG,KHDIR,KACCEP,KSTRG,KHTRG,KSLOO,
     &        KHLOO,KSDPO,KHDPO,KEVENT,KSOFT,KHARD
      COMMON /PODEBG/ IDEB(NMAXD),KSPOM,KHPOM,KSREG,KHDIR,KACCEP,KSTRG,
     &                KHTRG,KSLOO,KHLOO,KSDPO,KHDPO,KEVENT,KSOFT,KHARD


      DIMENSION PP(4),PT(4)
      DATA MAXLOP /10000/

      INHKK = NHKK
      LFLIP = .TRUE.
    1 CONTINUE
      NPVAL = 0
      NTVAL = 0
      IREJ  = 0

c   store initial momenta for energy-momentum conservation check
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(PP(1),PP(2),PP(3),PP(4),1,IDUM1,IDUM2)
         CALL DT_EVTEMC(PT(1),PT(2),PT(3),PT(4),2,IDUM1,IDUM2)
      ENDIF
c copy partons and strings from POEVT1 into DTEVT1
      DO 11 I=1,ISTR
C        IF ((NCODE(I).EQ.-99).AND.(IPAMDL(17).EQ.0)) THEN
         IF (NCODE(I).EQ.-99) THEN
            IDXSTG = NPOS(1,I)
            IDSTG  = IDHEP(IDXSTG)
            PX = PHEP(1,IDXSTG)
            PY = PHEP(2,IDXSTG)
            PZ = PHEP(3,IDXSTG)
            PE = PHEP(4,IDXSTG)
            IF (MODE.LT.0) THEN
               ISTAT = 70000+IPJE
               CALL DT_EVTPUT(2,ISTAT,MO1,MO2,PX,PY,PZ,PE,
     &                        11,IDSTG,0)
               IF (LEMCCK) THEN
                  PX = -PX
                  PY = -PY
                  PZ = -PZ
                  PE = -PE
                  CALL DT_EVTEMC(PX,PY,PZ,PE,2,IDUM1,IDUM2)
               ENDIF
            ELSE
               CALL DT_DALTRA(GAM,BGX,BGY,BGZ,PX,PY,PZ,PE,PTOTMP,
     &                        PPX,PPY,PPZ,PPE)
               ISTAT = 70000+IPJE
               CALL DT_EVTPUT(2,ISTAT,MO1,MO2,PPX,PPY,PPZ,PPE,
     &                        11,IDSTG,0)
               IF (LEMCCK) THEN
                  PX = -PPX
                  PY = -PPY
                  PZ = -PPZ
                  PE = -PPE
                  CALL DT_EVTEMC(PX,PY,PZ,PE,2,IDUM1,IDUM2)
               ENDIF
            ENDIF
            NOBAM(NHKK)   = 0
            IHIST(1,NHKK) = IPHIST(1,IDXSTG)
            IHIST(2,NHKK) = 0
         ELSEIF (NCODE(I).GE.0) THEN
c   indices of partons and string in POEVT1
            IDX1 = ABS(JMOHEP(1,NPOS(1,I)))
            IDX2 = ABS(JMOHEP(2,NPOS(1,I)))
            IF ((IDX1.GT.IDX2).OR.(JMOHEP(2,NPOS(1,I)).GT.0)) THEN
               WRITE(ErrorOut,
     * *) ' GETPJE: IDX1.GT.IDX2 ',IDX1,IDX2,
     &         ' OR JMOHEP(2,NPOS(1,I)).GT.0 ',JMOHEP(2,NPOS(1,I)),' ! '
               STOP ' GETPJE 1'
            ENDIF
            IDXSTG = NPOS(1,I)
c   find "mother" string of the string
            IDXMS1 = ABS(JMOHEP(1,IDX1))
            IDXMS2 = ABS(JMOHEP(1,IDX2))
            IF (IDXMS1.NE.IDXMS2) THEN
               IDXMS1 = IDXSTG
               IDXMS2 = IDXSTG
C              STOP ' GETPJE: IDXMS1.NE.IDXMS2 !'
            ENDIF
c   search POEVT1 for the original hadron of the parton
            ILOOP = 0
            IPOM1 = 0
   14       CONTINUE
            ILOOP = ILOOP+1

            IF (IDHEP(IDXMS1).EQ.990) IPOM1 = 1

            IDXMS1 = ABS(JMOHEP(1,IDXMS1))
            IF ((IDXMS1.NE.1).AND.(IDXMS1.NE.2).AND.
     &          (ILOOP.LT.MAXLOP)) GOTO 14
            IF (ILOOP.EQ.MAXLOP) WRITE(*,*) ' GETPJE: MAXLOP in 1 ! '
            IPOM2 = 0
            ILOOP = 0
   15       CONTINUE
            ILOOP = ILOOP+1

            IF (IDHEP(IDXMS2).EQ.990) IPOM2 = 1

            IF ((ILOOP.EQ.1).OR.(IDHEP(IDXMS2).GE.7777)) THEN
               IDXMS2 = ABS(JMOHEP(2,IDXMS2))
            ELSE
               IDXMS2 = ABS(JMOHEP(1,IDXMS2))
            ENDIF
            IF ((IDXMS2.NE.1).AND.(IDXMS2.NE.2).AND.
     &          (ILOOP.LT.MAXLOP)) GOTO 15
            IF (ILOOP.EQ.MAXLOP) WRITE(*,*) ' GETPJE: MAXLOP in 5 ! '
c   parton 1
            IF (IDXMS1.EQ.1) THEN
               ISPTN1 = ISTHKK(MO1)
               M1PTN1 = MO1
               M2PTN1 = MO1+2
            ELSE
               ISPTN1 = ISTHKK(MO2)
               M1PTN1 = MO2-2
               M2PTN1 = MO2
            ENDIF
c   parton 2
            IF (IDXMS2.EQ.1) THEN
               ISPTN2 = ISTHKK(MO1)
               M1PTN2 = MO1
               M2PTN2 = MO1+2
            ELSE
               ISPTN2 = ISTHKK(MO2)
               M1PTN2 = MO2-2
               M2PTN2 = MO2
            ENDIF
c   check for mis-identified mothers and switch mother indices if necessary
            IF ((IDXMS1.EQ.IDXMS2).AND.(IPROCE.NE.5).AND.(IPROCE.NE.6)
     &          .AND.((IDHEP(IDX1).NE.21).OR.(IDHEP(IDX2).NE.21)).AND.
     &          (LFLIP)) THEN
               IF (PHEP(3,IDX1).GT.PHEP(3,IDX2)) THEN
                  ISPTN1 = ISTHKK(MO1)
                  M1PTN1 = MO1
                  M2PTN1 = MO1+2
                  ISPTN2 = ISTHKK(MO2)
                  M1PTN2 = MO2-2
                  M2PTN2 = MO2
               ELSE
                  ISPTN1 = ISTHKK(MO2)
                  M1PTN1 = MO2-2
                  M2PTN1 = MO2
                  ISPTN2 = ISTHKK(MO1)
                  M1PTN2 = MO1
                  M2PTN2 = MO1+2
               ENDIF
            ENDIF
c   register partons in temporary common
c     parton at chain end
            PX = PHEP(1,IDX1)
            PY = PHEP(2,IDX1)
            PZ = PHEP(3,IDX1)
            PE = PHEP(4,IDX1)
c flag only partons coming from Pomeron with 41/42
C           IF ((IPOM1.NE.0).OR.(NPOS(4,I).GE.4)) THEN
            IF (IPOM1.NE.0) THEN
               ISTX = ABS(ISPTN1)/10
               IMO  = ABS(ISPTN1)-10*ISTX
               ISPTN1 = -(40+IMO)
            ELSE
               IF ((ICOLOR(2,IDX1).EQ.0).OR.(IDHEP(IDX1).EQ.21)) THEN
                  ISTX = ABS(ISPTN1)/10
                  IMO  = ABS(ISPTN1)-10*ISTX
                  IF ((IDHEP(IDX1).EQ.21).OR.
     &                (ABS(IPHIST(1,IDX1)).GE.100)) THEN
                     ISPTN1 = -(60+IMO)
                  ELSE
                     ISPTN1 = -(50+IMO)
                  ENDIF
               ENDIF
            ENDIF
            IF (ISPTN1.EQ.-21) NPVAL = NPVAL+1
            IF (ISPTN1.EQ.-22) NTVAL = NTVAL+1
            IF (MODE.LT.0) THEN
               CALL DT_EVTPUT(ISPTN1,IDHEP(IDX1),M1PTN1,M2PTN1,PX,PY,
     &                        PZ,PE,0,0,0)
            ELSE
               CALL DT_DALTRA(GAM,BGX,BGY,BGZ,PX,PY,PZ,PE,PTOTMP,
     &                        PPX,PPY,PPZ,PPE)
               CALL DT_EVTPUT(ISPTN1,IDHEP(IDX1),M1PTN1,M2PTN1,PPX,PPY,
     &                        PPZ,PPE,0,0,0)
            ENDIF
            IHIST(1,NHKK) = IPHIST(1,IDX1)
            IHIST(2,NHKK) = 0
            DO 19 KK=1,4
               VHKK(KK,NHKK) = VHKK(KK,M2PTN1)
               WHKK(KK,NHKK) = WHKK(KK,M1PTN1)
   19       CONTINUE
            VHKK(4,NHKK) = VHKK(3,M2PTN1)/BLAB-VHKK(3,M1PTN1)/BGLAB
            WHKK(4,NHKK) = -WHKK(3,M1PTN1)/BLAB+WHKK(3,M2PTN1)/BGLAB
            M1STRG = NHKK
c     gluon kinks
            NGLUON = IDX2-IDX1-1
            IF (NGLUON.GT.0) THEN
               DO 17 IGLUON=1,NGLUON
                  IDX   = IDX1+IGLUON
                  IDXMS = ABS(JMOHEP(1,IDX))
                  IF ((IDXMS.NE.1).AND.(IDXMS.NE.2)) THEN
                     ILOOP = 0
   16                CONTINUE
                     ILOOP = ILOOP+1
                     IDXMS = ABS(JMOHEP(1,IDXMS))
                     IF ((IDXMS.NE.1).AND.(IDXMS.NE.2).AND.
     &                   (ILOOP.LT.MAXLOP)) GOTO 16
                     IF (ILOOP.EQ.MAXLOP)
     &                  WRITE(*,*) ' GETPJE: MAXLOP in 3 ! '
                  ENDIF
                  IF (IDXMS.EQ.1) THEN
                     ISPTN = ISTHKK(MO1)
                     M1PTN = MO1
                     M2PTN = MO1+2
                  ELSE
                     ISPTN = ISTHKK(MO2)
                     M1PTN = MO2-2
                     M2PTN = MO2
                  ENDIF
                  PX = PHEP(1,IDX)
                  PY = PHEP(2,IDX)
                  PZ = PHEP(3,IDX)
                  PE = PHEP(4,IDX)
                  IF ((ICOLOR(2,IDX).EQ.0).OR.(IDHEP(IDX).EQ.21)) THEN
                     ISTX = ABS(ISPTN)/10
                     IMO  = ABS(ISPTN)-10*ISTX
                     IF ((IDHEP(IDX).EQ.21).OR.
     &                   (ABS(IPHIST(1,IDX)).GE.100)) THEN
                        ISPTN = -(60+IMO)
                     ELSE
                        ISPTN = -(50+IMO)
                     ENDIF
                  ENDIF
                  IF (ISPTN.EQ.-21) NPVAL = NPVAL+1
                  IF (ISPTN.EQ.-22) NTVAL = NTVAL+1
                  IF (MODE.LT.0) THEN
                     CALL DT_EVTPUT(ISPTN,IDHEP(IDX),M1PTN,M2PTN,
     &                              PX,PY,PZ,PE,0,0,0)
                  ELSE
                     CALL DT_DALTRA(GAM,BGX,BGY,BGZ,PX,PY,PZ,PE,PTOTMP,
     &                              PPX,PPY,PPZ,PPE)
                     CALL DT_EVTPUT(ISPTN,IDHEP(IDX),M1PTN,M2PTN,
     &                              PPX,PPY,PPZ,PPE,0,0,0)
                  ENDIF
                  IHIST(1,NHKK) = IPHIST(1,IDX)
                  IHIST(2,NHKK) = 0
                  DO 20 KK=1,4
                     VHKK(KK,NHKK) = VHKK(KK,M2PTN)
                     WHKK(KK,NHKK) = WHKK(KK,M1PTN)
   20             CONTINUE
                  VHKK(4,NHKK)= VHKK(3,M2PTN)/BLAB-VHKK(3,M1PTN)/BGLAB
                  WHKK(4,NHKK)= -WHKK(3,M1PTN)/BLAB+WHKK(3,M2PTN)/BGLAB
   17          CONTINUE
            ENDIF
c     parton at chain end
            PX = PHEP(1,IDX2)
            PY = PHEP(2,IDX2)
            PZ = PHEP(3,IDX2)
            PE = PHEP(4,IDX2)
c flag only partons coming from Pomeron with 41/42
C           IF ((IPOM2.NE.0).OR.(NPOS(4,I).GE.4)) THEN
            IF (IPOM2.NE.0) THEN
               ISTX = ABS(ISPTN2)/10
               IMO  = ABS(ISPTN2)-10*ISTX
               ISPTN2 = -(40+IMO)
            ELSE
               IF ((ICOLOR(2,IDX2).EQ.0).OR.(IDHEP(IDX2).EQ.21)) THEN
                  ISTX = ABS(ISPTN2)/10
                  IMO  = ABS(ISPTN2)-10*ISTX
                  IF ((IDHEP(IDX2).EQ.21).OR.
     &                (ABS(IPHIST(1,IDX2)).GE.100)) THEN
                     ISPTN2 = -(60+IMO)
                  ELSE
                     ISPTN2 = -(50+IMO)
                  ENDIF
               ENDIF
            ENDIF
            IF (ISPTN2.EQ.-21) NPVAL = NPVAL+1
            IF (ISPTN2.EQ.-22) NTVAL = NTVAL+1
            IF (MODE.LT.0) THEN
               CALL DT_EVTPUT(ISPTN2,IDHEP(IDX2),M1PTN2,M2PTN2,
     &                        PX,PY,PZ,PE,0,0,0)
            ELSE
               CALL DT_DALTRA(GAM,BGX,BGY,BGZ,PX,PY,PZ,PE,PTOTMP,
     &                        PPX,PPY,PPZ,PPE)
               CALL DT_EVTPUT(ISPTN2,IDHEP(IDX2),M1PTN2,M2PTN2,
     &                        PPX,PPY,PPZ,PPE,0,0,0)
            ENDIF
            IHIST(1,NHKK) = IPHIST(1,IDX2)
            IHIST(2,NHKK) = 0
            DO 21 KK=1,4
               VHKK(KK,NHKK) = VHKK(KK,M2PTN2)
               WHKK(KK,NHKK) = WHKK(KK,M1PTN2)
   21       CONTINUE
            VHKK(4,NHKK) = VHKK(3,M2PTN2)/BLAB-VHKK(3,M1PTN2)/BGLAB
            WHKK(4,NHKK) = -WHKK(3,M1PTN2)/BLAB+WHKK(3,M2PTN2)/BGLAB
            M2STRG = NHKK
c   register string
            JSTRG = 100*IPROCE+NCODE(I)
            PX = PHEP(1,IDXSTG)
            PY = PHEP(2,IDXSTG)
            PZ = PHEP(3,IDXSTG)
            PE = PHEP(4,IDXSTG)
            IF (MODE.LT.0) THEN
               ISTAT = 70000+IPJE
               CALL DT_EVTPUT(JSTRG,ISTAT,M1STRG,M2STRG,
     &                        PX,PY,PZ,PE,0,0,0)
               IF (LEMCCK) THEN
                  PX = -PX
                  PY = -PY
                  PZ = -PZ
                  PE = -PE
                  CALL DT_EVTEMC(PX,PY,PZ,PE,2,IDUM1,IDUM2)
               ENDIF
            ELSE
               CALL DT_DALTRA(GAM,BGX,BGY,BGZ,PX,PY,PZ,PE,PTOTMP,
     &                        PPX,PPY,PPZ,PPE)
               ISTAT = 70000+IPJE
               CALL DT_EVTPUT(JSTRG,ISTAT,M1STRG,M2STRG,
     &                        PPX,PPY,PPZ,PPE,0,0,0)
               IF (LEMCCK) THEN
                  PX = -PPX
                  PY = -PPY
                  PZ = -PPZ
                  PE = -PPE
                  CALL DT_EVTEMC(PX,PY,PZ,PE,2,IDUM1,IDUM2)
               ENDIF
            ENDIF
            NOBAM(NHKK)   = 0
            IHIST(1,NHKK) = 0
            IHIST(2,NHKK) = 0
            DO 18 KK=1,4
               VHKK(KK,NHKK) = VHKK(KK,MO2)
               WHKK(KK,NHKK) = WHKK(KK,MO1)
   18       CONTINUE
            VHKK(4,NHKK) = VHKK(3,MO2)/BLAB-VHKK(3,MO1)/BGLAB
            WHKK(4,NHKK) = -WHKK(3,MO1)/BLAB+WHKK(3,MO2)/BGLAB
         ENDIF
   11 CONTINUE

      IF ( ((NPVAL.GT.2).OR.(NTVAL.GT.2)).AND.(LFLIP) ) THEN
         NHKK  = INHKK
         LFLIP = .FALSE.
         GOTO 1
      ENDIF

      IF (LEMCCK) THEN
         IF (UMO.GT.1.0D5) THEN
            CHKLEV = 1.0D0
         ELSE
            CHKLEV = TINY1
         ENDIF
         CALL DT_EVTEMC(DUM1,DUM2,DUM3,CHKLEV,-1,1000,IREJ2)

         IF (IREJ2.GT.ZERO) CALL PHO_PREVNT(0)

      ENDIF

c internal statistics
c   dble-Po statistics.
      IF (IPROCE.NE.4) IPOPO = 0

      INTFLG = IPROCE
      IDCHSY = IDCH(MO1)
      IF ((IPROCE.GE.1).AND.(IPROCE.LE.8)) THEN
         ICEVTG(IDCHSY,IPROCE+2) = ICEVTG(IDCHSY,IPROCE+2)+1
      ELSE
         WRITE(ErrorOut,1000) IPROCE,NEVHKK,MO1
 1000    FORMAT(1X,'GETFSP:   WARNING! INCONS. PROCESS ID. (',I2,
     &          ') AT EVT(CHAIN) ',I6,'(',I2,')')
      ENDIF
      IF (IPROCE.EQ.5) THEN
         IF ((IDIFR1.GE.1).AND.(IDIFR1.LE.3)) THEN
            ICEVTG(IDCHSY,18+IDIFR1) = ICEVTG(IDCHSY,18+IDIFR1)+1
         ELSE
C           WRITE(LOUT,1001) IPROCE,IDIFR1,IDIFR2
 1001       FORMAT(1X,'GETFSP:   WARNING! INCONS. DIFFRAC. ID. ',
     &             '(IPROCE,IDIFR1,IDIFR2=',3I3,')')
         ENDIF
      ELSEIF (IPROCE.EQ.6) THEN
         IF ((IDIFR2.GE.1).AND.(IDIFR2.LE.3)) THEN
            ICEVTG(IDCHSY,21+IDIFR2) = ICEVTG(IDCHSY,21+IDIFR2)+1
         ELSE
C           WRITE(LOUT,1001) IPROCE,IDIFR1,IDIFR2
         ENDIF
      ELSEIF (IPROCE.EQ.7) THEN
         IF ((IDIFR1.GE.1).AND.(IDIFR1.LE.3).AND.
     &       (IDIFR2.GE.1).AND.(IDIFR2.LE.3)) THEN
            IF ((IDIFR1.EQ.1).AND.(IDIFR2.EQ.1))
     &         ICEVTG(IDCHSY,25) = ICEVTG(IDCHSY,25)+1
            IF ((IDIFR1.EQ.2).AND.(IDIFR2.EQ.2))
     &         ICEVTG(IDCHSY,26) = ICEVTG(IDCHSY,26)+1
            IF ((IDIFR1.EQ.1).AND.(IDIFR2.EQ.2))
     &         ICEVTG(IDCHSY,27) = ICEVTG(IDCHSY,27)+1
            IF ((IDIFR1.EQ.2).AND.(IDIFR2.EQ.1))
     &         ICEVTG(IDCHSY,28) = ICEVTG(IDCHSY,28)+1
         ELSE
            WRITE(ErrorOut,1001) IPROCE,IDIFR1,IDIFR2
         ENDIF
      ENDIF
      IF ((IDIFR1+IDIFR2.EQ.0).AND.(KHDIR.GE.1).AND.(KHDIR.LE.3))
     &                                                       THEN
         ICEVTG(IDCHSY,10+KHDIR) = ICEVTG(IDCHSY,10+KHDIR)+1
         ICEVTG(IDCHSY,10+KHDIR) = ICEVTG(IDCHSY,10+KHDIR)+1
         ICEVTG(IDCHSY,10+KHDIR) = ICEVTG(IDCHSY,10+KHDIR)+1
      ENDIF
      ICEVTG(IDCHSY,14) = ICEVTG(IDCHSY,14)+KSPOM
      ICEVTG(IDCHSY,15) = ICEVTG(IDCHSY,15)+KHPOM
      ICEVTG(IDCHSY,16) = ICEVTG(IDCHSY,16)+KSREG
      ICEVTG(IDCHSY,17) = ICEVTG(IDCHSY,17)+(KSTRG+KHTRG)
      ICEVTG(IDCHSY,18) = ICEVTG(IDCHSY,18)+(KSLOO+KHLOO)

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===phoini=============================================================*
c
CDECK  ID>, DT_PHOINI
      SUBROUTINE DT_PHOINI

c***********************************************************************
c Initialization PHOJET-event generator for nucleon-nucleon interact.  *
c This version dated 16.11.95 is written by S. Roesler                 *
c Last change: s.r. 21.01.01                                           *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ZERO=0.0D0,ONE=1.0D0)

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD

c
c parameters for cascade calculations:
c maximum mumber of PDF's which can be defined in phojet (limited
c by the dimension of ipdfs in pho_setpdf)
      PARAMETER (MAXPDF = 20)
c PDF parametrization and number of set for the first 30 hadrons in
c the bamjet-code list
c   negative numbers mean that the PDF is set in phojet,
c   zero stands for "not a hadron"
      DIMENSION IPARPD(30),ISETPD(30)
c PDF parametrization
      DATA IPARPD /
     &  -5,-5, 0, 0, 0, 0,-5,-5,-5, 0, 0, 5,-5,-5, 5, 5, 5, 5, 5, 5,
     &   5, 5,-5, 5, 5, 0, 0, 0, 0, 0/
c number of set
      DATA ISETPD /
     &  -6,-6, 0, 0, 0, 0,-3,-6,-6, 0, 0, 2,-2,-2, 2, 2, 6, 6, 2, 6,
     &   6, 6,-2, 2, 2, 0, 0, 0, 0, 0/

c*PHOJET105a
C     COMMON /GLOCMS/ XECM,XPCM,PMASS(2),PVIRT(2),IFPAP(2),IFPAB(2)
C     PARAMETER ( MAXPRO = 16 )
C     PARAMETER ( MAXTAB = 20 )
C     COMMON /HAXSEC/ XSECTA(4,-1:MAXPRO,4,MAXTAB),XSECT(6,-1:MAXPRO),
C    &                MXSECT(0:4,-1:MAXPRO,4),ECMSH(4,MAXTAB),ISTTAB
C     CHARACTER*8 MDLNA
C     COMMON /MODELS/ MDLNA(50),ISWMDL(50),PARMDL(200),IPAMDL(100)
C     COMMON /PROCES/ IPROCE,IDNODF,IDIFR1,IDIFR2,IDDPOM,IPRON(15)
c*PHOJET110
C  global event kinematics and particle IDs
      INTEGER IFPAP,IFPAB
      DOUBLE PRECISION ECM,PCM,PMASS,PVIRT
      COMMON /POGCMS/ ECM,PCM,PMASS(2),PVIRT(2),IFPAP(2),IFPAB(2)

C  hard cross sections and MC selection weights
      INTEGER MAX_PRO_2
      PARAMETER ( MAX_PRO_2 = 16 )
      INTEGER IHA_LAST,IHB_LAST,MH_PRO_ON,MH_TRIED,
     &  MH_ACC_1,MH_ACC_2
      DOUBLE PRECISION HFAC,HWGX,HSIG,HDPT,HECM_LAST,HQ2A_LAST,HQ2B_LAST
      COMMON /POHRCS/ HFAC(-1:MAX_PRO_2),HWGX(-1:MAX_PRO_2),
     &  HSIG(-1:MAX_PRO_2),HDPT(-1:MAX_PRO_2),
     &  HECM_LAST,HQ2A_LAST,HQ2B_LAST,IHA_LAST,IHB_LAST,
     &  MH_PRO_ON(-1:MAX_PRO_2,0:4),MH_TRIED(-1:MAX_PRO_2,0:4),
     &  MH_ACC_1(-1:MAX_PRO_2,0:4),MH_ACC_2(-1:MAX_PRO_2,0:4)

C  model switches and parameters
      CHARACTER*8 MDLNA
      INTEGER ISWMDL,IPAMDL
      DOUBLE PRECISION PARMDL
      COMMON /POMDLS/ MDLNA(50),ISWMDL(50),PARMDL(400),IPAMDL(400)

C  general process information
      INTEGER IPROCE,IDNODF,IDIFR1,IDIFR2,IDDPOM,IPRON
      COMMON /POPRCS/ IPROCE,IDNODF,IDIFR1,IDIFR2,IDDPOM,IPRON(15,4)

c*
      DIMENSION PP(4),PT(4)

      LOGICAL LSTART
      DATA LSTART /.TRUE./

      IJP = IJPROJ
      IJT = IJTARG
      Q2  = VIRT
c lepton-projectiles: initialize real photon instead
      IF ((IJP.EQ.3).OR.(IJP.EQ.4).OR.(IJP.EQ.10).OR.(IJP.EQ.11)) THEN
         IJP = 7
         Q2  = ZERO
      ENDIF

      IF (LPHOIN) CALL PHO_INIT(-1,IDUM)

c switch Reggeon off
C     IPAMDL(3)= 0
      IF (IP.EQ.1) THEN
         IFPAP(1) = IDT_IPDGHA(IJP)
         IFPAB(1) = IJP
      ELSE
         IFPAP(1) = 2212
         IFPAB(1) = IDT_ICIHAD(IFPAP(1))
      ENDIF
      PMASS(1) = AAM(IFPAB(1))-SQRT(Q2)
      PVIRT(1) = PMASS(1)**2
      IF (IT.EQ.1) THEN
         IFPAP(2) = IDT_IPDGHA(IJT)
         IFPAB(2) = IJT
      ELSE
         IFPAP(2) = 2212
         IFPAB(2) = IDT_ICIHAD(IFPAP(2))
      ENDIF
      PMASS(2) = AAM(IFPAB(2))
      PVIRT(2) = ZERO
      DO 1 K=1,4
         PP(K) = ZERO
         PT(K) = ZERO
    1 CONTINUE
c get max. possible momenta of incoming particles to be used for PHOJET ini.
      PPF = ZERO
      PTF = ZERO
      SCPF= 1.5D0
      IF (UMO.GE.1.E5) THEN
         SCPF= 5.0D0
      ENDIF
      IF (NCOMPO.GT.0) THEN
         DO 2 I=1,NCOMPO
            IF (IT.GT.1) THEN
               CALL DT_NCLPOT(IEMUCH(I),IEMUMA(I),ITZ,IT,ZERO,ZERO,0)
            ELSE
               CALL DT_NCLPOT(IPZ,IP,IEMUCH(I),IEMUMA(I),ZERO,ZERO,0)
            ENDIF
            PPFTMP = MAX(PFERMP(1),PFERMN(1))
            PTFTMP = MAX(PFERMP(2),PFERMN(2))
            IF (PPFTMP.GT.PPF) PPF = PPFTMP
            IF (PTFTMP.GT.PTF) PTF = PTFTMP
    2    CONTINUE
      ELSE
         CALL DT_NCLPOT(IPZ,IP,ITZ,IT,ZERO,ZERO,0)
         PPF = MAX(PFERMP(1),PFERMN(1))
         PTF = MAX(PFERMP(2),PFERMN(2))
      ENDIF
      PTF = -PTF
      PPF = SCPF*PPF
      PTF = SCPF*PTF
      IF (IJP.EQ.7) THEN
         AMP2  = SIGN(PMASS(1)**2,PMASS(1))
         PP(3) = PPCM
         PP(4) = SQRT(AMP2+PP(3)**2)
      ELSE
         EPF = SQRT(PPF**2+PMASS(1)**2)
         CALL DT_LTNUC(PPF,EPF,PP(3),PP(4),2)
      ENDIF
      ETF = SQRT(PTF**2+PMASS(2)**2)
      CALL DT_LTNUC(PTF,ETF,PT(3),PT(4),3)
      ECMINI = SQRT((PP(4)+PT(4))**2-(PP(1)+PT(1))**2-
     &              (PP(2)+PT(2))**2-(PP(3)+PT(3))**2)
      IF (LSTART) THEN
         WRITE(ErrorOut,1001) IP,IPZ,SCPF,PPF,PP
 1001    FORMAT(
     &      ' DT_PHOINI:    PHOJET INITIALIZED FOR PROJECTILE A,Z = ',
     &      I3,',',I2,/,F4.1,'XP_F(MAX) = ',E10.3,'  P(MAX) = ',4E10.3)
         IF (NCOMPO.GT.0) THEN
            WRITE(ErrorOut,1002) SCPF,PTF,PT
         ELSE
            WRITE(ErrorOut,1003) IT,ITZ,SCPF,PTF,PT
         ENDIF
 1002    FORMAT(
     &      ' DT_PHOINI:    PHOJET INITIALIZED FOR TARGET EMULSION  ',
     &          /,F4.1,'XP_F(MAX) = ',E10.3,'  P(MAX) = ',4E10.3)
 1003    FORMAT(
     &      ' DT_PHOINI:    PHOJET INITIALIZED FOR TARGET     A,Z = ',
     &      I3,',',I2,/,F4.1,'XP_F(MAX) = ',E10.3,'  P(MAX) = ',4E10.3)
         WRITE(ErrorOut,1004) ECMINI
 1004    FORMAT(' E_CM = ',E10.3)
         IF (IJP.EQ.8) WRITE(ErrorOut,1005)
 1005    FORMAT(
     &      ' DT_PHOINI: WARNING! PROTON PARAMETERS USED FOR NEUTRON',
     &          ' PROJECTILE')
         LSTART = .FALSE.
      ENDIF
c switch off new diffractive cross sections at low energies for nuclei
c (temporary solution)
      IF ((ISWMDL(30).NE.0).AND.((IP.GT.1).OR.(IT.GT.1))) THEN
         WRITE(ErrorOut,'(1X,A)')
     &      ' DT_PHOINI: MODEL-SWITCH 30 FOR NUCLEI RE-SET !'
         CALL PHO_SETMDL(30,0,1)
      ENDIF
c
C     IF (IJP.EQ.7) THEN
C        AMP2  = SIGN(PMASS(1)**2,PMASS(1))
C        PP(3) = PPCM
C        PP(4) = SQRT(AMP2+PP(3)**2)
C     ELSE
C        PFERMX = ZERO
C        IF (IP.GT.1) PFERMX = 0.5D0
C        EFERMX = SQRT(PFERMX**2+PMASS(1)**2)
C        CALL DT_LTNUC(PFERMX,EFERMX,PP(3),PP(4),2)
C     ENDIF
C     PFERMX = ZERO
C     IF ((IT.GT.1).OR.(NCOMPO.GT.0)) PFERMX = -0.5D0
C     EFERMX = SQRT(PFERMX**2+PMASS(2)**2)
C     CALL DT_LTNUC(PFERMX,EFERMX,PT(3),PT(4),3)
c*sr 26.10.96
      ISAV = IPAMDL(13)
      IF ((ISHAD(2).EQ.1).AND.
     &   ((IJPROJ.EQ. 7).OR.(IJPROJ.EQ.3).OR.(IJPROJ.EQ.4).OR.
     &    (IJPROJ.EQ.10).OR.(IJPROJ.EQ.11))) IPAMDL(13) = 1
c*

      CALL PHO_EVENT(-1,PP,PT,SIGMAX,IREJ1)

c*sr 26.10.96
      IPAMDL(13) = ISAV
c*
c
c patch for cascade calculations:
c define parton distribution functions for other hadrons, i.e. other
c then defined already in phojet
      IF (IOGLB.EQ.100) THEN
         WRITE(ErrorOut,1006)
 1006    FORMAT(/,1X,'PHOINI: ADDITIONAL PARTON DISTRIBUTION FUNCTIONS',
     &          ' ASSIGED (ID,IPAR,ISET)',/)
         NPDF = 0
         DO 3 I=1,30
            IF (IPARPD(I).NE.0) THEN
               NPDF = NPDF+1
               IF (NPDF.GT.MAXPDF) STOP ' PHOINI: NPDF > MAXPDF !'
               IF ((IPARPD(I).GT.0).AND.(ISETPD(I).GT.0)) THEN
                  IDPDG = IDT_IPDGHA(I)
                  IPAR  = IPARPD(I)
                  ISET  = ISETPD(I)
                  WRITE(ErrorOut,
     * '(13X,A8,3I6)') ANAME(I),IDPDG,IPAR,ISET
                  CALL PHO_SETPDF(IDPDG,IDUM,IPAR,ISET,0,0,-1)
               ENDIF
            ENDIF
    3    CONTINUE
      ENDIF


C     CALL PHO_PHIST(-1,SIGMAX)

      IF (IREJ1.NE.0) THEN
         WRITE(ErrorOut,1000)
 1000    FORMAT(1X,'PHOINI:   PHOJET EVENT-INITIALIZATION FAILED!')
         STOP
      ENDIF

      RETURN
      END

c
c===eventd=============================================================*
c
CDECK  ID>, DT_EVENTD
      SUBROUTINE DT_EVENTD(IREJ)

c***********************************************************************
c Quasi-elastic neutrino nucleus scattering.                           *
c This version dated 29.04.00 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,TINY5=1.0D-5)
      PARAMETER (SQTINF=1.0D+15)

      LOGICAL LFIRST

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME


      PARAMETER (MAXLND=4000)
      COMMON/PYJETS/N,NPAD,K(MAXLND,5),P(MAXLND,5),V(MAXLND,5)


c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c steering flags for qel neutrino scattering modules
      COMMON /QNEUTO/ DSIGSU,DSIGMC,NDSIG,NEUTYP,NEUDEC

      COMMON /QNPOL/ POLARX(4),PMODUL


      INTEGER PYK


      DATA LFIRST /.TRUE./

      IREJ = 0

      IF (LFIRST) THEN
         LFIRST = .FALSE.
         CALL DT_MASS_INI
      ENDIF

c JETSET parameter
      CALL DT_INITJS(0)

c interacting target nucleon
      LTYP = NEUTYP
      IF (NEUDEC.LE.9) THEN
         IF ((LTYP.EQ.1).OR.(LTYP.EQ.3).OR.(LTYP.EQ.5)) THEN
            NUCTYP = 2112
            NUCTOP = 2
         ELSE
            NUCTYP = 2212
            NUCTOP = 1
         ENDIF
      ELSE
         RTYP  = DT_RNDM(RTYP)
         ZFRAC = DBLE(ITZ)/DBLE(IT)
         IF (RTYP.LE.ZFRAC) THEN
            NUCTYP = 2212
            NUCTOP = 1
         ELSE
            NUCTYP = 2112
            NUCTOP = 2
         ENDIF
      ENDIF

c select first nucleon in list with matching id and reset all other
c nucleons which have been marked as "wounded" by ININUC
      IFOUND = 0
      DO 1 I=1,NHKK
         IF ((IDHKK(I).EQ.NUCTYP).AND.(IFOUND.EQ.0)) THEN
            ISTHKK(I) = 12
            IFOUND    = 1
            IDX = I
         ELSE
            IF (ISTHKK(I).EQ.12) ISTHKK(I) = 14
         ENDIF
    1 CONTINUE
      IF (IFOUND.EQ.0)
     &   STOP ' EVENTD: INTERACTING TARGET NUCLEON NOT FOUND! '

c correct position of proj. lepton: assume position of target nucleon
      DO 3 I=1,4
         VHKK(I,1) = VHKK(I,IDX)
         WHKK(I,1) = WHKK(I,IDX)
    3 CONTINUE

c load initial momenta for conservation check
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(ZERO,ZERO,PPROJ,EPROJ,1,IDUM,IDUM)
         CALL DT_EVTEMC(PHKK(1,IDX),PHKK(2,IDX),PHKK(3,IDX),PHKK(4,IDX),
     &                                                      2,IDUM,IDUM)
      ENDIF

c quasi-elastic scattering
      IF (NEUDEC.LT.9) THEN
         CALL DT_QEL_POL(EPROJ,LTYP,PHKK(1,IDX),PHKK(2,IDX),PHKK(3,IDX),
     &                                          PHKK(4,IDX),PHKK(5,IDX))
c  CC event on p or n
      ELSEIF (NEUDEC.EQ.10) THEN
         CALL DT_GEN_DELTA(EPROJ,LTYP,NUCTOP,1,PHKK(1,IDX),PHKK(2,IDX),
     &                     PHKK(3,IDX),PHKK(4,IDX),PHKK(5,IDX))
c  NC event on p or n
      ELSEIF (NEUDEC.EQ.11) THEN
         CALL DT_GEN_DELTA(EPROJ,LTYP,NUCTOP,2,PHKK(1,IDX),PHKK(2,IDX),
     &                     PHKK(3,IDX),PHKK(4,IDX),PHKK(5,IDX))
      ENDIF

c get final state particles from Lund-common and write them into HKKEVT
      NPOINT(1) = NHKK+1
      NPOINT(4) = NHKK+1

      NLINES = PYK(0,1)

      NHKK0  = NHKK+1
      DO 4 I=4,NLINES
         IF (K(I,1).EQ.1) THEN
            ID = K(I,2)
            PX = P(I,1)
            PY = P(I,2)
            PZ = P(I,3)
            PE = P(I,4)
            CALL DT_EVTPUT(1,ID,1,IDX,PX,PY,PZ,PE,0,0,0)
            IDBJ = IDT_ICIHAD(ID)
            EKIN = PHKK(4,NHKK)-PHKK(5,NHKK)
            IF ((IDBJ.EQ.1).OR.(IDBJ.EQ.8)) THEN
               IF (EKIN.LE.EPOT(2,IDBJ)) ISTHKK(NHKK) = 16
            ENDIF
            VHKK(1,NHKK) = VHKK(1,IDX)
            VHKK(2,NHKK) = VHKK(2,IDX)
            VHKK(3,NHKK) = VHKK(3,IDX)
            VHKK(4,NHKK) = VHKK(4,IDX)
C           IF (I.EQ.4) THEN
C              WHKK(1,NHKK) = POLARX(1)
C              WHKK(2,NHKK) = POLARX(2)
C              WHKK(3,NHKK) = POLARX(3)
C              WHKK(4,NHKK) = POLARX(4)
C           ELSE
               WHKK(1,NHKK) = WHKK(1,IDX)
               WHKK(2,NHKK) = WHKK(2,IDX)
               WHKK(3,NHKK) = WHKK(3,IDX)
               WHKK(4,NHKK) = WHKK(4,IDX)
C           ENDIF
            IF (LEMCCK) CALL DT_EVTEMC(-PX,-PY,-PZ,-PE,2,IDUM,IDUM)
         ENDIF
    4 CONTINUE

      IF (LEMCCK) THEN
         CHKLEV = TINY5
         CALL DT_EVTEMC(DUM,DUM,DUM,CHKLEV,-1,778,IREJ1)
         IF (IREJ1.NE.0) CALL DT_EVTOUT(4)
      ENDIF

c transform momenta into cms (as required for inc etc.)
      DO 5 I=NHKK0,NHKK
         IF (ISTHKK(I).EQ.1) THEN
            CALL DT_LTNUC(PHKK(3,I),PHKK(4,I),PZ,PE,3)
            PHKK(3,I) = PZ
            PHKK(4,I) = PE
         ENDIF
    5 CONTINUE

      RETURN
      END
c
c===kkevnt=============================================================*
c
CDECK  ID>, DT_KKEVNT
      SUBROUTINE DT_KKEVNT(KKMAT,IREJ)

c***********************************************************************
c Treatment of complete nucleus-nucleus or hadron-nucleus scattering   *
c without nuclear effects (one event).                                 *
c This subroutine is an update of the previous version (KKEVT) written *
c by J. Ranft/ H.-J. Moehring.                                         *
c This version dated 20.04.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10)


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF

c interface HADRIN-DPM
      COMMON /HNTHRE/ EHADTH,EHADLO,EHADHI,INTHAD,IDXTA

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c coordinates of nucleons
      COMMON /DTNUCO/ PKOO(3,MAXNCL),TKOO(3,MAXNCL)

c interface between Glauber formalism and DPM
      COMMON /DTGLIF/ JSSH(MAXNCL),JTSH(MAXNCL),
     &                INTER1(MAXINT),INTER2(MAXINT)

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c central particle production, impact parameter biasing
      COMMON /DTIMPA/ BIMIN,BIMAX,XSFRAC,ICENTR

c*temporary
c statistics: Glauber-formalism
      COMMON /DTSTA3/ ICWP,ICWT,NCSY,ICWPG,ICWTG,ICIG,IPGLB,ITGLB,NGLB

c*

      DATA NEVOLD,IPOLD,ITOLD,JJPOLD,EPROLD /4*0,0.0D0/
c///////////////
c      write(0,*) ' DT_KKEVNT(KKMAT,IREJ)'
c      write(0,*)  KKMAT
c/////////////

      IREJ   = 0
      ICREQU = ICREQU+1
      NC     = 0
c             following values are used
c      MCGENE=  2  EHADTH=  4.10000000000000   EHADHI= 6.00000000000000
c      ICENTR=    0


    1 CONTINUE
      ICSAMP = ICSAMP+1
      NC     = NC+1
ccc &&&&&&& kk
ccc      IF (MOD(NC,10).EQ.0 ) THEN
      IF (MOD(NC,10).EQ.0  .and.  NC .gt. 100) THEN
cccc
         WRITE(ErrorOut,1000) NEVHKK, NC
 1000    FORMAT(1X,'KKEVNT: EVENT ',I8,' REJECTED ', i8,
     *       ' TIMES')
         GOTO 9999
      ENDIF

c initialize DTEVT1/DTEVT2
      CALL DT_EVTINI

c We need the following only in order to sample nucleon coordinates.
c However we don't have parameters (cross sections, slope etc.)
c for neutrinos available. Therefore switch projectile to proton
c in this case.
      IF (MCGENE.EQ.4) THEN
         JJPROJ = 1
      ELSE
         JJPROJ = IJPROJ
      ENDIF

   10 CONTINUE
      IF ( (NEVHKK.NE.NEVOLD).OR.(ICENTR.GT.0).OR.
c make sure that Glauber-formalism is called each time the interaction
c configuration changed
     &     (IP.NE.IPOLD).OR.(IT.NE.ITOLD).OR.(JJPROJ.NE.JJPOLD).OR.
     &     (ABS(EPROJ-EPROLD).GT.TINY10) ) THEN
c sample number of nucleon-nucleon coll. according to Glauber-form.
c///////////////////
!         if(IT .eq. 1) then
!            write(0,*) 'dt_KKEvnt '
!            write(0,*) ' IT=',IT
!            write(0,*) 'ip=',IP, ' JJPROJ=',JJPROJ, ' BIMPAC=',BIMPAC
!c
!            write(0,*) 'nn =',NN, ' NP=',NP, ' NT=',NT, ' JSSM=',JSSM, 
!     *      ' JTSH=', JTSH, ' KKMAT=',KKMAT, ' EPROJ=',EPROJ
!         endif
cc//////////////////////////
         CALL DT_GLAUBE(IP,IT,JJPROJ,BIMPAC,NN,NP,NT,JSSH,JTSH,KKMAT)
C&&&&&&&&&&&&&&&&&& KK
C           in some case pion projectile and H target goes into loop
C           in that case imact parameter is set to be -1.
C           Then, force to set something to workaround 
         if(BIMPAC .eq. -1.) then
            BIMPAC=  5.921610841295514E-002
            NN = 1
            NP = 1
            NT = 1
            JSSM = 0 
            JTSH(1) = 1
         endif
C&&&&&&&&&&&&&&&&&&&
c///////////////////
c         if(IT .eq. 1) then
c            write(*,*) ' IT=',IT
c            write(*,*) 'ip=',IP, ' JJPROJ=',JJPROJ, ' BIMPAC=',BIMPAC
c
c            write(*,*) 'nn =',NN, ' NP=',NP, ' NT=',NT, ' JSSM=',JSSM, 
c     *      ' JTSH=', JTSH, ' KKMAT=',KKMAT, ' EPROJ=',EPROJ
c         endif
c//////////////
         NWTSAM = NN
         NWASAM = NP
         NWBSAM = NT
         NEVOLD = NEVHKK
         IPOLD  = IP
         ITOLD  = IT
         JJPOLD = JJPROJ
         EPROLD = EPROJ
      ENDIF

c force diffractive particle production in h-K interactions
      IF (((ABS(ISINGD).GT.1).OR.(ABS(IDOUBD).GT.1)).AND.
     &    (IP.EQ.1).AND.(NN.NE.1)) THEN
         NEVOLD = 0
         GOTO 10
      ENDIF

c check number of involved proj. nucl. (NP) if central prod.is requested
      IF (ICENTR.GT.0) THEN
         CALL DT_CHKCEN(IP,IT,NP,NT,IBACK)
         IF (IBACK.GT.0) GOTO 10
      ENDIF

c get initial nucleon-configuration in projectile and target
c rest-system (including Fermi-momenta if requested)
      CALL DT_ININUC(IJPROJ,IP,IPZ,PKOO,JSSH,1)
      MODE = 2
      IF (EPROJ.LE.EHADTH) MODE = 3
      CALL DT_ININUC(IJTARG,IT,ITZ,TKOO,JTSH,MODE)

      IF ((MCGENE.NE.3).AND.(MCGENE.NE.4)) THEN

c activate HADRIN at low energies (implemented for h-N scattering only)

         IF (EPROJ.LE.EHADHI) THEN
            IF (EHADTH.LT.ZERO) THEN
c   smooth transition btwn. DPM and HADRIN
               FRAC = (EPROJ-EHADLO)/(EHADHI-EHADLO)
               RR   = DT_RNDM(FRAC)
               IF (RR.GT.FRAC) THEN
                  IF (IP.EQ.1) THEN
                     CALL DT_HADCOL(IJPROJ,PPROJ,IDXTA,IREJ1)
                     IF (IREJ1.GT.0) GOTO 1
                     RETURN
                  ELSE
                     WRITE(ErrorOut,1001) IP,IT,EPROJ,EHADTH
                  ENDIF
               ENDIF
            ELSE

c   fixed threshold for onset of production via HADRIN
               IF (EPROJ.LE.EHADTH) THEN
                  IF (IP.EQ.1) THEN
                     CALL DT_HADCOL(IJPROJ,PPROJ,IDXTA,IREJ1)
                     IF (IREJ1.GT.0) GOTO 1
                     RETURN
                  ELSE
                     WRITE(ErrorOut,1001) IP,IT,EPROJ,EHADTH
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
 1001    FORMAT(1X,'KKEVNT:   WARNING! INTERACTION OF PROJ. (M=',
     &          I3,') WITH TARGET (M=',I3,')',/,11X,
     &          'AT E_LAB=',F5.1,'GEV (THRESHOLD-ENERGY: ',F3.1,
     &          'GEV) CANNOT BE HANDLED')

c sampling of momentum-x fractions & flavors of chain ends
         CALL DT_SPLPTN(NN)

c Lorentz-transformation of wounded nucleons into nucl.-nucl. cms
         CALL DT_NUC2CM

c collect momenta of chain ends and put them into DTEVT1
         CALL DT_GETPTN(IP,NN,NCSY,IREJ1)
         IF (IREJ1.NE.0) GOTO 1

      ENDIF
c handle chains including fragmentation (two-chain approximation)
      IF (MCGENE.EQ.1) THEN
c  two-chain approximation
         CALL DT_EVENTA(IJPROJ,IP,IT,NCSY,IREJ1)
         IF (IREJ1.NE.0) THEN
            IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in KKEVNT'
            GOTO 1
         ENDIF
      ELSEIF (MCGENE.EQ.2) THEN
c  multiple-Po exchange including minijets
         CALL DT_EVENTB(NCSY,IREJ1)
         IF (IREJ1.NE.0) THEN
            IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 2 in KKEVNT'
            GOTO 1
         ENDIF
      ELSEIF (MCGENE.EQ.3) THEN

         STOP ' THIS VERSION DOES NOT CONTAIN LEPTO !'

      ELSEIF (MCGENE.EQ.4) THEN
c  quasi-elastic neutrino scattering
         CALL DT_EVENTD(IREJ1)
         IF (IREJ1.NE.0) THEN
            IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 4 in KKEVNT'
            GOTO 1
         ENDIF
      ELSE
         WRITE(ErrorOut,1002) MCGENE
 1002    FORMAT(1X,'KKEVNT:   WARNING! EVENT-GENERATOR',I4,
     &         ' NOT AVAILABLE - PROGRAM STOPPED')
         STOP
      ENDIF

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===chkcen=============================================================*
c
CDECK  ID>, DT_CHKCEN
      SUBROUTINE DT_CHKCEN(IP,IT,NP,NT,IBACK)

c***********************************************************************
c Check of number of involved projectile nucleons if central production*
c is requested.                                                        *
c Adopted from a part of the old KKEVT routine which was written by    *
c J. Ranft/H.-J.Moehring.                                              *
c This version dated 13.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c central particle production, impact parameter biasing
      COMMON /DTIMPA/ BIMIN,BIMAX,XSFRAC,ICENTR


      IBACK = 0

c old version
      IF (ICENTR.EQ.2) THEN
         IF (IP.LT.IT) THEN
            IF (IP.LE.8) THEN
               IF (NP.LT.IP-1) IBACK = 1
            ELSEIF (IP.LE.16) THEN
               IF (NP.LT.IP-2) IBACK = 1
            ELSEIF (IP.LE.32) THEN
               IF (NP.LT.IP-3) IBACK = 1
            ELSEIF (IP.GE.33) THEN
               IF (NP.LT.IP-5) IBACK = 1
            ENDIF
         ELSEIF (IP.EQ.IT) THEN
            IF (IP.EQ.32) THEN
               IF ((NP.LT.22).OR.(NT.LT.22)) IBACK = 1
            ELSE
               IF (NP.LT.IP-IP/8) IBACK = 1
            ENDIF
         ELSEIF (ABS(IP-IT).LT.3) THEN
            IF (NP.LT.IP-IP/8) IBACK = 1
         ENDIF
      ELSE
c new version (DPMJET, 5.6.99)
         IF (IP.LT.IT) THEN
            IF (IP.LE.8) THEN
               IF (NP.LT.IP-1) IBACK = 1
            ELSEIF (IP.LE.16) THEN
               IF (NP.LT.IP-2) IBACK = 1
            ELSEIF (IP.LT.32) THEN
               IF (NP.LT.IP-3) IBACK = 1
            ELSEIF (IP.GE.32) THEN
               IF (IT.LE.150) THEN
c   Example: S-Ag
                  IF (NP.LT.IP-1) IBACK = 1
               ELSE
c   Example: S-Au
                  IF (NP.LT.IP) IBACK = 1
               ENDIF
            ENDIF
         ELSEIF (IP.EQ.IT) THEN
c   Example: S-S
           IF (IP.EQ.32) THEN
              IF ((NP.LT.22).OR.(NT.LT.22)) IBACK = 1
c   Example: Pb-Pb
           ELSE
              IF (NP.LT.IP-IP/4) IBACK = 1
           ENDIF
         ELSEIF (ABS(IP-IT).LT.3) THEN
            IF (NP.LT.IP-IP/8) IBACK = 1
         ENDIF
      ENDIF

      ICCPRO = ICCPRO+1

      RETURN
      END
c
c===ininuc=============================================================*
c
CDECK  ID>, DT_ININUC
      SUBROUTINE DT_ININUC(ID,NMASS,NCH,COORD,JS,IMODE)

c***********************************************************************
c Samples initial configuration of nucleons in nucleus with mass NMASS *
c including Fermi-momenta (if reqested).                               *
c          ID             BAMJET-code for hadrons (instead of nuclei)  *
c          NMASS          mass number of nucleus (number of nucleons)  *
c          NCH            charge of nucleus                            *
c          COORD(3,NMASS) coordinates of nucleons inside nucleus in fm *
c          JS(NMASS) > 0  nucleon undergoes nucleon-nucleon interact.  *
c          IMODE = 1      projectile nucleus                           *
c                = 2      target     nucleus                           *
c                = 3      target     nucleus (E_lab<E_thr for HADRIN)  *
c Adopted from a part of the old KKEVT routine which was written by    *
c J. Ranft/H.-J.Moehring.                                              *
c This version dated 13.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (FM2MM=1.0D-12)


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c auxiliary common for chain system storage (DTUNUC 1.x)
      COMMON /DTCHSY/ ISKPCH(8,MAXINT),IPOSP(MAXNCL),IPOST(MAXNCL)

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c flavors of partons (DTUNUC 1.x)
      COMMON /DTDPMF/ IPVQ(MAXVQU),IPPV1(MAXVQU),IPPV2(MAXVQU),
     &                ITVQ(MAXVQU),ITTV1(MAXVQU),ITTV2(MAXVQU),
     &                IPSQ(MAXSQU),IPSQ2(MAXSQU),
     &                IPSAQ(MAXSQU),IPSAQ2(MAXSQU),
     &                ITSQ(MAXSQU),ITSQ2(MAXSQU),
     &                ITSAQ(MAXSQU),ITSAQ2(MAXSQU),
     &                KKPROJ(MAXVQU),KKTARG(MAXVQU)

c interface HADRIN-DPM
      COMMON /HNTHRE/ EHADTH,EHADLO,EHADHI,INTHAD,IDXTA


      DIMENSION PF(4),PFTOT(4),COORD(3,MAXNCL),JS(MAXNCL)

c number of neutrons
      NNEU = NMASS-NCH
c initializations
      NP = 0
      NN = 0
      DO 1 K=1,4
         PFTOT(K) = 0.0D0
    1 CONTINUE
      MODE   = IMODE
      IF (IMODE.GT.2) MODE = 2
c*sr 29.5. new NPOINT(1)-definition
C     IF (IMODE.GE.2) NPOINT(1) = NHKK+1
c*
      NHADRI = 0
      NC     = NHKK

c get initial configuration
      DO 2 I=1,NMASS
         NHKK = NHKK+1
         IF (JS(I).GT.0) THEN
            ISTHKK(NHKK) = 10+MODE
            IF (IMODE.EQ.3) THEN
c   additional treatment if HADRIN-generator is requested
               NHADRI = NHADRI+1
               IF (NHADRI.EQ.1) IDXTA  = NHKK
               IF (NHADRI.GT.1) ISTHKK(NHKK) = 14
            ENDIF
         ELSE
            ISTHKK(NHKK) = 12+MODE
         ENDIF
         IF (NMASS.GE.2) THEN
c   treatment for nuclei
            FRAC = 1.0D0-DBLE(NCH)/DBLE(NMASS)
            RR   = DT_RNDM(FRAC)
            IF ((RR.LT.FRAC).AND.(NN.LT.NNEU)) THEN
               IDX = 8
               NN  = NN+1
            ELSEIF ((RR.GE.FRAC).AND.(NP.LT.NCH)) THEN
               IDX = 1
               NP  = NP+1
            ELSEIF (NN.LT.NNEU) THEN
               IDX = 8
               NN  = NN+1
            ELSEIF (NP.LT.NCH)  THEN
               IDX = 1
               NP  = NP+1
            ENDIF
            IDHKK(NHKK) = IDT_IPDGHA(IDX)
            IDBAM(NHKK) = IDX
            IF (MODE.EQ.1) THEN
               IPOSP(I)  = NHKK
               KKPROJ(I) = IDX
            ELSE
               IPOST(I)  = NHKK
               KKTARG(I) = IDX
            ENDIF
            IF (IDX.EQ.1) THEN
               PFER = PFERMP(MODE)
               PBIN = SQRT(2.0D0*EBINDP(MODE)*AAM(1))
            ELSE
               PFER = PFERMN(MODE)
               PBIN = SQRT(2.0D0*EBINDN(MODE)*AAM(8))
            ENDIF
            CALL DT_FER4M(PFER,PBIN,PF(1),PF(2),PF(3),PF(4),IDX)
            DO 3 K=1,4
               PFTOT(K) = PFTOT(K)+PF(K)
               PHKK(K,NHKK) = PF(K)
    3       CONTINUE
            PHKK(5,NHKK) = AAM(IDX)
         ELSE
c   treatment for hadrons
            IDHKK(NHKK)  = IDT_IPDGHA(ID)
            IDBAM(NHKK)  = ID
            PHKK(4,NHKK) = AAM(ID)
            PHKK(5,NHKK) = AAM(ID)
C* VDM assumption
C            IF (IDHKK(NHKK).EQ.22) THEN
C               PHKK(4,NHKK) = AAM(33)
C               PHKK(5,NHKK) = AAM(33)
C            ENDIF
            IF (MODE.EQ.1) THEN
               IPOSP(I)  = NHKK
               KKPROJ(I) = ID
               PHKK(5,NHKK) = PHKK(5,NHKK)-SQRT(VIRT)
            ELSE
               IPOST(I)  = NHKK
               KKTARG(I) = ID
            ENDIF
         ENDIF
         DO 4 K=1,3
            VHKK(K,NHKK) = COORD(K,I)*FM2MM
            WHKK(K,NHKK) = COORD(K,I)*FM2MM
    4    CONTINUE
         IF (MODE.EQ.2) VHKK(1,NHKK) = VHKK(1,NHKK)+BIMPAC*FM2MM
         IF (MODE.EQ.2) WHKK(1,NHKK) = WHKK(1,NHKK)+BIMPAC*FM2MM
         VHKK(4,NHKK) = 0.0D0
         WHKK(4,NHKK) = 0.0D0
    2 CONTINUE

c balance Fermi-momenta
      IF (NMASS.GE.2) THEN
         DO 5 I=1,NMASS
            NC = NC+1
            DO 6 K=1,3
               PHKK(K,NC) = PHKK(K,NC)-PFTOT(K)/DBLE(NMASS)
    6       CONTINUE
            PHKK(4,NC) = SQRT(PHKK(5,NC)**2+PHKK(1,NC)**2+
     &                        PHKK(2,NC)**2+PHKK(3,NC)**2)
    5    CONTINUE
      ENDIF

      RETURN
      END
c
c===fer4m==============================================================*
c
CDECK  ID>, DT_FER4M
      SUBROUTINE DT_FER4M(PFERM,PBIND,PXT,PYT,PZT,ET,KT)

c***********************************************************************
c Sampling of nucleon Fermi-momenta from distributions at T=0.         *
c                                   processed by S. Roesler, 17.10.95  *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      LOGICAL LSTART

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI


      DATA LSTART /.TRUE./

      ILOOP = 0
      IF (LFERMI) THEN
         IF (LSTART) THEN
            WRITE(ErrorOut,1000)
 1000       FORMAT(/,1X,'FER4M:   SAMPLING OF FERMI-MOMENTA ACTIVATED')
            LSTART = .FALSE.
         ENDIF
    1    CONTINUE
         CALL DT_DFERMI(PABS)
         PABS = PFERM*PABS
C        IF (PABS.GE.PBIND) THEN
C           ILOOP = ILOOP+1
C           IF (MOD(ILOOP,500).EQ.0) THEN
C              WRITE(LOUT,1001) PABS,PBIND,ILOOP
C1001          FORMAT(1X,'FER4M:    Fermi-mom. corr. for binding',
C    &                ' energy ',2E12.3,I6)
C           ENDIF
C           GOTO 1
C        ENDIF
         CALL DT_DPOLI(POLC,POLS)
         CALL DT_DSFECF(SFE,CFE)
         CXTA = POLS*CFE
         CYTA = POLS*SFE
         CZTA = POLC
         ET   = SQRT(PABS*PABS+AAM(KT)**2)
         PXT  = CXTA*PABS
         PYT  = CYTA*PABS
         PZT  = CZTA*PABS
      ELSE
         ET   = AAM(KT)
         PXT  = 0.0D0
         PYT  = 0.0D0
         PZT  = 0.0D0
      ENDIF

      RETURN
      END
c
c===nuc2cm=============================================================*
c
CDECK  ID>, DT_NUC2CM
      SUBROUTINE DT_NUC2CM

c***********************************************************************
c Lorentz-transformation of all wounded nucleons from Lab. to nucl.-   *
c nucl. cms. (This subroutine replaces NUCMOM.)                        *
c This version dated 15.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY3=1.0D-3)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c*temporary
c statistics: Glauber-formalism
      COMMON /DTSTA3/ ICWP,ICWT,NCSY,ICWPG,ICWTG,ICIG,IPGLB,ITGLB,NGLB

c*

      ICWP = 0
      ICWT = 0
      NWTACC = 0
      NWAACC = 0
      NWBACC = 0

      NPOINT(1) = NHKK+1
      NEND      = NHKK
      DO 1 I=1,NEND
         IF ((ISTHKK(I).EQ.11).OR.(ISTHKK(I).EQ.12)) THEN
            IF (ISTHKK(I).EQ.11) NWAACC = NWAACC+1
            IF (ISTHKK(I).EQ.12) NWBACC = NWBACC+1
            MODE = ISTHKK(I)-9
C            IF (IDHKK(I).EQ.22) THEN
C* VDM assumption
C               PEIN = AAM(33)
C               IDB  = 33
C            ELSE
C               PEIN = PHKK(4,I)
C               IDB  = IDBAM(I)
C            ENDIF
C            CALL DT_LTRANS(PHKK(1,I),PHKK(2,I),PHKK(3,I),PEIN,
C     &           PX,PY,PZ,PE,IDB,MODE)
            IF (PHKK(5,I).GT.ZERO) THEN
               CALL DT_LTRANS(PHKK(1,I),PHKK(2,I),PHKK(3,I),PHKK(4,I),
     &              PX,PY,PZ,PE,IDBAM(I),MODE)
            ELSE
               PX = PGAMM(1)
               PY = PGAMM(2)
               PZ = PGAMM(3)
               PE = PGAMM(4)
            ENDIF
            IST = ISTHKK(I)-2
            ID  = IDHKK(I)
C* VDM assumption
C            IF (ID.EQ.22) ID = 113
            CALL DT_EVTPUT(IST,ID,I,0,PX,PY,PZ,PE,0,0,0)
            IF (ISTHKK(I).EQ.11) ICWP = ICWP+1
            IF (ISTHKK(I).EQ.12) ICWT = ICWT+1
         ENDIF
    1 CONTINUE

      NWTACC = MAX(NWAACC,NWBACC)
      ICDPR  = ICDPR+ICWP
      ICDTA  = ICDTA+ICWT
c*temporary
      IF ((ICWP.EQ.0).OR.(ICWT.EQ.0)) THEN
         CALL DT_EVTOUT(4)
         STOP
      ENDIF

      RETURN
      END
c
c===splptn=============================================================*
c
CDECK  ID>, DT_SPLPTN
      SUBROUTINE DT_SPLPTN(NN)

c***********************************************************************
c SamPLing of ParToN momenta and flavors.                              *
c This version dated 15.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ


c sample flavors of sea-quarks
      CALL DT_SPLFLA(NN,1)

c sample x-values of partons at chain ends
      ECM = UMO
      CALL DT_XKSAMP(NN,ECM)

c samle flavors
      CALL DT_SPLFLA(NN,2)

      RETURN
      END
c
c===splfla=============================================================*
c
CDECK  ID>, DT_SPLFLA
      SUBROUTINE DT_SPLFLA(NN,MODE)

c***********************************************************************
c SamPLing of FLAvors of partons at chain ends.                        *
c This subroutine replaces FLKSAA/FLKSAM.                              *
c            NN            number of nucleon-nucleon interactions      *
c            MODE = 1      sea-flavors                                 *
c                 = 2      valence-flavors                             *
c Based on the original version written by J. Ranft/H.-J. Moehring.    *
c This version dated 16.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c flavors of partons (DTUNUC 1.x)
      COMMON /DTDPMF/ IPVQ(MAXVQU),IPPV1(MAXVQU),IPPV2(MAXVQU),
     &                ITVQ(MAXVQU),ITTV1(MAXVQU),ITTV2(MAXVQU),
     &                IPSQ(MAXSQU),IPSQ2(MAXSQU),
     &                IPSAQ(MAXSQU),IPSAQ2(MAXSQU),
     &                ITSQ(MAXSQU),ITSQ2(MAXSQU),
     &                ITSAQ(MAXSQU),ITSAQ2(MAXSQU),
     &                KKPROJ(MAXVQU),KKTARG(MAXVQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPMI/ NVV,NSV,NVS,NSS,NDV,NVD,NDS,NSD,
     &                IXPV,IXPS,IXTV,IXTS,
     &                INTVV1(MAXVQU),INTVV2(MAXVQU),
     &                INTSV1(MAXVQU),INTSV2(MAXVQU),
     &                INTVS1(MAXVQU),INTVS2(MAXVQU),
     &                INTSS1(MAXSQU),INTSS2(MAXSQU),
     &                INTDV1(MAXVQU),INTDV2(MAXVQU),
     &                INTVD1(MAXVQU),INTVD2(MAXVQU),
     &                INTDS1(MAXSQU),INTDS2(MAXSQU),
     &                INTSD1(MAXSQU),INTSD2(MAXSQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPM0/ IFROVP(MAXVQU),ITOVP(MAXVQU),IFROSP(MAXSQU),
     &                IFROVT(MAXVQU),ITOVT(MAXVQU),IFROST(MAXSQU)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT


      IF (MODE.EQ.1) THEN
c sea-flavors
         DO 1 I=1,NN
            IPSQ(I)  = INT(1.0D0+DT_RNDM(CRONCO)*(2.0D0+SEASQ))
            IPSAQ(I) = -IPSQ(I)
    1    CONTINUE
         DO 2 I=1,NN
            ITSQ(I) = INT(1.0D0+DT_RNDM(CRONCO)*(2.0D0+SEASQ))
            ITSAQ(I)= -ITSQ(I)
    2    CONTINUE
      ELSEIF (MODE.EQ.2) THEN
c valence flavors
         DO 3 I=1,IXPV
            CALL DT_FLAHAD(KKPROJ(IFROVP(I)),IPVQ(I),IPPV1(I),IPPV2(I))
    3    CONTINUE
         DO 4 I=1,IXTV
            CALL DT_FLAHAD(KKTARG(IFROVT(I)),ITVQ(I),ITTV1(I),ITTV2(I))
    4    CONTINUE
      ENDIF

      RETURN
      END
c
c===getptn=============================================================*
c
CDECK  ID>, DT_GETPTN
      SUBROUTINE DT_GETPTN(IP,NN,NCSY,IREJ)

c***********************************************************************
c This subroutine collects partons at chain ends from temporary        *
c commons and puts them into DTEVT1.                                   *
c This version dated 15.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ZERO=0.0D0,OHALF=0.5D0)

      LOGICAL LCHK


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c auxiliary common for chain system storage (DTUNUC 1.x)
      COMMON /DTCHSY/ ISKPCH(8,MAXINT),IPOSP(MAXNCL),IPOST(MAXNCL)

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF

c x-values of partons (DTUNUC 1.x)
      COMMON /DTDPMX/ XPVQ(MAXVQU),XPVD(MAXVQU),
     &                XTVQ(MAXVQU),XTVD(MAXVQU),
     &                XPSQ(MAXSQU),XPSAQ(MAXSQU),
     &                XTSQ(MAXSQU),XTSAQ(MAXSQU)

c flavors of partons (DTUNUC 1.x)
      COMMON /DTDPMF/ IPVQ(MAXVQU),IPPV1(MAXVQU),IPPV2(MAXVQU),
     &                ITVQ(MAXVQU),ITTV1(MAXVQU),ITTV2(MAXVQU),
     &                IPSQ(MAXSQU),IPSQ2(MAXSQU),
     &                IPSAQ(MAXSQU),IPSAQ2(MAXSQU),
     &                ITSQ(MAXSQU),ITSQ2(MAXSQU),
     &                ITSAQ(MAXSQU),ITSAQ2(MAXSQU),
     &                KKPROJ(MAXVQU),KKTARG(MAXVQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPMI/ NVV,NSV,NVS,NSS,NDV,NVD,NDS,NSD,
     &                IXPV,IXPS,IXTV,IXTS,
     &                INTVV1(MAXVQU),INTVV2(MAXVQU),
     &                INTSV1(MAXVQU),INTSV2(MAXVQU),
     &                INTVS1(MAXVQU),INTVS2(MAXVQU),
     &                INTSS1(MAXSQU),INTSS2(MAXSQU),
     &                INTDV1(MAXVQU),INTDV2(MAXVQU),
     &                INTVD1(MAXVQU),INTVD2(MAXVQU),
     &                INTDS1(MAXSQU),INTDS2(MAXSQU),
     &                INTSD1(MAXSQU),INTSD2(MAXSQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPM0/ IFROVP(MAXVQU),ITOVP(MAXVQU),IFROSP(MAXSQU),
     &                IFROVT(MAXVQU),ITOVT(MAXVQU),IFROST(MAXSQU)


      DIMENSION PP1(4),PP2(4),PT1(4),PT2(4),PP(4),PT(4)

      DATA AMSS,AMVS,AMDS,AMVD,AMVV/0.4D0,2.0D0,2.0D0,2.5D0,2.0D0/

      IREJ      = 0
      NCSY      = 0
      NPOINT(2) = NHKK+1

c sea-sea chains
      DO 10 I=1,NSS
         IF (ISKPCH(1,I).EQ.99) GOTO 10
         ICCHAI(1,1) = ICCHAI(1,1)+2
         IDXP = INTSS1(I)
         IDXT = INTSS2(I)
         MOP  = JDAHKK(1,IPOSP(IFROSP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROST(IDXT)))
         DO 11 K=1,4
            PP1(K) = XPSQ(IDXP) *PHKK(K,MOP)
            PP2(K) = XPSAQ(IDXP)*PHKK(K,MOP)
            PT1(K) = XTSAQ(IDXT)*PHKK(K,MOT)
            PT2(K) = XTSQ(IDXT) *PHKK(K,MOT)
   11    CONTINUE
         PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                  +(PP1(3)+PT1(3))**2)
         ECH   = PP1(4)+PT1(4)
         AM1   = (ECH+PTOCH)*(ECH-PTOCH)
         PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                  +(PP2(3)+PT2(3))**2)
         ECH   = PP2(4)+PT2(4)
         AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
            AM1 = SQRT(AM1)
            AM2 = SQRT(AM2)
            IF ((AM1.LT.AMSS).OR.(AM2.LT.AMSS)) THEN
C              WRITE(LOUT,5000) NEVHKK,I,AM1,AM2
 5000          FORMAT(1X,'INCON. CHAIN MASS SS: ',2I5,2E10.3)
            ENDIF
         ELSE
            WRITE(ErrorOut,5000) NEVHKK,I,AM1,AM2
         ENDIF
         IFP1 = IDT_IB2PDG(IPSQ(IDXP),0,2)
         IFP2 = IDT_IB2PDG(IPSAQ(IDXP),0,2)
         IFT1 = IDT_IB2PDG(ITSAQ(IDXT),0,2)
         IFT2 = IDT_IB2PDG(ITSQ(IDXT),0,2)
         CALL DT_EVTPUT(-31,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                    0,0,1)
         CALL DT_EVTPUT(-32,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                    0,0,1)
         CALL DT_EVTPUT(-31,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                    0,0,1)
         CALL DT_EVTPUT(-32,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                    0,0,1)
         NCSY = NCSY+1
   10 CONTINUE

c disea-sea chains
      DO 20 I=1,NDS
         IF (ISKPCH(2,I).EQ.99) GOTO 20
         ICCHAI(1,2) = ICCHAI(1,2)+2
         IDXP = INTDS1(I)
         IDXT = INTDS2(I)
         MOP  = JDAHKK(1,IPOSP(IFROSP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROST(IDXT)))
         DO 21 K=1,4
            PP1(K) = XPSQ(IDXP) *PHKK(K,MOP)
            PP2(K) = XPSAQ(IDXP)*PHKK(K,MOP)
            PT1(K) = XTSQ(IDXT) *PHKK(K,MOT)
            PT2(K) = XTSAQ(IDXT)*PHKK(K,MOT)
   21    CONTINUE
         PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                  +(PP1(3)+PT1(3))**2)
         ECH   = PP1(4)+PT1(4)
         AM1   = (ECH+PTOCH)*(ECH-PTOCH)
         PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                  +(PP2(3)+PT2(3))**2)
         ECH   = PP2(4)+PT2(4)
         AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
            AM1 = SQRT(AM1)
            AM2 = SQRT(AM2)
            IF ((AM1.LT.AMDS).OR.(AM2.LT.AMDS)) THEN
C              WRITE(LOUT,5001) NEVHKK,I,AM1,AM2
 5001          FORMAT(1X,'INCON. CHAIN MASS DS: ',2I5,2E10.3)
            ENDIF
         ELSE
            WRITE(ErrorOut,5001) NEVHKK,I,AM1,AM2
         ENDIF
         IFP1 = IDT_IB2PDG(IPSQ(IDXP),IPSQ2(IDXP),2)
         IFP2 = IDT_IB2PDG(-IPSQ(IDXP),-IPSQ2(IDXP),2)
         IFT1 = IDT_IB2PDG(ITSQ(IDXT),0,2)
         IFT2 = IDT_IB2PDG(ITSAQ(IDXT),0,2)
         CALL DT_EVTPUT(-31,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                    0,0,2)
         CALL DT_EVTPUT(-32,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                    0,0,2)
         CALL DT_EVTPUT(-31,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                    0,0,2)
         CALL DT_EVTPUT(-32,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                    0,0,2)
         NCSY = NCSY+1
   20 CONTINUE

c sea-disea chains
      DO 30 I=1,NSD
         IF (ISKPCH(3,I).EQ.99) GOTO 30
         ICCHAI(1,3) = ICCHAI(1,3)+2
         IDXP = INTSD1(I)
         IDXT = INTSD2(I)
         MOP  = JDAHKK(1,IPOSP(IFROSP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROST(IDXT)))
         DO 31 K=1,4
            PP1(K) = XPSQ(IDXP) *PHKK(K,MOP)
            PP2(K) = XPSAQ(IDXP)*PHKK(K,MOP)
            PT1(K) = XTSQ(IDXT) *PHKK(K,MOT)
            PT2(K) = XTSAQ(IDXT)*PHKK(K,MOT)
   31    CONTINUE
         PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                  +(PP1(3)+PT1(3))**2)
         ECH   = PP1(4)+PT1(4)
         AM1   = (ECH+PTOCH)*(ECH-PTOCH)
         PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                  +(PP2(3)+PT2(3))**2)
         ECH   = PP2(4)+PT2(4)
         AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
            AM1 = SQRT(AM1)
            AM2 = SQRT(AM2)
            IF ((AM1.LT.AMDS).OR.(AM2.LT.AMDS)) THEN
C              WRITE(LOUT,5002) NEVHKK,I,AM1,AM2
 5002          FORMAT(1X,'INCON. CHAIN MASS SD: ',2I5,2E10.3)
            ENDIF
         ELSE
            WRITE(ErrorOut,5002) NEVHKK,I,AM1,AM2
         ENDIF
         IFP1 = IDT_IB2PDG(IPSQ(IDXP),0,2)
         IFP2 = IDT_IB2PDG(IPSAQ(IDXP),0,2)
         IFT1 = IDT_IB2PDG(ITSQ(IDXT),ITSQ2(IDXT),2)
         IFT2 = IDT_IB2PDG(-ITSQ(IDXT),-ITSQ2(IDXT),2)
         CALL DT_EVTPUT(-31,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                    0,0,3)
         CALL DT_EVTPUT(-32,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                    0,0,3)
         CALL DT_EVTPUT(-31,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                    0,0,3)
         CALL DT_EVTPUT(-32,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                    0,0,3)
         NCSY = NCSY+1
   30 CONTINUE

c disea-valence chains
      DO 50 I=1,NDV
         IF (ISKPCH(5,I).EQ.99) GOTO 50
         ICCHAI(1,5) = ICCHAI(1,5)+2
         IDXP = INTDV1(I)
         IDXT = INTDV2(I)
         MOP  = JDAHKK(1,IPOSP(IFROSP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROVT(IDXT)))
         DO 51 K=1,4
            PP1(K) = XPSQ(IDXP) *PHKK(K,MOP)
            PP2(K) = XPSAQ(IDXP)*PHKK(K,MOP)
            PT1(K) = XTVQ(IDXT) *PHKK(K,MOT)
            PT2(K) = XTVD(IDXT) *PHKK(K,MOT)
   51    CONTINUE
         PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                  +(PP1(3)+PT1(3))**2)
         ECH   = PP1(4)+PT1(4)
         AM1   = (ECH+PTOCH)*(ECH-PTOCH)
         PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                  +(PP2(3)+PT2(3))**2)
         ECH   = PP2(4)+PT2(4)
         AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
            AM1 = SQRT(AM1)
            AM2 = SQRT(AM2)
            IF ((AM1.LT.AMVD).OR.(AM2.LT.AMVD)) THEN
C              WRITE(LOUT,5003) NEVHKK,I,AM1,AM2
 5003          FORMAT(1X,'INCON. CHAIN MASS DV: ',2I5,2E10.3)
            ENDIF
         ELSE
            WRITE(ErrorOut,5003) NEVHKK,I,AM1,AM2
         ENDIF
         IFP1 = IDT_IB2PDG(IPSQ(IDXP),IPSQ2(IDXP),2)
         IFP2 = IDT_IB2PDG(-IPSQ(IDXP),-IPSQ2(IDXP),2)
         IFT1 = IDT_IB2PDG(ITVQ(IDXT),0,2)
         IFT2 = IDT_IB2PDG(ITTV1(IDXT),ITTV2(IDXT),2)
         CALL DT_EVTPUT(-31,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                    0,0,5)
         CALL DT_EVTPUT(-22,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                    0,0,5)
         CALL DT_EVTPUT(-31,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                    0,0,5)
         CALL DT_EVTPUT(-22,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                    0,0,5)
         NCSY = NCSY+1
   50 CONTINUE

c valence-sea chains
      DO 60 I=1,NVS
         IF (ISKPCH(6,I).EQ.99) GOTO 60
         ICCHAI(1,6) = ICCHAI(1,6)+2
         IDXP = INTVS1(I)
         IDXT = INTVS2(I)
         MOP  = JDAHKK(1,IPOSP(IFROVP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROST(IDXT)))
         DO 61 K=1,4
            PP1(K) = XPVQ(IDXP) *PHKK(K,MOP)
            PP2(K) = XPVD(IDXP) *PHKK(K,MOP)
            PT1(K) = XTSAQ(IDXT)*PHKK(K,MOT)
            PT2(K) = XTSQ(IDXT) *PHKK(K,MOT)
   61    CONTINUE
         IFP1 = IDT_IB2PDG(IPVQ(IDXP),0,2)
         IFP2 = IDT_IB2PDG(IPPV1(IDXP),IPPV2(IDXP),2)
         IFT1 = IDT_IB2PDG(ITSAQ(IDXT),0,2)
         IFT2 = IDT_IB2PDG(ITSQ(IDXT),0,2)
         CALL  DT_CHKCSY(IFP1,IFT1,LCHK)
         IF (LCHK) THEN
            CALL DT_EVTPUT(-21,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                       0,0,6)
            CALL DT_EVTPUT(-32,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                       0,0,6)
            CALL DT_EVTPUT(-21,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                       0,0,6)
            CALL DT_EVTPUT(-32,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                       0,0,6)
            PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                     +(PP1(3)+PT1(3))**2)
            ECH   = PP1(4)+PT1(4)
            AM1   = (ECH+PTOCH)*(ECH-PTOCH)
            PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                     +(PP2(3)+PT2(3))**2)
            ECH   = PP2(4)+PT2(4)
            AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         ELSE
            CALL DT_EVTPUT(-21,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                       0,0,6)
            CALL DT_EVTPUT(-32,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                       0,0,6)
            CALL DT_EVTPUT(-21,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                       0,0,6)
            CALL DT_EVTPUT(-32,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                       0,0,6)
            PTOCH = SQRT((PP1(1)+PT2(1))**2+(PP1(2)+PT2(2))**2
     &                                     +(PP1(3)+PT2(3))**2)
            ECH   = PP1(4)+PT2(4)
            AM2   = (ECH+PTOCH)*(ECH-PTOCH)
            PTOCH = SQRT((PP2(1)+PT1(1))**2+(PP2(2)+PT1(2))**2
     &                                     +(PP2(3)+PT1(3))**2)
            ECH   = PP2(4)+PT1(4)
            AM1   = (ECH+PTOCH)*(ECH-PTOCH)
         ENDIF
         IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
            AM1 = SQRT(AM1)
            AM2 = SQRT(AM2)
            IF ((AM1.LT.AMSS).OR.(AM2.LT.AMVS)) THEN
C              WRITE(LOUT,5004) NEVHKK,I,AM1,AM2
 5004          FORMAT(1X,'INCON. CHAIN MASS VS: ',2I5,2E10.3)
            ENDIF
         ELSE
            WRITE(ErrorOut,5004) NEVHKK,I,AM1,AM2
         ENDIF
         NCSY = NCSY+1
   60 CONTINUE

c sea-valence chains
      DO 40 I=1,NSV
         IF (ISKPCH(4,I).EQ.99) GOTO 40
         ICCHAI(1,4) = ICCHAI(1,4)+2
         IDXP = INTSV1(I)
         IDXT = INTSV2(I)
         MOP  = JDAHKK(1,IPOSP(IFROSP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROVT(IDXT)))
         DO 41 K=1,4
            PP1(K) = XPSQ(IDXP) *PHKK(K,MOP)
            PP2(K) = XPSAQ(IDXP)*PHKK(K,MOP)
            PT1(K) = XTVD(IDXT) *PHKK(K,MOT)
            PT2(K) = XTVQ(IDXT) *PHKK(K,MOT)
   41    CONTINUE
         PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                  +(PP1(3)+PT1(3))**2)
         ECH   = PP1(4)+PT1(4)
         AM1   = (ECH+PTOCH)*(ECH-PTOCH)
         PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                  +(PP2(3)+PT2(3))**2)
         ECH   = PP2(4)+PT2(4)
         AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
            AM1 = SQRT(AM1)
            AM2 = SQRT(AM2)
            IF ((AM1.LT.AMVS).OR.(AM2.LT.AMSS)) THEN
C              WRITE(LOUT,5005) NEVHKK,I,AM1,AM2
 5005          FORMAT(1X,'INCON. CHAIN MASS SV: ',2I5,2E10.3)
            ENDIF
         ELSE
            WRITE(ErrorOut,5005) NEVHKK,I,AM1,AM2
         ENDIF
         IFP1 = IDT_IB2PDG(IPSQ(IDXP),0,2)
         IFP2 = IDT_IB2PDG(IPSAQ(IDXP),0,2)
         IFT1 = IDT_IB2PDG(ITTV1(IDXT),ITTV2(IDXT),2)
         IFT2 = IDT_IB2PDG(ITVQ(IDXT),0,2)
         CALL DT_EVTPUT(-31,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                    0,0,4)
         CALL DT_EVTPUT(-22,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                    0,0,4)
         CALL DT_EVTPUT(-31,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                    0,0,4)
         CALL DT_EVTPUT(-22,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                    0,0,4)
         NCSY = NCSY+1
   40 CONTINUE

c valence-disea chains
      DO 70 I=1,NVD
         IF (ISKPCH(7,I).EQ.99) GOTO 70
         ICCHAI(1,7) = ICCHAI(1,7)+2
         IDXP = INTVD1(I)
         IDXT = INTVD2(I)
         MOP  = JDAHKK(1,IPOSP(IFROVP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROST(IDXT)))
         DO 71 K=1,4
            PP1(K) = XPVQ(IDXP) *PHKK(K,MOP)
            PP2(K) = XPVD(IDXP) *PHKK(K,MOP)
            PT1(K) = XTSQ(IDXT) *PHKK(K,MOT)
            PT2(K) = XTSAQ(IDXT)*PHKK(K,MOT)
   71    CONTINUE
         IFP1 = IDT_IB2PDG(IPVQ(IDXP),0,2)
         IFP2 = IDT_IB2PDG(IPPV1(IDXP),IPPV2(IDXP),2)
         IFT1 = IDT_IB2PDG(ITSQ(IDXT),ITSQ2(IDXT),2)
         IFT2 = IDT_IB2PDG(-ITSQ(IDXT),-ITSQ2(IDXT),2)
         CALL  DT_CHKCSY(IFP1,IFT1,LCHK)
         IF (LCHK) THEN
            CALL DT_EVTPUT(-21,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                       0,0,7)
            CALL DT_EVTPUT(-32,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                       0,0,7)
            CALL DT_EVTPUT(-21,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                       0,0,7)
            CALL DT_EVTPUT(-32,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                       0,0,7)
            PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                     +(PP1(3)+PT1(3))**2)
            ECH   = PP1(4)+PT1(4)
            AM1   = (ECH+PTOCH)*(ECH-PTOCH)
            PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                     +(PP2(3)+PT2(3))**2)
            ECH   = PP2(4)+PT2(4)
            AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         ELSE
            CALL DT_EVTPUT(-21,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                       0,0,7)
            CALL DT_EVTPUT(-32,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                       0,0,7)
            CALL DT_EVTPUT(-21,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                       0,0,7)
            CALL DT_EVTPUT(-32,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                       0,0,7)
            PTOCH = SQRT((PP1(1)+PT2(1))**2+(PP1(2)+PT2(2))**2
     &                                     +(PP1(3)+PT2(3))**2)
            ECH   = PP1(4)+PT2(4)
            AM1   = (ECH+PTOCH)*(ECH-PTOCH)
            PTOCH = SQRT((PP2(1)+PT1(1))**2+(PP2(2)+PT1(2))**2
     &                                     +(PP2(3)+PT1(3))**2)
            ECH   = PP2(4)+PT1(4)
            AM2   = (ECH+PTOCH)*(ECH-PTOCH)
         ENDIF
         IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
            AM1 = SQRT(AM1)
            AM2 = SQRT(AM2)
            IF ((AM1.LT.AMVD).OR.(AM2.LT.AMVD)) THEN
C              WRITE(LOUT,5006) NEVHKK,I,AM1,AM2
 5006          FORMAT(1X,'INCON. CHAIN MASS VD: ',2I5,2E10.3)
            ENDIF
         ELSE
            WRITE(ErrorOut,5006) NEVHKK,I,AM1,AM2
         ENDIF
         NCSY = NCSY+1
   70 CONTINUE

c valence-valence chains
      DO 80 I=1,NVV
         IF (ISKPCH(8,I).EQ.99) GOTO 80
         ICCHAI(1,8) = ICCHAI(1,8)+2
         IDXP = INTVV1(I)
         IDXT = INTVV2(I)
         MOP  = JDAHKK(1,IPOSP(IFROVP(IDXP)))
         MOT  = JDAHKK(1,IPOST(IFROVT(IDXT)))
         DO 81 K=1,4
            PP1(K) = XPVQ(IDXP)*PHKK(K,MOP)
            PP2(K) = XPVD(IDXP)*PHKK(K,MOP)
            PT1(K) = XTVD(IDXT)*PHKK(K,MOT)
            PT2(K) = XTVQ(IDXT)*PHKK(K,MOT)
   81    CONTINUE
         IFP1 = IDT_IB2PDG(IPVQ(IDXP),0,2)
         IFP2 = IDT_IB2PDG(IPPV1(IDXP),IPPV2(IDXP),2)
         IFT1 = IDT_IB2PDG(ITTV1(IDXT),ITTV2(IDXT),2)
         IFT2 = IDT_IB2PDG(ITVQ(IDXT),0,2)

c check for diffractive event
         IDIFF = 0
         IF (((ISINGD.GT.0).OR.(IDOUBD.GT.0)).AND.
     &        (IP.EQ.1).AND.(NN.EQ.1)) THEN
            DO 800 K=1,4
               PP(K) = PP1(K)+PP2(K)
               PT(K) = PT1(K)+PT2(K)
  800       CONTINUE
            ISTCK = NHKK
            CALL DT_DIFEVT(IFP1,IFP2,PP,MOP,
     &                  IFT1,IFT2,PT,MOT,IDIFF,NCSY,IREJ1)
C           IF (IREJ1.NE.0) GOTO 9999
            IF (IREJ1.NE.0) THEN
               IDIFF = 0
               NHKK  = ISTCK
            ENDIF
         ELSE
            IDIFF = 0
         ENDIF

         IF (IDIFF.EQ.0) THEN
c   valence-valence chain system
            CALL  DT_CHKCSY(IFP1,IFT1,LCHK)
            IF (LCHK) THEN
c    baryon-baryon
               CALL DT_EVTPUT(-21,IFP1,MOP,0,
     &                     PP1(1),PP1(2),PP1(3),PP1(4),0,0,8)
               CALL DT_EVTPUT(-22,IFT1,MOT,0,
     &                     PT1(1),PT1(2),PT1(3),PT1(4),0,0,8)
               CALL DT_EVTPUT(-21,IFP2,MOP,0,
     &                     PP2(1),PP2(2),PP2(3),PP2(4),0,0,8)
               CALL DT_EVTPUT(-22,IFT2,MOT,0,
     &                     PT2(1),PT2(2),PT2(3),PT2(4),0,0,8)
               PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                                        +(PP1(3)+PT1(3))**2)
               ECH   = PP1(4)+PT1(4)
               AM1   = (ECH+PTOCH)*(ECH-PTOCH)
               PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                                        +(PP2(3)+PT2(3))**2)
               ECH   = PP2(4)+PT2(4)
               AM2   = (ECH+PTOCH)*(ECH-PTOCH)
            ELSE
c    antibaryon-baryon
               CALL DT_EVTPUT(-21,IFP1,MOP,0,
     &                     PP1(1),PP1(2),PP1(3),PP1(4),0,0,8)
               CALL DT_EVTPUT(-22,IFT2,MOT,0,
     &                     PT2(1),PT2(2),PT2(3),PT2(4),0,0,8)
               CALL DT_EVTPUT(-21,IFP2,MOP,0,
     &                     PP2(1),PP2(2),PP2(3),PP2(4),0,0,8)
               CALL DT_EVTPUT(-22,IFT1,MOT,0,
     &                     PT1(1),PT1(2),PT1(3),PT1(4),0,0,8)
               PTOCH = SQRT((PP1(1)+PT2(1))**2+(PP1(2)+PT2(2))**2
     &                                        +(PP1(3)+PT2(3))**2)
               ECH   = PP1(4)+PT2(4)
               AM1   = (ECH+PTOCH)*(ECH-PTOCH)
               PTOCH = SQRT((PP2(1)+PT1(1))**2+(PP2(2)+PT1(2))**2
     &                                        +(PP2(3)+PT1(3))**2)
               ECH   = PP2(4)+PT1(4)
               AM2   = (ECH+PTOCH)*(ECH-PTOCH)
            ENDIF
            IF ((AM1.GT.0.0D0).AND.(AM2.GT.0.0D0)) THEN
               AM1 = SQRT(AM1)
               AM2 = SQRT(AM2)
               IF ((AM1.LT.AMVV).OR.(AM2.LT.AMVV)) THEN
C                 WRITE(LOUT,5007) NEVHKK,I,AM1,AM2
 5007             FORMAT(1X,'INCON. CHAIN MASS VV: ',2I5,2E10.3)
               ENDIF
            ELSE
               WRITE(ErrorOut,5007) NEVHKK,I,AM1,AM2
            ENDIF
            NCSY = NCSY+1
         ENDIF
   80 CONTINUE
      IF (ISTHKK(NPOINT(2)).EQ.1) NPOINT(2) = NPOINT(2)+1

c energy-momentum & flavor conservation check
      IF (ABS(IDIFF).NE.1) THEN
         IF (IDIFF.NE.0) THEN
            IF (LEMCCK) CALL DT_EMC2(9,10,0,0,0,3,-21,-22,-41,1,0,
     &                                              1,3,10,IREJ)
         ELSE
            IF (LEMCCK) CALL DT_EMC2(9,10,0,0,0,3,-21,-22,-31,-32,0,
     &                                              1,3,10,IREJ)
         ENDIF
         IF (IREJ.NE.0) THEN
            CALL DT_EVTOUT(4)
            STOP
         ENDIF
      ENDIF

      RETURN

 9999 CONTINUE
      IREJ  = 1
      RETURN
      END
c
c===chkcsy=============================================================*
c
CDECK  ID>, DT_CHKCSY
      SUBROUTINE DT_CHKCSY(ID1,ID2,LCHK)

c***********************************************************************
c CHeCk Chain SYstem for consistency of partons at chain ends.         *
c            ID1,ID2        PDG-numbers of partons at chain ends       *
c            LCHK = .true.  consistent chain                           *
c                 = .false. inconsistent chain                         *
c This version dated 18.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      LOGICAL LCHK

      LCHK = .TRUE.

c q-aq chain
      IF ((ABS(ID1).LE.6).AND.(ABS(ID2).LE.6)) THEN
         IF (ID1*ID2.GT.0) LCHK = .FALSE.
c q-qq, aq-aqaq chain
      ELSEIF (((ABS(ID1).LE.6).AND.(ABS(ID2).GT.6)).OR.
     &        ((ABS(ID1).GT.6).AND.(ABS(ID2).LE.6))) THEN
         IF (ID1*ID2.LT.0) LCHK = .FALSE.
c qq-aqaq chain
      ELSEIF ((ABS(ID1).GT.6).AND.(ABS(ID2).GT.6)) THEN
         IF (ID1*ID2.GT.0) LCHK = .FALSE.
      ENDIF

      RETURN
      END
c
c===eventa=============================================================*
c
CDECK  ID>, DT_EVENTA
      SUBROUTINE DT_EVENTA(ID,IP,IT,NCSY,IREJ)

c***********************************************************************
c Treatment of nucleon-nucleon interactions in a two-chain             *
c approximation.                                                       *
c  (input) ID       BAMJET-index of projectile hadron (in case of      *
c                   h-K scattering)                                    *
c          IP/IT    mass number of projectile/target nucleus           *
c          NCSY     number of two chain systems                        *
c          IREJ     rejection flag                                     *
c This version dated 15.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT


      DIMENSION PP1(4),PP2(4),PT1(4),PT2(4)

      IREJ      = 0
      NPOINT(3) = NHKK+1

c skip following treatment for low-mass diffraction
      IF (ABS(IFLAGD).EQ.1) THEN
         NPOINT(3) = NPOINT(2)
         GOTO 5
      ENDIF

c multiple scattering of chain ends
      IF ((IP.GT.1).AND.(MKCRON.NE.0)) CALL DT_CRONIN(1)
      IF ((IT.GT.1).AND.(MKCRON.NE.0)) CALL DT_CRONIN(2)

      NC = NPOINT(2)
c get a two-chain system from DTEVT1
      DO 3 I=1,NCSY
         IFP1 = IDHKK(NC)
         IFT1 = IDHKK(NC+1)
         IFP2 = IDHKK(NC+2)
         IFT2 = IDHKK(NC+3)
         DO 4 K=1,4
            PP1(K) = PHKK(K,NC)
            PT1(K) = PHKK(K,NC+1)
            PP2(K) = PHKK(K,NC+2)
            PT2(K) = PHKK(K,NC+3)
    4    CONTINUE
         MOP1 = NC
         MOT1 = NC+1
         MOP2 = NC+2
         MOT2 = NC+3
         CALL DT_GETCSY(IFP1,PP1,MOP1,IFP2,PP2,MOP2,
     &               IFT1,PT1,MOT1,IFT2,PT2,MOT2,IREJ1)
         IF (IREJ1.GT.0) THEN
            IRHHA = IRHHA+1
            IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in EVENTA'
            GOTO 9999
         ENDIF
         NC = NC+4
    3 CONTINUE

c meson/antibaryon projectile:
c sample single-chain valence-valence systems (Reggeon contrib.)
      IF ((IP.EQ.1).AND.(ISICHA.EQ.1)) THEN
         IF (IIBAR(ID).LE.0) CALL DT_VV2SCH
      ENDIF

      IF ((IRESCO.EQ.1).OR.(IFRAG(1).EQ.1)) THEN
c check DTEVT1 for remaining resonance mass corrections
         CALL DT_EVTRES(IREJ1)
         IF (IREJ1.GT.0) THEN
            IRRES(1) = IRRES(1)+1
            IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 2 in EVENTA'
            GOTO 9999
         ENDIF
      ENDIF

c assign p_t to two-"chain" systems consisting of two resonances only
c since only entries for chains will be affected, this is obsolete
c in case of JETSET-fragmetation
      CALL DT_RESPT

c combine q-aq chains to color ropes (qq-aqaq) (chain fusion)
      IF (LCO2CR) CALL DT_COM2CR

    5 CONTINUE

c fragmentation of the complete event
c*uncomment for internal phojet-fragmentation
C     CALL DT_EVTFRA(IREJ1)
      CALL DT_EVTFRG(2,IDUM,NPYMEM,IREJ1)
      IF (IREJ1.GT.0) THEN
         IRFRAG = IRFRAG+1
         IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 3 in EVENTA'
         GOTO 9999
      ENDIF

c decay of possible resonances (should be obsolete)
      CALL DT_DECAY1

      RETURN

 9999 CONTINUE
      IREVT = IREVT+1
      IREJ  = 1
      RETURN
      END
c
c===getcsy=============================================================*
c
CDECK  ID>, DT_GETCSY
      SUBROUTINE DT_GETCSY(IFPR1,PP1,MOP1,IFPR2,PP2,MOP2,
     &                  IFTA1,PT1,MOT1,IFTA2,PT2,MOT2,IREJ)

c***********************************************************************
c This version dated 15.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF


      DIMENSION PP1(4),PP2(4),PT1(4),PT2(4),
     &          IFP1(2),IFP2(2),IFT1(2),IFT2(2),PCH1(4),PCH2(4)

      IREJ  = 0

c get quark content of partons
      DO 1 I=1,2
         IFP1(I) = 0
         IFP2(I) = 0
         IFT1(I) = 0
         IFT2(I) = 0
    1 CONTINUE
      IFP1(1) = IDT_IPDG2B(IFPR1,1,2)
      IF (ABS(IFPR1).GE.1000) IFP1(2) = IDT_IPDG2B(IFPR1,2,2)
      IFP2(1) = IDT_IPDG2B(IFPR2,1,2)
      IF (ABS(IFPR2).GE.1000) IFP2(2) = IDT_IPDG2B(IFPR2,2,2)
      IFT1(1) = IDT_IPDG2B(IFTA1,1,2)
      IF (ABS(IFTA1).GE.1000) IFT1(2) = IDT_IPDG2B(IFTA1,2,2)
      IFT2(1) = IDT_IPDG2B(IFTA2,1,2)
      IF (ABS(IFTA2).GE.1000) IFT2(2) = IDT_IPDG2B(IFTA2,2,2)

c get kind of chains (1 - q-aq, 2 - q-qq/aq-aqaq, 3 - qq-aqaq)
      IDCH1 = 2
      IF ((IFP1(2).EQ.0).AND.(IFT1(2).EQ.0)) IDCH1 = 1
      IF ((IFP1(2).NE.0).AND.(IFT1(2).NE.0)) IDCH1 = 3
      IDCH2 = 2
      IF ((IFP2(2).EQ.0).AND.(IFT2(2).EQ.0)) IDCH2 = 1
      IF ((IFP2(2).NE.0).AND.(IFT2(2).NE.0)) IDCH2 = 3

c store initial configuration for energy-momentum cons. check
      IF (LEMCCK) CALL DT_EMC1(PP1,PP2,PT1,PT2,1,1,IDUM)

c sample intrinsic p_t at chain-ends
      CALL DT_GETSPT(PP1,IFPR1,IFP1,PP2,IFPR2,IFP2,
     &            PT1,IFTA1,IFT1,PT2,IFTA2,IFT2,
     &            AMCH1,IDCH1,AMCH2,IDCH2,IDCH(MOP1),IREJ1)
      IF (IREJ1.NE.0) THEN
         IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in GETCSY'
         IRPT = IRPT+1
         GOTO 9999
      ENDIF

C      IF ((IRESCO.EQ.1).OR.(IFRAG(1).EQ.1)) THEN
C         IF ((IDCH1.EQ.3).OR.((IDCH1.GT.1).AND.(IDCH2.EQ.1))) THEN
C* check second chain for resonance
C            CALL DT_CH2RES(IFP2(1),IFP2(2),IFT2(1),IFT2(2),IDR2,IDXR2,
C     &                  AMCH2,AMCH2N,IDCH2,IREJ1)
C            IF (IREJ1.NE.0) GOTO 9999
C            IF (IDR2.NE.0) THEN
C               CALL DT_CHKINE(PP2,IFPR2,PP1,IFPR1,PT2,IFTA2,PT1,IFTA1,
C     &                     AMCH2,AMCH2N,AMCH1,IREJ1)
C               IF (IREJ1.NE.0) GOTO 9999
C            ENDIF
C* check first chain for resonance
C            CALL DT_CH2RES(IFP1(1),IFP1(2),IFT1(1),IFT1(2),IDR1,IDXR1,
C     &                  AMCH1,AMCH1N,IDCH1,IREJ1)
C            IF (IREJ1.NE.0) GOTO 9999
C            IF (IDR1.NE.0) IDR1 = 100*IDR1
C         ELSE
C* check first chain for resonance
C            CALL DT_CH2RES(IFP1(1),IFP1(2),IFT1(1),IFT1(2),IDR1,IDXR1,
C     &                  AMCH1,AMCH1N,IDCH1,IREJ1)
C            IF (IREJ1.NE.0) GOTO 9999
C            IF (IDR1.NE.0) THEN
C               CALL DT_CHKINE(PP1,IFPR1,PP2,IFPR2,PT1,IFTA1,PT2,IFTA2,
C     &                     AMCH1,AMCH1N,AMCH2,IREJ1)
C               IF (IREJ1.NE.0) GOTO 9999
C            ENDIF
C* check second chain for resonance
C            CALL DT_CH2RES(IFP2(1),IFP2(2),IFT2(1),IFT2(2),IDR2,IDXR2,
C     &                  AMCH2,AMCH2N,IDCH2,IREJ1)
C            IF (IREJ1.NE.0) GOTO 9999
C            IF (IDR2.NE.0) IDR2 = 100*IDR2
C         ENDIF
C      ENDIF

      IF ((IRESCO.EQ.1).OR.(IFRAG(1).EQ.1)) THEN
c check chains for resonances
         CALL DT_CH2RES(IFP1(1),IFP1(2),IFT1(1),IFT1(2),IDR1,IDXR1,
     &               AMCH1,AMCH1N,IDCH1,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
         CALL DT_CH2RES(IFP2(1),IFP2(2),IFT2(1),IFT2(2),IDR2,IDXR2,
     &               AMCH2,AMCH2N,IDCH2,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
c change kinematics corresponding to resonance-masses
         IF ( (IDR1.NE.0).AND.(IDR2.EQ.0) ) THEN
            CALL DT_CHKINE(PP1,IFPR1,PP2,IFPR2,PT1,IFTA1,PT2,IFTA2,
     &                                 AMCH1,AMCH1N,AMCH2,IREJ1)
            IF (IREJ1.GT.0) GOTO 9999
            IF (IREJ1.EQ.-1) IDR1 = 100*IDR1
            CALL DT_CH2RES(IFP2(1),IFP2(2),IFT2(1),IFT2(2),IDR2,IDXR2,
     &                  AMCH2,AMCH2N,IDCH2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            IF (IDR2.NE.0) IDR2 = 100*IDR2
         ELSEIF ( (IDR1.EQ.0).AND.(IDR2.NE.0) ) THEN
            CALL DT_CHKINE(PP2,IFPR2,PP1,IFPR1,PT2,IFTA2,PT1,IFTA1,
     &                                 AMCH2,AMCH2N,AMCH1,IREJ1)
            IF (IREJ1.GT.0) GOTO 9999
            IF (IREJ1.EQ.-1) IDR2 = 100*IDR2
            CALL DT_CH2RES(IFP1(1),IFP1(2),IFT1(1),IFT1(2),IDR1,IDXR1,
     &                  AMCH1,AMCH1N,IDCH1,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            IF (IDR1.NE.0) IDR1 = 100*IDR1
         ELSEIF ( (IDR1.NE.0).AND.(IDR2.NE.0) ) THEN
            AMDIF1 = ABS(AMCH1-AMCH1N)
            AMDIF2 = ABS(AMCH2-AMCH2N)
            IF (AMDIF2.LT.AMDIF1) THEN
               CALL DT_CHKINE(PP2,IFPR2,PP1,IFPR1,PT2,IFTA2,PT1,IFTA1,
     &                                    AMCH2,AMCH2N,AMCH1,IREJ1)
               IF (IREJ1.GT.0) GOTO 9999
               IF (IREJ1.EQ.-1) IDR2 = 100*IDR2
               CALL DT_CH2RES(IFP1(1),IFP1(2),IFT1(1),IFT1(2),
     &                     IDR1,IDXR1,AMCH1,AMCH1N,IDCH1,IREJ1)
               IF (IREJ1.NE.0) GOTO 9999
               IF (IDR1.NE.0) IDR1 = 100*IDR1
            ELSE
               CALL DT_CHKINE(PP1,IFPR1,PP2,IFPR2,PT1,IFTA1,PT2,IFTA2,
     &                                    AMCH1,AMCH1N,AMCH2,IREJ1)
               IF (IREJ1.GT.0) GOTO 9999
               IF (IREJ1.EQ.-1) IDR1 = 100*IDR1
               CALL DT_CH2RES(IFP2(1),IFP2(2),IFT2(1),IFT2(2),
     &                     IDR2,IDXR2,AMCH2,AMCH2N,IDCH2,IREJ1)
               IF (IREJ1.NE.0) GOTO 9999
               IF (IDR2.NE.0) IDR2 = 100*IDR2
            ENDIF
         ENDIF
      ENDIF

c store final configuration for energy-momentum cons. check
      IF (LEMCCK) THEN
         CALL DT_EMC1(PP1,PP2,PT1,PT2,-2,1,IDUM)
         CALL DT_EMC1(PP1,PP2,PT1,PT2,3,1,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
      ENDIF

c put partons and chains into DTEVT1
      DO 10 I=1,4
         PCH1(I) = PP1(I)+PT1(I)
         PCH2(I) = PP2(I)+PT2(I)
   10 CONTINUE
      CALL DT_EVTPUT(-ISTHKK(MOP1),IFPR1,MOP1,0,PP1(1),PP1(2),
     &                                      PP1(3),PP1(4),0,0,0)
      CALL DT_EVTPUT(-ISTHKK(MOT1),IFTA1,MOT1,0,PT1(1),PT1(2),
     &                                      PT1(3),PT1(4),0,0,0)
      KCH = 100+IDCH(MOP1)*10+1
      CALL DT_EVTPUT(KCH,88888,-2,-1,
     &           PCH1(1),PCH1(2),PCH1(3),PCH1(4),IDR1,IDXR1,IDCH(MOP1))
      CALL DT_EVTPUT(-ISTHKK(MOP2),IFPR2,MOP2,0,PP2(1),PP2(2),
     &                                      PP2(3),PP2(4),0,0,0)
      CALL DT_EVTPUT(-ISTHKK(MOT2),IFTA2,MOT2,0,PT2(1),PT2(2),
     &                                      PT2(3),PT2(4),0,0,0)
      KCH = KCH+1
      CALL DT_EVTPUT(KCH,88888,-2,-1,
     &           PCH2(1),PCH2(2),PCH2(3),PCH2(4),IDR2,IDXR2,IDCH(MOP2))

      RETURN

 9999 CONTINUE
      IF ((IDCH(MOP1).LE.3).AND.(IDCH(MOP2).LE.3)) THEN
c "cancel" sea-sea chains
         CALL DT_RJSEAC(MOP1,MOP2,MOT1,MOT2,IREJ1)
         IF (IREJ1.NE.0) GOTO 9998
c*sr 16.5. flag for EVENTB
         IREJ = -1
         RETURN
      ENDIF
 9998 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===chkine=============================================================*
c
CDECK  ID>, DT_CHKINE
      SUBROUTINE DT_CHKINE(PP1I,IFP1,PP2I,IFP2,PT1I,IFT1,PT2I,IFT2,
     &                  AMCH1,AMCH1N,AMCH2,IREJ)

c***********************************************************************
c This subroutine replaces CORMOM.                                     *
c This version dated 05.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9,TINY10=1.0D-10)



c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC


      DIMENSION PP1(4),PP2(4),PT1(4),PT2(4),P1(4),P2(4),
     &          PP1I(4),PP2I(4),PT1I(4),PT2I(4)

      IREJ  = 0
      JMSHL = IMSHL

      SCALE  = AMCH1N/MAX(AMCH1,TINY10)
      DO 10 I=1,4
         PP1(I) = PP1I(I)
         PP2(I) = PP2I(I)
         PT1(I) = PT1I(I)
         PT2(I) = PT2I(I)
         PP2(I) = PP2(I)+(1.0D0-SCALE)*PP1(I)
         PT2(I) = PT2(I)+(1.0D0-SCALE)*PT1(I)
         PP1(I) = SCALE*PP1(I)
         PT1(I) = SCALE*PT1(I)
   10 CONTINUE
      IF ((PP1(4).LT.0.0D0).OR.(PP2(4).LT.0.0D0).OR.
     &    (PT1(4).LT.0.0D0).OR.(PT2(4).LT.0.0D0)) GOTO 9997

      ECH = PP2(4)+PT2(4)
      PCH = SQRT( (PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2+
     &                               (PP2(3)+PT2(3))**2 )
      AMCH22 = (ECH-PCH)*(ECH+PCH)
      IF (AMCH22.LT.0.0D0) THEN
         IF (IOULEV(1).GT.0)
     &      WRITE(ErrorOut,
     * '(1X,A)') 'CHKINE: inconsistent treatment!'
         GOTO 9997
      ENDIF

      AMCH1 = AMCH1N
      AMCH2 = SQRT(AMCH22)

c put partons again on mass shell
   13 CONTINUE
      XM1 = 0.0D0
      XM2 = 0.0D0
      IF (JMSHL.EQ.1) THEN

         XM1 = PYMASS(IFP1)
         XM2 = PYMASS(IFT1)

      ENDIF
      CALL DT_MASHEL(PP1,PT1,XM1,XM2,P1,P2,IREJ1)
      IF (IREJ1.NE.0) THEN
         IF (JMSHL.EQ.0) GOTO 9998
         JMSHL = 0
         GOTO 13
      ENDIF
      JMSHL = IMSHL
      DO 11 I=1,4
         PP1(I) = P1(I)
         PT1(I) = P2(I)
   11 CONTINUE
   14 CONTINUE
      XM1 = 0.0D0
      XM2 = 0.0D0
      IF (JMSHL.EQ.1) THEN

         XM1 = PYMASS(IFP2)
         XM2 = PYMASS(IFT2)

      ENDIF
      CALL DT_MASHEL(PP2,PT2,XM1,XM2,P1,P2,IREJ1)
      IF (IREJ1.NE.0) THEN
         IF (JMSHL.EQ.0) GOTO 9998
         JMSHL = 0
         GOTO 14
      ENDIF
      DO 12 I=1,4
         PP2(I) = P1(I)
         PT2(I) = P2(I)
   12 CONTINUE
      DO 15 I=1,4
         PP1I(I) = PP1(I)
         PP2I(I) = PP2(I)
         PT1I(I) = PT1(I)
         PT2I(I) = PT2(I)
   15 CONTINUE
      RETURN

 9997 IRCHKI(1) = IRCHKI(1)+1
c*sr
C     GOTO 9999
      IREJ = -1
      RETURN
c*
 9998 IRCHKI(2) = IRCHKI(2)+1

 9999 CONTINUE
      IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in CHKINE'
      IREJ = 1
      RETURN
      END
c
c===ch2res=============================================================*
c
CDECK  ID>, DT_CH2RES
      SUBROUTINE DT_CH2RES(IF1,IF2,IF3,IF4,IDR,IDXR,
     &                  AM,AMN,IMODE,IREJ)

c***********************************************************************
c Check chains for resonance production.                               *
c This subroutine replaces COMCMA/COBCMA/COMCM2                        *
c    input:                                                            *
c          IF1,2,3,4    input flavors (q,aq in any order)              *
c          AM           chain mass                                     *
c          MODE = 1     check q-aq chain for meson-resonance           *
c               = 2     check q-qq, aq-aqaq chain for baryon-resonance *
c               = 3     check qq-aqaq chain for lower mass cut         *
c    output:                                                           *
c          IDR = 0      no resonances found                            *
c              = -1     pseudoscalar meson/octet baryon                *
c              = 1      vector-meson/decuplet baryon                   *
c          IDXR         BAMJET-index of corresponding resonance        *
c          AMN          mass of corresponding resonance                *
c                                                                      *
c          IREJ         rejection flag                                 *
c This version dated 06.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c quark-content to particle index conversion (DTUNUC 1.x)
      COMMON /DTQ2ID/ IMPS(6,6),IMVE(6,6),IB08(6,21),IB10(6,21),
     &                IA08(6,21),IA10(6,21)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME


      DIMENSION IF(4),JF(4)

c*sr 4.7. test
C     DATA AMLOM,AMLOB /0.08D0,0.2D0/
      DATA AMLOM,AMLOB /0.1D0,0.7D0/
c*
C     DATA AMLOM,AMLOB /0.001D0,0.001D0/

      MODE = ABS(IMODE)

      IF ((MODE.LT.1).OR.(MODE.GT.3)) THEN
         WRITE(ErrorOut,1000) MODE
 1000    FORMAT(1X,'CH2RES: MODE ',I4,' NOT SUPPORTED!',/,
     &          1X,'        PROGRAM STOPPED')
         STOP
      ENDIF

      AMX  = AM
      IREJ = 0
      IDR  = 0
      IDXR = 0
      AMN  = AMX
      IF ((AM.LE.0.0D0).AND.(MODE.EQ.1)) AMX = AMLOM
      IF ((AM.LE.0.0D0).AND.(MODE.EQ.2)) AMX = AMLOB

      IF(1) = IF1
      IF(2) = IF2
      IF(3) = IF3
      IF(4) = IF4
      NF = 0
      DO 100 I=1,4
         IF (IF(I).NE.0) THEN
            NF = NF+1
            JF(NF) = IF(I)
         ENDIF
  100 CONTINUE
      IF (NF.LE.MODE) THEN
         WRITE(ErrorOut,1001) MODE,IF
 1001    FORMAT(1X,'CH2RES: INCONSISTENT INPUT FLAVORS IN MODE ',
     &   I4,' IF1 = ',I4,' IF2 = ',I4,' IF3 = ',I4,' IF4 = ',I4)
         GOTO 9999
      ENDIF

      GOTO (1,2,3) MODE

c check for meson resonance
    1 CONTINUE
      IFQ  = JF(1)
      IFAQ = ABS(JF(2))
      IF (JF(2).GT.0) THEN
         IFQ  = JF(2)
         IFAQ = ABS(JF(1))
      ENDIF
      IFPS = IMPS(IFAQ,IFQ)
      IFV  = IMVE(IFAQ,IFQ)
      AMPS = AAM(IFPS)
      AMV  = AAM(IFV)
      AMHI = AMV+0.3D0
      IF (AMX.LT.AMV) THEN
         IF (AMX.LT.AMPS) THEN
            IF (IMODE.GT.0) THEN
               IF ((IRESRJ.EQ.1).OR.(AMX.LT.AMLOM)) GOTO 9999
            ELSE
               IF (AMX.LT.0.8D0*AMPS) GOTO 9999
            ENDIF
            LOMRES = LOMRES+1
         ENDIF
c    replace chain by pseudoscalar meson
         IDR  = -1
         IDXR = IFPS
         AMN  = AMPS
      ELSEIF (AMX.LT.AMHI) THEN
c    replace chain by vector-meson
         IDR  = 1
         IDXR = IFV
         AMN  = AMV
      ENDIF
      RETURN

c check for baryon resonance
    2 CONTINUE
      CALL DT_DBKLAS(JF(1),JF(2),JF(3),JB8,JB10)
      AM8  = AAM(JB8)
      AM10 = AAM(JB10)
      AMHI = AM10+0.3D0
      IF (AMX.LT.AM10) THEN
         IF (AMX.LT.AM8) THEN
            IF (IMODE.GT.0) THEN
               IF ((IRESRJ.EQ.1).OR.(AMX.LT.AMLOB)) GOTO 9999
            ELSE
               IF (AMX.LT.0.8D0*AM8) GOTO 9999
            ENDIF
            LOBRES = LOBRES+1
         ENDIF
c    replace chain by oktet baryon
         IDR  = -1
         IDXR = JB8
         AMN  = AM8
      ELSEIF (AMX.LT.AMHI) THEN
         IDR  = 1
         IDXR = JB10
         AMN  = AM10
      ENDIF
      RETURN

c check qq-aqaq for lower mass cut
    3 CONTINUE
c   empirical definition of AMHI to allow for (b-antib)-pair prod.
      AMHI = 2.5D0
      IF (AMX.LT.AMHI) GOTO 9999
      RETURN

 9999 CONTINUE
      IF ((IOULEV(1).GT.0).AND.(IMODE.GT.0))
     &    WRITE(ErrorOut,*) 'rejected 1 in CH2RES',IMODE
      IREJ = 1
      IRRES(2) = IRRES(2)+1
      RETURN
      END
c
c===rjseac=============================================================*
c
CDECK  ID>, DT_RJSEAC
      SUBROUTINE DT_RJSEAC(MOP1,MOP2,MOT1,MOT2,IREJ)

c***********************************************************************
c ReJection of SEA-sea Chains.                                         *
c         MOP1/2       entries of projectile sea-partons in DTEVT1     *
c         MOT1/2       entries of projectile sea-partons in DTEVT1     *
c This version dated 16.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ZERO=0.0D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)


      DIMENSION IDXSEA(2,2),IDXNUC(2),ISTVAL(2)

      IREJ = 0

c projectile sea q-aq-pair
c    indices of sea-pair
      IDXSEA(1,1) = MOP1
      IDXSEA(1,2) = MOP2
c    index of mother-nucleon
      IDXNUC(1)   = JMOHKK(1,MOP1)
c    status of valence quarks to be corrected
      ISTVAL(1)   = -21

c target sea q-aq-pair
c    indices of sea-pair
      IDXSEA(2,1) = MOT1
      IDXSEA(2,2) = MOT2
c    index of mother-nucleon
      IDXNUC(2)   = JMOHKK(1,MOT1)
c    status of valence quarks to be corrected
      ISTVAL(2)   = -22

      DO 1 N=1,2
         IDONE = 0
         DO 2 I=NPOINT(2),NHKK
            IF ((ISTHKK(I).EQ.ISTVAL(N)).AND.
     &          (JMOHKK(1,I).EQ.IDXNUC(N)))   THEN
c valence parton found
c    inrease 4-momentum by sea 4-momentum
               DO 3 K=1,4
                  PHKK(K,I) = PHKK(K,I)+PHKK(K,IDXSEA(N,1))+
     &                                  PHKK(K,IDXSEA(N,2))
    3          CONTINUE
               PHKK(5,I) = SQRT(ABS(PHKK(4,I)**2-PHKK(1,I)**2-
     &                              PHKK(2,I)**2-PHKK(3,I)**2))
c    "cancel" sea-pair
               DO 4 J=1,2
                  ISTHKK(IDXSEA(N,J))   = 100
                  IDHKK(IDXSEA(N,J))    = 0
                  JMOHKK(1,IDXSEA(N,J)) = 0
                  JMOHKK(2,IDXSEA(N,J)) = 0
                  JDAHKK(1,IDXSEA(N,J)) = 0
                  JDAHKK(2,IDXSEA(N,J)) = 0
                  DO 5 K=1,4
                     PHKK(K,IDXSEA(N,J)) = ZERO
                     VHKK(K,IDXSEA(N,J)) = ZERO
                     WHKK(K,IDXSEA(N,J)) = ZERO
    5             CONTINUE
                  PHKK(5,IDXSEA(N,J)) = ZERO
    4          CONTINUE
               IDONE = 1
            ENDIF
    2    CONTINUE
         IF (IDONE.NE.1) THEN
            WRITE(ErrorOut,1000) NEVHKK,MOP1,MOP2,MOT1,MOT2
 1000       FORMAT(1X,'RJSEAC: EVENT ',I8,': INCONSISTENT EVENT',
     &                '-RECORD!',/,1X,'        SEA-QUARK PAIRS   ',
     &                2I5,4X,2I5,'   COULD NOT BE CANCELED!')
            GOTO 9999
         ENDIF
    1 CONTINUE
      ICRJSS = ICRJSS+1
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===vv2sch=============================================================*
c
CDECK  ID>, DT_VV2SCH
      SUBROUTINE DT_VV2SCH

c***********************************************************************
c Change Valence-Valence chain systems to Single CHain systems for     *
c hadron-nucleus collisions with meson or antibaryon projectile.       *
c (Reggeon contribution)                                               *
c The single chain system is approximately treated as one chain and a  *
c meson at rest.                                                       *
c This version dated 18.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY7=1.0D-7,TINY3=1.0D-3)

      LOGICAL LSTART

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)


      DIMENSION IF(4,2),MO(4),PP1(4),PP2(4),PT1(4),PT2(4),PCH1(4),
     &          PCH2(4)

      DATA LSTART /.TRUE./

      IFSC  = 0
      IF (LSTART) THEN
         WRITE(ErrorOut,1000)
 1000    FORMAT(/,1X,'VV2SCH:  REGGEON CONTRIBUTION TO VALANCE-',
     &          'VALENCE CHAINS TREATED')
         LSTART = .FALSE.
      ENDIF

      NSTOP = NHKK

c get index of first chain
      DO 1 I=NPOINT(3),NHKK
         IF (IDHKK(I).EQ.88888) THEN
            NC = I
            GOTO 2
         ENDIF
    1 CONTINUE

    2 CONTINUE
      IF ((IDHKK(NC).EQ.88888).AND.(IDHKK(NC+3).EQ.88888)
     &                        .AND.(NC.LT.NSTOP)) THEN
c get valence-valence chains
         IF ((IDCH(NC).EQ.8).AND.(IDCH(NC+3).EQ.8)) THEN
c   get "mother"-hadron indices
            MO1   = JMOHKK(1,JMOHKK(1,JMOHKK(1,NC)))
            MO2   = JMOHKK(1,JMOHKK(1,JMOHKK(2,NC)))
            KPROJ = IDT_ICIHAD(IDHKK(MO1))
            KTARG = IDT_ICIHAD(IDHKK(MO2))
c   Lab momentum of projectile hadron
            CALL DT_LTNUC(PHKK(3,MO1),PHKK(4,MO1),PPZ,PPE,-3)
            PTOT  = SQRT(PHKK(1,MO1)**2+PHKK(2,MO1)**2+
     &                                  PHKK(3,MO1)**2)

            SICHAP = DT_PHNSCH(KPROJ,KTARG,PTOT)
            IF (DT_RNDM(PTOT).LE.SICHAP) THEN
               ICVV2S = ICVV2S+1
c   single chain requested
c      get flavors of chain-end partons
               MO(1) = JMOHKK(1,NC)
               MO(2) = JMOHKK(2,NC)
               MO(3) = JMOHKK(1,NC+3)
               MO(4) = JMOHKK(2,NC+3)
               DO 3 I=1,4
                  IF(I,1) = IDT_IPDG2B(IDHKK(MO(I)),1,2)
                  IF(I,2) = 0
                  IF (ABS(IDHKK(MO(I))).GE.1000)
     &               IF(I,2) = IDT_IPDG2B(IDHKK(MO(I)),2,2)
    3          CONTINUE
c      which one is the q-aq chain?
c        N1,N1+1 - DTEVT1-entries for q-aq system
c        N2,N2+1 - DTEVT1-entries for the other chain
               IF ((IF(1,2).EQ.0).AND.(IF(2,2).EQ.0)) THEN
                  K1 = 1
                  K2 = 3
                  N1 = NC-2
                  N2 = NC+1
               ELSEIF ((IF(3,2).EQ.0).AND.(IF(4,2).EQ.0)) THEN
                  K1 = 3
                  K2 = 1
                  N1 = NC+1
                  N2 = NC-2
               ELSE
                  GOTO 10
               ENDIF
               DO 4 K=1,4
                  PP1(K) = PHKK(K,N1)
                  PT1(K) = PHKK(K,N1+1)
                  PP2(K) = PHKK(K,N2)
                  PT2(K) = PHKK(K,N2+1)
    4          CONTINUE
               AMCH1 = PHKK(5,N1+2)
               AMCH2 = PHKK(5,N2+2)
c      get meson-identity corresponding to flavors of q-aq chain
               ITMP   = IRESRJ
               IRESRJ = 0
               CALL DT_CH2RES(IF(K1,1),IF(K1+1,1),0,0,IDR1,IDXR1,
     &                     ZERO,AMCH1N,1,IDUM)
               IRESRJ = ITMP
c      change kinematics of chains
               CALL DT_CHKINE(PP1,IDHKK(N1),  PP2,IDHKK(N2),
     &                     PT1,IDHKK(N1+1),PT2,IDHKK(N2+1),
     &                     AMCH1,AMCH1N,AMCH2,IREJ1)
               IF (IREJ1.NE.0) GOTO 10
c      check second chain for resonance
               IDCHAI = 2
               IF ((IF(K2,2).NE.0).AND.(IF(K2+1,2).NE.0)) IDCHAI = 3
               CALL DT_CH2RES(IF(K2,1),IF(K2,2),IF(K2+1,1),IF(K2+1,2),
     &                     IDR2,IDXR2,AMCH2,AMCH2N,IDCHAI,IREJ1)
               IF (IREJ1.NE.0) GOTO 10
               IF (IDR2.NE.0) IDR2 = 100*IDR2
c      add partons and chains to DTEVT1
               DO 5 K=1,4
                  PCH1(K) = PP1(K)+PT1(K)
                  PCH2(K) = PP2(K)+PT2(K)
    5          CONTINUE
               CALL DT_EVTPUT(ISTHKK(N1),IDHKK(N1),N1,0,PP1(1),PP1(2),
     &                                             PP1(3),PP1(4),0,0,0)
               CALL DT_EVTPUT(ISTHKK(N1+1),IDHKK(N1+1),N1+1,0,PT1(1),
     &                                      PT1(2),PT1(3),PT1(4),0,0,0)
               KCH = ISTHKK(N1+2)+100
               CALL DT_EVTPUT(KCH,88888,-2,-1,PCH1(1),PCH1(2),PCH1(3),
     &                     PCH1(4),IDR1,IDXR1,IDCH(N1+2))
               IDHKK(N1+2) = 22222
               CALL DT_EVTPUT(ISTHKK(N2),IDHKK(N2),N2,0,PP2(1),PP2(2),
     &                                             PP2(3),PP2(4),0,0,0)
               CALL DT_EVTPUT(ISTHKK(N2+1),IDHKK(N2+1),N2+1,0,PT2(1),
     &                                      PT2(2),PT2(3),PT2(4),0,0,0)
               KCH = ISTHKK(N2+2)+100
               CALL DT_EVTPUT(KCH,88888,-2,-1,PCH2(1),PCH2(2),PCH2(3),
     &                     PCH2(4),IDR2,IDXR2,IDCH(N2+2))
               IDHKK(N2+2) = 22222
            ENDIF
         ENDIF
      ELSE
         GOTO 11
      ENDIF
   10 CONTINUE
      NC = NC+6
      GOTO 2

   11 CONTINUE

      RETURN
      END
c
c=== phnsch ===========================================================*
c
CDECK  ID>, DT_PHNSCH
      DOUBLE PRECISION FUNCTION DT_PHNSCH( KP, KTARG, PLAB )

c----------------------------------------------------------------------*
c                                                                      *
c     Probability for Hadron Nucleon Single CHain interactions:        *
c                                                                      *
c     Created on 30 december 1993  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 04-jan-94     by    Alfredo Ferrari               *
c                                                                      *
c             modified by J.R.for use in DTUNUC  6.1.94                *
c                                                                      *
c     Input variables:                                                 *
c                      Kp = hadron projectile index (Part numbering    *
c                           scheme)                                    *
c                   Ktarg = target nucleon index (1=proton, 8=neutron) *
c                    Plab = projectile laboratory momentum (GeV/c)     *
c     Output variable:                                                 *
c                  Phnsch = probability per single chain (particle     *
c                           exchange) interactions                     *
c                                                                      *
c----------------------------------------------------------------------*

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

      PARAMETER ( LUNOUT = 6  )
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )

      PARAMETER ( NALLWP = 39   )
      PARAMETER ( IDMAXP = 210  )

      DIMENSION ICHRGE(39),AM(39)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      DIMENSION KPTOIP(210)
c auxiliary common for reggeon exchange (DTUNUC 1.x)
      COMMON /DTQUAR/ IQECHR(-6:6),IQBCHR(-6:6),IQICHR(-6:6),
     &                IQSCHR(-6:6),IQCCHR(-6:6),IQUCHR(-6:6),
     &                IQTCHR(-6:6),MQUARK(3,39)


      DIMENSION SGTCOE (5,33), IHLP (NALLWP)
      DIMENSION SGTCO1(5,10),SGTCO2(5,8),SGTCO3(5,15)
c//////// KK
c      SAVE SGTCOE, IHLP
c      SAVE IQFSC1, IQFSC2, IQBSC1, IQBSC2
c//////////
      EQUIVALENCE (SGTCO1(1,1),SGTCOE(1,1))
      EQUIVALENCE (SGTCO2(1,1),SGTCOE(1,11))
      EQUIVALENCE (SGTCO3(1,1),SGTCOE(1,19))

c Conversion from part to paprop numbering
      DATA KPTOIP / 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
     & 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 66*0,
     & 34, 36, 31, 32, 33, 35, 37, 5*0, 38, 5*0, 39, 19*0, 27, 28, 74*0/

c  1=baryon, 2=pion, 3=kaon, 4=antibaryon:
      DATA IHLP/1,4,5*0,1,4,2*0,3,2*2,2*3,1,4,3,3*1,2,
     &    2*3, 2, 4*0, 3*4, 1, 4, 1, 4, 1, 4 /
C     DATA ( ( SGTCOE (J,I), J=1,5 ), I=1,10 ) /
      DATA  SGTCO1  /
c 1st reaction: gamma p total
     &0.147 D+00, ZERZER  , ZERZER   , 0.0022D+00, -0.0170D+00,
c 2nd reaction: gamma d total
     &0.300 D+00, ZERZER  , ZERZER   , 0.0095D+00, -0.057 D+00,
c 3rd reaction: pi+ p total
     &16.4  D+00, 19.3D+00, -0.42D+00, 0.19  D+00, ZERZER     ,
c 4th reaction: pi- p total
     &33.0  D+00, 14.0D+00, -1.36D+00, 0.456 D+00, -4.03  D+00,
c 5th reaction: pi+/- d total
     &56.8  D+00, 42.2D+00, -1.45D+00, 0.65  D+00, -5.39  D+00,
c 6th reaction: K+ p total
     &18.1  D+00, ZERZER  , ZERZER   , 0.26  D+00, -1.0   D+00,
c 7th reaction: K+ n total
     &18.7  D+00, ZERZER  , ZERZER   , 0.21  D+00, -0.89  D+00,
c 8th reaction: K+ d total
     &34.2  D+00, 7.9 D+00, -2.1 D+00, 0.346 D+00, -0.99  D+00,
c 9th reaction: K- p total
     &32.1  D+00, ZERZER  , ZERZER   , 0.66  D+00, -5.6   D+00,
c 10th reaction: K- n total
     &25.2  D+00, ZERZER  , ZERZER   , 0.38  D+00, -2.9   D+00/
C     DATA ( ( SGTCOE (J,I), J=1,5 ), I=11,18 ) /
      DATA  SGTCO2  /
c 11th reaction: K- d total
     &57.6  D+00, ZERZER  , ZERZER   , 1.17  D+00, -9.5   D+00,
c 12th reaction: p p total
     &48.0  D+00, ZERZER  , ZERZER   , 0.522 D+00, -4.51  D+00,
c 13th reaction: p n total
     &47.30 D+00, ZERZER  , ZERZER   , 0.513 D+00, -4.27  D+00,
c 14th reaction: p d total
     &91.3  D+00, ZERZER  , ZERZER   , 1.05  D+00, -8.8   D+00,
c 15th reaction: pbar p total
     &38.4  D+00, 77.6D+00, -0.64D+00, 0.26  D+00, -1.2   D+00,
c 16th reaction: pbar n total
     &ZERZER    ,133.6D+00, -0.70D+00, -1.22 D+00, 13.7   D+00,
c 17th reaction: pbar d total
     &112.  D+00, 125.D+00, -1.08D+00, 1.14  D+00, -12.4  D+00,
c 18th reaction: Lamda p total
     &30.4  D+00, ZERZER  , ZERZER   , ZERZER    , 1.6    D+00/
C     DATA ( ( SGTCOE (J,I), J=1,5 ), I=19,33 ) /
      DATA SGTCO3  /
c 19th reaction: pi+ p elastic
     &ZERZER    , 11.4D+00, -0.4 D+00, 0.079 D+00, ZERZER     ,
c 20th reaction: pi- p elastic
     &1.76  D+00, 11.2D+00, -0.64D+00, 0.043 D+00, ZERZER     ,
c 21st reaction: K+ p elastic
     &5.0   D+00, 8.1 D+00, -1.8 D+00, 0.16  D+00, -1.3   D+00,
c 22nd reaction: K- p elastic
     &7.3   D+00, ZERZER  , ZERZER   , 0.29  D+00, -2.40  D+00,
c 23rd reaction: p p elastic
     &11.9  D+00, 26.9D+00, -1.21D+00, 0.169 D+00, -1.85  D+00,
c 24th reaction: p d elastic
     &16.1  D+00, ZERZER  , ZERZER   , 0.32  D+00, -3.4   D+00,
c 25th reaction: pbar p elastic
     &10.2  D+00, 52.7D+00, -1.16D+00, 0.125 D+00, -1.28  D+00,
c 26th reaction: pbar p elastic bis
     &10.6  D+00, 53.1D+00, -1.19D+00, 0.136 D+00, -1.41  D+00,
c 27th reaction: pbar n elastic
     &36.5  D+00, ZERZER  , ZERZER   , ZERZER    , -11.9  D+00,
c 28th reaction: Lamda p elastic
     &12.3  D+00, ZERZER  , ZERZER   , ZERZER    , -2.4   D+00,
c 29th reaction: K- p ela bis
     &7.24  D+00, 46.0D+00, -4.71D+00, 0.279 D+00, -2.35  D+00,
c 30th reaction: pi- p cx
     &ZERZER    ,0.912D+00, -1.22D+00, ZERZER    , ZERZER     ,
c 31st reaction: K- p cx
     &ZERZER    , 3.39D+00, -1.75D+00, ZERZER    , ZERZER     ,
c 32nd reaction: K+ n cx
     &ZERZER    , 7.18D+00, -2.01D+00, ZERZER    , ZERZER     ,
c 33rd reaction: pbar p cx
     &ZERZER    , 18.8D+00, -2.01D+00, ZERZER    , ZERZER     /
c
c  +-------------------------------------------------------------------*
         ICHRGE(KTARG)=IICH(KTARG)
         AM    (KTARG)=AAM (KTARG)
c  |  Check for pi0 (d-dbar)
      IF ( KP .NE. 26 ) THEN
         IP  = KPTOIP (KP)
         IF(IP.EQ.0)IP=1
         ICHRGE(IP)=IICH(KP)
         AM    (IP)=AAM (KP)
c  |
c  +-------------------------------------------------------------------*
c  |
      ELSE
         IP = 23
         ICHRGE(IP)=0
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  No such interactions for baryon-baryon
      IF ( IIBAR (KP) .GT. 0 ) THEN
         DT_PHNSCH = ZERZER
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  No "annihilation" diagram possible for K+ p/n
      ELSE IF ( IP .EQ. 15 ) THEN
         DT_PHNSCH = ZERZER
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  No "annihilation" diagram possible for K0 p/n
      ELSE IF ( IP .EQ. 24 ) THEN
         DT_PHNSCH = ZERZER
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  No "annihilation" diagram possible for Omebar p/n
      ELSE IF ( IP .GE. 38 ) THEN
         DT_PHNSCH = ZERZER
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  If the momentum is larger than 50 GeV/c, compute the single
c  |  chain probability at 50 GeV/c and extrapolate to the present
c  |  momentum according to 1/sqrt(s)
c  |  sigma = sigma_sch (50) * sqrt (s(50)/s) + sigma_dch
c  |  P_sch (50) = sigma_sch (50) / ( sigma_dch + sigma_sch (50) )
c  |  sigma_dch / sigma_sch (50) = 1 / P_sch (50) - 1
c  |  sigma_dch / sigma_sch = 1 / P_sch - 1 = ( 1 / P_sch (50) - 1 )
c  |                        x sqrt(s/s(50))
c  |  P_sch = 1 / [ ( 1 / P_sch (50) - 1 ) x sqrt(s/s(50)) + 1 ]
      IF ( PLAB .GT. 50.D+00 ) THEN
         PLA    = 50.D+00
         AMPSQ  = AM (IP)**2
         AMTSQ  = AM (KTARG)**2
         EPROJ  = SQRT ( PLAB**2 + AMPSQ )
         UMOSQ  = AMPSQ + AMTSQ + TWOTWO * AM (KTARG) * EPROJ
         EPROJ  = SQRT ( PLA**2 + AMPSQ )
         UMO50  = AMPSQ + AMTSQ + TWOTWO * AM (KTARG) * EPROJ
         UMORAT = SQRT ( UMOSQ / UMO50 )
c  |
c  +-------------------------------------------------------------------*
c  |  P < 3 GeV/c
      ELSE IF ( PLAB .LT. 3.D+00 ) THEN
         PLA    = 3.D+00
         AMPSQ  = AM (IP)**2
         AMTSQ  = AM (KTARG)**2
         EPROJ  = SQRT ( PLAB**2 + AMPSQ )
         UMOSQ  = AMPSQ + AMTSQ + TWOTWO * AM (KTARG) * EPROJ
         EPROJ  = SQRT ( PLA**2 + AMPSQ )
         UMO50  = AMPSQ + AMTSQ + TWOTWO * AM (KTARG) * EPROJ
         UMORAT = SQRT ( UMOSQ / UMO50 )
c  |
c  +-------------------------------------------------------------------*
c  |  P < 50 GeV/c
      ELSE
         PLA    = PLAB
         UMORAT = ONEONE
      END IF
c  |
c  +-------------------------------------------------------------------*
      ALGPLA = LOG (PLA)
c  +-------------------------------------------------------------------*
c  |  Pions:
      IF ( IHLP (IP) .EQ. 2 ) THEN
         ACOF = SGTCOE (1,3)
         BCOF = SGTCOE (2,3)
         ENNE = SGTCOE (3,3)
         CCOF = SGTCOE (4,3)
         DCOF = SGTCOE (5,3)
c  |  Compute the pi+ p total cross section:
         SPPPTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
         ACOF = SGTCOE (1,19)
         BCOF = SGTCOE (2,19)
         ENNE = SGTCOE (3,19)
         CCOF = SGTCOE (4,19)
         DCOF = SGTCOE (5,19)
c  |  Compute the pi+ p elastic cross section:
         SPPPEL = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
c  |  Compute the pi+ p inelastic cross section:
         SPPPIN = SPPPTT - SPPPEL
         ACOF = SGTCOE (1,4)
         BCOF = SGTCOE (2,4)
         ENNE = SGTCOE (3,4)
         CCOF = SGTCOE (4,4)
         DCOF = SGTCOE (5,4)
c  |  Compute the pi- p total cross section:
         SPMPTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
         ACOF = SGTCOE (1,20)
         BCOF = SGTCOE (2,20)
         ENNE = SGTCOE (3,20)
         CCOF = SGTCOE (4,20)
         DCOF = SGTCOE (5,20)
c  |  Compute the pi- p elastic cross section:
         SPMPEL = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
c  |  Compute the pi- p inelastic cross section:
         SPMPIN = SPMPTT - SPMPEL
         SIGDIA = SPMPIN - SPPPIN
c  |  +----------------------------------------------------------------*
c  |  |  Charged pions: besides isospin consideration it is supposed
c  |  |                 that (pi+ n)el is almost equal to (pi- p)el
c  |  |                 and  (pi+ p)el "    "     "    "  (pi- n)el
c  |  |                 and all are almost equal among each others
c  |  |                 (reasonable above 5 GeV/c)
         IF ( ICHRGE (IP) .NE. 0 ) THEN
            KHELP = KTARG / 8
            JREAC = 3 + IP - 13 + ICHRGE (IP) * KHELP
            ACOF = SGTCOE (1,JREAC)
            BCOF = SGTCOE (2,JREAC)
            ENNE = SGTCOE (3,JREAC)
            CCOF = SGTCOE (4,JREAC)
            DCOF = SGTCOE (5,JREAC)
c  |  |  Compute the total cross section:
            SHNCTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &             + DCOF * ALGPLA
            JREAC = 19 + IP - 13 + ICHRGE (IP) * KHELP
            ACOF = SGTCOE (1,JREAC)
            BCOF = SGTCOE (2,JREAC)
            ENNE = SGTCOE (3,JREAC)
            CCOF = SGTCOE (4,JREAC)
            DCOF = SGTCOE (5,JREAC)
c  |  |  Compute the elastic cross section:
            SHNCEL = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &             + DCOF * ALGPLA
c  |  |  Compute the inelastic cross section:
            SHNCIN = SHNCTT - SHNCEL
c  |  |  Number of diagrams:
            NDIAGR = 1 + IP - 13 + ICHRGE (IP) * KHELP
c  |  |  Now compute the chain end (anti)quark-(anti)diquark
            IQFSC1 = 1 + IP - 13
            IQFSC2 = 0
            IQBSC1 = 1 + KHELP
            IQBSC2 = 1 + IP - 13
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  pi0: besides isospin consideration it is supposed that the
c  |  |       elastic cross section is not very different from
c  |  |       pi+ p and/or pi- p (reasonable above 5 GeV/c)
         ELSE
            KHELP  = KTARG / 8
            K2HLP  = ( KP - 23 ) / 3
c  |  |  Number of diagrams:
c  |  |  For u ubar (k2hlp=0):
c           NDIAGR = 2 - KHELP
c  |  |  For d dbar (k2hlp=1):
c           NDIAGR = 2 + KHELP - K2HLP
            NDIAGR = 2 + KHELP * ( 2 * K2HLP - 1 ) - K2HLP
            SHNCIN = HLFHLF * ( SPPPIN + SPMPIN )
c  |  |  Now compute the chain end (anti)quark-(anti)diquark
            IQFSC1 = 1 + K2HLP
            IQFSC2 = 0
            IQBSC1 = 1 + KHELP
            IQBSC2 = 2 - K2HLP
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |                                                   end pi's
c  +-------------------------------------------------------------------*
c  |  Kaons:
      ELSE IF ( IHLP (IP) .EQ. 3 ) THEN
         ACOF = SGTCOE (1,6)
         BCOF = SGTCOE (2,6)
         ENNE = SGTCOE (3,6)
         CCOF = SGTCOE (4,6)
         DCOF = SGTCOE (5,6)
c  |  Compute the K+ p total cross section:
         SKPPTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
         ACOF = SGTCOE (1,21)
         BCOF = SGTCOE (2,21)
         ENNE = SGTCOE (3,21)
         CCOF = SGTCOE (4,21)
         DCOF = SGTCOE (5,21)
c  |  Compute the K+ p elastic cross section:
         SKPPEL = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
c  |  Compute the K+ p inelastic cross section:
         SKPPIN = SKPPTT - SKPPEL
         ACOF = SGTCOE (1,9)
         BCOF = SGTCOE (2,9)
         ENNE = SGTCOE (3,9)
         CCOF = SGTCOE (4,9)
         DCOF = SGTCOE (5,9)
c  |  Compute the K- p total cross section:
         SKMPTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
         ACOF = SGTCOE (1,22)
         BCOF = SGTCOE (2,22)
         ENNE = SGTCOE (3,22)
         CCOF = SGTCOE (4,22)
         DCOF = SGTCOE (5,22)
c  |  Compute the K- p elastic cross section:
         SKMPEL = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
c  |  Compute the K- p inelastic cross section:
         SKMPIN = SKMPTT - SKMPEL
         SIGDIA = HLFHLF * ( SKMPIN - SKPPIN )
c  |  +----------------------------------------------------------------*
c  |  |  Charged Kaons: actually only K-
         IF ( ICHRGE (IP) .NE. 0 ) THEN
            KHELP = KTARG / 8
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Proton target:
            IF ( KHELP .EQ. 0 ) THEN
               SHNCIN = SKMPIN
c  |  |  |  Number of diagrams:
               NDIAGR = 2
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Neutron target: besides isospin consideration it is supposed
c  |  |  |              that (K- n)el is almost equal to (K- p)el
c  |  |  |              (reasonable above 5 GeV/c)
            ELSE
               ACOF = SGTCOE (1,10)
               BCOF = SGTCOE (2,10)
               ENNE = SGTCOE (3,10)
               CCOF = SGTCOE (4,10)
               DCOF = SGTCOE (5,10)
c  |  |  |  Compute the total cross section:
               SHNCTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &                + DCOF * ALGPLA
c  |  |  |  Compute the elastic cross section:
               SHNCEL = SKMPEL
c  |  |  |  Compute the inelastic cross section:
               SHNCIN = SHNCTT - SHNCEL
c  |  |  |  Number of diagrams:
               NDIAGR = 1
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  Now compute the chain end (anti)quark-(anti)diquark
            IQFSC1 = 3
            IQFSC2 = 0
            IQBSC1 = 1 + KHELP
            IQBSC2 = 2
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  K0's: (actually only K0bar)
         ELSE
            KHELP  = KTARG / 8
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Proton target: (K0bar p)in supposed to be given by
c  |  |  |                 (K- p)in - Sig_diagr
            IF ( KHELP .EQ. 0 ) THEN
               SHNCIN = SKMPIN - SIGDIA
c  |  |  |  Number of diagrams:
               NDIAGR = 1
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Neutron target: (K0bar n)in supposed to be given by
c  |  |  |                 (K- n)in + Sig_diagr
c  |  |  |              besides isospin consideration it is supposed
c  |  |  |              that (K- n)el is almost equal to (K- p)el
c  |  |  |              (reasonable above 5 GeV/c)
            ELSE
               ACOF = SGTCOE (1,10)
               BCOF = SGTCOE (2,10)
               ENNE = SGTCOE (3,10)
               CCOF = SGTCOE (4,10)
               DCOF = SGTCOE (5,10)
c  |  |  |  Compute the total cross section:
               SHNCTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &                + DCOF * ALGPLA
c  |  |  |  Compute the elastic cross section:
               SHNCEL = SKMPEL
c  |  |  |  Compute the inelastic cross section:
               SHNCIN = SHNCTT - SHNCEL + SIGDIA
c  |  |  |  Number of diagrams:
               NDIAGR = 2
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  Now compute the chain end (anti)quark-(anti)diquark
            IQFSC1 = 3
            IQFSC2 = 0
            IQBSC1 = 1
            IQBSC2 = 1 + KHELP
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |                                                   end Kaon's
c  +-------------------------------------------------------------------*
c  |  Antinucleons:
      ELSE IF ( IHLP (IP) .EQ. 4 .AND. IP .LE. 9 ) THEN
c  |  For momenta between 3 and 5 GeV/c the use of tabulated data
c  |  should be implemented!
         ACOF = SGTCOE (1,15)
         BCOF = SGTCOE (2,15)
         ENNE = SGTCOE (3,15)
         CCOF = SGTCOE (4,15)
         DCOF = SGTCOE (5,15)
c  |  Compute the pbar p total cross section:
         SAPPTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
         IF ( PLA .LT. FIVFIV ) THEN
            JREAC = 26
         ELSE
            JREAC = 25
         END IF
         ACOF = SGTCOE (1,JREAC)
         BCOF = SGTCOE (2,JREAC)
         ENNE = SGTCOE (3,JREAC)
         CCOF = SGTCOE (4,JREAC)
         DCOF = SGTCOE (5,JREAC)
c  |  Compute the pbar p elastic cross section:
         SAPPEL = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
c  |  Compute the pbar p inelastic cross section:
         SAPPIN = SAPPTT - SAPPEL
         ACOF = SGTCOE (1,12)
         BCOF = SGTCOE (2,12)
         ENNE = SGTCOE (3,12)
         CCOF = SGTCOE (4,12)
         DCOF = SGTCOE (5,12)
c  |  Compute the p p total cross section:
         SPPTOT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
         ACOF = SGTCOE (1,23)
         BCOF = SGTCOE (2,23)
         ENNE = SGTCOE (3,23)
         CCOF = SGTCOE (4,23)
         DCOF = SGTCOE (5,23)
c  |  Compute the p p elastic cross section:
         SPPELA = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &          + DCOF * ALGPLA
c  |  Compute the K- p inelastic cross section:
         SPPINE = SPPTOT - SPPELA
         SIGDIA = ( SAPPIN - SPPINE ) / FIVFIV
         KHELP  = KTARG / 8
c  |  +----------------------------------------------------------------*
c  |  |  Pbar:
         IF ( ICHRGE (IP) .NE. 0 ) THEN
            NDIAGR = 5 - KHELP
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Proton target:
            IF ( KHELP .EQ. 0 ) THEN
c  |  |  |  Number of diagrams:
               SHNCIN = SAPPIN
               PUUBAR = 0.8D+00
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Neutron target: it is supposed that (ap n)el is almost equal
c  |  |  |                  to (ap p)el (reasonable above 5 GeV/c)
            ELSE
               ACOF = SGTCOE (1,16)
               BCOF = SGTCOE (2,16)
               ENNE = SGTCOE (3,16)
               CCOF = SGTCOE (4,16)
               DCOF = SGTCOE (5,16)
c  |  |  |  Compute the total cross section:
               SHNCTT = ACOF + BCOF * PLA**ENNE + CCOF * ALGPLA**2
     &                + DCOF * ALGPLA
c  |  |  |  Compute the elastic cross section:
               SHNCEL = SAPPEL
c  |  |  |  Compute the inelastic cross section:
               SHNCIN = SHNCTT - SHNCEL
               PUUBAR = HLFHLF
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  Now compute the chain end (anti)quark-(anti)diquark
c  |  |  there are different possibilities, make a random choiche:
            IQFSC1 = -1
            RNCHEN = DT_RNDM(PUUBAR)
            IF ( RNCHEN .LT. PUUBAR ) THEN
               IQFSC2 = -2
            ELSE
               IQFSC2 = -1
            END IF
            IQBSC1 = -IQFSC1 + KHELP
            IQBSC2 = -IQFSC2
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  nbar:
         ELSE
            NDIAGR = 4 + KHELP
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Proton target: (nbar p)in supposed to be given by
c  |  |  |                 (pbar p)in - Sig_diagr
            IF ( KHELP .EQ. 0 ) THEN
               SHNCIN = SAPPIN - SIGDIA
               PDDBAR = HLFHLF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Neutron target: (nbar n)el is supposed to be equal to
c  |  |  |                  (pbar p)el (reasonable above 5 GeV/c)
            ELSE
c  |  |  |  Compute the total cross section:
               SHNCTT = SAPPTT
c  |  |  |  Compute the elastic cross section:
               SHNCEL = SAPPEL
c  |  |  |  Compute the inelastic cross section:
               SHNCIN = SHNCTT - SHNCEL
               PDDBAR = 0.8D+00
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  Now compute the chain end (anti)quark-(anti)diquark
c  |  |  there are different possibilities, make a random choiche:
            IQFSC1 = -2
            RNCHEN = DT_RNDM(RNCHEN)
            IF ( RNCHEN .LT. PDDBAR ) THEN
               IQFSC2 = -1
            ELSE
               IQFSC2 = -2
            END IF
            IQBSC1 = -IQFSC1 + KHELP - 1
            IQBSC2 = -IQFSC2
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |
c  +-------------------------------------------------------------------*
c  |  Others: not yet implemented
      ELSE
         SIGDIA = ZERZER
         SHNCIN = ONEONE
         NDIAGR = 0
         DT_PHNSCH = ZERZER
         RETURN
      END IF
c  |                                                   end others
c  +-------------------------------------------------------------------*
      DT_PHNSCH = NDIAGR * SIGDIA / SHNCIN
      IQECHC = IQECHR (IQFSC1) + IQECHR (IQFSC2) + IQECHR (IQBSC1)
     &       + IQECHR (IQBSC2)
      IQBCHC = IQBCHR (IQFSC1) + IQBCHR (IQFSC2) + IQBCHR (IQBSC1)
     &       + IQBCHR (IQBSC2)
      IQECHC = IQECHC / 3
      IQBCHC = IQBCHC / 3
      IQSCHC = IQSCHR (IQFSC1) + IQSCHR (IQFSC2) + IQSCHR (IQBSC1)
     &       + IQSCHR (IQBSC2)
      IQSPRO = IQSCHR (MQUARK(1,IP)) + IQSCHR (MQUARK(2,IP))
     &       + IQSCHR (MQUARK(3,IP))
c  +-------------------------------------------------------------------*
c  |  Consistency check:
      IF ( DT_PHNSCH .LE. ZERZER .OR. DT_PHNSCH .GT. ONEONE ) THEN
         WRITE (ErrorOut,*)' *** Phnsch,kp,ktarg,pla',
     &                         DT_PHNSCH,KP,KTARG,PLA,' ****'
         WRITE (ErrorOut,*)' *** Phnsch,kp,ktarg,pla',
     &                         DT_PHNSCH,KP,KTARG,PLA,' ****'
         DT_PHNSCH = MAX ( DT_PHNSCH, ZERZER )
         DT_PHNSCH = MIN ( DT_PHNSCH, ONEONE )
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Consistency check:
      IF ( IQSPRO .NE. IQSCHC .OR. ICHRGE (IP) + ICHRGE (KTARG)
     &     .NE. IQECHC .OR. IIBAR (KP) + IIBAR (KTARG) .NE. IQBCHC) THEN
         WRITE (ErrorOut,*)
     &' *** PHNSCH,IQSPRO,IQSCHC,ICHRGE,IQECHC,IBAR,IQBCHC,KTARG',
     &      IQSPRO,IQSCHC,ICHRGE(IP),IQECHC,IIBAR(KP),IQBCHC,KTARG
         WRITE (ErrorOut,*)
     &' *** PHNSCH,IQSPRO,IQSCHC,ICHRGE,IQECHC,IBAR,IQBCHC,KTARG',
     &      IQSPRO,IQSCHC,ICHRGE(IP),IQECHC,IIBAR(KP),IQBCHC,KTARG
      END IF
c  |
c  +-------------------------------------------------------------------*
c  P_sch = 1 / [ ( 1 / P_sch (50) - 1 ) x sqrt(s/s(50)) + 1 ]
      IF ( UMORAT .GT. ONEPLS )
     &   DT_PHNSCH = ONEONE / ( ( ONEONE / DT_PHNSCH
     &                                 - ONEONE ) * UMORAT + ONEONE )
      RETURN
c
      ENTRY DT_SCHQUA ( JQFSC1, JQFSC2, JQBSC1, JQBSC2 )
      DT_SCHQUA = ONEONE
      JQFSC1 = IQFSC1
      JQFSC2 = IQFSC2
      JQBSC1 = IQBSC1
      JQBSC2 = IQBSC2
c=== End of function Phnsch ===========================================*
      RETURN
      END
c
c===respt==============================================================*
c
CDECK  ID>, DT_RESPT
      SUBROUTINE DT_RESPT

c***********************************************************************
c Check DTEVT1 for two-resonance systems and sample intrinsic p_t.     *
c This version dated 18.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY7=1.0D-7,TINY3=1.0D-3)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)


c get index of first chain
      DO 1 I=NPOINT(3),NHKK
         IF (IDHKK(I).EQ.88888) THEN
            NC = I
            GOTO 2
         ENDIF
    1 CONTINUE

    2 CONTINUE
      IF ((IDHKK(NC).EQ.88888).AND.(IDHKK(NC+3).EQ.88888)) THEN
C        WRITE(LOUT,*)NC,NC+3,IDRES(NC),IDRES(NC+3)
c skip VV-,SS- systems
         IF ((IDCH(NC  ).NE.1).AND.(IDCH(NC  ).NE.8).AND.
     &       (IDCH(NC+3).NE.1).AND.(IDCH(NC+3).NE.8)) THEN
c check if both "chains" are resonances
            IF ((IDRES(NC).NE.0).AND.(IDRES(NC+3).NE.0)) THEN
               CALL DT_SAPTRE(NC,NC+3)
            ENDIF
         ENDIF
      ELSE
         GOTO 3
      ENDIF
      NC = NC+6
      GOTO 2

    3 CONTINUE

      RETURN
      END
c
c===evtres=============================================================*
c
CDECK  ID>, DT_EVTRES
      SUBROUTINE DT_EVTRES(IREJ)

c***********************************************************************
c This version dated 14.12.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY5=1.0D-5,TINY10=1.0D-10)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      DIMENSION PP1(4),PP2(4),PT1(4),PT2(4),IFP(2),IFT(2)

      IREJ = 0

      DO 1 I=NPOINT(3),NHKK
         IF (ABS(IDRES(I)).GE.100) THEN
            AMMX = 0.0D0
            DO 2 J=NPOINT(3),NHKK
               IF (IDHKK(J).EQ.88888) THEN
                  IF (PHKK(5,J).GT.AMMX) THEN
                     AMMX = PHKK(5,J)
                     IMMX = J
                  ENDIF
               ENDIF
    2       CONTINUE
            IF (IDRES(IMMX).NE.0) THEN
               IF (IOULEV(3).GT.0) THEN
                  WRITE(ErrorOut,'(1X,A)')
     &               'EVTRES: NO CHAIN FOR CORREC. FOUND'
C                 GOTO 6
                  GOTO 9999
               ELSE
                  GOTO 9999
               ENDIF
            ENDIF
            IMO11  = JMOHKK(1,I)
            IMO12  = JMOHKK(2,I)
            IF (PHKK(3,IMO11).LT.0.0D0) THEN
               IMO11 = JMOHKK(2,I)
               IMO12 = JMOHKK(1,I)
            ENDIF
            IMO21  = JMOHKK(1,IMMX)
            IMO22  = JMOHKK(2,IMMX)
            IF (PHKK(3,IMO21).LT.0.0D0) THEN
               IMO21 = JMOHKK(2,IMMX)
               IMO22 = JMOHKK(1,IMMX)
            ENDIF
            AMCH1  = PHKK(5,I)
            AMCH1N = AAM(IDXRES(I))

            IFPR1 = IDHKK(IMO11)
            IFPR2 = IDHKK(IMO21)
            IFTA1 = IDHKK(IMO12)
            IFTA2 = IDHKK(IMO22)
            DO 4 J=1,4
               PP1(J) = PHKK(J,IMO11)
               PP2(J) = PHKK(J,IMO21)
               PT1(J) = PHKK(J,IMO12)
               PT2(J) = PHKK(J,IMO22)
    4       CONTINUE
c store initial configuration for energy-momentum cons. check
            IF (LEMCCK) CALL DT_EMC1(PP1,PP2,PT1,PT2,1,1,IREJ1)
c correct kinematics of second chain
            CALL DT_CHKINE(PP1,IFPR1,PP2,IFPR2,PT1,IFTA1,PT2,IFTA2,
     &                  AMCH1,AMCH1N,AMCH2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
c check now this chain for resonance mass
            IFP(1) = IDT_IPDG2B(IFPR2,1,2)
            IFP(2) = 0
            IF (ABS(IFPR2).GE.1000) IFP(2) = IDT_IPDG2B(IFPR2,2,2)
            IFT(1) = IDT_IPDG2B(IFTA2,1,2)
            IFT(2) = 0
            IF (ABS(IFTA2).GE.1000) IFT(2) = IDT_IPDG2B(IFTA2,2,2)
            IDCH2 = 2
            IF ((IFP(2).EQ.0).AND.(IFT(2).EQ.0)) IDCH2 = 1
            IF ((IFP(2).NE.0).AND.(IFT(2).NE.0)) IDCH2 = 3
            CALL DT_CH2RES(IFP(1),IFP(2),IFT(1),IFT(2),IDR2,IDXR2,
     &                  AMCH2,AMCH2N,IDCH2,IREJ1)
            IF ((IREJ1.NE.0).OR.(IDR2.NE.0)) THEN
               IF (IOULEV(1).GT.0)
     &            WRITE(ErrorOut,
     * *) ' correction for resonance not poss.'
c*sr test
C              GOTO 1
C              GOTO 9999
c*
            ENDIF
c store final configuration for energy-momentum cons. check
            IF (LEMCCK) THEN
               CALL DT_EMC1(PP1,PP2,PT1,PT2,-2,1,IREJ1)
               CALL DT_EMC1(PP1,PP2,PT1,PT2,3,1,IREJ1)
               IF (IREJ1.NE.0) GOTO 9999
            ENDIF
            DO 5 J=1,4
               PHKK(J,IMO11) = PP1(J)
               PHKK(J,IMO21) = PP2(J)
               PHKK(J,IMO12) = PT1(J)
               PHKK(J,IMO22) = PT2(J)
    5       CONTINUE
c correct entries of chains
            DO 3 K=1,4
               PHKK(K,I)    = PHKK(K,IMO11)+PHKK(K,IMO12)
               PHKK(K,IMMX) = PHKK(K,IMO21)+PHKK(K,IMO22)
    3       CONTINUE
            AM1 = PHKK(4,I)**2-PHKK(1,I)**2-PHKK(2,I)**2-PHKK(3,I)**2
            AM2 = PHKK(4,IMMX)**2-PHKK(1,IMMX)**2-PHKK(2,IMMX)**2-
     &            PHKK(3,IMMX)**2
c ?? the following should now be obsolete
c*sr test
C           IF ((AM1.LT.0.0D0).OR.(AM2.LT.1.0D0)) THEN
            IF ((AM1.LT.0.0D0).OR.(AM2.LT.0.0D0)) THEN
c*
               WRITE(ErrorOut,'(1X,A,4G10.3)')
     &          'EVTRES: INONSISTENT MASS-CORR.',AM1,AM2
C              GOTO 9999
               GOTO 1
            ENDIF
            PHKK(5,I)    = SQRT(AM1)
            PHKK(5,IMMX) = SQRT(AM2)
            IDRES(I)     = IDRES(I)/100
            IF ((ABS(PHKK(5,I)-AMCH1N).GT.TINY5).OR.
     &          (ABS(PHKK(5,IMMX)-AMCH2).GT.TINY5)) THEN
               WRITE(ErrorOut,'(1X,A,4G10.3)')
     &          'EVTRES: INCONSISTENT CHAIN-MASSES',
     &          PHKK(5,I),AMCH1N,PHKK(5,IMMX),AMCH2
               GOTO 9999
            ENDIF
         ENDIF
    1 CONTINUE
    6 CONTINUE
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===getspt=============================================================*
c
CDECK  ID>, DT_GETSPT
      SUBROUTINE DT_GETSPT(PP1I,IFPR1,IFP1,PP2I,IFPR2,IFP2,
     &                  PT1I,IFTA1,IFT1,PT2I,IFTA2,IFT2,
     &                  AM1,IDCH1,AM2,IDCH2,IDCHAI,IREJ)

c***********************************************************************
c This version dated 12.12.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY5=1.0D-5,TINY3=1.0D-3,ZERO=0.0D0)



c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF


      DIMENSION PP1(4),PP1I(4),PP2(4),PP2I(4),PT1(4),PT1I(4),
     &          PT2(4),PT2I(4),P1(4),P2(4),
     &          IFP1(2),IFP2(2),IFT1(2),IFT2(2),
     &          PTOTI(4),PTOTF(4),DIFF(4)

      IC   = 0
      IREJ = 0
C     B33P = 4.0D0
C     B33T = 4.0D0
C     IF ((IDCHAI.EQ.6).OR.(IDCHAI.EQ.7).OR.(IDCHAI.EQ.8)) B33P = 2.0D0
C     IF ((IDCHAI.EQ.4).OR.(IDCHAI.EQ.5).OR.(IDCHAI.EQ.8)) B33T = 2.0D0
      REDU = 1.0D0
C     B33P = 3.5D0
C     B33T = 3.5D0
      B33P = 4.0D0
      B33T = 4.0D0
      IF (IDIFF.NE.0) THEN
         B33P = 16.0D0
         B33T = 16.0D0
      ENDIF

      DO 1 I=1,4
         PTOTI(I) = PP1I(I)+PP2I(I)+PT1I(I)+PT2I(I)
         PP1(I)   = PP1I(I)
         PP2(I)   = PP2I(I)
         PT1(I)   = PT1I(I)
         PT2(I)   = PT2I(I)
    1 CONTINUE
c get initial chain masses
      PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                               +(PP1(3)+PT1(3))**2)
      ECH   = PP1(4)+PT1(4)
      AM1   = (ECH+PTOCH)*(ECH-PTOCH)
      PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                               +(PP2(3)+PT2(3))**2)
      ECH   = PP2(4)+PT2(4)
      AM2   = (ECH+PTOCH)*(ECH-PTOCH)
      IF ((AM1.LT.0.0D0).OR.(AM2.LT.0.0D0)) THEN
         IF (IOULEV(1).GT.0)
     &   WRITE(ErrorOut,
     * '(1X,A,2G10.3)')'GETSPT: too small chain masses 1',
     &                              AM1,AM2
         GOTO 9999
      ENDIF
      AM1  = SQRT(AM1)
      AM2  = SQRT(AM2)
      AM1N = ZERO
      AM2N = ZERO

      MODE = 0
C      IF ((AM1.GE.3.0D0).AND.(AM2.GE.3.0D0)) THEN
C        MODE = 0
C      ELSE
C         MODE = 1
C         IF (AM1.LT.0.6) THEN
C            B33P = 10.0D0
C         ELSEIF ((AM1.GE.1.2).AND.(AM1.LT.3.0D0)) THEN
CC           B33P = 4.0D0
C         ENDIF
C         IF (AM2.LT.0.6) THEN
C            B33T = 10.0D0
C         ELSEIF ((AM2.GE.1.2).AND.(AM2.LT.3.0D0)) THEN
CC           B33T = 4.0D0
C         ENDIF
C      ENDIF

c check chain masses for very low mass chains
C     CALL DT_CH2RES(IFP1(1),IFP1(2),IFT1(1),IFT1(2),IDUM,IDUM,
C    &            AM1,DUM,-IDCH1,IREJ1)
C     CALL DT_CH2RES(IFP2(1),IFP2(2),IFT2(1),IFT2(2),IDUM,IDUM,
C    &            AM2,DUM,-IDCH2,IREJ2)
C     IF ((IREJ1.NE.0).OR.(IREJ2.NE.0)) THEN
C        B33P = 20.0D0
C        B33T = 20.0D0
C     ENDIF

      JMSHL = IMSHL

    2 CONTINUE
      IC = IC+1
      IF (MOD(IC,15).EQ.0) B33P  = 2.0D0*B33P
      IF (MOD(IC,15).EQ.0) B33T  = 2.0D0*B33T
      IF (MOD(IC,18).EQ.0) REDU  = 0.0D0
C     IF (MOD(IC,19).EQ.0) JMSHL = 0
      IF (MOD(IC,20).EQ.0) GOTO 7
C        WRITE(LOUT,'(1X,A)') 'GETSPT: rejection '
C        RETURN
C        GOTO 9999
C     ENDIF

c get transverse momentum
      IF (LINTPT) THEN
         ES   = -2.0D0/(B33P**2)
     &          *LOG(ABS(DT_RNDM(AM1)*DT_RNDM(AM2))+TINY10)
         HPSP = SQRT(ES*ES+2.0D0*ES*0.94D0)
         HPSP = HPSP*REDU
         ES   = -2.0D0/(B33T**2)
     &          *LOG(ABS(DT_RNDM(AM1)*DT_RNDM(AM2))+TINY10)
         HPST = SQRT(ES*ES+2.0D0*ES*0.94D0)
         HPST = HPST*REDU
      ELSE
         HPSP = ZERO
         HPST = ZERO
      ENDIF
      CALL DT_DSFECF(SFE1,CFE1)
      CALL DT_DSFECF(SFE2,CFE2)
      IF (MODE.EQ.0) THEN
         PP1(1) = PP1I(1)+HPSP*CFE1
         PP1(2) = PP1I(2)+HPSP*SFE1
         PP2(1) = PP2I(1)-HPSP*CFE1
         PP2(2) = PP2I(2)-HPSP*SFE1
         PT1(1) = PT1I(1)+HPST*CFE2
         PT1(2) = PT1I(2)+HPST*SFE2
         PT2(1) = PT2I(1)-HPST*CFE2
         PT2(2) = PT2I(2)-HPST*SFE2
      ELSE
         PP1(1) = PP1I(1)+HPSP*CFE1
         PP1(2) = PP1I(2)+HPSP*SFE1
         PT1(1) = PT1I(1)-HPSP*CFE1
         PT1(2) = PT1I(2)-HPSP*SFE1
         PP2(1) = PP2I(1)+HPST*CFE2
         PP2(2) = PP2I(2)+HPST*SFE2
         PT2(1) = PT2I(1)-HPST*CFE2
         PT2(2) = PT2I(2)-HPST*SFE2
      ENDIF

c put partons on mass shell
      XMP1 = 0.0D0
      XMT1 = 0.0D0
      IF (JMSHL.EQ.1) THEN

         XMP1 = PYMASS(IFPR1)
         XMT1 = PYMASS(IFTA1)

      ENDIF
      CALL DT_MASHEL(PP1,PT1,XMP1,XMT1,P1,P2,IREJ1)
      IF (IREJ1.NE.0) GOTO 2
      DO 3 I=1,4
         PTOTF(I) = P1(I)+P2(I)
         PP1(I)   = P1(I)
         PT1(I)   = P2(I)
    3 CONTINUE
      XMP2 = 0.0D0
      XMT2 = 0.0D0
      IF (JMSHL.EQ.1) THEN

         XMP2 = PYMASS(IFPR2)
         XMT2 = PYMASS(IFTA2)

      ENDIF
      CALL DT_MASHEL(PP2,PT2,XMP2,XMT2,P1,P2,IREJ1)
      IF (IREJ1.NE.0) GOTO 2
      DO 4 I=1,4
         PTOTF(I) = PTOTF(I)+P1(I)+P2(I)
         PP2(I)   = P1(I)
         PT2(I)   = P2(I)
    4 CONTINUE

c check consistency
      DO 5 I=1,4
         DIFF(I) = PTOTI(I)-PTOTF(I)
    5 CONTINUE
      IF ((ABS(DIFF(1)).GT.TINY5).OR.(ABS(DIFF(2)).GT.TINY5).OR.
     &    (ABS(DIFF(3)).GT.TINY5).OR.(ABS(DIFF(4)).GT.TINY5)) THEN
         WRITE(ErrorOut,
     * '(1X,A,4G10.3)') 'GETSPT: inconsistencies ',DIFF
         GOTO 9999
      ENDIF
      PTOTP1 = SQRT(PP1(1)**2+PP1(2)**2+PP1(3)**2)
      AMP1 = SQRT(ABS( (PP1(4)-PTOTP1)*(PP1(4)+PTOTP1) ))
      PTOTP2 = SQRT(PP2(1)**2+PP2(2)**2+PP2(3)**2)
      AMP2 = SQRT(ABS( (PP2(4)-PTOTP2)*(PP2(4)+PTOTP2) ))
      PTOTT1 = SQRT(PT1(1)**2+PT1(2)**2+PT1(3)**2)
      AMT1 = SQRT(ABS( (PT1(4)-PTOTT1)*(PT1(4)+PTOTT1) ))
      PTOTT2 = SQRT(PT2(1)**2+PT2(2)**2+PT2(3)**2)
      AMT2 = SQRT(ABS( (PT2(4)-PTOTT2)*(PT2(4)+PTOTT2) ))
      IF ((ABS(AMP1-XMP1).GT.TINY3).OR.(ABS(AMP2-XMP2).GT.TINY3).OR.
     &    (ABS(AMT1-XMT1).GT.TINY3).OR.(ABS(AMT2-XMT2).GT.TINY3))
     &                                                           THEN
         WRITE(ErrorOut,'(1X,A,2(4G10.3,/))')
     &     'GETSPT: INCONSISTENT MASSES',
     &     AMP1,XMP1,AMP2,XMP2,AMT1,XMT1,AMT2,XMT2
c sr 22.11.00: commented. It should only have inconsistent masses for
c ultrahigh energies due to rounding problems
C        GOTO 9999
      ENDIF

c get chain masses
      PTOCH = SQRT((PP1(1)+PT1(1))**2+(PP1(2)+PT1(2))**2
     &                               +(PP1(3)+PT1(3))**2)
      ECH   = PP1(4)+PT1(4)
      AM1N  = (ECH+PTOCH)*(ECH-PTOCH)
      PTOCH = SQRT((PP2(1)+PT2(1))**2+(PP2(2)+PT2(2))**2
     &                               +(PP2(3)+PT2(3))**2)
      ECH   = PP2(4)+PT2(4)
      AM2N  = (ECH+PTOCH)*(ECH-PTOCH)
      IF ((AM1N.LT.0.0D0).OR.(AM2N.LT.0.0D0)) THEN
         IF (IOULEV(1).GT.0)
     &   WRITE(ErrorOut,
     * '(1X,A,2G10.3)')'GETSPT: too small chain masses 2',
     &                              AM1N,AM2N
         GOTO 2
      ENDIF
      AM1N = SQRT(AM1N)
      AM2N = SQRT(AM2N)

c check chain masses for very low mass chains
      CALL DT_CH2RES(IFP1(1),IFP1(2),IFT1(1),IFT1(2),IDUM,IDUM,
     &            AM1N,DUM,-IDCH1,IREJ1)
      IF (IREJ1.NE.0) GOTO 2
      CALL DT_CH2RES(IFP2(1),IFP2(2),IFT2(1),IFT2(2),IDUM,IDUM,
     &            AM2N,DUM,-IDCH2,IREJ2)
      IF (IREJ2.NE.0) GOTO 2

    7 CONTINUE
      IF (AM1N.GT.ZERO) THEN
         AM1 = AM1N
         AM2 = AM2N
      ENDIF
      DO 6 I=1,4
         PP1I(I)   = PP1(I)
         PP2I(I)   = PP2(I)
         PT1I(I)   = PT1(I)
         PT2I(I)   = PT2(I)
    6 CONTINUE

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===saptre=============================================================*
c
CDECK  ID>, DT_SAPTRE
      SUBROUTINE DT_SAPTRE(IDX1,IDX2)

c***********************************************************************
c p-t sampling for two-resonance systems. ("BAMJET-like" method)       *
c        IDX1,IDX2       indices of resonances ("chains") in DTEVT1    *
c Adopted from the original SAPTRE written by J. Ranft.                *
c This version dated 18.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY7=1.0D-7,TINY3=1.0D-3)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME


      DIMENSION PA1(4),PA2(4),P1(4),P2(4)

      DATA B3 /4.0D0/

      ESMAX1 = PHKK(4,IDX1)-PHKK(5,IDX1)
      ESMAX2 = PHKK(4,IDX2)-PHKK(5,IDX2)
      ESMAX  = MIN(ESMAX1,ESMAX2)
      IF (ESMAX.LE.0.05D0) RETURN

      HMA    = PHKK(5,IDX1)
      DO 1 K=1,4
         PA1(K) = PHKK(K,IDX1)
         PA2(K) = PHKK(K,IDX2)
    1 CONTINUE

      IF (LEMCCK) THEN
         CALL DT_EVTEMC(PA1(1),PA1(2),PA1(3),PA1(4),1,IDUM,IDUM)
         CALL DT_EVTEMC(PA2(1),PA2(2),PA2(3),PA2(4),2,IDUM,IDUM)
      ENDIF

      EXEB   = 0.0D0
      IF (B3*ESMAX.LE.60.0D0) EXEB = EXP(-B3*ESMAX)
      BEXP   = HMA*(1.0D0-EXEB)/B3
      AXEXP  = (1.0D0-(B3*ESMAX-1.0D0)*EXEB)/B3**2
      WA     = AXEXP/(BEXP+AXEXP)
      XAB    = DT_RNDM(WA)
   10 CONTINUE
c ES is the transverse kinetic energy
      IF (XAB.LT.WA)THEN
        X  = DT_RNDM(WA)
        Y  = DT_RNDM(WA)
        ES = -2.0D0/(B3**2)*LOG(X*Y+TINY7)
      ELSE
        X  = DT_RNDM(Y)
        ES = ABS(-LOG(X+TINY7)/B3)
      ENDIF
      IF (ES.GT.ESMAX) GOTO 10
      ES  = ES+HMA
c transverse momentum
      HPS = SQRT((ES-HMA)*(ES+HMA))

      CALL DT_DSFECF(SFE,CFE)
      HPX = HPS*CFE
      HPY = HPS*SFE
      PZ1NSQ = PA1(3)**2-HPS**2-2.0D0*PA1(1)*HPX-2.0D0*PA1(2)*HPY
      PZ2NSQ = PA2(3)**2-HPS**2+2.0D0*PA2(1)*HPX+2.0D0*PA2(2)*HPY
      IF ((PZ1NSQ.LT.TINY3).OR.(PZ2NSQ.LT.TINY3)) RETURN

C     PA1(3) = SIGN(SQRT(PZ1NSQ),PA1(3))
C     PA2(3) = SIGN(SQRT(PZ2NSQ),PA2(3))
      PA1(1) = PA1(1)+HPX
      PA1(2) = PA1(2)+HPY
      PA2(1) = PA2(1)-HPX
      PA2(2) = PA2(2)-HPY

c put resonances on mass-shell again
      XM1 = PHKK(5,IDX1)
      XM2 = PHKK(5,IDX2)
      CALL DT_MASHEL(PA1,PA2,XM1,XM2,P1,P2,IREJ1)
      IF (IREJ1.NE.0) RETURN

      IF (LEMCCK) THEN
         CALL DT_EVTEMC(-P1(1),-P1(2),-P1(3),-P1(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(-P2(1),-P2(2),-P2(3),-P2(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(DUM,DUM,DUM,DUM,3,12,IREJ1)
         IF (IREJ1.NE.0) RETURN
      ENDIF

      DO 2 K=1,4
         PHKK(K,IDX1) = P1(K)
         PHKK(K,IDX2) = P2(K)
    2 CONTINUE

      RETURN
      END
c
c===cronin=============================================================*
c
CDECK  ID>, DT_CRONIN
      SUBROUTINE DT_CRONIN(INCL)

c***********************************************************************
c Cronin-Effect. Multiple scattering of partons at chain ends.         *
c             INCL = 1     multiple sc. in projectile                  *
c                  = 2     multiple sc. in target                      *
c This version dated 05.01.96 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY3=1.0D-3)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC


      DIMENSION R(3),PIN(4),POUT(4),DEV(4)

      DO 1 K=1,4
         DEV(K) = ZERO
    1 CONTINUE

      DO 2 I=NPOINT(2),NHKK
         IF (ISTHKK(I).LT.0) THEN
c get z-position of the chain
            R(1) = VHKK(1,I)*1.0D12
            IF (INCL.EQ.2) R(1) = VHKK(1,I)*1.0D12-BIMPAC
            R(2) = VHKK(2,I)*1.0D12
            IDXNU = JMOHKK(1,I)
            IF ( (INCL.EQ.1).AND.(ISTHKK(IDXNU).EQ.10) )
     &                             IDXNU = JMOHKK(1,I-1)
            IF ( (INCL.EQ.2).AND.(ISTHKK(IDXNU).EQ. 9) )
     &                             IDXNU = JMOHKK(1,I+1)
            R(3) = VHKK(3,IDXNU)*1.0D12
c position of target parton the chain is connected to
            DO 3 K=1,4
               PIN(K) = PHKK(K,I)
    3       CONTINUE
c multiple scattering of parton with DTEVT1-index I
            CALL DT_CROMSC(PIN,R,POUT,INCL)
c*testprint
C           IF (NEVHKK.EQ.5) THEN
C              AMIN = PIN(4)**2-PIN(1)**2-PIN(2)**2-PIN(3)**2
C              AMOU = POUT(4)**2-POUT(1)**2-POUT(2)**2-POUT(3)**2
C              AMIN = SIGN(SQRT(ABS(AMIN)),AMIN)
C              AMOU = SIGN(SQRT(ABS(AMOU)),AMOU)
C              WRITE(6,'(A,I4,2E15.5)')'I,AMIN,AMOU: ',I,AMIN,AMOU
C              WRITE(6,'(A,4E15.5)')'PIN:       ',PIN
C              WRITE(6,'(A,4E15.5)')'POUT:      ',POUT
C           ENDIF
c*
c increase accumulator by energy-momentum difference
            DO 4 K=1,4
               DEV(K)    = DEV(K)+POUT(K)-PIN(K)
               PHKK(K,I) = POUT(K)
    4       CONTINUE
            PHKK(5,I) = SQRT(ABS(PHKK(4,I)**2-PHKK(1,I)**2-
     &                           PHKK(2,I)**2-PHKK(3,I)**2))
         ENDIF
    2 CONTINUE

c dump accumulator to momenta of valence partons
      NVAL = 0
      ETOT = 0.0D0
      DO 5 I=NPOINT(2),NHKK
         IF ((ISTHKK(I).EQ.-21).OR.(ISTHKK(I).EQ.-22)) THEN
            NVAL = NVAL+1
            ETOT = ETOT+PHKK(4,I)
         ENDIF
    5 CONTINUE
C     WRITE(LOUT,1000) NVAL,(DEV(K)/DBLE(NVAL),K=1,4)
 1000 FORMAT(1X,'CRONIN :  NUMBER OF VAL. PARTONS ',I4,/,
     &       9X,4E12.4)
      DO 6 I=NPOINT(2),NHKK
         IF ((ISTHKK(I).EQ.-21).OR.(ISTHKK(I).EQ.-22)) THEN
            E = PHKK(4,I)
            DO 7 K=1,4
C              PHKK(K,I) = PHKK(K,I)-DEV(K)/DBLE(NVAL)
               PHKK(K,I) = PHKK(K,I)-DEV(K)*E/ETOT
    7       CONTINUE
            PHKK(5,I) = SQRT(ABS(PHKK(4,I)**2-PHKK(1,I)**2-
     &                           PHKK(2,I)**2-PHKK(3,I)**2))
         ENDIF
    6 CONTINUE

      RETURN
      END
c
c===cromsc=============================================================*
c
CDECK  ID>, DT_CROMSC
      SUBROUTINE DT_CROMSC(PIN,R,POUT,INCL)

c***********************************************************************
c Cronin-Effect. Multiple scattering of one parton passing through     *
c nuclear matter.                                                      *
c            PIN(4)       input 4-momentum of parton                   *
c            POUT(4)      4-momentum of parton after mult. scatt.      *
c            R(3)         spatial position of parton in target nucleus *
c            INCL = 1     multiple sc. in projectile                   *
c                 = 2     multiple sc. in target                       *
c This is a revised version of the original version written by J. Ranft*
c This version dated 17.01.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY3=1.0D-3)

      LOGICAL LSTART

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT


      DIMENSION PIN(4),POUT(4),R(3)

      DATA LSTART /.TRUE./

      IRCRON(1) = IRCRON(1)+1

      IF (LSTART) THEN
         WRITE(ErrorOut,1000) CRONCO
 1000    FORMAT(/,1X,'CROMSC:  MULTIPLE SCATTERING OF CHAIN ENDS',
     &          ' TREATED',/,10X,'WITH PARAMETER CRONCO = ',F5.2)
         LSTART = .FALSE.
      ENDIF

      NCBACK = 0
      RNCL   = RPROJ
      IF (INCL.EQ.2) RNCL = RTARG

c Lorentz-transformation into Lab.
      MODE = -(INCL+1)
      CALL DT_LTNUC(PIN(3),PIN(4),PZ,PE,MODE)

      PTOT = SQRT(PIN(1)**2+PIN(2)**2+PZ**2)
      IF (PTOT.LE.8.0D0) GOTO 9997

c direction cosines of parton before mult. scattering
      COSX = PIN(1)/PTOT
      COSY = PIN(2)/PTOT
      COSZ = PZ/PTOT

      RTESQ = R(1)**2+R(2)**2+R(3)**2-RNCL**2
      IF (RTESQ.GE.-TINY3) GOTO 9999

c calculate distance (DIST) from R to surface of nucleus (radius RNCL)
c in the direction of particle motion

      A    = COSX*R(1)+COSY*R(2)+COSZ*R(3)
      TMP  = A**2-RTESQ
      IF (TMP.LT.ZERO) GOTO 9998
      DIST = -A+SQRT(TMP)

c multiple scattering angle
      THETO = CRONCO*SQRT(DIST)/PTOT
      IF (THETO.GT.0.1D0) THETO=0.1D0

    1 CONTINUE
c Gaussian sampling of spatial angle
      CALL DT_RANNOR(R1,R2)
      THETA = ABS(R1*THETO)
      IF (THETA.GT.0.3D0) GOTO 9997
      CALL DT_DSFECF(SFE,CFE)
      COSTH = COS(THETA)
      SINTH = SIN(THETA)

c new direction cosines
      CALL DT_MYTRAN(1,COSX,COSY,COSZ,COSTH,SINTH,SFE,CFE,
     &                               COSXN,COSYN,COSZN)

      POUT(1) = COSXN*PTOT
      POUT(2) = COSYN*PTOT
      PZ      = COSZN*PTOT
c Lorentz-transformation into nucl.-nucl. cms
      MODE = INCL+1
      CALL DT_LTNUC(PZ,PE,POUT(3),POUT(4),MODE)

C     IF (ABS(PIN(4)-POUT(4)).GT.0.2D0) THEN
C     IF ( (ABS(PIN(4)-POUT(4))/PIN(4)).GT.0.1D0 ) THEN
      IF ( (ABS(PIN(4)-POUT(4))/PIN(4)).GT.0.05D0 ) THEN
         THETO = THETO/2.0D0
         NCBACK = NCBACK+1
         IF (MOD(NCBACK,200).EQ.0) THEN
            WRITE(ErrorOut,1001) THETO,PIN,POUT
 1001       FORMAT(1X,'CROMSC: INCONSISTENT SCATTERING ANGLE ',
     &             E12.4,/,1X,'        PIN :',4E12.4,/,
     &             1X,'       POUT:',4E12.4)
            GOTO 9997
         ENDIF
         GOTO 1
      ENDIF

      RETURN

 9997 IRCRON(2) = IRCRON(2)+1
      GOTO 9999
 9998 IRCRON(3) = IRCRON(3)+1

 9999 CONTINUE
      DO 100 K=1,4
         POUT(K) = PIN(K)
  100 CONTINUE
      RETURN
      END
c
c===com2sr=============================================================*
c
CDECK  ID>, DT_COM2CR
      SUBROUTINE DT_COM2CR

c***********************************************************************
c COMbine q-aq chains to Color Ropes (qq-aqaq).                        *
c        CUTOF      parameter determining minimum number of not        *
c                   combined q-aq chains                               *
c This subroutine replaces KKEVCC etc.                                 *
c This version dated 11.01.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT


      DIMENSION IDXQA(248),IDXAQ(248)

      ICCHAI(1,9) = ICCHAI(1,9)+1
      NQA = 0
      NAQ = 0
c scan DTEVT1 for q-aq, aq-q chains
      DO 10 I=NPOINT(3),NHKK
c skip "chains" which are resonances
         IF ((IDHKK(I).EQ.88888).AND.(IDRES(I).EQ.0)) THEN
            MO1 = JMOHKK(1,I)
            MO2 = JMOHKK(2,I)
            IF ((ABS(IDHKK(MO1)).LE.6).AND.(ABS(IDHKK(MO2)).LE.6)) THEN
c q-aq, aq-q chain found, keep index
               IF (IDHKK(MO1).GT.0) THEN
                  NQA = NQA+1
                  IDXQA(NQA) = I
               ELSE
                  NAQ = NAQ+1
                  IDXAQ(NAQ) = I
               ENDIF
            ENDIF
         ENDIF
   10 CONTINUE

c minimum number of q-aq chains requested for the same projectile/
c target
      NCHMIN = IDT_NPOISS(CUTOF)

c combine q-aq chains of the same projectile
      CALL DT_SCN4CR(NQA,IDXQA,NCHMIN,1)
c combine q-aq chains of the same target
      CALL DT_SCN4CR(NQA,IDXQA,NCHMIN,2)
c combine aq-q chains of the same projectile
      CALL DT_SCN4CR(NAQ,IDXAQ,NCHMIN,1)
c combine aq-q chains of the same target
      CALL DT_SCN4CR(NAQ,IDXAQ,NCHMIN,2)

      RETURN
      END
c
c===scn4cr=============================================================*
c
CDECK  ID>, DT_SCN4CR
      SUBROUTINE DT_SCN4CR(NCH,IDXCH,NCHMIN,MODE)

c***********************************************************************
c SCan q-aq chains for Color Ropes.                                    *
c This version dated 11.01.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)


      DIMENSION IDXCH(248),IDXJN(248)

      DO 1 I=1,NCH
         IF (IDXCH(I).GT.0) THEN
            NJOIN = 1
            IDXMO = JMOHKK(1,JMOHKK(1,JMOHKK(MODE,IDXCH(I))))
            IDXJN(NJOIN) = I
            IF (I.LT.NCH) THEN
               DO 2 J=I+1,NCH
                  IF (IDXCH(J).GT.0) THEN
                     IDXMO1 = JMOHKK(1,JMOHKK(1,JMOHKK(MODE,IDXCH(J))))
                     IF (IDXMO.EQ.IDXMO1) THEN
                        NJOIN = NJOIN+1
                        IDXJN(NJOIN) = J
                     ENDIF
                  ENDIF
    2          CONTINUE
            ENDIF
            IF (NJOIN.GE.NCHMIN+2) THEN
               NJ = INT(DBLE(NJOIN-NCHMIN)/2.0D0)
               DO 3 J=1,2*NJ,2
                  CALL DT_JOIN(IDXCH(IDXJN(J)),IDXCH(IDXJN(J+1)),IREJ1)
                  IF (IREJ1.NE.0) GOTO 3
                  IDXCH(IDXJN(J))   = 0
                  IDXCH(IDXJN(J+1)) = 0
    3          CONTINUE
            ENDIF
         ENDIF
    1 CONTINUE

      RETURN
      END
c
c===join===============================================================*
c
CDECK  ID>, DT_JOIN
      SUBROUTINE DT_JOIN(IDX1,IDX2,IREJ)

c***********************************************************************
c This subroutine joins two q-aq chains to one qq-aqaq chain.          *
c     IDX1, IDX2       DTEVT1 indices of chains to be joined           *
c This version dated 11.01.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)



c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)


      DIMENSION MO(2,2),ID(2,2),IDX(2),PCH(4),PP(4),PT(4),P1(4),P2(4)

      IREJ   = 0

      IDX(1) = IDX1
      IDX(2) = IDX2
      DO 1 I=1,2
         DO 2 J=1,2
            MO(I,J) = JMOHKK(J,IDX(I))
            ID(I,J) = IDT_IPDG2B(IDHKK(MO(I,J)),1,2)
    2    CONTINUE
    1 CONTINUE

c check consistency
      IF ((ABS(ID(1,1)).GT.6).OR.(ABS(ID(1,2)).GT.6).OR.
     &    (ABS(ID(2,1)).GT.6).OR.(ABS(ID(2,2)).GT.6).OR.
     &    ((ID(1,1)*ID(2,1)).LT.0).OR.
     &    ((ID(1,2)*ID(2,2)).LT.0)) THEN
         WRITE(ErrorOut,
     * 1000) IDX(1),MO(1,1),MO(1,2),IDX(2),MO(2,1),
     &                    MO(2,2)
 1000    FORMAT(1X,'JOIN: INCONS. CHAIN SYSTEM! CHAIN ',I4,':',
     &             2I5,' CHAIN ',I4,':',2I5)
      ENDIF

c join chains
      DO 3 K=1,4
         PP(K) = PHKK(K,MO(1,1))+PHKK(K,MO(2,1))
         PT(K) = PHKK(K,MO(1,2))+PHKK(K,MO(2,2))
    3 CONTINUE
      IF1  = IDT_IB2PDG(ID(1,1),ID(2,1),2)
      IF2  = IDT_IB2PDG(ID(1,2),ID(2,2),2)
      IST1 = ISTHKK(MO(1,1))
      IST2 = ISTHKK(MO(1,2))

c put partons again on mass shell
      XM1 = 0.0D0
      XM2 = 0.0D0
      IF (IMSHL.EQ.1) THEN

         XM1 = PYMASS(IF1)
         XM2 = PYMASS(IF2)

      ENDIF
      CALL DT_MASHEL(PP,PT,XM1,XM2,P1,P2,IREJ1)
      IF (IREJ1.NE.0) GOTO 9999
      DO 4 I=1,4
         PP(I) = P1(I)
         PT(I) = P2(I)
    4 CONTINUE

c store new partons in DTEVT1
      CALL DT_EVTPUT(IST1,IF1,MO(1,1),MO(2,1),PP(1),PP(2),PP(3),PP(4),
     &                                                       0,0,0)
      CALL DT_EVTPUT(IST2,IF2,MO(1,2),MO(2,2),PT(1),PT(2),PT(3),PT(4),
     &                                                       0,0,0)
      DO 5 K=1,4
         PCH(K) = PP(K)+PT(K)
    5 CONTINUE

c check new chain for lower mass limit
      IF ((IRESCO.EQ.1).OR.(IFRAG(1).EQ.1)) THEN
         AMCH = SQRT(ABS(PCH(4)**2-PCH(1)**2-PCH(2)**2-PCH(3)**2))
         CALL DT_CH2RES(ID(1,1),ID(2,1),ID(1,2),ID(2,2),IDUM,IDUM,
     &               AMCH,AMCHN,3,IREJ1)
         IF (IREJ1.NE.0) THEN
            NHKK = NHKK-2
            GOTO 9999
         ENDIF
      ENDIF

      ICCHAI(2,9) = ICCHAI(2,9)+1
c store new chain in DTEVT1
      KCH = 191
      CALL DT_EVTPUT(KCH,88888,-2,-1,PCH(1),PCH(2),PCH(3),PCH(4),0,0,9)
      IDHKK(IDX(1)) = 22222
      IDHKK(IDX(2)) = 22222
c special treatment for space-time coordinates
      DO 6 K=1,4
         VHKK(K,NHKK) = (VHKK(K,IDX(1))+VHKK(K,IDX(2)))/2.0D0
         WHKK(K,NHKK) = (WHKK(K,IDX(1))+WHKK(K,IDX(2)))/2.0D0
    6 CONTINUE
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===xsglau=============================================================*
c
CDECK  ID>, DT_XSGLAU
      SUBROUTINE DT_XSGLAU(NA,NB,JJPROJ,XI,Q2I,ECMI,IE,IQ,NIDX)

c***********************************************************************
c Total, elastic, quasi-elastic, inelastic cross sections according to *
c Glauber's approach.                                                  *
c  NA / NB     mass numbers of proj./target nuclei                     *
c  JJPROJ      bamjet-index of projectile (=1 in case of proj.nucleus) *
c  XI,Q2I,ECMI kinematical variables x, Q^2, E_cm                      *
c  IE,IQ       indices of energy and virtuality (the latter for gamma  *
c              projectiles only)                                       *
c  NIDX        index of projectile/target nucleus                      *
c This version dated 17.3.98  is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      COMPLEX*16 CZERO,CONE,CTWO
      CHARACTER*12 CFILE
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,THREE=3.0D0,
     &           ONETHI=ONE/THREE,TINY25=1.0D-25)
      PARAMETER (TWOPI  = 6.283185307179586454D+00,
     &           PI     = TWOPI/TWO,
     &           GEV2MB = 0.38938D0,
     &           GEV2FM = 0.1972D0,
     &           ALPHEM = ONE/137.0D0,
c proton mass
     &           AMP    = 0.938D0,
     &           AMP2   = AMP**2,
c approx. nucleon radius
     &           RNUCLE = 1.12D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)

c parameters for hA-diffraction
      COMMON /DTDIHA/ DIBETA,DIALPH


      COMPLEX*16 PP11(MAXNCL),PP12(MAXNCL),PP21(MAXNCL),PP22(MAXNCL),
     &           OMPP11,OMPP12,OMPP21,OMPP22,
     &           DIPP11,DIPP12,DIPP21,DIPP22,AVDIPP,
     &           PPTMP1,PPTMP2
      COMPLEX*16 C,CA,CI
      DIMENSION COOP1(3,MAXNCL),COOT1(3,MAXNCL),
     &          COOP2(3,MAXNCL),COOT2(3,MAXNCL),
     &          BPROD(KSITEB)

      PARAMETER (NPOINT=16)
      DIMENSION ABSZX(NPOINT),WEIGHT(NPOINT)

      LOGICAL LFIRST,LOPEN
      DATA LFIRST,LOPEN /.TRUE.,.FALSE./

      NTARG = ABS(NIDX)
c for quasi-elastic neutrino scattering set projectile to proton
c it should not have an effect since the whole Glauber-formalism is
c not needed for these interactions..
      IF (MCGENE.EQ.4) THEN
         IJPROJ = 1
      ELSE
         IJPROJ = JJPROJ
      ENDIF


      IF ((ABS(IOGLB).EQ.1).AND.(.NOT.LOPEN)) THEN
         I = INDEX(CGLB,' ')
cc &&&&&&&&&c         
         CFILE= ' '
ccc &&&&&&
         IF (I.EQ.0) THEN
            CFILE = CGLB//'.GLB'
ccc        &&&&&&&&& kk
ccc            OPEN(LLOOK,FILE=CGLB//'.GLB',STATUS='UNKNOWN')
            call cdpmOpen(LLOOK, CFILE)
ccc
         ELSEIF (I.GT.1) THEN
            CFILE = CGLB(1:I-1)//'.GLB'
ccc         &&&&&&&&&&& KK
ccc          OPEN(LLOOK,FILE=CGLB(1:I-1)//'.GLB',STATUS='UNKNOWN')
            call cdpmOpen(LLOOK, CFILE)
ccc
         ELSE
            STOP 'XSGLAU 1'
         ENDIF
         LOPEN = .TRUE.
      ENDIF

      CZERO  = DCMPLX(ZERO,ZERO)
      CONE   = DCMPLX(ONE,ZERO)
      CTWO   = DCMPLX(TWO,ZERO)
      NEBINI = IE
      NQBINI = IQ

c re-define kinematics
      S  = ECMI**2
      Q2 = Q2I
      X  = XI
c  g(Q2=0)-A, h-A, A-A scattering
      IF ((X.LE.ZERO).AND.(Q2.LE.ZERO).AND.(S.GT.ZERO)) THEN
         Q2 = 0.0001D0
         X  = Q2/(S+Q2-AMP2)
c  g(Q2>0)-A scattering
      ELSEIF ((X.LE.ZERO).AND.(Q2.GT.ZERO).AND.(S.GT.ZERO)) THEN
         X  = Q2/(S+Q2-AMP2)
      ELSEIF ((X.GT.ZERO).AND.(Q2.LE.ZERO).AND.(S.GT.ZERO)) THEN
         Q2 = (S-AMP2)*X/(ONE-X)
      ELSEIF ((X.GT.ZERO).AND.(Q2.GT.ZERO)) THEN
         S  = Q2*(ONE-X)/X+AMP2
      ELSE
         WRITE(ErrorOut,*) 'XSGLAU: inconsistent input ',S,Q2,X
         STOP
      ENDIF
      ECMNN(IE) = SQRT(S)
      Q2G(IQ)   = Q2
      XNU = (S+Q2-AMP2)/(TWO*AMP)

c parameters determining statistics in evaluating Glauber-xsection
      NSTATB = JSTATB
      NSITEB = JBINSB
      IF (NSITEB.GT.KSITEB) NSITEB = KSITEB

c set up interaction geometry (common /DTGLAM/)
c  projectile/target radii
      RPRNCL = DT_RNCLUS(NA)
      RTANCL = DT_RNCLUS(NB)
      IF (IJPROJ.EQ.7) THEN
         RASH(1) = ZERO
         RBSH(NTARG) = RTANCL
         BMAX(NTARG) = 2.0D0*(RASH(1)+RBSH(NTARG))
      ELSE
         IF (NIDX.LE.-1) THEN
            RASH(1)     = RPRNCL
            RBSH(NTARG) = RTANCL
            BMAX(NTARG) = 2.0D0*(RASH(1)+RBSH(NTARG))
         ELSE
            RASH(NTARG) = RPRNCL
            RBSH(1)     = RTANCL
            BMAX(NTARG) = 2.0D0*(RASH(NTARG)+RBSH(1))
         ENDIF
      ENDIF
c  maximum impact-parameter
      BSTEP(NTARG)= BMAX(NTARG)/DBLE(NSITEB-1)

c slope, rho ( Re(f(0))/Im(f(0)) )
      IF ((IJPROJ.LE.12).AND.(IJPROJ.NE.7)) THEN
         IF (MCGENE.EQ.2) THEN
            ZERO1 = ZERO
            CALL DT_PHOXS(IJPROJ,1,ECMNN(IE),ZERO1,SDUM1,SDUM2,SDUM3,
     &                                                   BSLOPE,0)
         ELSE
            BSLOPE = 8.5D0*(1.0D0+0.065D0*LOG(S))
         ENDIF
         IF (ECMNN(IE).LE.3.0D0) THEN
            ROSH = -0.43D0
         ELSEIF ((ECMNN(IE).GT.3.0D0).AND.(ECMNN(IE).LE.50.D0)) THEN
            ROSH = -0.63D0+0.175D0*LOG(ECMNN(IE))
         ELSEIF (ECMNN(IE).GT.50.0D0) THEN
            ROSH = 0.1D0
         ENDIF
      ELSEIF (IJPROJ.EQ.7) THEN
         ROSH = 0.1D0
      ELSE
         BSLOPE = 6.0D0*(1.0D0+0.065D0*LOG(S))
         ROSH   = 0.01D0
      ENDIF

c projectile-nucleon xsection (in fm)
      IF (IJPROJ.EQ.7) THEN
         SIGSH = DT_SIGVP(X,Q2)/10.0D0
      ELSE
         ELAB  = (S-AAM(IJPROJ)**2-AMP2)/(TWO*AMP)
         PLAB  = SQRT( (ELAB-AAM(IJPROJ))*(ELAB+AAM(IJPROJ)) )
C        SIGSH = DT_SHNTOT(IJPROJ,1,ZERO,PLAB)/10.0D0
         DUMZER = ZERO
         CALL DT_XSHN(IJPROJ,1,PLAB,DUMZER,SIGSH,SIGEL)
         SIGSH = SIGSH/10.0D0
      ENDIF

c parameters for projectile diffraction (hA scattering only)
      IF ((MCGENE.EQ.2).AND.(NA.EQ.1).AND.(NB.GT.1).AND.(IJPROJ.NE.7)
     &                               .AND.(DIBETA.GE.ZERO)) THEN
         ZERO1 = ZERO
         CALL DT_PHOXS(IJPROJ,1,ECMNN(IE),ZERO1,STOT,SDUM2,SDIF1,BDUM,0)
C        DIBETA = SDIF1/STOT
         DIBETA = 0.2D0
         DIGAMM = SQRT(DIALPH**2+DIBETA**2)
         IF (DIBETA.LE.ZERO) THEN
            ALPGAM = ONE
         ELSE
            ALPGAM = DIALPH/DIGAMM
         ENDIF
         FACDI1 = ONE-ALPGAM
         FACDI2 = ONE+ALPGAM
         FACDI  = SQRT(FACDI1*FACDI2)
         WRITE(ErrorOut,
     * *)'DIBETA,DIALPH,DIGAMM: ',DIBETA,DIALPH,DIGAMM
      ELSE
         DIBETA = -1.0D0
         DIALPH = ZERO
         DIGAMM = ZERO
         FACDI1 = ZERO
         FACDI2 = 2.0D0
         FACDI  = ZERO
      ENDIF

c initializations
      DO 10 I=1,NSITEB
         BSITE( 0,IQ,NTARG,I) = ZERO
         BSITE(IE,IQ,NTARG,I) = ZERO
         BPROD(I) = ZERO
   10 CONTINUE
      STOT  = ZERO
      STOT2 = ZERO
      SELA  = ZERO
      SELA2 = ZERO
      SQEP  = ZERO
      SQEP2 = ZERO
      SQET  = ZERO
      SQET2 = ZERO
      SQE2  = ZERO
      SQE22 = ZERO
      SPRO  = ZERO
      SPRO2 = ZERO
      SDEL  = ZERO
      SDEL2 = ZERO
      SDQE  = ZERO
      SDQE2 = ZERO
      FACN   = ONE/DBLE(NSTATB)

      IPNT = 0
      RPNT = ZERO

c  initialize Gauss-integration for photon-proj.
      JPOINT = 1
      IF (IJPROJ.EQ.7) THEN
         IF (INTRGE(1).EQ.1) THEN
            AMLO2 = (3.0D0*AAM(13))**2
         ELSEIF (INTRGE(1).EQ.2) THEN
            AMLO2 = AAM(33)**2
         ELSE
            AMLO2 = AAM(96)**2
         ENDIF
         IF (INTRGE(2).EQ.1) THEN
            AMHI2 = S/TWO
         ELSEIF (INTRGE(2).EQ.2) THEN
            AMHI2 = S/4.0D0
         ELSE
            AMHI2 = S
         ENDIF
         AMHI20 = (ECMNN(IE)-AMP)**2
         IF (AMHI2.GE.AMHI20) AMHI2 = AMHI20
         XAMLO = LOG( AMLO2+Q2 )
         XAMHI = LOG( AMHI2+Q2 )
c*PHOJET105a
C        CALL GSET(XAMLO,XAMHI,NPOINT,ABSZX,WEIGHT)
c*PHOJET112

         CALL PHO_GAUSET(XAMLO,XAMHI,NPOINT,ABSZX,WEIGHT)

c*
         JPOINT = NPOINT
c ratio direct/total photon-nucleon xsection
         CALL DT_POILIK(NB,NTARG,ECMNN(IE),Q2,IPNT,RPNT,1)
      ENDIF

c read pre-initialized profile-function from file
      IF (IOGLB.EQ.1) THEN
         READ(LLOOK,'(5I10,E15.5)') KJPROJ,IA,IB,ISTATB,ISITEB,DUM
         IF ((IA.NE.NA).OR.(IB.NE.NB)) THEN
            WRITE(ErrorOut,1000) CFILE,IA,IB,ISTATB,ISITEB,
     &                             NA,NB,NSTATB,NSITEB
 1000       FORMAT(' XSGLAU: INCONSISTENT INPUT DATA IN FILE ',A12,/,
     &             ' (IA,IB,ISTATB,ISITEB) ',4I10,/,
     &             ' (NA,NB,NSTATB,NSITEB) ',4I10)
            STOP
         ENDIF
         IF (LFIRST) WRITE(ErrorOut,1001) CFILE
 1001    FORMAT(/,' XSGLAU: IMPACT PARAMETER DISTRIBUTION READ FROM ',
     &          'FILE ',A12,/)
         READ(LLOOK,'(6E12.5)') XSTOT(IE,IQ,NTARG),XSELA(IE,IQ,NTARG),
     &                          XSQEP(IE,IQ,NTARG),XSQET(IE,IQ,NTARG),
     &                          XSQE2(IE,IQ,NTARG),XSPRO(IE,IQ,NTARG)
         READ(LLOOK,'(6E12.5)') XETOT(IE,IQ,NTARG),XEELA(IE,IQ,NTARG),
     &                          XEQEP(IE,IQ,NTARG),XEQET(IE,IQ,NTARG),
     &                          XEQE2(IE,IQ,NTARG),XEPRO(IE,IQ,NTARG)
         NLINES = INT(DBLE(NSITEB)/7.0D0)
         IF (NLINES.GT.0) THEN
            DO 21 I=1,NLINES
               ISTART = 7*I-6
               READ(LLOOK,'(7E11.4)')
     &            (BSITE(IE,IQ,NTARG,J),J=ISTART,ISTART+6)
   21       CONTINUE
         ENDIF
         ISTART = 7*NLINES+1
         IF (ISTART.LE.NSITEB) THEN
            READ(LLOOK,'(7E11.4)')
     &         (BSITE(IE,IQ,NTARG,J),J=ISTART,NSITEB)
         ENDIF
         LFIRST = .FALSE.
         GOTO 100
c variable projectile/target/energy runs:
c read pre-initialized profile-functions from file
      ELSEIF (IOGLB.EQ.100) THEN
         CALL DT_GLBSET(IJPROJ,IINA,IINB,RRELAB,0)
         GOTO 100
      ENDIF

c cross sections averaged over NSTATB nucleon configurations
      DO 11 IS=1,NSTATB
C        IF ((NA.EQ.207).AND.(NB.EQ.207)) WRITE(LOUT,*) 'conf. ',IS
         STOTN = ZERO
         SELAN = ZERO
         SQEPN = ZERO
         SQETN = ZERO
         SQE2N = ZERO
         SPRON = ZERO
         SDELN = ZERO
         SDQEN = ZERO

         IF (NIDX.LE.-1) THEN
            CALL DT_CONUCL(COOP1,NA,RASH(1),0)
            CALL DT_CONUCL(COOT1,NB,RBSH(NTARG),1)
            IF ((.NOT.LPROD).OR.(IJPROJ.EQ.7)) THEN
               CALL DT_CONUCL(COOP2,NA,RASH(1),0)
               CALL DT_CONUCL(COOT2,NB,RBSH(NTARG),1)
            ENDIF
         ELSE
            CALL DT_CONUCL(COOP1,NA,RASH(NTARG),0)
            CALL DT_CONUCL(COOT1,NB,RBSH(1),1)
            IF ((.NOT.LPROD).OR.(IJPROJ.EQ.7)) THEN
               CALL DT_CONUCL(COOP2,NA,RASH(NTARG),0)
               CALL DT_CONUCL(COOT2,NB,RBSH(1),1)
            ENDIF
         ENDIF

c  integration over impact parameter B
         DO 12 IB=1,NSITEB-1
            STOTB = ZERO
            SELAB = ZERO
            SQEPB = ZERO
            SQETB = ZERO
            SQE2B = ZERO
            SPROB = ZERO
            SDIR  = ZERO
            SDELB = ZERO
            SDQEB = ZERO
            B     = DBLE(IB)*BSTEP(NTARG)
            FACB  = 10.0D0*TWOPI*B*BSTEP(NTARG)

c   integration over M_V^2 for photon-proj.
            DO 14 IM=1,JPOINT
               PP11(1) = CONE
               PP12(1) = CONE
               PP21(1) = CONE
               PP22(1) = CONE
               IF (IJPROJ.EQ.7) THEN
                  DO 13 K=2,NB
                     PP11(K) = CONE
                     PP12(K) = CONE
                     PP21(K) = CONE
                     PP22(K) = CONE
   13             CONTINUE
               ENDIF
               SHI  = ZERO
               FACM = ONE
               DCOH = 1.0D10

               IF (IJPROJ.EQ.7) THEN
                  AMV2 = EXP(ABSZX(IM))-Q2
                  AMV  = SQRT(AMV2)
                  IF (AMV2.LT.16.0D0) THEN
                     R = TWO
                  ELSEIF ((AMV2.GE.16.0D0).AND.(AMV2.LT.121.0D0)) THEN
                     R = 10.0D0/3.0D0
                  ELSE
                     R = 11.0D0/3.0D0
                  ENDIF
c    define M_V dependent properties of nucleon scattering amplitude
c     V_M-nucleon xsection
                  SIGMVD = RPNT*SIGSH/(AMV2+Q2+RL2)*10.0D0
                  SIGMV  = (ONE-RPNT)*SIGSH/(AMV2+Q2+RL2)
c     slope-parametrisation a la Kaidalov
                  BSLOPE = 2.0D0*(2.0D0+AAM(32)**2/(AMV2+Q2)
     &                           +0.25D0*LOG(S/(AMV2+Q2)))
c    coherence length
                  IF (ISHAD(3).EQ.1) DCOH = TWO*XNU/(AMV2+Q2)*GEV2FM
c    integration weight factor
                  FACM = ALPHEM/(3.0D0*PI*(ONE-X))*
     &                  R*AMV2/(AMV2+Q2)*(ONE+EPSPOL*Q2/AMV2)*WEIGHT(IM)
               ENDIF
               GSH = 10.0D0/(TWO*BSLOPE*GEV2MB)
               GAM = GSH
               IF (IJPROJ.EQ.7) THEN
                  RCA = GAM*SIGMV/TWOPI
               ELSE
                  RCA = GAM*SIGSH/TWOPI
               ENDIF
               FCA = -ROSH*RCA
               CA  = DCMPLX(RCA,FCA)
               CI  = CONE

               DO 15 INA=1,NA
                  KK1  = 1
                  INT1 = 1
                  KK2  = 1
                  INT2 = 1
                  DO 16 INB=1,NB
c    photon-projectile: check for supression by coherence length
                     IF (IJPROJ.EQ.7) THEN
                        IF (ABS(COOT1(3,INB)-COOT1(3,KK1)).GT.DCOH)THEN
                           KK1  = INB
                           INT1 = INT1+1
                        ENDIF
                        IF (ABS(COOT2(3,INB)-COOT2(3,KK2)).GT.DCOH)THEN
                           KK2  = INB
                           INT2 = INT2+1
                        ENDIF
                     ENDIF

                     X11 = B+COOT1(1,INB)-COOP1(1,INA)
                     Y11 =   COOT1(2,INB)-COOP1(2,INA)
                     XY11 = GAM*(X11*X11+Y11*Y11)
                     IF (XY11.LE.15.0D0) THEN
                        C = CONE-CA*EXP(-XY11)
                        AR = DBLE(PP11(INT1))
                        AI = DIMAG(PP11(INT1))
                        IF (ABS(AR).LT.TINY25) AR = ZERO
                        IF (ABS(AI).LT.TINY25) AI = ZERO
                        PP11(INT1) = DCMPLX(AR,AI)
                        PP11(INT1) = PP11(INT1)*C
                        AR  = DBLE(C)
                        AI  = DIMAG(C)
                        SHI = SHI+LOG(AR*AR+AI*AI)
                     ENDIF
                     IF ((.NOT.LPROD).OR.(IJPROJ.EQ.7)) THEN
                        X12 = B+COOT2(1,INB)-COOP1(1,INA)
                        Y12 =   COOT2(2,INB)-COOP1(2,INA)
                        XY12 = GAM*(X12*X12+Y12*Y12)
                        IF (XY12.LE.15.0D0) THEN
                           C = CONE-CA*EXP(-XY12)
                           AR = DBLE(PP12(INT2))
                           AI = DIMAG(PP12(INT2))
                           IF (ABS(AR).LT.TINY25) AR = ZERO
                           IF (ABS(AI).LT.TINY25) AI = ZERO
                           PP12(INT2) = DCMPLX(AR,AI)
                           PP12(INT2) = PP12(INT2)*C
                        ENDIF
                        X21 = B+COOT1(1,INB)-COOP2(1,INA)
                        Y21 =   COOT1(2,INB)-COOP2(2,INA)
                        XY21 = GAM*(X21*X21+Y21*Y21)
                        IF (XY21.LE.15.0D0) THEN
                           C = CONE-CA*EXP(-XY21)
                           AR = DBLE(PP21(INT1))
                           AI = DIMAG(PP21(INT1))
                           IF (ABS(AR).LT.TINY25) AR = ZERO
                           IF (ABS(AI).LT.TINY25) AI = ZERO
                           PP21(INT1) = DCMPLX(AR,AI)
                           PP21(INT1) = PP21(INT1)*C
                        ENDIF
                        X22 = B+COOT2(1,INB)-COOP2(1,INA)
                        Y22 =   COOT2(2,INB)-COOP2(2,INA)
                        XY22 = GAM*(X22*X22+Y22*Y22)
                        IF (XY22.LE.15.0D0) THEN
                           C = CONE-CA*EXP(-XY22)
                           AR = DBLE(PP22(INT2))
                           AI = DIMAG(PP22(INT2))
                           IF (ABS(AR).LT.TINY25) AR = ZERO
                           IF (ABS(AI).LT.TINY25) AI = ZERO
                           PP22(INT2) = DCMPLX(AR,AI)
                           PP22(INT2) = PP22(INT2)*C
                        ENDIF
                     ENDIF
   16             CONTINUE
   15          CONTINUE

               OMPP11 = CZERO
               OMPP21 = CZERO
               DIPP11 = CZERO
               DIPP21 = CZERO
               DO 17 K=1,INT1
                  IF (PP11(K).EQ.CZERO) THEN
                     PPTMP1 = CZERO
                     PPTMP2 = CZERO
                  ELSE
                     PPTMP1 = PP11(K)**(ONE-DIALPH-DIGAMM)
                     PPTMP2 = PP11(K)**(ONE-DIALPH+DIGAMM)
                  ENDIF
                  AVDIPP = 0.5D0*
     &                  ( FACDI1*(CONE-PPTMP1)+FACDI2*(CONE-PPTMP2) )
                  OMPP11 = OMPP11+AVDIPP
C                 OMPP11 = OMPP11+(CONE-PP11(K))
                  AVDIPP = 0.5D0*FACDI*( PPTMP1-PPTMP2 )
                  DIPP11 = DIPP11+AVDIPP
                  IF (PP21(K).EQ.CZERO) THEN
                     PPTMP1 = CZERO
                     PPTMP2 = CZERO
                  ELSE
                     PPTMP1 = PP21(K)**(ONE-DIALPH-DIGAMM)
                     PPTMP2 = PP21(K)**(ONE-DIALPH+DIGAMM)
                  ENDIF
                  AVDIPP = 0.5D0*
     &                  ( FACDI1*(CONE-PPTMP1)+FACDI2*(CONE-PPTMP2) )
                  OMPP21 = OMPP21+AVDIPP
C                 OMPP21 = OMPP21+(CONE-PP21(K))
                  AVDIPP = 0.5D0*FACDI*( PPTMP1-PPTMP2 )
                  DIPP21 = DIPP21+AVDIPP
   17          CONTINUE
               OMPP12 = CZERO
               OMPP22 = CZERO
               DIPP12 = CZERO
               DIPP22 = CZERO
               DO 18 K=1,INT2
                  IF (PP12(K).EQ.CZERO) THEN
                     PPTMP1 = CZERO
                     PPTMP2 = CZERO
                  ELSE
                     PPTMP1 = PP12(K)**(ONE-DIALPH-DIGAMM)
                     PPTMP2 = PP12(K)**(ONE-DIALPH+DIGAMM)
                  ENDIF
                  AVDIPP = 0.5D0*
     &                  ( FACDI1*(CONE-PPTMP1)+FACDI2*(CONE-PPTMP2) )
                  OMPP12 = OMPP12+AVDIPP
C                 OMPP12 = OMPP12+(CONE-PP12(K))
                  AVDIPP = 0.5D0*FACDI*( PPTMP1-PPTMP2 )
                  DIPP12 = DIPP12+AVDIPP
                  IF (PP22(K).EQ.CZERO) THEN
                     PPTMP1 = CZERO
                     PPTMP2 = CZERO
                  ELSE
                     PPTMP1 = PP22(K)**(ONE-DIALPH-DIGAMM)
                     PPTMP2 = PP22(K)**(ONE-DIALPH+DIGAMM)
                  ENDIF
                  AVDIPP = 0.5D0*
     &                  ( FACDI1*(CONE-PPTMP1)+FACDI2*(CONE-PPTMP2) )
                  OMPP22 = OMPP22+AVDIPP
C                 OMPP22 = OMPP22+(CONE-PP22(K))
                  AVDIPP = 0.5D0*FACDI*( PPTMP1-PPTMP2 )
                  DIPP22 = DIPP22+AVDIPP
   18          CONTINUE

               SPROM = ONE-EXP(SHI)
               SPROB = SPROB+FACM*SPROM
               IF ((.NOT.LPROD).OR.(IJPROJ.EQ.7)) THEN
                  STOTM = DBLE(OMPP11+OMPP22)
                  SELAM = DBLE(OMPP11*DCONJG(OMPP22))
                  SQEPM = DBLE(OMPP11*DCONJG(OMPP21))-SELAM
                  SQETM = DBLE(OMPP11*DCONJG(OMPP12))-SELAM
                  SQE2M = DBLE(OMPP11*DCONJG(OMPP11))-SELAM-SQEPM-SQETM
                  SDELM = DBLE(DIPP11*DCONJG(DIPP22))
                  SDQEM = DBLE(DIPP11*DCONJG(DIPP21))-SDELM
                  STOTB = STOTB+FACM*STOTM
                  SELAB = SELAB+FACM*SELAM
                  SDELB = SDELB+FACM*SDELM
                  IF (NB.GT.1) THEN
                     SQEPB = SQEPB+FACM*SQEPM
                     SDQEB = SDQEB+FACM*SDQEM
                  ENDIF
                  IF (NA.GT.1) SQETB = SQETB+FACM*SQETM
                  IF ((NA.GT.1).AND.(NB.GT.1)) SQE2B = SQE2B+FACM*SQE2M
                  IF (IJPROJ.EQ.7) SDIR = SDIR+FACM*SIGMVD
               ENDIF

   14       CONTINUE

            STOTN = STOTN+FACB*STOTB
            SELAN = SELAN+FACB*SELAB
            SQEPN = SQEPN+FACB*SQEPB
            SQETN = SQETN+FACB*SQETB
            SQE2N = SQE2N+FACB*SQE2B
            SPRON = SPRON+FACB*SPROB
            SDELN = SDELN+FACB*SDELB
            SDQEN = SDQEN+FACB*SDQEB

            IF (IJPROJ.EQ.7) THEN
               BPROD(IB+1)= BPROD(IB+1)+FACN*FACB*(STOTB-SELAB-SQEPB)
            ELSE
               IF (DIBETA.GT.ZERO) THEN
                  BPROD(IB+1)= BPROD(IB+1)
     &                        +FACN*FACB*(STOTB-SELAB-SQEPB-SQETB-SQE2B)
               ELSE
                  BPROD(IB+1)= BPROD(IB+1)+FACN*FACB*SPROB
               ENDIF
            ENDIF

   12    CONTINUE

         STOT  = STOT +FACN*STOTN
         STOT2 = STOT2+FACN*STOTN**2
         SELA  = SELA +FACN*SELAN
         SELA2 = SELA2+FACN*SELAN**2
         SQEP  = SQEP +FACN*SQEPN
         SQEP2 = SQEP2+FACN*SQEPN**2
         SQET  = SQET +FACN*SQETN
         SQET2 = SQET2+FACN*SQETN**2
         SQE2  = SQE2 +FACN*SQE2N
         SQE22 = SQE22+FACN*SQE2N**2
         SPRO  = SPRO +FACN*SPRON
         SPRO2 = SPRO2+FACN*SPRON**2
         SDEL  = SDEL +FACN*SDELN
         SDEL2 = SDEL2+FACN*SDELN**2
         SDQE  = SDQE +FACN*SDQEN
         SDQE2 = SDQE2+FACN*SDQEN**2

   11 CONTINUE

c final cross sections
c 1) total
      XSTOT(IE,IQ,NTARG) = STOT
      IF (IJPROJ.EQ.7)
     &   XSTOT(IE,IQ,NTARG) = XSTOT(IE,IQ,NTARG)+DBLE(NB)*SDIR
c 2) elastic
      XSELA(IE,IQ,NTARG) = SELA
c 3) quasi-el.: A+B-->A+X (excluding 2)
      XSQEP(IE,IQ,NTARG) = SQEP
c 4) quasi-el.: A+B-->X+B (excluding 2)
      XSQET(IE,IQ,NTARG) = SQET
c 5) quasi-el.: A+B-->X (excluding 2-4)
      XSQE2(IE,IQ,NTARG) = SQE2
c 6) production (= STOT-SELA-SQEP-SQET-SQE2!)
      IF (SDEL.GT.ZERO) THEN
         XSPRO(IE,IQ,NTARG) = STOT-SELA-SQEP-SQET-SQE2
      ELSE
         XSPRO(IE,IQ,NTARG) = SPRO
      ENDIF
c 7) projectile diffraction (el. scatt. off target)
      XSDEL(IE,IQ,NTARG) = SDEL
c 8) projectile diffraction (quasi-el. scatt. off target)
      XSDQE(IE,IQ,NTARG) = SDQE
c  stat. errors
      XETOT(IE,IQ,NTARG) = SQRT(ABS(STOT2-STOT**2)/DBLE(NSTATB-1))
      XEELA(IE,IQ,NTARG) = SQRT(ABS(SELA2-SELA**2)/DBLE(NSTATB-1))
      XEQEP(IE,IQ,NTARG) = SQRT(ABS(SQEP2-SQEP**2)/DBLE(NSTATB-1))
      XEQET(IE,IQ,NTARG) = SQRT(ABS(SQET2-SQET**2)/DBLE(NSTATB-1))
      XEQE2(IE,IQ,NTARG) = SQRT(ABS(SQE22-SQE2**2)/DBLE(NSTATB-1))
      XEPRO(IE,IQ,NTARG) = SQRT(ABS(SPRO2-SPRO**2)/DBLE(NSTATB-1))
      XEDEL(IE,IQ,NTARG) = SQRT(ABS(SDEL2-SDEL**2)/DBLE(NSTATB-1))
      XEDQE(IE,IQ,NTARG) = SQRT(ABS(SDQE2-SDQE**2)/DBLE(NSTATB-1))

      IF (IJPROJ.EQ.7) THEN
         BNORM = XSTOT(IE,IQ,NTARG)-XSELA(IE,IQ,NTARG)
     &          -XSQEP(IE,IQ,NTARG)
      ELSE
         BNORM = XSPRO(IE,IQ,NTARG)
      ENDIF
      DO 19 I=2,NSITEB
         BSITE(IE,IQ,NTARG,I) = BPROD(I)/BNORM+BSITE(IE,IQ,NTARG,I-1)
         IF ((IE.EQ.1).AND.(IQ.EQ.1))
     &      BSITE(0,1,NTARG,I) = BPROD(I)/BNORM+BSITE(0,1,NTARG,I-1)
   19 CONTINUE

c write profile function data into file
      IF ((IOGLB.EQ.-1).OR.(IOGLB.EQ.-100)) THEN
         WRITE(LLOOK,'(5I10,1P,E15.5)')
     &      IJPROJ,NA,NB,NSTATB,NSITEB,ECMNN(IE)
         WRITE(LLOOK,'(1P,6E12.5)')
     &      XSTOT(IE,IQ,NTARG),XSELA(IE,IQ,NTARG),XSQEP(IE,IQ,NTARG),
     &      XSQET(IE,IQ,NTARG),XSQE2(IE,IQ,NTARG),XSPRO(IE,IQ,NTARG)
         WRITE(LLOOK,'(1P,6E12.5)')
     &      XETOT(IE,IQ,NTARG),XEELA(IE,IQ,NTARG),XEQEP(IE,IQ,NTARG),
     &      XEQET(IE,IQ,NTARG),XEQE2(IE,IQ,NTARG),XEPRO(IE,IQ,NTARG)
         NLINES = INT(DBLE(NSITEB)/7.0D0)
         IF (NLINES.GT.0) THEN
            DO 20 I=1,NLINES
               ISTART = 7*I-6
               WRITE(LLOOK,'(1P,7E11.4)')
     &            (BSITE(IE,IQ,NTARG,J),J=ISTART,ISTART+6)
   20       CONTINUE
         ENDIF
         ISTART = 7*NLINES+1
         IF (ISTART.LE.NSITEB) THEN
            WRITE(LLOOK,'(1P,7E11.4)')
     &         (BSITE(IE,IQ,NTARG,J),J=ISTART,NSITEB)
         ENDIF
      ENDIF

  100 CONTINUE

C     IF (ABS(IOGLB).EQ.1) CLOSE(LLOOK)

      RETURN
      END
c
c===getbxs=============================================================*
c
CDECK  ID>, DT_GETBXS
      SUBROUTINE DT_GETBXS(XSFRAC,BLO,BHI,NIDX)

c***********************************************************************
c Biasing in impact parameter space.                                   *
c     XSFRAC = 0 :  BLO    - minimum impact parameter  (input)         *
c                   BHI    - maximum impact parameter  (input)         *
c                   XSFRAC - fraction of cross section corresponding   *
c                            to impact parameter range (BLO,BHI)       *
c                                                      (output)        *
c     XSFRAC > 0 :  XSFRAC - fraction of cross section (input)         *
c                   BHI    - maximum impact parameter giving requested *
c                            fraction of cross section in impact       *
c                            parameter range (0,BMAX)  (output)        *
c This version dated 17.03.00  is written by S. Roesler                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB


      NTARG = ABS(NIDX)
      IF (XSFRAC.LE.0.0D0) THEN
         ILO    = MIN(NSITEB-1,INT(BLO/BSTEP(NTARG)))
         IHI    = MIN(NSITEB-1,INT(BHI/BSTEP(NTARG)))
         IF (ILO.GE.IHI) THEN
            XSFRAC = 0.0D0
            RETURN
         ENDIF
         IF (ILO.EQ.NSITEB-1) THEN
            FRCLO = BSITE(0,1,NTARG,NSITEB)
         ELSE
            FRCLO = BSITE(0,1,NTARG,ILO+1)
     &              +(BLO-ILO*BSTEP(NTARG))/BSTEP(NTARG)
     &              *(BSITE(0,1,NTARG,ILO+2)-BSITE(0,1,NTARG,ILO+1))
         ENDIF
         IF (IHI.EQ.NSITEB-1) THEN
            FRCHI = BSITE(0,1,NTARG,NSITEB)
         ELSE
            FRCHI = BSITE(0,1,NTARG,IHI+1)
     &              +(BHI-IHI*BSTEP(NTARG))/BSTEP(NTARG)
     &              *(BSITE(0,1,NTARG,IHI+2)-BSITE(0,1,NTARG,IHI+1))
         ENDIF
         XSFRAC = FRCHI-FRCLO
      ELSE
         BLO = 0.0D0
         BHI = BMAX(NTARG)
         DO 1 I=1,NSITEB-1
            IF (XSFRAC.LT.BSITE(0,1,NTARG,I+1)) THEN
               FAC = (XSFRAC              -BSITE(0,1,NTARG,I))/
     &               (BSITE(0,1,NTARG,I+1)-BSITE(0,1,NTARG,I))
               BHI = DBLE(I-1)*BSTEP(NTARG)+BSTEP(NTARG)*FAC
               GOTO 2
            ENDIF
    1    CONTINUE
    2    CONTINUE
      ENDIF

      RETURN
      END
c
c===conucl=============================================================*
c
CDECK  ID>, DT_CONUCL
      SUBROUTINE DT_CONUCL(X,N,R,MODE)

c***********************************************************************
c Calculation of coordinates of nucleons within nuclei.                *
c        X(3,N)   spatial coordinates of nucleons (in fm)  (output)    *
c        N / R    number of nucleons / radius of nucleus   (input)     *
c        MODE = 0 coordinates not sorted                               *
c             = 1 coordinates sorted with increasing X(3,i)            *
c             = 2 coordinates sorted with decreasing X(3,i)            *
c This version dated 26.10.95 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,THREE=3.0D0,
     &           ONETHI=ONE/THREE,SQRTWO=1.414213562D0)

      PARAMETER (TWOPI = 6.283185307179586454D+00 )

      PARAMETER (NSRT=10)
      DIMENSION IDXSRT(NSRT,200),ICSRT(NSRT)
      DIMENSION X(3,N),XTMP(3,220)

      CALL DT_COORDI(XTMP,IDXSRT,ICSRT,N,R)

      IF ((MODE.NE.0).AND.((N.EQ.3).OR.(N.GT.4))) THEN
         K = 0
         DO 1 I=1,NSRT
            IF (MODE.EQ.2) THEN
               ISRT = NSRT+1-I
            ELSE
               ISRT = I
            ENDIF
            K1 = K
            DO 2 J=1,ICSRT(ISRT)
               K = K+1
               X(1,K) = XTMP(1,IDXSRT(ISRT,J))
               X(2,K) = XTMP(2,IDXSRT(ISRT,J))
               X(3,K) = XTMP(3,IDXSRT(ISRT,J))
    2       CONTINUE
            IF (ICSRT(ISRT).GT.1) THEN
               I0 = K1+1
               I1 = K
               CALL DT_SORT(X,N,I0,I1,MODE)
            ENDIF
    1    CONTINUE
      ELSEIF ((MODE.NE.0).AND.((N.EQ.2).OR.(N.EQ.4))) THEN
         DO 3 I=1,N
            X(1,I) = XTMP(1,I)
            X(2,I) = XTMP(2,I)
            X(3,I) = XTMP(3,I)
    3    CONTINUE
         CALL DT_SORT(X,N,1,N,MODE)
      ELSE
         DO 4 I=1,N
            X(1,I) = XTMP(1,I)
            X(2,I) = XTMP(2,I)
            X(3,I) = XTMP(3,I)
    4    CONTINUE
      ENDIF

      RETURN
      END
c
c===coordi=============================================================*
c
CDECK  ID>, DT_COORDI
      SUBROUTINE DT_COORDI(X,IDXSRT,ICSRT,N,R)

c***********************************************************************
c Calculation of coordinates of nucleons within nuclei.                *
c        X(3,N)   spatial coordinates of nucleons (in fm)  (output)    *
c        N / R    number of nucleons / radius of nucleus   (input)     *
c Based on the original version by Shmakov et al.                      *
c This version dated 26.10.95 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,THREE=3.0D0,
     &           ONETHI=ONE/THREE,SQRTWO=1.414213562D0)

      PARAMETER (TWOPI = 6.283185307179586454D+00 )

      LOGICAL LSTART

      PARAMETER (NSRT=10)
      DIMENSION IDXSRT(NSRT,200),ICSRT(NSRT)
      DIMENSION X(3,220),WD(4),RD(3)

      DATA PDIF/0.545D0/,R2MIN/0.16D0/
      DATA WD / 0.0D0, 0.178D0, 0.465D0, 1.0D0/
      DATA RD /2.09D0, 0.935D0, 0.697D0/

      X1SUM = ZERO
      X2SUM = ZERO
      X3SUM = ZERO

      IF (N.EQ.1) THEN
         X(1,1) = ZERO
         X(2,1) = ZERO
         X(3,1) = ZERO
      ELSEIF (N.EQ.2) THEN
         EPS = DT_RNDM(RD(1))
         DO 30 I=1,3
            IF ((EPS.GE.WD(I)).AND.(EPS.LE.WD(I+1))) GOTO 40
   30    CONTINUE
   40    CONTINUE
         DO 50 J=1,3
            CALL DT_RANNOR(X1,X2)
            X(J,1) = RD(I)*X1
            X(J,2) = -X(J,1)
   50    CONTINUE
      ELSEIF ((N.EQ.3).OR.(N.EQ.4)) THEN
         SIGMA = R/SQRTWO
         LSTART = .TRUE.
         CALL DT_RANNOR(X3,X4)
         DO 100 I=1,N
            CALL DT_RANNOR(X1,X2)
            X(1,I) = SIGMA*X1
            X(2,I) = SIGMA*X2
            IF (LSTART) GOTO 80
            X(3,I) = SIGMA*X4
            CALL DT_RANNOR(X3,X4)
            GOTO 90
   80       CONTINUE
            X(3,I) = SIGMA*X3
   90       CONTINUE
            LSTART = .NOT.LSTART
            X1SUM = X1SUM+X(1,I)
            X2SUM = X2SUM+X(2,I)
            X3SUM = X3SUM+X(3,I)
  100    CONTINUE
         X1SUM = X1SUM/DBLE(N)
         X2SUM = X2SUM/DBLE(N)
         X3SUM = X3SUM/DBLE(N)
         DO 101 I=1,N
            X(1,I) = X(1,I)-X1SUM
            X(2,I) = X(2,I)-X2SUM
            X(3,I) = X(3,I)-X3SUM
  101    CONTINUE
      ELSE

c maximum nuclear radius for coordinate sampling
         RMAX = R+4.605D0*PDIF

c initialize pre-sorting
         DO 121 I=1,NSRT
            ICSRT(I) = 0
  121    CONTINUE
         DR = TWO*RMAX/DBLE(NSRT)

c sample coordinates for N nucleons
         DO 140 I=1,N
  120       CONTINUE
            RAD = RMAX*(DT_RNDM(DR))**ONETHI
            F   = DT_DENSIT(N,RAD,R)
            IF (DT_RNDM(RAD).GT.F) GOTO 120
c   theta, phi uniformly distributed
            CT  = ONE-TWO*DT_RNDM(F)
            ST  = SQRT((ONE-CT)*(ONE+CT))
            CALL DT_DSFECF(SFE,CFE)
            X(1,I) = RAD*ST*CFE
            X(2,I) = RAD*ST*SFE
            X(3,I) = RAD*CT
c   ensure that distance between two nucleons is greater than R2MIN
            IF (I.LT.2) GOTO 122
            I1 = I-1
            DO 130 I2=1,I1
               DIST2 = (X(1,I)-X(1,I2))**2+(X(2,I)-X(2,I2))**2+
     &                 (X(3,I)-X(3,I2))**2
               IF (DIST2.LE.R2MIN) GOTO 120
  130       CONTINUE
  122       CONTINUE
c   save index according to z-bin
            IDXZ        = INT( (X(3,I)+RMAX)/DR )+1
            ICSRT(IDXZ) = ICSRT(IDXZ)+1
            IDXSRT(IDXZ,ICSRT(IDXZ)) = I
            X1SUM = X1SUM+X(1,I)
            X2SUM = X2SUM+X(2,I)
            X3SUM = X3SUM+X(3,I)
  140    CONTINUE
         X1SUM = X1SUM/DBLE(N)
         X2SUM = X2SUM/DBLE(N)
         X3SUM = X3SUM/DBLE(N)
         DO 141 I=1,N
            X(1,I) = X(1,I)-X1SUM
            X(2,I) = X(2,I)-X2SUM
            X(3,I) = X(3,I)-X3SUM
  141    CONTINUE

      ENDIF

      RETURN
      END
c
c===densit=============================================================*
c
CDECK  ID>, DT_DENSIT
      DOUBLE PRECISION FUNCTION DT_DENSIT(NA,R,RA)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI = 6.283185307179586476925286766559D+00,
     &           PI    = TWOPI/TWO)

      DIMENSION R0(18),FNORM(18)
      DATA R0 /  ZERO,   ZERO,   ZERO,   ZERO, 2.12D0,
     &         2.56D0, 2.41D0, 2.46D0, 2.52D0, 2.45D0,
     &         2.37D0, 2.46D0, 2.44D0, 2.54D0, 2.58D0,
     &         2.72D0, 2.66D0, 2.79D0/
      DATA FNORM /.1000D+01,.1000D+01,.1000D+01,.1000D+01,.1000D+01,
     &            .1000D+01,.1000D+01,.1000D+01,.1000D+01,.1000D+01,
     &            .1012D+01,.1039D+01,.1075D+01,.1118D+01,.1164D+01,
     &            .1214D+01,.1265D+01,.1318D+01/
      DATA PDIF /0.545D0/

      DT_DENSIT = ZERO
c shell model
      IF (NA.LE.4) THEN
         STOP 'DT_DENSIT-0'
      ELSEIF ((NA.GT.4).AND.(NA.LE.18)) THEN
         R1 = R0(NA)/SQRT(2.5D0-4.0D0/DBLE(NA))
         DT_DENSIT = (ONE+(DBLE(NA)-4.0D0)/6.0D0*(R/R1)**2)
     &            *EXP(-(R/R1)**2)/FNORM(NA)
c Woods-Saxon
      ELSEIF (NA.GT.18) THEN
         DT_DENSIT = ONE/(ONE+EXP((R-RA)/PDIF))
      ENDIF

      RETURN
      END
c
c===rnclus=============================================================*
c
CDECK  ID>, DT_RNCLUS
      DOUBLE PRECISION FUNCTION DT_RNCLUS(N)

c***********************************************************************
c Nuclear radius for nucleus with mass number N.                       *
c This version dated 26.9.00  is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER (ONE=1.0D0,THREE=3.0D0,ONETHI=ONE/THREE)

c nucleon radius
      PARAMETER (RNUCLE = 1.12D0)

c nuclear radii for selected nuclei
      DIMENSION RADNUC(18)
      DATA RADNUC / 8*0.0D0,2.52D0,2.45D0,2.37D0,2.45D0,2.44D0,2.55D0,
     &               2.58D0,2.71D0,2.66D0,2.71D0/

      IF (N.LE.18) THEN
         IF (RADNUC(N).GT.0.0D0) THEN
            DT_RNCLUS = RADNUC(N)
         ELSE
            DT_RNCLUS = RNUCLE*DBLE(N)**ONETHI
         ENDIF
      ELSE
         DT_RNCLUS = RNUCLE*DBLE(N)**ONETHI
      ENDIF

      RETURN
      END
c
c===dentst=============================================================*
c
C      PROGRAM DT_DENTST
CDECK  ID>, DT_DENTST
      SUBROUTINE DT_DENTST

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      OPEN(40,FILE='DENTST.OUT',STATUS='UNKNOWN')
      OPEN(41,FILE='DENMAX.OUT',STATUS='UNKNOWN')

      RMIN  = 0.0D0
      RMAX  = 8.0D0
      NBINS = 500.0D0
      DR    = (RMAX-RMIN)/DBLE(NBINS)
      DO 1 IA=5,18
         FMAX = 0.0D0
         DO 2 IR=1,NBINS+1
            R = RMIN+DBLE(IR-1)*DR
            F = DT_DENSIT(IA,R,R)
            IF (F.GT.FMAX) FMAX = F
            WRITE(40,'(1X,I3,2E15.5)') IA,R,F
    2    CONTINUE
         WRITE(41,'(1X,I3,E15.5)') IA,FMAX
    1 CONTINUE

      CLOSE(40)
      CLOSE(41)

      END
c
c===shmaki=============================================================*
c
CDECK  ID>, DT_SHMAKI
      SUBROUTINE DT_SHMAKI(NA,NCA,NB,NCB,IJP,PPN,MODE)

c***********************************************************************
c Initialisation of Glauber formalism. This subroutine has to be       *
c called once (in case of target emulsions as often as many different  *
c target nuclei are considered) before events are sampled.             *
c         NA / NCA   mass number/charge of projectile nucleus          *
c         NB / NCB   mass number/charge of target     nucleus          *
c         IJP        identity of projectile (hadrons/leptons/photons)  *
c         PPN        projectile momentum (for projectile nuclei:       *
c                    momentum per nucleon) in target rest system       *
c         MODE = 0   Glauber formalism invoked                         *
c              = 1   fitted results are loaded from data-file          *
c              = 99  NTARG is forced to be 1                           *
c                    (used in connection with GLAUBERI-card only)      *
c This version dated 22.03.96 is based on the original SHMAKI-routine  *
c and revised by S. Roesler.                                           *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0,
     &           THREE=3.0D0)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c kinematical cuts for lepton-nucleus interactions
      COMMON /DTLCUT/ ECMIN,ECMAX,XBJMIN,ELMIN,EGMIN,EGMAX,YMIN,YMAX,
     &                Q2MIN,Q2MAX,THMIN,THMAX,Q2LI,Q2HI,ECMLI,ECMHI

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c cuts for variable energy runs
      COMMON /DTVARE/ VARELO,VAREHI,VARCLO,VARCHI

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD


      DATA NTARG,ICOUT,IVEOUT /0,0,0/

C     CALL DT_HISHAD
C     STOP
c///////////
c      write(0,*) " DT_SHMAKI(NA,NCA,NB,NCB,IJP,PPN,MODE) "
c      write(0,*) NA,NCA,NB,NCB,IJP,PPN,MODE
c///////////////

      NTARG = NTARG+1
      IF (MODE.EQ.99) NTARG = 1
      NIDX = -NTARG
      IF (MODE.EQ.-1) NIDX = NTARG

      IF ((ICOUT.LT.15).AND.(MCGENE.NE.4)) ICOUT = ICOUT+1
      IF (ICOUT.EQ.1) WRITE(ErrorOut,1000)
 1000    FORMAT(//,1X,'SHMAKI:    GLAUBER FORMALISM (SHMAKOV ET. AL) -',
     &          ' INITIALIZATION',/,12X,'--------------------------',
     &          '-------------------------',/)

      IF (MODE.EQ.2) THEN
         CALL DT_XSGLAU(NA,NB,IJP,ZERO,VIRT,UMO,1,1,NIDX)
         CALL DT_SHFAST(MODE,PPN,IBACK)
         STOP ' GLAUBER PRE-INITIALIZATION DONE'
      ENDIF
      IF (MODE.EQ.1) THEN
         CALL DT_PROFBI(NA,NB,PPN,NTARG)
      ELSE
         IBACK = 1
         IF (MODE.EQ.3)  CALL DT_SHFAST(MODE,PPN,IBACK)
         IF (IBACK.EQ.1) THEN
c lepton-nucleus (variable energy runs)
            IF ((IJP.EQ. 3).OR.(IJP.EQ. 4).OR.
     &          (IJP.EQ.10).OR.(IJP.EQ.11))   THEN
               IF ((ICOUT.LT.15).AND.(MCGENE.NE.4))
     &            WRITE(ErrorOut,1002) NB,NCB
 1002          FORMAT(1X,'VARIABLE ENERGY RUN:     PROJECTILE-ID:  7',
     &                '    TARGET A/Z: ',I3,' /',I3,/,/,8X,
     &                'E_CM (GEV)    Q^2 (GEV^2)',
     &                '    SIGMA_TOT (MB)     SIGMA_IN (MB)',/,7X,
     &                '--------------------------------',
     &                '------------------------------')
               AECMLO = LOG10(MIN(UMO,ECMLI))
               AECMHI = LOG10(MIN(UMO,ECMHI))
               IESTEP = NEB-1
               DAECM  = (AECMHI-AECMLO)/DBLE(IESTEP)
               IF (AECMLO.EQ.AECMHI) IESTEP = 0
               DO 1 I=1,IESTEP+1
                  ECM = 10.0D0**(AECMLO+DBLE(I-1)*DAECM)
                  IF (Q2HI.GT.0.1D0) THEN
                     IF (Q2LI.LT.0.01D0) THEN
                        CALL DT_XSGLAU(NA,NB,7,ZERO,ZERO,ECM,I,1,NIDX)
                        IF ((ICOUT.LT.15).AND.(MCGENE.NE.4))
     &                     WRITE(ErrorOut,1003)
     &                  ECMNN(I),ZERO,XSTOT(I,1,NTARG),XSPRO(I,1,NTARG)
                        Q2LI = 0.01D0
                        IBIN = 2
                     ELSE
                        IBIN = 1
                     ENDIF
                     IQSTEP = NQB-IBIN
                     AQ2LO  = LOG10(Q2LI)
                     AQ2HI  = LOG10(Q2HI)
                     DAQ2   = (AQ2HI-AQ2LO)/MAX(DBLE(IQSTEP),ONE)
                     DO 2 J=IBIN,IQSTEP+IBIN
                        Q2 = 10.0D0**(AQ2LO+DBLE(J-IBIN)*DAQ2)
                        CALL DT_XSGLAU(NA,NB,7,ZERO,Q2,ECM,I,J,NIDX)
                        IF ((ICOUT.LT.15).AND.(MCGENE.NE.4))
     &                     WRITE(ErrorOut,1003) ECMNN(I),
     &                     Q2G(J),XSTOT(I,J,NTARG),XSPRO(I,J,NTARG)
    2                CONTINUE
                  ELSE
                     CALL DT_XSGLAU(NA,NB,7,ZERO,ZERO,ECM,I,1,NIDX)
                     IF ((ICOUT.LT.15).AND.(MCGENE.NE.4))
     &                  WRITE(ErrorOut,1003)
     &                  ECMNN(I),ZERO,XSTOT(I,1,NTARG),XSPRO(I,1,NTARG)
                  ENDIF
 1003             FORMAT(9X,F6.1,9X,F6.2,8X,F8.3,11X,F8.3)
    1          CONTINUE
               IVEOUT = 1
            ELSE
c hadron/photon/nucleus-nucleus
               IF ((ABS(VAREHI).GT.ZERO).AND.
     &             (ABS(VAREHI).GT.ABS(VARELO))) THEN
                  IF ((ICOUT.LT.15).AND.(MCGENE.NE.4)) THEN
                     WRITE(ErrorOut,1004) NA,NB,NCB
 1004                FORMAT(1X,'VARIABLE ENERGY RUN:    PROJECTILE-ID:',
     &                      I3,'    TARGET A/Z: ',I3,' /',I3,/)
                     WRITE(ErrorOut,1005)
 1005                FORMAT('  E_CM (GEV)  E_LAB (GEV)  SIG_TOT^PP (MB)'
     &                      ,'  SIGMA_TOT (MB)  SIGMA_PROD (MB)',/,
     &                      ' -------------------------------------',
     &                      '--------------------------------------')
                  ENDIF
                  AECMLO = LOG10(VARCLO)
                  AECMHI = LOG10(VARCHI)
                  IESTEP = NEB-1
                  DAECM = (AECMHI-AECMLO)/DBLE(IESTEP)
                  IF (AECMLO.EQ.AECMHI) IESTEP = 0
                  DO 3 I=1,IESTEP+1
                     ECM = 10.0D0**(AECMLO+DBLE(I-1)*DAECM)
                     AMP = 0.938D0
                     AMT = 0.938D0
                     AMP2 = AMP**2
                     AMT2 = AMT**2
                     ELAB = (ECM**2-AMP2-AMT2)/(TWO*AMT)
                     PLAB = SQRT((ELAB+AMP)*(ELAB-AMP))
                     CALL DT_XSGLAU(NA,NB,IJP,ZERO,VIRT,ECM,I,1,NIDX)
                     IF ((ICOUT.LT.15).AND.(MCGENE.NE.4))
     &                 WRITE(ErrorOut,1006)
     &                 ECM,PLAB,SIGSH,XSTOT(I,1,NTARG),XSPRO(I,1,NTARG)
 1006             FORMAT(1X,F9.1,1X,E11.3,1X,F12.2,8X,F10.3,8X,F8.3)
    3             CONTINUE
                  IVEOUT = 1
               ELSE
                  CALL DT_XSGLAU(NA,NB,IJP,ZERO,VIRT,UMO,1,1,NIDX)
               ENDIF
            ENDIF
         ENDIF
      ENDIF

      IF ((ICOUT.LT.15).AND.(IVEOUT.EQ.0).AND.(MCGENE.NE.4).AND.
     &    (IOGLB.NE.100)) THEN
         WRITE(ErrorOut,
     * 1001) NA,NCA,NB,NCB,ECMNN(1),SIGSH*10.0D0,ROSH,
     &                    BSLOPE,NSITEB,NSTATB,XSPRO(1,1,NTARG)
 1001    FORMAT(38X,'PROJECTILE',
     &          '      TARGET',/,1X,'MASS NUMBER / CHARGE',
     &          17X,I3,' /',I3,6X,I3,' /',I3,/,/,1X,
     &          'NUCLEON-NUCLEON C.M. ENERGY',9X,F10.2,' GEV',/,/,1X,
     &          'PARAMETERS OF ELASTIC SCATTERING AMPLITUDE:',/,5X,
     &          'SIGMA =',F7.2,' MB',6X,'RHO = ',F9.4,6X,'SLOPE = ',
     &          F4.1,' GEV^-2',/,/,1X,'NUMBER OF B-STEPS',4X,I3,8X,
     &          'STATISTICS AT EACH B-STEP',4X,I5,/,/,1X,
     &          'PROD. CROSS SECTION  ',5X,F10.4,' MB',/)
      ENDIF

      RETURN
      END
c
c===profbi=============================================================*
c
CDECK  ID>, DT_PROFBI
      SUBROUTINE DT_PROFBI(NA,NB,PPN,NTARG)

c***********************************************************************
c Integral over profile function (to be used for impact-parameter      *
c sampling during event generation).                                   *
c Fitted results are used.                                             *
c         NA / NB    mass numbers of proj./target nuclei               *
c         PPN        projectile momentum (for projectile nuclei:       *
c                    momentum per nucleon) in target rest system       *
c         NTARG      index of target material (i.e. kind of nucleus)   *
c This version dated 31.05.95 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)


      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,THREE=3.0D0)

      LOGICAL LSTART
      CHARACTER CNAME*80

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI


      PARAMETER (NGLMAX=8000)
      DIMENSION NGLIT(NGLMAX),NGLIP(NGLMAX),GLAPPN(NGLMAX),
     &          GLASIG(NGLMAX),GLAFIT(5,NGLMAX)

      DATA LSTART /.TRUE./

      IF (LSTART) THEN
c read fit-parameters from file
         OPEN(47,FILE='INPDATA/GLPARA.DAT',STATUS='UNKNOWN')
         I = 0
    1    CONTINUE
         READ(47,'(A80)') CNAME
         IF (CNAME.EQ.'STOP') GOTO 2
         I = I+1
         READ(CNAME,*) NGLIP(I),NGLIT(I),GLAPPN(I),GLASIG(I),
     &                 GLAFIT(1,I),GLAFIT(2,I),GLAFIT(3,I),
     &                 GLAFIT(4,I),GLAFIT(5,I)
         IF (I+1.GT.NGLMAX) THEN
            WRITE(ErrorOut,1000)
 1000       FORMAT(1X,'PROFBI:    WARNING! ARRAY SIZE EXCEEDED - ',
     &             'PROGRAM STOPPED')
            STOP
         ENDIF
         GOTO 1
    2    CONTINUE
         NGLPAR = I
         LSTART = .FALSE.
      ENDIF

      NNA = NA
      NNB = NB
      IF (NA.GT.NB) THEN
         NNA = NB
         NNB = NA
      ENDIF
      IDXGLA = 0
      DO 3 J=1,NGLPAR
         IF ((NNB.LT.NGLIT(J)).OR.(J.EQ.NGLPAR)) THEN
            IF (NNB.NE.NGLIT(J-1)) NNB = NGLIT(J-1)
            DO 4 K=1,J-1
               IPOINT = J-K
               IF (J.EQ.NGLPAR) IPOINT = J+1-K
               IF ((NNA.GT.NGLIP(IPOINT)).OR.
     &             (NNB.NE.NGLIT(IPOINT)).OR.(IPOINT.EQ.1)) THEN
                  IF (IPOINT.EQ.1) IPOINT = 0
                  NATMP = NGLIP(IPOINT+1)
                  IF (PPN.LT.GLAPPN(IPOINT+1)) THEN
                     IDXGLA = IPOINT+1
                     GOTO 6
                  ELSE
                     J1BEG = IPOINT+1
                     J1END = J
C                    IF (J.EQ.NGLPAR) THEN
C                       J1BEG = IPOINT
C                       J1END = J
C                    ENDIF
                     DO 5 J1=J1BEG,J1END
                        IF (NGLIP(J1).EQ.NATMP) THEN
                           IF (PPN.LT.GLAPPN(J1)) THEN
                              IDXGLA = J1
                              GOTO 6
                           ENDIF
                        ELSE
                           IDXGLA = J1-1
                           GOTO 6
                        ENDIF
    5                CONTINUE
                     IF ((J.EQ.NGLPAR).AND.(PPN.GT.GLAPPN(NGLPAR)))
     &                  IDXGLA = NGLPAR
                  ENDIF
               ENDIF
    4       CONTINUE
         ENDIF
    3 CONTINUE

    6 CONTINUE
      IF (IDXGLA.EQ.0) THEN
         WRITE(ErrorOut,1001) NNA,NNB,PPN
 1001    FORMAT(1X,'PROFBI:   CONFIGURATION (NA,NB,PPN = ',
     &          2I4,F6.0,') NOT FOUND ')
         STOP
      ENDIF

c no interpolation yet available
      XSPRO(1,1,NTARG) = GLASIG(IDXGLA)

      BSITE(1,1,NTARG,1) = ZERO
      DO 10 I=2,NSITEB
         XX = DBLE(I)
         POLY  = GLAFIT(1,IDXGLA)+GLAFIT(2,IDXGLA)*XX+
     &           GLAFIT(3,IDXGLA)*XX**2+GLAFIT(4,IDXGLA)*XX**3+
     &           GLAFIT(5,IDXGLA)*XX**4
         IF (ABS(POLY).GT.35.0D0) POLY = SIGN(35.0D0,POLY)
         BSITE(1,1,NTARG,I) = (1.0D0-EXP(-POLY))
         IF (BSITE(1,1,NTARG,I).LT.ZERO) BSITE(1,1,NTARG,I) = ZERO
   10 CONTINUE

      RETURN
      END
c
c===glaube=============================================================*
c
CDECK  ID>, DT_GLAUBE
      SUBROUTINE DT_GLAUBE(NA,NB,IJPROJ,B,INTT,INTA,INTB,JS,JT,NIDX)

c***********************************************************************
c Calculation of configuartion of interacting nucleons for one event.  *
c    NB / NB    mass numbers of proj./target nuclei           (input)  *
c    B          impact parameter                              (output) *
c    INTT       total number of wounded nucleons                       *
c    INTA / INTB number of wounded nucleons in proj. / target          *
c    JS / JT(i) number of collisions proj. / target nucleon i is       *
c                                                   involved  (output) *
c    NIDX       index of projectile/target material             (input)*
c This is an update of the original routine SHMAKO by J.Ranft/HJM      *
c This version dated 22.03.96 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY14=1.0D-14,
     &           ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD


      DIMENSION JS(MAXNCL),JT(MAXNCL)
c//////////////
c      write(0,*) 'DT_GLAUBE(NA,NB,IJPROJ,B,INTT,INTA,INTB,JS,JT,NIDX)'
c      write(0,*) NA,NB,IJPROJ,B,INTT,INTA,INTB,JS,JT,NIDX
c      write(0,*) ' IOGLB=', IOGLB
c////////////////////////

      NTARG = ABS(NIDX)

c get actual energy from /DTLTRA/
      ECMNOW = UMO
      Q2     = VIRT
c
c new patch for pre-initialized variable projectile/target/energy runs
      IF (IOGLB.EQ.100) THEN
         CALL DT_GLBSET(IJPROJ,NA,NB,EPROJ,1)
c
c variable energy run, interpolate profile function
      ELSE
         I1   = 1
         I2   = 1
         RATE = ONE
         IF (NEBINI.GT.1) THEN
            IF (ECMNOW.GE.ECMNN(NEBINI)) THEN
               I1   = NEBINI
               I2   = NEBINI
               RATE = ONE
            ELSEIF (ECMNOW.GT.ECMNN(1)) THEN
               DO 1 I=2,NEBINI
                  IF (ECMNOW.LT.ECMNN(I)) THEN
                     I1   = I-1
                     I2   = I
                     RATE = (ECMNOW-ECMNN(I1))/(ECMNN(I2)-ECMNN(I1))
                     GOTO 2
                  ENDIF
    1          CONTINUE
    2          CONTINUE
            ENDIF
         ENDIF
         J1   = 1
         J2   = 1
         RATQ = ONE
         IF (NQBINI.GT.1) THEN
            IF (Q2.GE.Q2G(NQBINI)) THEN
               J1   = NQBINI
               J2   = NQBINI
               RATQ = ONE
            ELSEIF (Q2.GT.Q2G(1)) THEN
               DO 3 I=2,NQBINI
                  IF (Q2.LT.Q2G(I)) THEN
                     J1   = I-1
                     J2   = I
                     RATQ = LOG10(     Q2/MAX(Q2G(J1),TINY14))/
     &                      LOG10(Q2G(J2)/MAX(Q2G(J1),TINY14))
C                    RATQ = (Q2-Q2G(J1))/(Q2G(J2)-Q2G(J1))
                     GOTO 4
                  ENDIF
    3          CONTINUE
    4          CONTINUE
            ENDIF
         ENDIF

         DO 5 I=1,KSITEB
            BSITE(0,1,NTARG,I) = BSITE(I1,J1,NTARG,I)+
     &         RATE*(BSITE(I2,J1,NTARG,I)-BSITE(I1,J1,NTARG,I))+
     &         RATQ*(BSITE(I1,J2,NTARG,I)-BSITE(I1,J1,NTARG,I))+
     &         RATE*RATQ*(BSITE(I2,J2,NTARG,I)-BSITE(I1,J2,NTARG,I)+
     &                    BSITE(I1,J1,NTARG,I)-BSITE(I2,J1,NTARG,I))
    5    CONTINUE
      ENDIF

      CALL DT_DIAGR(NA,NB,IJPROJ,B,JS,JT,INTT,INTA,INTB,IDIREC,NIDX)
C&&&&&&&&&&&&&&&&&& KK
      if(B .eq. -1.) return
C&&&&&&&&&&&&&&&
      IF (NIDX.LE.-1) THEN
         RPROJ = RASH(1)
         RTARG = RBSH(NTARG)
      ELSE
         RPROJ = RASH(NTARG)
         RTARG = RBSH(1)
      ENDIF

      RETURN
      END
c
c===diagr==============================================================*
c
CDECK  ID>, DT_DIAGR
      SUBROUTINE DT_DIAGR(NA,NB,IJPROJ,B,JS,JT,JNT,INTA,INTB,IDIREC,
     &                                                         NIDX)

c***********************************************************************
c Based on the original version by Shmakov et al.                      *
c This version dated 21.04.95 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI  = 6.283185307179586454D+00,
     &           PI     = TWOPI/TWO,
     &           GEV2MB = 0.38938D0,
     &           GEV2FM = 0.1972D0,
     &           ALPHEM = ONE/137.0D0,
c proton mass
     &           AMP    = 0.938D0,
     &           AMP2   = AMP**2,
c rho0 mass
     &           AMRHO0 = 0.77D0)

      COMPLEX*16 C,CA,CI

      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c*PHOJET105a
C     COMMON /CUTOFF/ PTCUT(4),CUTMU(4),FPS(4),FPH(4),PSOMIN,XSOMIN
c*PHOJET112
C  obsolete cut-off information
      DOUBLE PRECISION PTCUT,PTANO,FPS,FPH,PSOMIN,XSOMIN
      COMMON /POCUT1/ PTCUT(4),PTANO(4),FPS(4),FPH(4),PSOMIN,XSOMIN

c*
c coordinates of nucleons
      COMMON /DTNUCO/ PKOO(3,MAXNCL),TKOO(3,MAXNCL)

c interface between Glauber formalism and DPM
      COMMON /DTGLIF/ JSSH(MAXNCL),JTSH(MAXNCL),
     &                INTER1(MAXINT),INTER2(MAXINT)

c statistics: Glauber-formalism
      COMMON /DTSTA3/ ICWP,ICWT,NCSY,ICWPG,ICWTG,ICIG,IPGLB,ITGLB,NGLB

c n-n cross section fluctuations
      PARAMETER (NBINS = 1000)
      COMMON /DTXSFL/ FLUIXX(NBINS),IFLUCT


      DIMENSION JS(MAXNCL),JT(MAXNCL),
     &          JS0(MAXNCL),JT0(MAXNCL,MAXNCL),
     &          JI1(MAXNCL,MAXNCL),JI2(MAXNCL,MAXNCL),JNT0(MAXNCL)
      DIMENSION NWA(0:210),NWB(0:210)

      LOGICAL LFIRST
      DATA LFIRST /.TRUE./

      DATA NTARGO,ICNT /0,0/

      NTARG = ABS(NIDX)

      IF (LFIRST) THEN
         LFIRST = .FALSE.
         IF (NCOMPO.EQ.0) THEN
            NCALL  = 0
            NWAMAX = NA
            NWBMAX = NB
            DO 17 I=0,210
               NWA(I) = 0
               NWB(I) = 0
   17       CONTINUE
         ENDIF
      ENDIF
      IF (NTARG.EQ.-1) THEN
         IF (NCOMPO.EQ.0) THEN
            WRITE(ErrorOut,
     * *) ' DIAGR: distribution of wounded nucleons'
            WRITE(ErrorOut,
     * '(8X,A,3I7)') 'NCALL,NWAMAX,NWBMAX = ',
     &                                NCALL,NWAMAX,NWBMAX
            DO 18 I=1,MAX(NWAMAX,NWBMAX)
               WRITE(ErrorOut,'(8X,2I7,E12.4,I7,E12.4)')
     &                          I,NWA(I),DBLE(NWA(I))/DBLE(NCALL),
     &                            NWB(I),DBLE(NWB(I))/DBLE(NCALL)
   18       CONTINUE
         ENDIF
         RETURN
      ENDIF

      DCOH   = 1.0D10
      IPNT   = 0

      SQ2  = Q2
      IF (SQ2.LE.ZERO) SQ2 = 0.0001D0
      S   = ECMNOW**2
      X   = SQ2/(S+SQ2-AMP2)
      XNU = (S+SQ2-AMP2)/(TWO*AMP)
c photon projectiles: recalculate photon-nucleon amplitude
      IF (IJPROJ.EQ.7) THEN
   15    CONTINUE
c  VDM assumption: mass of V-meson
         AMV2   = DT_SAM2(SQ2,ECMNOW)
         AMV    = SQRT(AMV2)
         IF (AMV.GT.2.0D0*PTCUT(1)) GOTO 15
c  check for pointlike interaction
         CALL DT_POILIK(NB,NTARG,ECMNOW,SQ2,IPNT,RPNT,1)
c*sr 27.10.
C        SIGSH  = DT_SIGVP(X,SQ2)/(AMV2+SQ2+RL2)/10.0D0
         SIGSH  = (ONE-RPNT)*DT_SIGVP(X,SQ2)/(AMV2+SQ2+RL2)/10.0D0
c*
         ROSH   = 0.1D0
         BSLOPE = 2.0D0*(2.0D0+AMRHO0**2/(AMV2+SQ2)
     &                   +0.25D0*LOG(S/(AMV2+SQ2)))
c  coherence length
         IF (ISHAD(3).EQ.1) DCOH = TWO*XNU/(AMV2+SQ2)*GEV2FM
      ELSEIF ((IJPROJ.LE.12).AND.(IJPROJ.NE.7)) THEN
         IF (MCGENE.EQ.2) THEN
            ZERO1 = ZERO
            CALL DT_PHOXS(IJPROJ,1,ECMNOW,ZERO1,SDUM1,SDUM2,SDUM3,
     &                                                BSLOPE,0)
         ELSE
            BSLOPE = 8.5D0*(1.0D0+0.065D0*LOG(S))
         ENDIF
         IF (ECMNOW.LE.3.0D0) THEN
            ROSH = -0.43D0
         ELSEIF ((ECMNOW.GT.3.0D0).AND.(ECMNOW.LE.50.D0)) THEN
            ROSH = -0.63D0+0.175D0*LOG(ECMNOW)
         ELSEIF (ECMNOW.GT.50.0D0) THEN
            ROSH = 0.1D0
         ENDIF
         ELAB = (S-AAM(IJPROJ)**2-AMP2)/(TWO*AMP)
         PLAB = SQRT( (ELAB-AAM(IJPROJ))*(ELAB+AAM(IJPROJ)) )
         IF (MCGENE.EQ.2) THEN
            ZERO1 = ZERO
            CALL DT_PHOXS(IJPROJ,1,ECMNOW,ZERO1,SIGSH,SDUM2,SDUM3,
     &                                                  BDUM,0)
            SIGSH = SIGSH/10.0D0
         ELSE
C           SIGSH = DT_SHNTOT(IJPROJ,1,ZERO,PLAB)/10.0D0
            DUMZER = ZERO
            CALL DT_XSHN(IJPROJ,1,PLAB,DUMZER,SIGSH,SIGEL)
            SIGSH = SIGSH/10.0D0
         ENDIF
      ELSE
         BSLOPE = 6.0D0*(1.0D0+0.065D0*LOG(S))
         ROSH   = 0.01D0
         ELAB = (S-AAM(IJPROJ)**2-AMP2)/(TWO*AMP)
         PLAB = SQRT( (ELAB-AAM(IJPROJ))*(ELAB+AAM(IJPROJ)) )
C        SIGSH = DT_SHNTOT(IJPROJ,1,ZERO,PLAB)/10.0D0
         DUMZER = ZERO
         CALL DT_XSHN(IJPROJ,1,PLAB,DUMZER,SIGSH,SIGEL)
         SIGSH = SIGSH/10.0D0
      ENDIF
      GSH = 10.0D0/(TWO*BSLOPE*GEV2MB)
      GAM = GSH
      RCA = GAM*SIGSH/TWOPI
      FCA = -ROSH*RCA
      CA  = DCMPLX(RCA,FCA)
      CI  = DCMPLX(ONE,ZERO)

   16 CONTINUE
c impact parameter
      IF (MCGENE.NE.3) CALL DT_MODB(B,NIDX)

      NTRY = 0
    3 CONTINUE
      NTRY = NTRY+1
c initializations
      JNT  = 0
      DO 1 I=1,NA
         JS(I) = 0
    1 CONTINUE
      DO 2 I=1,NB
         JT(I) = 0
    2 CONTINUE
      IF (IJPROJ.EQ.7) THEN
         DO 8 I=1,MAXNCL
            JS0(I) = 0
            JNT0(I)= 0
            DO 9 J=1,NB
               JT0(I,J) = 0
    9       CONTINUE
    8    CONTINUE
      ENDIF

c nucleon configuration
C     IF ((NTARG.NE.NTARGO).OR.(MOD(ICNT,5).EQ.0)) THEN
      IF ((NTARG.NE.NTARGO).OR.(MOD(ICNT,1).EQ.0)) THEN
C        CALL DT_CONUCL(PKOO,NA,RASH,2)
C        CALL DT_CONUCL(TKOO,NB,RBSH(NTARG),1)
         IF (NIDX.LE.-1) THEN
            CALL DT_CONUCL(PKOO,NA,RASH(1),0)
            CALL DT_CONUCL(TKOO,NB,RBSH(NTARG),0)
         ELSE
            CALL DT_CONUCL(PKOO,NA,RASH(NTARG),0)
            CALL DT_CONUCL(TKOO,NB,RBSH(1),0)
         ENDIF
         NTARGO = NTARG
      ENDIF
      ICNT = ICNT+1

c LEPTO: pick out one struck nucleon
      IF (MCGENE.EQ.3) THEN
         JNT     = 1
         JS(1)   = 1
         IDX     = INT(DT_RNDM(X)*NB)+1
         JT(IDX) = 1
         B       = ZERO
         GOTO 19
      ENDIF

      DO 4 INA=1,NA
c cross section fluctuations
         AFLUC = ONE
         IF (IFLUCT.EQ.1) THEN
            IFLUK = INT((DT_RNDM(X)+0.001D0)*1000.0D0)
            AFLUC = FLUIXX(IFLUK)
         ENDIF
         KK1  = 1
         KINT = 1
         DO 5 INB=1,NB
c photon-projectile: check for supression by coherence length
            IF (IJPROJ.EQ.7) THEN
               IF (ABS(TKOO(3,INB)-TKOO(3,KK1)).GT.DCOH) THEN
                  KK1  = INB
                  KINT = KINT+1
               ENDIF
            ENDIF
            QQ1 = B+TKOO(1,INB)-PKOO(1,INA)
            QQ2 =   TKOO(2,INB)-PKOO(2,INA)
            XY  = GAM*(QQ1*QQ1+QQ2*QQ2)
            IF (XY.LE.15.0D0) THEN
               C  = CI-CA*AFLUC*EXP(-XY)
               AR = DBLE(C)
               AI = DIMAG(C)
               P  = AR*AR+AI*AI
               IF (DT_RNDM(XY).GE.P) THEN
                  JNT = JNT+1
                  IF (IJPROJ.EQ.7) THEN
                     JNT0(KINT) = JNT0(KINT)+1
                     IF (JNT0(KINT).GT.MAXNCL) THEN
                        WRITE(ErrorOut,1001) MAXNCL
 1001                   FORMAT(1X,
     &                        'DIAGR:  NO. OF REQUESTED INTERACTIONS',
     &                        ' EXCEEDS ARRAY DIMENSIONS ',I4)
                        STOP
                     ENDIF
                     JS0(KINT)      = JS0(KINT)+1
                     JT0(KINT,INB)  = JT0(KINT,INB)+1
                     JI1(KINT,JNT0(KINT)) = INA
                     JI2(KINT,JNT0(KINT)) = INB
                  ELSE
                     IF (JNT.GT.MAXINT) THEN
                        WRITE(ErrorOut,1000) JNT, MAXINT
 1000                   FORMAT(1X,
     &                        'DIAGR:  NO. OF REQUESTED INTERACTIONS ('
     &                        ,I4,') EXCEEDS ARRAY DIMENSIONS (',I4,')')
                        STOP
                     ENDIF
                     JS(INA) = JS(INA)+1
                     JT(INB) = JT(INB)+1
                     INTER1(JNT) = INA
                     INTER2(JNT) = INB
                  ENDIF
               ENDIF
            ENDIF
    5    CONTINUE
    4 CONTINUE

      IF (JNT.EQ.0) THEN
         IF (NTRY.LT.500) THEN
            GOTO 3
         ELSE
C           WRITE(6,*) ' new impact parameter required (old= ',B,')'
C&&&&&&&&&&&&& KK
C                for pion proj and H target, some times loop happens
C                workaround by putting -1.0 to imact param.
            if(IJPROJ .eq. 14 .and. NB .eq. 1) then
               B=-1.
               return
            endif
C&&&&&&&&&&&&&&&&&
            GOTO 16
         ENDIF
      ENDIF

      IDIREC = 0
      IF (IJPROJ.EQ.7) THEN
         K = INT(ONE+DT_RNDM(X)*DBLE(KINT))
   10    CONTINUE
         IF (JNT0(K).EQ.0) THEN
            K = K+1
            IF (K.GT.KINT) K = 1
            GOTO 10
         ENDIF
c supress Glauber-cascade by direct photon processes
         CALL DT_POILIK(NB,NTARG,ECMNOW,SQ2,IPNT,RPNT,2)
         IF (IPNT.GT.0) THEN
            JNT   = 1
            JS(1) = 1
            DO 11 INB=1,NB
               JT(INB) = JT0(K,INB)
               IF (JT(INB).GT.0) GOTO 12
   11       CONTINUE
   12       CONTINUE
            INTER1(1) = 1
            INTER2(1) = INB
            IDIREC    = IPNT
         ELSE
            JNT   = JNT0(K)
            JS(1) = JS0(K)
            DO 13 INB=1,NB
               JT(INB) = JT0(K,INB)
   13       CONTINUE
            DO 14 I=1,JNT
               INTER1(I) = JI1(K,I)
               INTER2(I) = JI2(K,I)
   14       CONTINUE
         ENDIF
      ENDIF

   19 CONTINUE
      INTA = 0
      INTB = 0
      DO 6 I=1,NA
        IF (JS(I).NE.0) INTA=INTA+1
    6 CONTINUE
      DO 7 I=1,NB
        IF (JT(I).NE.0) INTB=INTB+1
    7 CONTINUE
      ICWPG = INTA
      ICWTG = INTB
      ICIG  = JNT
      IPGLB = IPGLB+INTA
      ITGLB = ITGLB+INTB
      NGLB = NGLB+1

      IF (NCOMPO.EQ.0) THEN
         NCALL = NCALL+1
         NWA(INTA) = NWA(INTA)+1
         NWB(INTB) = NWB(INTB)+1
      ENDIF

      RETURN
      END
c
c===modb===============================================================*
c
CDECK  ID>, DT_MODB
      SUBROUTINE DT_MODB(B,NIDX)

c***********************************************************************
c Sampling of impact parameter of collision.                           *
c    B          impact parameter    (output)                           *
c    NIDX       index of projectile/target material             (input)*
c Based on the original version by Shmakov et al.                      *
c This version dated 21.04.95 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY15=1.0D-15,ONE=1.0D0,TWO=2.0D0)

      LOGICAL LEFT,LFIRST

c central particle production, impact parameter biasing
      COMMON /DTIMPA/ BIMIN,BIMAX,XSFRAC,ICENTR

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI


      DATA LFIRST /.TRUE./

      NTARG = ABS(NIDX)
      IF (NIDX.LE.-1) THEN
         RA = RASH(1)
         RB = RBSH(NTARG)
      ELSE
         RA = RASH(NTARG)
         RB = RBSH(1)
      ENDIF

      IF (ICENTR.EQ.2) THEN
         IF (RA.EQ.RB) THEN
            BB = DT_RNDM(B)*(0.3D0*RA)**2
            B  = SQRT(BB)
         ELSEIF(RA.LT.RB)THEN
            BB = DT_RNDM(B)*1.4D0*(RB-RA)**2
            B  = SQRT(BB)
         ELSEIF(RA.GT.RB)THEN
            BB = DT_RNDM(B)*1.4D0*(RA-RB)**2
            B  = SQRT(BB)
         ENDIF
      ELSE
    9    CONTINUE
         Y  = DT_RNDM(BB)
         I0 = 1
         I2 = NSITEB
   10    CONTINUE
         I1 = (I0+I2)/2
         LEFT = ((BSITE(0,1,NTARG,I0)-Y)
     &          *(BSITE(0,1,NTARG,I1)-Y)).LT.ZERO
         IF (LEFT) GOTO 20
         I0 = I1
         GOTO 30
   20    CONTINUE
         I2 = I1
   30    CONTINUE
         IF (I2-I0-2) 40,50,60
   40    CONTINUE
         I1 = I2+1
         IF (I1.GT.NSITEB) I1 = I0-1
         GOTO 70
   50    CONTINUE
         I1 = I0+1
         GOTO 70
   60    CONTINUE
         GOTO 10
   70    CONTINUE
         X0 = DBLE(I0-1)*BSTEP(NTARG)
         X1 = DBLE(I1-1)*BSTEP(NTARG)
         X2 = DBLE(I2-1)*BSTEP(NTARG)
         Y0 = BSITE(0,1,NTARG,I0)
         Y1 = BSITE(0,1,NTARG,I1)
         Y2 = BSITE(0,1,NTARG,I2)
   80    CONTINUE
         B = X0*(Y-Y1)*(Y-Y2)/((Y0-Y1)*(Y0-Y2)+TINY15)+
     &       X1*(Y-Y0)*(Y-Y2)/((Y1-Y0)*(Y1-Y2)+TINY15)+
     &       X2*(Y-Y0)*(Y-Y1)/((Y2-Y0)*(Y2-Y1)+TINY15)
c*sr 5.4.98: shift B by half the bin width to be in agreement with BPROD
         B = B+0.5D0*BSTEP(NTARG)
         IF (B.LT.ZERO) B = X1
         IF (B.GT.BMAX(NTARG)) B = BMAX(NTARG)
         IF (ICENTR.LT.0) THEN
            IF (LFIRST) THEN
               LFIRST = .FALSE.
               IF (ICENTR.LE.-100) THEN
                  BIMIN  = 0.0D0
               ELSE
                  XSFRAC = 0.0D0
               ENDIF
               CALL DT_GETBXS(XSFRAC,BIMIN,BIMAX,NTARG)
               WRITE(ErrorOut,
     * 1000) RASH(1),RBSH(NTARG),BMAX(NTARG),
     &                          BIMIN,BIMAX,XSFRAC*100.0D0,
     &                          XSFRAC*XSPRO(1,1,NTARG)
 10000         FORMAT(/,1X,'DT_MODB:      BIASING IN IMPACT PARAMETER',
     &                /,15X,'---------------------------'/,/,4X,
     &                'AVERAGE RADII OF PROJ / TARG :',F10.3,' FM /',
     &                F7.3,' FM',/,4X,'CORRESP. B_MAX (4*(R_P+R_T)) :',
     &                F10.3,' FM',/,/,21X,'B_LO / B_HI :',
     &                F10.3,' FM /',F7.3,' FM',/,5X,'PERCENTAGE OF',
     &                ' CROSS SECTION :',F10.3,' %',/,5X,
     &                'CORRESPONDING CROSS SECTION :',F10.3,' MB',/)
            ENDIF
            IF (ABS(BIMAX-BIMIN).LT.1.0D-3) THEN
               B = BIMIN
            ELSE
               IF ((B.LT.BIMIN).OR.(B.GT.BIMAX)) GOTO 9
            ENDIF
         ENDIF
      ENDIF

      RETURN
      END
c
c===shfast=============================================================*
c
CDECK  ID>, DT_SHFAST
      SUBROUTINE DT_SHFAST(MODE,PPN,IBACK)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,TINY1=1.0D-1,
     &           ONE=1.0D0,TWO=2.0D0)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI


      IBACK = 0

      IF (MODE.EQ.2) THEN
         OPEN(47,FILE='OUTDATA0/SHMAKOV.OUT',STATUS='UNKNOWN')
         WRITE(47,1000) IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG,PPN
 1000    FORMAT(1X,8I5,E15.5)
         WRITE(47,1001) RASH(1),RBSH(1),BMAX(1),BSTEP(1)
 1001    FORMAT(1X,4E15.5)
         WRITE(47,1002) SIGSH,ROSH,GSH
 1002    FORMAT(1X,3E15.5)
         DO 10 I=1,100
            WRITE(47,'(1X,E15.5)') BSITE(1,1,1,I)
   10    CONTINUE
         WRITE(47,1003) NSITEB,NSTATB,ECMNN(1),XSPRO(1,1,1),BSLOPE
 1003    FORMAT(1X,2I10,3E15.5)
         CLOSE(47)
      ELSE
         OPEN(47,FILE='OUTDATA0/SHMAKOV.OUT',STATUS='UNKNOWN')
         READ(47,1000) JT,JTZ,JP,JPZ,JJPROJ,JBPROJ,JJTARG,JBTARG,PP
         IF ((JT.EQ.IT).AND.(JTZ.EQ.ITZ).AND.(JP.EQ.IP).AND.
     &       (JPZ.EQ.IPZ).AND.(JJPROJ.EQ.IJPROJ).AND.(JBPROJ.EQ.IBPROJ)
     &       .AND.(JJTARG.EQ.IJTARG).AND.(JBTARG.EQ.IBTARG).AND.
     &       (ABS(PP-PPN).LT.(PPN*0.01D0))) THEN
            READ(47,1001) RASH(1),RBSH(1),BMAX(1),BSTEP(1)
            READ(47,1002) SIGSH,ROSH,GSH
            DO 11 I=1,100
               READ(47,'(1X,E15.5)') BSITE(1,1,1,I)
   11       CONTINUE
            READ(47,1003) NSITEB,NSTATB,ECMNN(1),XSPRO(1,1,1),BSLOPE
         ELSE
            IBACK = 1
         ENDIF
         CLOSE(47)
      ENDIF

      RETURN
      END
c
c===poilik=============================================================*
c
CDECK  ID>, DT_POILIK
      SUBROUTINE DT_POILIK(NB,NTARG,ECM,VIRT,IPNT,RPNT,MODE)

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY14=1.0D0)
      PARAMETER (NE = 8)

c*PHOJET105a
C     CHARACTER*8 MDLNA
C     COMMON /MODELS/ MDLNA(50),ISWMDL(50),PARMDL(200),IPAMDL(100)
C     PARAMETER (IEETAB=10)
C     COMMON /XSETAB/ SIGTAB(4,70,IEETAB),SIGECM(4,IEETAB),ISIMAX
c*PHOJET110
C  model switches and parameters
      CHARACTER*8 MDLNA
      INTEGER ISWMDL,IPAMDL
      DOUBLE PRECISION PARMDL
      COMMON /POMDLS/ MDLNA(50),ISWMDL(50),PARMDL(400),IPAMDL(400)

C  energy-interpolation table
      INTEGER IEETA2
      PARAMETER ( IEETA2 = 20 )
      INTEGER ISIMAX
      DOUBLE PRECISION SIGTAB,SIGECM
      COMMON /POTABL/ SIGTAB(4,80,IEETA2),SIGECM(4,IEETA2),ISIMAX

c*
c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)

c*sr 22.7.97
      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c*

      DATA ECMOLD,Q2OLD /-1.0D0,-1.0D0/

      IF ((ECM.EQ.ECMOLD).AND.(VIRT.EQ.Q2OLD)) GOTO 3

c load cross sections from interpolation table
      IP = 1
      IF(ECM.LE.SIGECM(IP,1)) THEN
        I1 = 1
        I2 = 1
      ELSE IF(ECM.LT.SIGECM(IP,ISIMAX)) THEN
        DO 50 I=2,ISIMAX
          IF(ECM.LE.SIGECM(IP,I)) GOTO 200
  50    CONTINUE
 200    CONTINUE
        I1 = I-1
        I2 = I
      ELSE
        WRITE(ErrorOut,'(/1X,A,2E12.3)')
     &    'POILIK:WARNING:TOO HIGH ENERGY',ECM,SIGECM(IP,ISIMAX)
        I1 = ISIMAX
        I2 = ISIMAX
      ENDIF
      FAC2 = ZERO
      IF(I1.NE.I2) FAC2=LOG(ECM/SIGECM(IP,I1))
     &                     /LOG(SIGECM(IP,I2)/SIGECM(IP,I1))
      FAC1 = ONE-FAC2

      SIGANO = DT_SANO(ECM)

c cross section dependence on photon virtuality
      FSUP1 = ZERO
      DO  150 I=1,3
         FSUP1 = FSUP1+PARMDL(26+I)*(ONE+VIRT/(4.D0*PARMDL(30+I)))
     &                             /(ONE+VIRT/PARMDL(30+I))**2
 150  CONTINUE
      FSUP1 = FSUP1+PARMDL(30)/(ONE+VIRT/PARMDL(34))
      FAC1  = FAC1*FSUP1
      FAC2  = FAC2*FSUP1
      FSUP2 = ONE

      ECMOLD = ECM
      Q2OLD  = VIRT

    3 CONTINUE

C     SIGTOT = FAC2*SIGTAB(IP, 1,I2)+FAC1*SIGTAB(IP, 1,I1)
      CALL DT_SIGGP(ZERO,VIRT,ECM,ZERO,SIGTOT,DUM1,DUM2)
      IF (ISHAD(1).EQ.1) THEN
         SIGDIR = FAC2*SIGTAB(IP,29,I2)+FAC1*SIGTAB(IP,29,I1)
      ELSE
         SIGDIR = ZERO
      ENDIF
      SIGANO = FSUP1*FSUP2*SIGANO
      SIGTOT = SIGTOT-SIGDIR-SIGANO
      SIGDIR = SIGDIR/(FSUP1*FSUP2)
      SIGANO = SIGANO/(FSUP1*FSUP2)
      SIGTOT = SIGTOT+SIGDIR+SIGANO

      RR = DT_RNDM(SIGTOT)
      IF (RR.LT.SIGDIR/SIGTOT) THEN
         IPNT = 1
      ELSEIF ((RR.GE.SIGDIR/SIGTOT).AND.
     &        (RR.LT.(SIGDIR+SIGANO)/SIGTOT)) THEN
         IPNT = 2
      ELSE
         IPNT = 0
      ENDIF
      RPNT = (SIGDIR+SIGANO)/SIGTOT
C     WRITE(LOUT,'(I3,2F15.5)') ISHAD(1),FAC1,FAC2
C     WRITE(LOUT,'(I3,2F15.5)') MODE,SIGDIR,SIGANO
C     WRITE(LOUT,'(I3,4F15.5)') MODE,SIGDIR+SIGANO,SIGTOT,RPNT,ECM
C     WRITE(6,'(1X,6E12.4)') ECM,VIRT,SIGTOT,SIGDIR,SIGANO,RPNT
      IF (MODE.EQ.1) RETURN

c*sr 22.7.97
      K1   = 1
      K2   = 1
      RATE = ZERO
      IF (ECM.GE.ECMNN(NEBINI)) THEN
         K1   = NEBINI
         K2   = NEBINI
         RATE = ONE
      ELSEIF (ECM.GT.ECMNN(1)) THEN
         DO 10 I=2,NEBINI
            IF (ECM.LT.ECMNN(I)) THEN
               K1   = I-1
               K2   = I
               RATE = (ECM-ECMNN(K1))/(ECMNN(K2)-ECMNN(K1))
               GOTO 11
            ENDIF
   10    CONTINUE
   11    CONTINUE
      ENDIF
      J1   = 1
      J2   = 1
      RATQ = ZERO
      IF (NQBINI.GT.1) THEN
         IF (VIRT.GE.Q2G(NQBINI)) THEN
            J1   = NQBINI
            J2   = NQBINI
            RATQ = ONE
         ELSEIF (VIRT.GT.Q2G(1)) THEN
            DO 12 I=2,NQBINI
               IF (VIRT.LT.Q2G(I)) THEN
                  J1   = I-1
                  J2   = I
                  RATQ = LOG10(   VIRT/MAX(Q2G(J1),TINY14))/
     &                   LOG10(Q2G(J2)/MAX(Q2G(J1),TINY14))
                  GOTO 13
               ENDIF
   12       CONTINUE
   13       CONTINUE
         ENDIF
      ENDIF
      SGA = XSPRO(K1,J1,NTARG)+
     &      RATE*(XSPRO(K2,J1,NTARG)-XSPRO(K1,J1,NTARG))+
     &      RATQ*(XSPRO(K1,J2,NTARG)-XSPRO(K1,J1,NTARG))+
     &      RATE*RATQ*(XSPRO(K2,J2,NTARG)-XSPRO(K1,J2,NTARG)+
     &                 XSPRO(K1,J1,NTARG)-XSPRO(K2,J1,NTARG))
      SDI = DBLE(NB)*SIGDIR
      SAN = DBLE(NB)*SIGANO
      SPL = SDI+SAN
      RR = DT_RNDM(SPL)
      IF (RR.LT.SDI/SGA) THEN
         IPNT = 1
      ELSEIF ((RR.GE.SDI/SGA).AND.
     &        (RR.LT.SPL/SGA)) THEN
         IPNT = 2
      ELSE
         IPNT = 0
      ENDIF
      RPNT = SPL/SGA
C     WRITE(LOUT,'(I3,4F15.5)') MODE,SPL,SGA,RPNT,ECM
c*

      RETURN
      END
c
c===glbini=============================================================*
c
CDECK  ID>, DT_GLBINI
      SUBROUTINE DT_GLBINI(WHAT)

c***********************************************************************
c Pre-initialization of profile function                               *
c This version dated 28.11.00 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER (LIN=5,LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY14=1.D-14)

      LOGICAL LCMS

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD

c number of data sets other than protons and nuclei
c at the moment = 2 (pions and kaons)
      PARAMETER (MAXOFF=2)
      DIMENSION IJPINI(5),IOFFST(25)
      DATA IJPINI / 13, 15,  0,  0,  0/
c Glauber data-set to be used for hadron projectiles
c (0=proton, 1=pion, 2=kaon)
      DATA (IOFFST(K),K=1,25) /
     &  0, 0,-1,-1,-1,-1,-1, 0, 0,-1,-1, 2, 1, 1, 2, 2, 0, 0, 2, 0,
     &  0, 0, 1, 2, 2/


      PARAMETER (MAXMSS = 100)
      DIMENSION IASAV(MAXMSS),IBSAV(MAXMSS)
      DIMENSION WHAT(6)

      DATA JPEACH,JPSTEP / 18, 5 /
c
c--------------------------------------------------------------------------
c general initializations
c
c  steps in projectile mass number for initialization
      IF (WHAT(4).GT.ZERO) JPEACH = INT(WHAT(4))
      IF (WHAT(5).GT.ZERO) JPSTEP = INT(WHAT(5))
c
c  energy range and binning
      ELO  = ABS(WHAT(1))
      EHI  = ABS(WHAT(2))
      IF (ELO.GT.EHI) ELO = EHI
      NEBIN = MAX(INT(WHAT(3)),1)
      IF (ELO.EQ.EHI) NEBIN = 0
      LCMS = (WHAT(1).LT.ZERO).OR.(WHAT(2).LT.ZERO)
      IF (LCMS) THEN
         ECMINI = EHI
      ELSE
         ECMINI = SQRT(AAM(IJPROJ)**2+AAM(IJTARG)**2
     &                 +2.0D0*AAM(IJTARG)*EHI)
      ENDIF
c
c  default arguments for Glauber-routine
      XI  = ZERO
      Q2I = ZERO
c
c  initialize nuclear parameters, etc.
      CALL DT_BERTTP
      CALL DT_INCINI
c
c  open Glauber-data output file
      IDX = INDEX(CGLB,' ')
      K   = 12
      IF (IDX.GT.1) K = IDX-1
      OPEN(LLOOK,FILE=CGLB(1:K)//'.GLB',STATUS='UNKNOWN')
c
c--------------------------------------------------------------------------
c Glauber-initialization for proton and nuclei projectiles
c
c  initialize phojet for proton-proton interactions
      ELAB = ZERO
      PLAB = ZERO
      CALL DT_LTINI(IJPROJ,IJTARG,ELAB,PLAB,ECMINI,1)
      CALL DT_PHOINI
c
c  record projectile masses
      NASAV = 0
      NPROJ = MIN(IP,JPEACH)
      DO 10 KPROJ=1,NPROJ
         NASAV = NASAV+1
         IF (NASAV.GT.MAXMSS) STOP ' GLBINI: NASAV > MAXMSS ! '
         IASAV(NASAV) = KPROJ
   10 CONTINUE
      IF (IP.GT.JPEACH) THEN
         NPROJ = DBLE(IP-JPEACH)/DBLE(JPSTEP)
         IF (NPROJ.EQ.0) THEN
            NASAV = NASAV+1
            IF (NASAV.GT.MAXMSS) STOP ' GLBINI: NASAV > MAXMSS ! '
            IASAV(NASAV) = IP
         ELSE
            DO 11 IPROJ=1,NPROJ
               KPROJ = JPEACH+IPROJ*JPSTEP
               NASAV = NASAV+1
               IF (NASAV.GT.MAXMSS) STOP ' GLBINI: NASAV > MAXMSS ! '
               IASAV(NASAV) = KPROJ
   11       CONTINUE
            IF (KPROJ.LT.IP) THEN
               NASAV = NASAV+1
               IF (NASAV.GT.MAXMSS) STOP ' GLBINI: NASAV > MAXMSS ! '
               IASAV(NASAV) = IP
            ENDIF
         ENDIF
      ENDIF
c
c  record target masses
      NBSAV = 0
      NTARG = 1
      IF (NCOMPO.GT.0) NTARG = NCOMPO
      DO 12 ITARG=1,NTARG
         NBSAV = NBSAV+1
         IF (NBSAV.GT.MAXMSS) STOP ' GLBINI: NBSAV > MAXMSS ! '
         IF (NCOMPO.GT.0) THEN
            IBSAV(NBSAV) = IEMUMA(ITARG)
         ELSE
            IBSAV(NBSAV) = IT
         ENDIF
   12 CONTINUE
c
c  print masses
      WRITE(LLOOK,1000) NEBIN,': ',SIGN(ELO,WHAT(1)),SIGN(EHI,WHAT(2))
 1000 FORMAT(I4,A,1P,2E13.5)
      NLINES = DBLE(NASAV)/18.0D0
      IF (NLINES.GT.0) THEN
         DO 13 I=1,NLINES
            IF (I.EQ.1) THEN
               WRITE(LLOOK,'(I4,A,18I4)')NASAV,': ',(IASAV(J),J=1,18)
            ELSE
               WRITE(LLOOK,'(6X,18I4)') (IASAV(J),J=18*I-17,18*I)
            ENDIF
   13    CONTINUE
      ENDIF
      I0 = 18*NLINES+1
      IF (I0.LE.NASAV) THEN
         IF (I0.EQ.1) THEN
            WRITE(LLOOK,'(I4,A,18I4)')NASAV,': ',(IASAV(J),J=I0,NASAV)
         ELSE
            WRITE(LLOOK,'(6X,18I4)') (IASAV(J),J=I0,NASAV)
         ENDIF
      ENDIF
      NLINES = DBLE(NBSAV)/18.0D0
      IF (NLINES.GT.0) THEN
         DO 14 I=1,NLINES
            IF (I.EQ.1) THEN
               WRITE(LLOOK,'(I4,A,18I4)')NBSAV,': ',(IBSAV(J),J=1,18)
            ELSE
               WRITE(LLOOK,'(6X,18I4)') (IBSAV(J),J=18*I-17,18*I)
            ENDIF
   14    CONTINUE
      ENDIF
      I0 = 18*NLINES+1
      IF (I0.LE.NBSAV) THEN
         IF (I0.EQ.1) THEN
            WRITE(LLOOK,'(I4,A,18I4)')NBSAV,': ',(IBSAV(J),J=I0,NBSAV)
         ELSE
            WRITE(LLOOK,'(6X,18I4)') (IBSAV(J),J=I0,NBSAV)
         ENDIF
      ENDIF
c
c  calculate Glauber-data for each energy and mass combination
c
c   loop over energy bins
      ELO = LOG10(ELO)
      EHI = LOG10(EHI)
      DEBIN = (EHI-ELO)/DBLE(NEBIN)
      DO 1 IE=1,NEBIN+1
         E = ELO+DBLE(IE-1)*DEBIN
         E = 10**E
         IF (LCMS) THEN
            E   = MAX(2.0D0*AAM(IJPROJ)+0.1D0,E)
            ECM = E
         ELSE
            PLAB = ZERO
            ECM  = ZERO
            E    = MAX(AAM(IJPROJ)+0.1D0,E)
            CALL DT_LTINI(IJPROJ,IJTARG,E,PLAB,ECM,0)
         ENDIF
c
c   loop over projectile and target masses
         DO 2 ITARG=1,NBSAV
            DO 3 IPROJ=1,NASAV
               CALL DT_XSGLAU(IASAV(IPROJ),IBSAV(ITARG),IJPROJ,
     &                                       XI,Q2I,ECM,1,1,-1)
    3       CONTINUE
    2    CONTINUE
c
    1 CONTINUE
c
c--------------------------------------------------------------------------
c Glauber-initialization for pion, kaon, ... projectiles
c
      DO 6 IJ=1,MAXOFF
c
c  initialize phojet for this interaction
         ELAB = ZERO
         PLAB = ZERO
         IJPROJ = IJPINI(IJ)
         IP     = 1
         IPZ    = 1
         CALL DT_LTINI(IJPROJ,IJTARG,ELAB,PLAB,ECMINI,1)
         CALL DT_PHOINI
c
c  calculate Glauber-data for each energy and mass combination
c
c   loop over energy bins
         DO 4 IE=1,NEBIN+1
            E = ELO+DBLE(IE-1)*DEBIN
            E = 10**E
            IF (LCMS) THEN
               E   = MAX(2.0D0*AAM(IJPROJ)+TINY14,E)
               ECM = E
            ELSE
               PLAB = ZERO
               ECM  = ZERO
               E    = MAX(AAM(IJPROJ)+TINY14,E)
               CALL DT_LTINI(IJPROJ,IJTARG,E,PLAB,ECM,0)
            ENDIF
c
c   loop over projectile and target masses
            DO 5 ITARG=1,NBSAV
               CALL DT_XSGLAU(1,IBSAV(ITARG),IJPROJ,XI,Q2I,ECM,1,1,-1)
    5       CONTINUE
c
    4    CONTINUE
c
    6 CONTINUE

c--------------------------------------------------------------------------
c close output unit(s), etc.
c
      CLOSE(LLOOK)

      RETURN
      END
c
c===glbset=============================================================*
c
CDECK  ID>, DT_GLBSET
      SUBROUTINE DT_GLBSET(IDPROJ,NA,NB,ELAB,MODE)
c***********************************************************************
c Interpolation of pre-initialized profile functions                   *
c This version dated 28.11.00 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

      PARAMETER (LIN=5,LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0)

      LOGICAL LCMS,LREAD

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: parameters
      COMMON /DTGLAM/ RASH(NCOMPX),RBSH(NCOMPX),
     &                BMAX(NCOMPX),BSTEP(NCOMPX),
     &                SIGSH,ROSH,GSH,BSITE(0:NEB,NQB,NCOMPX,KSITEB),
     &                NSITEB,NSTATB

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c number of data sets other than protons and nuclei
c at the moment = 2 (pions and kaons)
      PARAMETER (MAXOFF=2)
      DIMENSION IJPINI(5),IOFFST(25)
      DATA IJPINI / 13, 15,  0,  0,  0/
c Glauber data-set to be used for hadron projectiles
c (0=proton, 1=pion, 2=kaon)
      DATA (IOFFST(K),K=1,25) /
     &  0, 0,-1,-1,-1,-1,-1, 0, 0,-1,-1, 2, 1, 1, 2, 2, 0, 0, 2, 0,
     &  0, 0, 1, 2, 2/

c
c        &&&&& expasion  by KK
c                      10       22+2=24       20    = 4800
c           NSET0 = (NEBIN+1)*(NABIN+MAXOFF)*NBBIN <= MAXSET
!c          
cc      for air  NEBIN =4800/(24*3)-1 = 65  : enough large
cc      proj: A=1,2,3...14,15, 21,27,33,39,45,51,56  --> 22 A's
cc    ==> extend to  35A's
cc                               22 23 24 25 26 27 28  29  30  31  32  33  34  35 
cc A=1,2,...15,21,27,33,39,45,51,56,62,68,74,85,95,105,120,135,150,170,190,210,240
cc    NBBIN=30
cc     11* 37* 30=12210 => MAXSET
cc      PARAMETER (MAXSET=1000,   ! original
!!      PARAMETER (MAXSET=4800,   ! <= 7.622
       PARAMETER (MAXSET=12210,
     &           MAXBIN=50)
      DIMENSION XSIG(MAXSET,6),XERR(MAXSET,6),BPROFL(MAXSET,KSITEB)
      DIMENSION IABIN(MAXBIN),IBBIN(MAXBIN),XS(6),XE(6),
     &          BPRO0(KSITEB),BPRO1(KSITEB),BPRO(KSITEB),
     &          IAIDX(10)

      DATA LREAD /.FALSE./

      character*12 tempstr
c
c read data from file
c////////////////////////
c      write(0,*) ' DT_GLBSET(IDPROJ,NA,NB,ELAB,MODE)'
c      write(0,*) IDPROJ,NA,NB,ELAB,MODE
c      write(0,*) ' LREAD=', LREAD
c////////////////
      IF (MODE.EQ.0) THEN

         IF (LREAD) RETURN

         DO 1 I=1,MAXSET
            DO 2 J=1,6
               XSIG(I,J) = ZERO
               XERR(I,J) = ZERO
    2       CONTINUE
            DO 3 J=1,KSITEB
               BPROFL(I,J) = ZERO
    3       CONTINUE
    1    CONTINUE
         DO 4 I=1,MAXBIN
            IABIN(I) = 0
            IBBIN(I) = 0
    4    CONTINUE
         DO 5 I=1,KSITEB
            BPRO0(I) = ZERO
            BPRO1(I) = ZERO
            BPRO(I)  = ZERO
    5    CONTINUE

         IDX = INDEX(CGLB,' ')
         K   = 12
         IF (IDX.GT.1) K = IDX-1
ccc         &&&&&&&&&&&& kk
         tempstr = ' '
         tempstr =CGLB(1:K)//'.GLB'
c         OPEN(LLOOK,FILE=CGLB(1:K)//'.GLB',STATUS='UNKNOWN')
         call cdpmOpen(LLOOK, tempstr)
         WRITE(ErrorOut,1000) tempstr
ccc    &&&&&&&
 1000    FORMAT(/,' GLBSET: IMPACT PARAMETER DISTRIBUTIONS READ FROM ',
     &          'FILE ',A12,/)
c
c  read binning information
         READ(LLOOK,'(I4,2X,2E13.5)') NEBIN,ELO,EHI
         LCMS = ELO.LT.ZERO
         WRITE(ErrorOut,
     * '(1X,A)') ' equidistant logarithmic energy binning:'
         IF (LCMS) THEN
            WRITE(ErrorOut,1001) '(cms)',ABS(ELO),ABS(EHI),NEBIN
         ELSE
            WRITE(ErrorOut,1001) '(lab)',ABS(ELO),ABS(EHI),NEBIN
         ENDIF
 1001    FORMAT(2X,A5,'  E_LO = ',1P,E9.3,'  E_HI = ',1P,E9.3,4X,
     &          'NO. OF BINS:',I5,/)
         ELO  = LOG10(ABS(ELO))
         EHI  = LOG10(ABS(EHI))
         DEBIN = (EHI-ELO)/ABS(DBLE(NEBIN))
         WRITE(ErrorOut,
     * '(/,1X,A)') ' projectiles: (mass number)'
         READ(LLOOK,'(I4,2X,18I4)') NABIN,(IABIN(J),J=1,18)
         IF (NABIN.LT.18) THEN
            WRITE(ErrorOut,'(6X,18I4)') (IABIN(J),J=1,NABIN)
         ELSE
            WRITE(ErrorOut,'(6X,18I4)') (IABIN(J),J=1,18)
         ENDIF
         IF (NABIN.GT.MAXBIN) STOP ' GLBSET: NABIN > MAXBIN !'
         IF (NABIN.GT.18) THEN
            NLINES = DBLE(NABIN-18)/18.0D0
            IF (NLINES.GT.0) THEN
               DO 7 I=1,NLINES
                  I0 = 18*(I+1)-17
                  READ(LLOOK,'(6X,18I4)') (IABIN(J),J=I0,I0+17)
                  WRITE(ErrorOut,
     * '(6X,18I4)') (IABIN(J),J=I0,I0+17)
    7          CONTINUE
            ENDIF
            I0 = 18*(NLINES+1)+1
            IF (I0.LE.NABIN) THEN
               READ(LLOOK,'(6X,18I4)') (IABIN(J),J=I0,NABIN)
               WRITE(ErrorOut,'(6X,18I4)') (IABIN(J),J=I0,NABIN)
            ENDIF
         ENDIF
         WRITE(ErrorOut,'(/,1X,A)') ' targets: (mass number)'
         READ(LLOOK,'(I4,2X,18I4)') NBBIN,(IBBIN(J),J=1,18)
         IF (NBBIN.LT.18) THEN
            WRITE(ErrorOut,'(6X,18I4)') (IBBIN(J),J=1,NBBIN)
         ELSE
            WRITE(ErrorOut,'(6X,18I4)') (IBBIN(J),J=1,18)
         ENDIF
         IF (NBBIN.GT.MAXBIN) STOP ' GLBSET: NBBIN > MAXBIN !'
         IF (NBBIN.GT.18) THEN
            NLINES = DBLE(NBBIN-18)/18.0D0
            IF (NLINES.GT.0) THEN
               DO 8 I=1,NLINES
                  I0 = 18*(I+1)-17
                  READ(LLOOK,'(6X,18I4)') (IBBIN(J),J=I0,I0+17)
                  WRITE(ErrorOut,
     * '(6X,18I4)') (IBBIN(J),J=I0,I0+17)
    8          CONTINUE
            ENDIF
            I0 = 18*(NLINES+1)+1
            IF (I0.LE.NBBIN) THEN
               READ(LLOOK,'(6X,18I4)') (IBBIN(J),J=I0,NBBIN)
               WRITE(ErrorOut,'(6X,18I4)') (IBBIN(J),J=I0,NBBIN)
            ENDIF
         ENDIF
c  number of data sets to follow in the Glauber data file
c   this variable is used for checks of consistency of projectile
c   and target mass configurations given in header of Glauber data
c   file and the data-sets which follow in this file
         NSET0 = (NEBIN+1)*(NABIN+MAXOFF)*NBBIN
c
c  read profile function data
         NSET  = 0
         NAIDX = 0
         IPOLD = 0
   10    CONTINUE
         NSET = NSET+1
         IF (NSET.GT.MAXSET) STOP ' GLBSET: NSET > MAXSET ! '
         READ(LLOOK,1002,END=100) IP,IA,IB,ISTATB,ISITEB,ECM
 1002    FORMAT(5I10,E15.5)
         IF ((IP.NE.1).AND.(IP.NE.IPOLD)) THEN
            NAIDX = NAIDX+1
            IF (NAIDX.GT.10) STOP ' GLBSET: NAIDX > 10 !'
            IAIDX(NAIDX) = IP
            IPOLD = IP
         ENDIF
         READ(LLOOK,'(6E12.5)') (XSIG(NSET,I),I=1,6)
         READ(LLOOK,'(6E12.5)') (XERR(NSET,I),I=1,6)
         NLINES = INT(DBLE(ISITEB)/7.0D0)
         IF (NLINES.GT.0) THEN
            DO 11 I=1,NLINES
               READ(LLOOK,'(7E11.4)') (BPROFL(NSET,J),J=7*I-6,7*I)
   11       CONTINUE
         ENDIF
         I0 = 7*NLINES+1
         IF (I0.LE.ISITEB)
     &      READ(LLOOK,'(7E11.4)') (BPROFL(NSET,J),J=I0,ISITEB)
         GOTO 10
  100    CONTINUE
         NSET = NSET-1
         IF (NSET.NE.NSET0) STOP ' GLBSET: NSET.NE.NSET0 !'
         WRITE(ErrorOut,'(/,1X,A)')
     &   ' PROJECTILES OTHER THAN PROTONS AND NUCLEI: (PARTICLE INDEX)'
         IF (NAIDX.GT.0) THEN
            WRITE(ErrorOut,'(6X,18I4)') (IAIDX(J),J=1,NAIDX)
         ELSE
            WRITE(ErrorOut,'(6X,A)') 'none'
         ENDIF
c
         CLOSE(LLOOK)
         WRITE(ErrorOut,*)
         LREAD = .TRUE.
c
c calculate profile function for certain set of parameters
c
      ELSE

c        write(*,*) 'glbset called for ',IDPROJ,NA,NB,ELAB,MODE
c
c check for type of projectile and set index-offset to entry in
c Glauber data array correspondingly
         IF (IDPROJ.GT.25) STOP ' GLBSET: IDPROJ > 25 !'
         IF (IOFFST(IDPROJ).EQ.-1) THEN
            STOP ' GLBSET: NO DATA FOR THIS PROJECTILE !'
         ELSEIF (IOFFST(IDPROJ).GT.0) THEN
            IDXOFF = (NEBIN+1)*(NABIN+IOFFST(IDPROJ)-1)*NBBIN
         ELSE
            IDXOFF = 0
         ENDIF
c
c get energy bin and interpolation factor
         IF (LCMS) THEN
            E = SQRT(AAM(IDPROJ)**2+AAM(1)**2+2.0D0*AAM(1)*ELAB)
         ELSE
            E = ELAB
         ENDIF
         E = LOG10(E)
         IF ((E.LT.ELO).OR.(E.GT.EHI)) THEN
            WRITE(ErrorOut,*) ' GLBSET: inconsistent energy ! '
            WRITE(ErrorOut,
     * *) '         (E,E_lo,E_hi) ',E,ELO,EHI
            STOP
         ENDIF
         IE0  = (E-ELO)/DEBIN+1
         IE1  = IE0+1
         FACE = (E-(ELO+DBLE(IE0-1)*DEBIN))/DEBIN
c
c get target nucleus index
c////////////////////
c         write(0, *) '  NBBIN=', NBBIN
c         write(0, *) ' IBBIN  ', IBBIN(1:NBBIN)
c////////////////
         KB = 0
         DO 20 I=1,NBBIN
            IF (NB.EQ.IBBIN(I)) THEN
               KB = I
               GOTO 21
            ENDIF
   20    CONTINUE
         WRITE(ErrorOut,
     * *) ' GLBSET: data not found for target ',NB
         STOP
   21    CONTINUE
c
c get projectile nucleus bin and interpolation factor
         KA0 = 0
         KA1 = 0
         FACNA = 0
         IF (IDXOFF.GT.0) THEN
            KA0 = 1
            KA1 = 1
            KABIN = 1
         ELSE
            IF (NA.GT.IABIN(NABIN)) STOP ' GLBSET: NA > IABIN(NABIN) !'
            DO 22 I=1,NABIN
               IF (NA.EQ.IABIN(I)) THEN
                  KA0 = I
                  KA1 = I
                  GOTO 23
               ELSEIF (NA.LT.IABIN(I)) THEN
                  KA0 = I-1
                  KA1 = I
                  GOTO 23
               ENDIF
   22       CONTINUE
            WRITE(ErrorOut,
     * *) ' GLBSET: data not found for projectile ',NA
            STOP
   23       CONTINUE
            IF (KA0.NE.KA1)
     &         FACNA = DBLE(NA-IABIN(KA0))/DBLE(IABIN(KA1)-IABIN(KA0))
            KABIN = NABIN
         ENDIF
c
c interpolate profile functions for interactions ka0-kb and ka1-kb
c for energy E separately
         IDX0 = IDXOFF+1+(IE0-1)*KABIN*NBBIN+(KB-1)*KABIN+(KA0-1)
         IDX1 = IDXOFF+1+(IE1-1)*KABIN*NBBIN+(KB-1)*KABIN+(KA0-1)
         IDY0 = IDXOFF+1+(IE0-1)*KABIN*NBBIN+(KB-1)*KABIN+(KA1-1)
         IDY1 = IDXOFF+1+(IE1-1)*KABIN*NBBIN+(KB-1)*KABIN+(KA1-1)
         DO 30 I=1,ISITEB
            BPRO0(I) = BPROFL(IDX0,I)
     &                 +FACE*(BPROFL(IDX1,I)-BPROFL(IDX0,I))
            BPRO1(I) = BPROFL(IDY0,I)
     &                 +FACE*(BPROFL(IDY1,I)-BPROFL(IDY0,I))
   30    CONTINUE
         RADB  = DT_RNCLUS(NB)
         BSTP0 = 2.0D0*(DT_RNCLUS(IABIN(KA0))+RADB)/DBLE(ISITEB-1)
         BSTP1 = 2.0D0*(DT_RNCLUS(IABIN(KA1))+RADB)/DBLE(ISITEB-1)
c
c interpolate cross sections for energy E and projectile mass
         DO 31 I=1,6
            XS0   = XSIG(IDX0,I)+FACE*(XSIG(IDX1,I)-XSIG(IDX0,I))
            XS1   = XSIG(IDY0,I)+FACE*(XSIG(IDY1,I)-XSIG(IDY0,I))
            XS(I) = XS0+FACNA*(XS1-XS0)
            XE0   = XERR(IDX0,I)+FACE*(XERR(IDX1,I)-XERR(IDX0,I))
            XE1   = XERR(IDY0,I)+FACE*(XERR(IDY1,I)-XERR(IDY0,I))
            XE(I) = XE0+FACNA*(XE1-XE0)
   31    CONTINUE
c
c interpolate between ka0 and ka1
         RADA = DT_RNCLUS(NA)
         BMX  = 2.0D0*(RADA+RADB)
         BSTP = BMX/DBLE(ISITEB-1)
         BPRO(1) = ZERO
         DO 32 I=1,ISITEB-1
            B = DBLE(I)*BSTP
c
c   calculate values of profile functions at B
            IDX0 = B/BSTP0+1
            IF (IDX0.GT.ISITEB) IDX0 = ISITEB
            IDX1 = MIN(IDX0+1,ISITEB)
            FACB = (B-DBLE(IDX0-1)*BSTP0)/BSTP0
            BPR0 = BPRO0(IDX0)+FACB*(BPRO0(IDX1)-BPRO0(IDX0))
            IDX0 = B/BSTP1+1
            IF (IDX0.GT.ISITEB) IDX0 = ISITEB
            IDX1 = MIN(IDX0+1,ISITEB)
            FACB = (B-DBLE(IDX0-1)*BSTP1)/BSTP1
            BPR1 = BPRO1(IDX0)+FACB*(BPRO1(IDX1)-BPRO1(IDX0))
c
            BPRO(I+1) = BPR0+FACNA*(BPR1-BPR0)
   32    CONTINUE
c
c fill common dtglam
         NSITEB   = ISITEB
         RASH(1)  = RADA
         RBSH(1)  = RADB
         BMAX(1)  = BMX
         BSTEP(1) = BSTP
         DO 33 I=1,KSITEB
            BSITE(0,1,1,I) = BPRO(I)
   33    CONTINUE
c
c fill common dtglxs
         XSTOT(1,1,1) = XS(1)
         XSELA(1,1,1) = XS(2)
         XSQEP(1,1,1) = XS(3)
         XSQET(1,1,1) = XS(4)
         XSQE2(1,1,1) = XS(5)
         XSPRO(1,1,1) = XS(6)
         XETOT(1,1,1) = XE(1)
         XEELA(1,1,1) = XE(2)
         XEQEP(1,1,1) = XE(3)
         XEQET(1,1,1) = XE(4)
         XEQE2(1,1,1) = XE(5)
         XEPRO(1,1,1) = XE(6)

      ENDIF

      RETURN
      END
c
c===xksamp=============================================================*
c
CDECK  ID>, DT_XKSAMP
      SUBROUTINE DT_XKSAMP(NN,ECM)

c***********************************************************************
c Sampling of parton x-values and chain system for one interaction.    *
c                                   processed by S. Roesler, 9.8.95    *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ZERO=0.0D0,OHALF=0.5D0,ONE=1.0D0)


      PARAMETER (
c lower cuts for (valence-sea/sea-valence) chain masses
c   antiquark-quark (u/d-sea quark)    (s-sea quark)
     &               AMIU = 0.5D0,      AMIS = 0.8D0,
c   quark-diquark   (u/d-sea quark)    (s-sea quark)
     &               AMAU = 2.6D0,      AMAS = 2.6D0,
c maximum lower valence-x threshold
     &           XVMAX  = 0.98D0,
c fraction of sea-diquarks sampled out of sea-partons
c*test
C    &           FRCDIQ = 0.9D0,
c*
c
     &           SQMA   = 0.7D0,
c
c maximum number of trials to generate x's for the required number
c of sea quark pairs for a given hadron
     &           NSEATY = 12
C    &           NSEATY = 3
     &          )

      LOGICAL ZUOVP,ZUOSP,ZUOVT,ZUOST,INTLO


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c interface between Glauber formalism and DPM
      COMMON /DTGLIF/ JSSH(MAXNCL),JTSH(MAXNCL),
     &                INTER1(MAXINT),INTER2(MAXINT)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c threshold values for x-sampling (DTUNUC 1.x)
      COMMON /DTXCUT/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     &                SSMIMQ,VVMTHR

c x-values of partons (DTUNUC 1.x)
      COMMON /DTDPMX/ XPVQ(MAXVQU),XPVD(MAXVQU),
     &                XTVQ(MAXVQU),XTVD(MAXVQU),
     &                XPSQ(MAXSQU),XPSAQ(MAXSQU),
     &                XTSQ(MAXSQU),XTSAQ(MAXSQU)

c flavors of partons (DTUNUC 1.x)
      COMMON /DTDPMF/ IPVQ(MAXVQU),IPPV1(MAXVQU),IPPV2(MAXVQU),
     &                ITVQ(MAXVQU),ITTV1(MAXVQU),ITTV2(MAXVQU),
     &                IPSQ(MAXSQU),IPSQ2(MAXSQU),
     &                IPSAQ(MAXSQU),IPSAQ2(MAXSQU),
     &                ITSQ(MAXSQU),ITSQ2(MAXSQU),
     &                ITSAQ(MAXSQU),ITSAQ2(MAXSQU),
     &                KKPROJ(MAXVQU),KKTARG(MAXVQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPMI/ NVV,NSV,NVS,NSS,NDV,NVD,NDS,NSD,
     &                IXPV,IXPS,IXTV,IXTS,
     &                INTVV1(MAXVQU),INTVV2(MAXVQU),
     &                INTSV1(MAXVQU),INTSV2(MAXVQU),
     &                INTVS1(MAXVQU),INTVS2(MAXVQU),
     &                INTSS1(MAXSQU),INTSS2(MAXSQU),
     &                INTDV1(MAXVQU),INTDV2(MAXVQU),
     &                INTVD1(MAXVQU),INTVD2(MAXVQU),
     &                INTDS1(MAXSQU),INTDS2(MAXSQU),
     &                INTSD1(MAXSQU),INTSD2(MAXSQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPM0/ IFROVP(MAXVQU),ITOVP(MAXVQU),IFROSP(MAXSQU),
     &                IFROVT(MAXVQU),ITOVT(MAXVQU),IFROST(MAXSQU)

c auxiliary common for chain system storage (DTUNUC 1.x)
      COMMON /DTCHSY/ ISKPCH(8,MAXINT),IPOSP(MAXNCL),IPOST(MAXNCL)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT


      DIMENSION ZUOVP(MAXVQU),ZUOSP(MAXSQU),ZUOVT(MAXVQU),ZUOST(MAXSQU),
     &          INTLO(MAXINT)

c (1) initializations
c-----------------------------------------------------------------------

c*test
      IF (ECM.LT.4.5D0) THEN
C        FRCDIQ = 0.6D0
         FRCDIQ = 0.4D0
      ELSEIF ((ECM.GE.4.5D0).AND.(ECM.LT.7.5)) THEN
C        FRCDIQ = 0.6D0+(ECM-4.5D0)/3.0D0*0.3D0
         FRCDIQ = 0.4D0+(ECM-4.5D0)/3.0D0*0.3D0
      ELSE
C        FRCDIQ = 0.9D0
         FRCDIQ = 0.7D0
      ENDIF
c*
      DO 30 I=1,MAXSQU
         ZUOSP(I) = .FALSE.
         ZUOST(I) = .FALSE.
         IF (I.LE.MAXVQU) THEN
            ZUOVP(I) = .FALSE.
            ZUOVT(I) = .FALSE.
         ENDIF
   30 CONTINUE

c lower thresholds for x-selection
c  sea-quarks       (default: CSEA=0.2)
      IF (ECM.LT.10.0D0) THEN
c*!!test
         XSTHR = ((12.0D0-ECM)/5.0D0+1.0D0)*CSEA/ECM
C        XSTHR = ((12.0D0-ECM)/5.0D0+1.0D0)*CSEA/ECM**2.0D0
         NSEA  = NSEATY
C        XSTHR = ONE/ECM**2
      ELSE
c*sr 30.3.98
C        XSTHR = CSEA/ECM
         XSTHR = CSEA/ECM**2
C        XSTHR = ONE/ECM**2
c*
         IF ((IP.GE.150).AND.(IT.GE.150))
     &      XSTHR = 2.5D0/(ECM*SQRT(ECM))
         NSEA  = NSEATY
      ENDIF
c                   (default: SSMIMA=0.14) used for sea-diquarks (?)
      XSSTHR = SSMIMA/ECM
      BSQMA  = SQMA/ECM
c  valence-quarks   (default: CVQ=1.0)
      XVTHR  = CVQ/ECM
c  valence-diquarks (default: CDQ=2.0)
      XDTHR  = CDQ/ECM

c maximum-x for sea-quarks
      XVCUT  = XVTHR+XDTHR
      XXSEAM = ONE-XVCUT
c*sr 18.4. test: DPMJET
C     XXSEAM=1.0 - XVTHR*(1.D0+0.3D0*DT_RNDM(V1))
C    &            - XDTHR*(1.D0+0.3D0*DT_RNDM(V2))
C    &             -0.01*(1.D0+1.5D0*DT_RNDM(V3))
c*
c maximum number of sea-pairs allowed kinematically
C     NSMAX  = INT(OHALF*XXSEAM/XSTHR)
      RNSMAX = OHALF*XXSEAM/XSTHR
      IF (RNSMAX.GT.10000.0D0) THEN
         NSMAX = 10000
      ELSE
         NSMAX = INT(OHALF*XXSEAM/XSTHR)
      ENDIF
c check kinematical limit for valence-x thresholds
      IF (XVCUT.GT.XVMAX) THEN
         WRITE(ErrorOut,1000) XVCUT,ECM
 1000    FORMAT(' XKSAMP:    KIN. LIMIT FOR VALENCE-X',
     &          '  THRESHOLDS NOT ALLOWED (',2E9.3,')')
cc     &&&&&&
         call cpdpmjetinp
c     &&&&&&&&&&&&
C        XVTHR = XVMAX-XDTHR
C        IF (XVTHR.LT.ZERO) STOP
ccc          &&&&&&&&&& KK
cccc         STOP
      ENDIF

c set eta for valence-x sampling (BETREJ)
c   (UNON per default, UNOM used for projectile mesons only)
      IF ((IJPROJ.NE.0).AND.(IBPROJ.EQ.0)) THEN
         UNOPRV = UNOM
      ELSE
         UNOPRV = UNON
      ENDIF

c (2) select parton x-values of interacting projectile nucleons
c-----------------------------------------------------------------------

      IXPV = 0
      IXPS = 0

      DO 100 IPP=1,IP
c   get interacting projectile nucleon as sampled by Glauber
         IF (JSSH(IPP).NE.0) THEN
            IXSTMP = IXPS
	    IXVTMP = IXPV
   99       CONTINUE
	    IXPS   = IXSTMP
	    IXPV   = IXVTMP
c     JIPP is the actual number of sea-pairs sampled for this nucleon
            JIPP   = MIN(JSSH(IPP)-1,NSMAX)
   41       CONTINUE
            XXSEA  = ZERO
            IF (JIPP.GT.0) THEN
               XSMAX = XXSEAM-2.0D0*DBLE(JIPP)*XSTHR
c???
               IF (XSTHR.GE.XSMAX) THEN
                  JIPP = JIPP-1
                  GOTO 41
               ENDIF

c>>>get x-values of sea-quark pairs
               NSCOUN = 0
               PLW = 0.5D0
   40          CONTINUE
c     accumulator for sea x-values
               XXSEA  = ZERO
               NSCOUN = NSCOUN+1
               IF (DBLE(NSCOUN)/DBLE(NSEA).GT.0.5D0) PLW = 1.0D0
               IF (NSCOUN.GT.NSEA) THEN
c     decrease the number of interactions after NSEA trials
                  JIPP   = JIPP-1
                  NSCOUN = 0
               ENDIF
               DO 70 ISQ=1,JIPP
c     sea-quarks
                  IF (IPSQ(IXPS+1).LE.2) THEN
c*sr 8.4.98 (1/sqrt(x))
C                    XPSQI = DT_SAMPEX(XSTHR,XSMAX)
C                    XPSQI = DT_SAMSQX(XSTHR,XSMAX)
                     XPSQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                  ELSE
                     IF (XSMAX.GT.XSTHR+BSQMA) THEN
                        XPSQI = DT_SAMPXB(XSTHR+BSQMA,XSMAX,BSQMA)
                     ELSE
c*sr 8.4.98 (1/sqrt(x))
C                       XPSQI = DT_SAMPEX(XSTHR,XSMAX)
C                       XPSQI = DT_SAMSQX(XSTHR,XSMAX)
                        XPSQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                     ENDIF
                  ENDIF
c     sea-antiquarks
                  IF (IPSAQ(IXPS+1).GE.-2) THEN
c*sr 8.4.98 (1/sqrt(x))
C                    XPSAQI = DT_SAMPEX(XSTHR,XSMAX)
C                    XPSAQI = DT_SAMSQX(XSTHR,XSMAX)
                     XPSAQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                  ELSE
                     IF (XSMAX.GT.XSTHR+BSQMA) THEN
                        XPSAQI = DT_SAMPXB(XSTHR+BSQMA,XSMAX,BSQMA)
                     ELSE
c*sr 8.4.98 (1/sqrt(x))
C                       XPSAQI = DT_SAMPEX(XSTHR,XSMAX)
C                       XPSAQI = DT_SAMSQX(XSTHR,XSMAX)
                        XPSAQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                     ENDIF
                  ENDIF
                  XXSEA = XXSEA+XPSQI+XPSAQI
c     check for maximum allowed sea x-value
                  IF (XXSEA.GE.XXSEAM) THEN
                     IXPS = IXPS-ISQ+1
                     GOTO 40
                  ENDIF
c     accept this sea-quark pair
                  IXPS         = IXPS+1
                  XPSQ(IXPS)   = XPSQI
                  XPSAQ(IXPS)  = XPSAQI
                  IFROSP(IXPS) = IPP
                  ZUOSP(IXPS)  = .TRUE.
   70          CONTINUE
            ENDIF

c>>>get x-values of valence partons
c     valence quark
            IF (XVTHR.GT.0.05D0) THEN
               XVHI  = ONE-XXSEA-XDTHR
               XPVQI = DT_BETREJ(OHALF,UNOPRV,XVTHR,XVHI)
            ELSE
   90          CONTINUE
               XPVQI = DT_DBETAR(OHALF,UNOPRV)
               IF ((XPVQI.LT.XVTHR).OR.(ONE-XPVQI-XXSEA.LT.XDTHR))
     &                                                     GOTO 90
            ENDIF
c     valence diquark
            XPVDI = ONE-XPVQI-XXSEA
c       reject according to x**1.5
            XDTMP = XPVDI**1.5D0
	    IF (DT_RNDM(XPVDI).GT.XDTMP) GOTO 99
c     accept these valence partons
            IXPV         = IXPV+1
            XPVQ(IXPV)   = XPVQI
            XPVD(IXPV)   = XPVDI
            IFROVP(IXPV) = IPP
            ITOVP(IPP)   = IXPV
            ZUOVP(IXPV)  = .TRUE.

         ENDIF
  100 CONTINUE

c (3) select parton x-values of interacting target nucleons
c-----------------------------------------------------------------------

      IXTV = 0
      IXTS = 0

      DO 170 ITT=1,IT
c   get interacting target nucleon as sampled by Glauber
         IF (JTSH(ITT).NE.0) THEN
            IXSTMP = IXTS
	    IXVTMP = IXTV
  169       CONTINUE
	    IXTS   = IXSTMP
	    IXTV   = IXVTMP
c     JITT is the actual number of sea-pairs sampled for this nucleon
            JITT   = MIN(JTSH(ITT)-1,NSMAX)
  111       CONTINUE
            XXSEA  = ZERO
            IF (JITT.GT.0) THEN
               XSMAX = XXSEAM-2.0D0*DBLE(JITT)*XSTHR
c???
               IF (XSTHR.GE.XSMAX) THEN
                  JITT = JITT-1
                  GOTO 111
               ENDIF

c>>>get x-values of sea-quark pairs
               NSCOUN = 0
               PLW = 0.5D0
  110          CONTINUE
c     accumulator for sea x-values
               XXSEA  = ZERO
               NSCOUN = NSCOUN+1
               IF (DBLE(NSCOUN)/DBLE(NSEA).GT.0.5D0) PLW = 1.0D0
               IF (NSCOUN.GT.NSEA)THEN
c     decrease the number of interactions after NSEA trials
                  JITT   = JITT-1
                  NSCOUN = 0
               ENDIF
               DO 140 ISQ=1,JITT
c     sea-quarks
                  IF (ITSQ(IXTS+1).LE.2) THEN
c*sr 8.4.98 (1/sqrt(x))
C                    XTSQI = DT_SAMPEX(XSTHR,XSMAX)
C                    XTSQI = DT_SAMSQX(XSTHR,XSMAX)
                     XTSQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                  ELSE
                     IF (XSMAX.GT.XSTHR+BSQMA) THEN
                        XTSQI = DT_SAMPXB(XSTHR+BSQMA,XSMAX,BSQMA)
                     ELSE
c*sr 8.4.98 (1/sqrt(x))
C                       XTSQI = DT_SAMPEX(XSTHR,XSMAX)
C                       XTSQI = DT_SAMSQX(XSTHR,XSMAX)
                        XTSQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                     ENDIF
                  ENDIF
c     sea-antiquarks
                  IF (ITSAQ(IXTS+1).GE.-2) THEN
c*sr 8.4.98 (1/sqrt(x))
C                    XTSAQI = DT_SAMPEX(XSTHR,XSMAX)
C                    XTSAQI = DT_SAMSQX(XSTHR,XSMAX)
                     XTSAQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                  ELSE
                     IF (XSMAX.GT.XSTHR+BSQMA) THEN
                        XTSAQI = DT_SAMPXB(XSTHR+BSQMA,XSMAX,BSQMA)
                     ELSE
c*sr 8.4.98 (1/sqrt(x))
C                       XTSAQI = DT_SAMPEX(XSTHR,XSMAX)
C                       XTSAQI = DT_SAMSQX(XSTHR,XSMAX)
                        XTSAQI = DT_SAMPLW(XSTHR,XSMAX,PLW)
c*
                     ENDIF
                  ENDIF
                  XXSEA = XXSEA+XTSQI+XTSAQI
c     check for maximum allowed sea x-value
                  IF (XXSEA.GE.XXSEAM) THEN
                     IXTS = IXTS-ISQ+1
                     GOTO 110
                  ENDIF
c     accept this sea-quark pair
                  IXTS         = IXTS+1
                  XTSQ(IXTS)   = XTSQI
                  XTSAQ(IXTS)  = XTSAQI
                  IFROST(IXTS) = ITT
                  ZUOST(IXTS)  = .TRUE.
  140          CONTINUE
            ENDIF

c>>>get x-values of valence partons
c     valence quark
            IF (XVTHR.GT.0.05D0) THEN
               XVHI  = ONE-XXSEA-XDTHR
               XTVQI = DT_BETREJ(OHALF,UNON,XVTHR,XVHI)
            ELSE
  160          CONTINUE
               XTVQI = DT_DBETAR(OHALF,UNON)
               IF ((XTVQI.LT.XVTHR).OR.(ONE-XTVQI-XXSEA.LT.XDTHR))
     &                                                    GOTO 160
            ENDIF
c     valence diquark
            XTVDI = ONE-XTVQI-XXSEA
c       reject according to x**1.5
            XDTMP = XTVDI**1.5D0
	    IF (DT_RNDM(XPVDI).GT.XDTMP) GOTO 169
c     accept these valence partons
            IXTV         = IXTV+1
            XTVQ(IXTV)   = XTVQI
            XTVD(IXTV)   = XTVDI
            IFROVT(IXTV) = ITT
            ITOVT(ITT)   = IXTV
            ZUOVT(IXTV)  = .TRUE.

         ENDIF
  170 CONTINUE

c (4) get valence-valence chains
c-----------------------------------------------------------------------

      NVV = 0
      DO 240 I=1,NN
         INTLO(I) = .TRUE.
         IPVAL    = ITOVP(INTER1(I))
         ITVAL    = ITOVT(INTER2(I))
         IF (ZUOVP(IPVAL).AND.ZUOVT(ITVAL)) THEN
            INTLO(I)      = .FALSE.
            ZUOVP(IPVAL)  = .FALSE.
            ZUOVT(ITVAL)  = .FALSE.
            NVV           = NVV+1
            ISKPCH(8,NVV) = 0
            INTVV1(NVV)   = IPVAL
            INTVV2(NVV)   = ITVAL
         ENDIF
  240 CONTINUE

c (5) get sea-valence chains
c-----------------------------------------------------------------------

      NSV = 0
      NDV = 0
      PLW = 0.5D0
      DO 270 I=1,NN
         IF (INTLO(I)) THEN
            IPVAL = ITOVP(INTER1(I))
            ITVAL = ITOVT(INTER2(I))
            DO 250 J=1,IXPS
               IF (ZUOSP(J).AND.(IFROSP(J).EQ.INTER1(I)).AND.
     &                                ZUOVT(ITVAL)) THEN
                  ZUOSP(J)     = .FALSE.
                  ZUOVT(ITVAL) = .FALSE.
                  INTLO(I)     = .FALSE.
                  IF (LSEADI.AND.(DT_RNDM(PLW).GT.FRCDIQ)) THEN
c   sample sea-diquark pair
                     CALL DT_SAMSDQ(ECM,ITVAL,J,2,IREJ1)
                     IF (IREJ1.EQ.0) GOTO 260
                  ENDIF
                  NSV           = NSV+1
                  ISKPCH(4,NSV) = 0
                  INTSV1(NSV)   = J
                  INTSV2(NSV)   = ITVAL

c>>>correct chain kinematics according to minimum chain masses
c     the actual chain masses
                  AMSVQ1 = XPSQ(J) *XTVD(ITVAL)*ECM**2
                  AMSVQ2 = XPSAQ(J)*XTVQ(ITVAL)*ECM**2
c     get lower mass cuts
                  IF (IPSQ(J).EQ.3) THEN
c       q being s-quark
                     AMCHK1 = AMAS
                     AMCHK2 = AMIS
                  ELSE
c       q being u/d-quark
                     AMCHK1 = AMAU
                     AMCHK2 = AMIU
                  ENDIF
c       q-qq chain
c         chain mass above minimum - resampling of sea-q x-value
                  IF (AMSVQ1.GT.AMCHK1) THEN
                     XPSQTH      = AMCHK1/(XTVD(ITVAL)*ECM**2)
c*sr 8.4.98 (1/sqrt(x))
C                    XPSQXX      = DT_SAMPEX(XPSQTH,XPSQ(J))
C                    XPSQXX      = DT_SAMSQX(XPSQTH,XPSQ(J))
                     XPSQXX      = DT_SAMPLW(XPSQTH,XPSQ(J),PLW)
c*
                     XPVD(IPVAL) = XPVD(IPVAL)+XPSQ(J)-XPSQXX
                     XPSQ(J)     = XPSQXX
c         chain mass below minimum - reset sea-q x-value and correct
c                                    diquark-x of the same nucleon
                  ELSEIF (AMSVQ1.LT.AMCHK1) THEN
                     XPSQW       = AMCHK1/(XTVD(ITVAL)*ECM**2)
                     DXPSQ       = XPSQW-XPSQ(J)
                     IF (XPVD(IPVAL).GE.XDTHR+DXPSQ) THEN
                        XPVD(IPVAL) = XPVD(IPVAL)-DXPSQ
                        XPSQ(J)     = XPSQW
                     ENDIF
                  ENDIF
c       aq-q chain
c         chain mass below minimum - reset sea-aq x-value and correct
c                                    diquark-x of the same nucleon
                  IF (AMSVQ2.LT.AMCHK2) THEN
                     XPSQW = AMCHK2/(XTVQ(ITVAL)*ECM**2)
                     DXPSQ = XPSQW-XPSAQ(J)
                     IF (XPVD(IPVAL).GE.XDTHR+DXPSQ) THEN
                        XPVD(IPVAL) = XPVD(IPVAL)-DXPSQ
                        XPSAQ(J)    = XPSQW
                     ENDIF
                  ENDIF
c>>>end of chain mass correction

                  GOTO 260
               ENDIF
  250       CONTINUE
         ENDIF
  260    CONTINUE
  270 CONTINUE

c (6) get valence-sea chains
c-----------------------------------------------------------------------

      NVS = 0
      NVD = 0
      DO 300 I=1,NN
         IF (INTLO(I)) THEN
            IPVAL = ITOVP(INTER1(I))
            ITVAL = ITOVT(INTER2(I))
            DO 280 J=1,IXTS
               IF (ZUOVP(IPVAL).AND.ZUOST(J).AND.
     &                  (IFROST(J).EQ.INTER2(I))) THEN
                  ZUOST(J)     = .FALSE.
                  ZUOVP(IPVAL) = .FALSE.
                  INTLO(I)     = .FALSE.
                  IF (LSEADI.AND.(DT_RNDM(ECM).GT.FRCDIQ)) THEN
c   sample sea-diquark pair
                     CALL DT_SAMSDQ(ECM,IPVAL,J,1,IREJ1)
                     IF (IREJ1.EQ.0) GOTO 290
                  ENDIF
                  NVS           = NVS + 1
                  ISKPCH(6,NVS) = 0
                  INTVS1(NVS)   = IPVAL
                  INTVS2(NVS)   = J

c>>>correct chain kinematics according to minimum chain masses
c     the actual chain masses
                  AMVSQ1 = XPVQ(IPVAL)*XTSAQ(J)*ECM**2
                  AMVSQ2 = XPVD(IPVAL)*XTSQ(J) *ECM**2
c     get lower mass cuts
                  IF (ITSQ(J).EQ.3) THEN
c       q being s-quark
                     AMCHK1 = AMIS
                     AMCHK2 = AMAS
                  ELSE
c       q being u/d-quark
                     AMCHK1 = AMIU
                     AMCHK2 = AMAU
                  ENDIF
c       q-aq chain
c         chain mass below minimum - reset sea-aq x-value and correct
c                                    diquark-x of the same nucleon
                  IF (AMVSQ1.LT.AMCHK1) THEN
                     XTSQW = AMCHK1/(XPVQ(IPVAL)*ECM**2)
                     DXTSQ = XTSQW-XTSAQ(J)
                     IF (XTVD(ITVAL).GE.XDTHR+DXTSQ) THEN
                        XTVD(ITVAL) = XTVD(ITVAL)-DXTSQ
                        XTSAQ(J)    = XTSQW
                     ENDIF
                  ENDIF
c       qq-q chain
c         chain mass above minimum - resampling of sea-q x-value
                  IF (AMVSQ2.GT.AMCHK2) THEN
                     XTSQTH      = AMCHK2/(XPVD(IPVAL)*ECM**2)
c*sr 8.4.98 (1/sqrt(x))
C                    XTSQXX      = DT_SAMPEX(XTSQTH,XTSQ(J))
C                    XTSQXX      = DT_SAMSQX(XTSQTH,XTSQ(J))
                     XTSQXX      = DT_SAMPLW(XTSQTH,XTSQ(J),PLW)
c*
                     XTVD(ITVAL) = XTVD(ITVAL)+XTSQ(J)-XTSQXX
                     XTSQ(J)     = XTSQXX
c         chain mass below minimum - reset sea-q x-value and correct
c                                    diquark-x of the same nucleon
                  ELSEIF (AMVSQ2.LT.AMCHK2) THEN
                     XTSQW       = AMCHK2/(XPVD(IPVAL)*ECM**2)
                     DXTSQ       = XTSQW-XTSQ(J)
                     IF (XTVD(ITVAL).GE.XDTHR+DXTSQ) THEN
                        XTVD(ITVAL) = XTVD(ITVAL)-DXTSQ
                        XTSQ(J)     = XTSQW
                     ENDIF
                  ENDIF
c>>>end of chain mass correction

                  GOTO 290
               ENDIF
  280       CONTINUE
         ENDIF
  290    CONTINUE
  300 CONTINUE

c (7) get sea-sea chains
c-----------------------------------------------------------------------

      NSS = 0
      NDS = 0
      NSD = 0
      DO 420 I=1,NN
         IF (INTLO(I)) THEN
            IPVAL = ITOVP(INTER1(I))
            ITVAL = ITOVT(INTER2(I))
c   loop over target partons not yet matched
            DO 400 J=1,IXTS
               IF (ZUOST(J).AND.(IFROST(J).EQ.INTER2(I))) THEN
c   loop over projectile partons not yet matched
                  DO 390 JJ=1,IXPS
                     IF (ZUOSP(JJ).AND.(IFROSP(JJ).EQ.INTER1(I))) THEN
                        ZUOSP(JJ)     = .FALSE.
                        ZUOST(J)      = .FALSE.
                        INTLO(I)      = .FALSE.
                        NSS           = NSS+1
                        ISKPCH(1,NSS) = 0
                        INTSS1(NSS)   = JJ
                        INTSS2(NSS)   = J

c---->chain recombination option
                        VALFRA        = DBLE(NVV/(NVV+IXPS+IXTS))
                        IF (IRECOM.EQ.1.AND.(DT_RNDM(BSQMA).GT.VALFRA))
     &                                                             THEN
c       sea-sea chains may recombine with valence-valence chains
c       only if they have the same projectile or target nucleon
                           DO 4201 IVV=1,NVV
                              IF (ISKPCH(8,IVV).NE.99) THEN
                                 IXVPR = INTVV1(IVV)
                                 IXVTA = INTVV2(IVV)
                                 IF ((INTER1(I).EQ.IFROVP(IXVPR)).OR.
     &                               (INTER2(I).EQ.IFROVT(IXVTA))) THEN
c         recombination possible, drop old v-v and s-s chains
                                    ISKPCH(1,NSS) = 99
                                    ISKPCH(8,IVV) = 99

c         (a) assign new s-v chains
c         ~~~~~~~~~~~~~~~~~~~~~~~~~
                                    IF (LSEADI.AND.
     &                                  (DT_RNDM(VALFRA).GT.FRCDIQ))
     &                                                             THEN
c           sample sea-diquark pair
                                       CALL DT_SAMSDQ(ECM,IXVTA,JJ,2,
     &                                                      IREJ1)
                                       IF (IREJ1.EQ.0) GOTO 4202
                                    ENDIF
                                    NSV           = NSV+1
                                    ISKPCH(4,NSV) = 0
                                    INTSV1(NSV)   = JJ
                                    INTSV2(NSV)   = IXVTA
c>>>>>>>>>>>correct chain kinematics according to minimum chain masses
c           the actual chain masses
                                    AMSVQ1 = XPSQ(JJ) *XTVD(IXVTA)
     &                                                     *ECM**2
                                    AMSVQ2 = XPSAQ(JJ)*XTVQ(IXVTA)
     &                                                     *ECM**2
c           get lower mass cuts
                                    IF (IPSQ(JJ).EQ.3) THEN
c             q being s-quark
                                       AMCHK1 = AMAS
                                       AMCHK2 = AMIS
                                    ELSE
c             q being u/d-quark
                                       AMCHK1 = AMAU
                                       AMCHK2 = AMIU
                                    ENDIF
c           q-qq chain
c             chain mass above minimum - resampling of sea-q x-value
                                    IF (AMSVQ1.GT.AMCHK1) THEN
                                       XPSQTH      =
     &                                    AMCHK1/(XTVD(IXVTA)*ECM**2)
c*sr 8.4.98 (1/sqrt(x))
                                       XPSQXX      =
     &                                    DT_SAMPLW(XPSQTH,XPSQ(JJ),PLW)
C    &                                    DT_SAMSQX(XPSQTH,XPSQ(JJ))
C    &                                    DT_SAMPEX(XPSQTH,XPSQ(JJ))
c*
                                       XPVD(IPVAL) =
     &                                    XPVD(IPVAL)+XPSQ(JJ)-XPSQXX
                                       XPSQ(JJ)    = XPSQXX
c             chain mass below minimum - reset sea-q x-value and correct
c                                        diquark-x of the same nucleon
                                    ELSEIF (AMSVQ1.LT.AMCHK1) THEN
                                       XPSQW =
     &                                    AMCHK1/(XTVD(IXVTA)*ECM**2)
                                       DXPSQ = XPSQW-XPSQ(JJ)
                                       IF (XPVD(IPVAL).GE.XDTHR+DXPSQ)
     &                                                            THEN
                                          XPVD(IPVAL) =
     &                                       XPVD(IPVAL)-DXPSQ
                                          XPSQ(JJ)    = XPSQW
                                       ENDIF
                                    ENDIF
c           aq-q chain
c             chain mass below minimum - reset sea-aq x-value and correct
c                                        diquark-x of the same nucleon
                                    IF (AMSVQ2.LT.AMCHK2) THEN
                                       XPSQW =
     &                                    AMCHK2/(XTVQ(IXVTA)*ECM**2)
                                       DXPSQ = XPSQW-XPSAQ(JJ)
                                       IF (XPVD(IPVAL).GE.XDTHR+DXPSQ)
     &                                                            THEN
                                          XPVD(IPVAL) =
     &                                       XPVD(IPVAL)-DXPSQ
                                          XPSAQ(JJ)   = XPSQW
                                       ENDIF
                                    ENDIF
c>>>>>>>>>>>end of chain mass correction
 4202                               CONTINUE

c         (b) assign new v-s chains
c         ~~~~~~~~~~~~~~~~~~~~~~~~~
                                    IF (LSEADI.AND.(
     &                                  DT_RNDM(AMSVQ2).GT.FRCDIQ))
     &                                                             THEN
c           sample sea-diquark pair
                                       CALL DT_SAMSDQ(ECM,IXVPR,J,1,
     &                                                      IREJ1)
                                       IF (IREJ1.EQ.0) GOTO 4203
                                    ENDIF
                                    NVS           = NVS+1
                                    ISKPCH(6,NVS) = 0
                                    INTVS1(NVS)   = IXVPR
                                    INTVS2(NVS)   = J
c>>>>>>>>>>>correct chain kinematics according to minimum chain masses
c           the actual chain masses
                                    AMVSQ1 = XPVQ(IXVPR)*XTSAQ(J)*ECM**2
                                    AMVSQ2 = XPVD(IXVPR)*XTSQ(J) *ECM**2
c           get lower mass cuts
                                    IF (ITSQ(J).EQ.3) THEN
c             q being s-quark
                                       AMCHK1 = AMIS
                                       AMCHK2 = AMAS
                                    ELSE
c             q being u/d-quark
                                       AMCHK1 = AMIU
                                       AMCHK2 = AMAU
                                    ENDIF
c           q-aq chain
c             chain mass below minimum - reset sea-aq x-value and correct
c                                        diquark-x of the same nucleon
                                    IF (AMVSQ1.LT.AMCHK1) THEN
                                       XTSQW =
     &                                    AMCHK1/(XPVQ(IXVPR)*ECM**2)
                                       DXTSQ = XTSQW-XTSAQ(J)
                                       IF (XTVD(ITVAL).GE.XDTHR+DXTSQ)
     &                                                            THEN
                                          XTVD(ITVAL) =
     &                                       XTVD(ITVAL)-DXTSQ
                                          XTSAQ(J)    = XTSQW
                                       ENDIF
                                    ENDIF
                                    IF (AMVSQ2.GT.AMCHK2) THEN
                                       XTSQTH      =
     &                                    AMCHK2/(XPVD(IXVPR)*ECM**2)
c*sr 8.4.98 (1/sqrt(x))
                                       XTSQXX      =
     &                                    DT_SAMPLW(XTSQTH,XTSQ(J),PLW)
C    &                                    DT_SAMSQX(XTSQTH,XTSQ(J))
C    &                                    DT_SAMPEX(XTSQTH,XTSQ(J))
c*
                                       XTVD(ITVAL) =
     &                                    XTVD(ITVAL)+XTSQ(J)-XTSQXX
                                       XTSQ(J)     = XTSQXX
                                    ELSEIF (AMVSQ2.LT.AMCHK2) THEN
                                       XTSQW =
     &                                    AMCHK2/(XPVD(IXVPR)*ECM**2)
                                       DXTSQ = XTSQW-XTSQ(J)
                                       IF (XTVD(ITVAL).GE.XDTHR+DXTSQ)
     &                                                            THEN
                                          XTVD(ITVAL) =
     &                                       XTVD(ITVAL)-DXTSQ
                                          XTSQ(J)     = XTSQW
                                       ENDIF
                                    ENDIF
c>>>>>>>>>end of chain mass correction
 4203                               CONTINUE
c       jump out of s-s chain loop
                                    GOTO 420
                                 ENDIF
                              ENDIF
 4201                      CONTINUE
                        ENDIF
c---->end of chain recombination option

c     sample sea-diquark pair (projectile)
                        IF (LSEADI.AND.(DT_RNDM(BSQMA).GT.FRCDIQ)) THEN
                           CALL DT_SAMSDQ(ECM,J,JJ,4,IREJ1)
                           IF (IREJ1.EQ.0) THEN
                              ISKPCH(1,NSS) = 99
                              GOTO 410
                           ENDIF
                        ENDIF
c     sample sea-diquark pair (target)
                        IF (LSEADI.AND.(DT_RNDM(ECM).GT.FRCDIQ)) THEN
                           CALL DT_SAMSDQ(ECM,JJ,J,3,IREJ1)
                           IF (IREJ1.EQ.0) THEN
                              ISKPCH(1,NSS) = 99
                              GOTO 410
                           ENDIF
                        ENDIF
c>>>>>correct chain kinematics according to minimum chain masses
c     the actual chain masses
                        SSMA1Q = XPSQ(JJ) *XTSAQ(J)*ECM**2
                        SSMA2Q = XPSAQ(JJ)*XTSQ(J) *ECM**2
c     check for lower mass cuts
                        IF ((SSMA1Q.LT.SSMIMQ).OR.
     &                      (SSMA2Q.LT.SSMIMQ)) THEN
                           IPVAL = ITOVP(INTER1(I))
                           ITVAL = ITOVT(INTER2(I))
                           IF ((XPVD(IPVAL).GT.XDTHR+3.5D0*XSSTHR).AND.
     &                         (XTVD(ITVAL).GT.XDTHR+3.5D0*XSSTHR))THEN
c       maximum allowed x values for sea quarks
                              XSPMAX = ONE-XPVQ(IPVAL)-XDTHR-
     &                                           1.2D0*XSSTHR
                              XSTMAX = ONE-XTVQ(ITVAL)-XDTHR-
     &                                           1.2D0*XSSTHR
c       resampling of x values not possible - skip sea-sea chains
                              IF ((XSPMAX.LE.XSSTHR+0.05D0).OR.
     &                            (XSTMAX.LE.XSSTHR+0.05D0)) GOTO 380
c       resampling of x for projectile sea quark pair
                              ICOUS = 0
  310                         CONTINUE
                              ICOUS = ICOUS+1
                              IF (XSSTHR.GT.0.05D0) THEN
                                 XPSQI =DT_BETREJ(XSEACU,UNOSEA,XSSTHR,
     &                                                         XSPMAX)
                                 XPSAQI=DT_BETREJ(XSEACU,UNOSEA,XSSTHR,
     &                                                         XSPMAX)
                              ELSE
  320                            CONTINUE
                                 XPSQI = DT_DBETAR(XSEACU,UNOSEA)
                                 IF ((XPSQI.LT.XSSTHR).OR.
     &                               (XPSQI.GT.XSPMAX))  GOTO 320
  330                            CONTINUE
                                 XPSAQI = DT_DBETAR(XSEACU,UNOSEA)
                                 IF ((XPSAQI.LT.XSSTHR).OR.
     &                               (XPSAQI.GT.XSPMAX)) GOTO 330
                              ENDIF
c       final test of remaining x for projectile diquark
                              XPVDCO = XPVD(IPVAL)-XPSQI-XPSAQI
     &                                            +XPSQ(JJ)+XPSAQ(JJ)
                              IF (XPVDCO.LE.XDTHR) THEN
c!!!
C                                IF (ICOUS.LT.5) GOTO 310
                                 IF (ICOUS.LT.0.5D0) GOTO 310
                                 GOTO 380
                              ENDIF
c       resampling of x for target sea quark pair
                              ICOUS = 0
  350                         CONTINUE
                              ICOUS = ICOUS+1
                              IF (XSSTHR.GT.0.05D0) THEN
                                 XTSQI =DT_BETREJ(XSEACU,UNOSEA,XSSTHR,
     &                                                         XSTMAX)
                                 XTSAQI=DT_BETREJ(XSEACU,UNOSEA,XSSTHR,
     &                                                         XSTMAX)
                              ELSE
  360                            CONTINUE
                                 XTSQI = DT_DBETAR(XSEACU,UNOSEA)
                                 IF ((XTSQI.LT.XSSTHR).OR.
     &                               (XTSQI.GT.XSTMAX))  GOTO 360
  370                            CONTINUE
                                 XTSAQI = DT_DBETAR(XSEACU,UNOSEA)
                                 IF ((XTSAQI.LT.XSSTHR).OR.
     &                               (XTSAQI.GT.XSTMAX)) GOTO 370
                              ENDIF
c       final test of remaining x for target diquark
                              XTVDCO = XTVD(ITVAL)-XTSQI-XTSAQI
     &                                            +XTSQ(J)+XTSAQ(J)
                              IF (XTVDCO.LT.XDTHR) THEN
                                 IF (ICOUS.LT.5) GOTO 350
                                 GOTO 380
                              ENDIF
                              XPVD(IPVAL) = XPVDCO
                              XTVD(ITVAL) = XTVDCO
                              XPSQ(JJ)    = XPSQI
                              XPSAQ(JJ)   = XPSAQI
                              XTSQ(J)     = XTSQI
                              XTSAQ(J)    = XTSAQI
c>>>>>end of chain mass correction
                              GOTO 410
                           ENDIF
c     come here to discard s-s interaction
c     resampling of x values not allowed or unsuccessful
  380                      CONTINUE
                           INTLO(I)  = .FALSE.
                           ZUOST(J)  = .TRUE.
                           ZUOSP(JJ) = .TRUE.
                           NSS       = NSS-1
                        ENDIF
c   consider next s-s interaction
                        GOTO 410
                     ENDIF
  390             CONTINUE
               ENDIF
  400       CONTINUE
         ENDIF
  410    CONTINUE
  420 CONTINUE

c correct x-values of valence quarks for non-matching sea quarks
      DO 430 I=1,IXPS
         IF (ZUOSP(I)) THEN
            IPVAL       = ITOVP(IFROSP(I))
            XPVQ(IPVAL) = XPVQ(IPVAL)+XPSQ(I)+XPSAQ(I)
            XPSQ(I)     = ZERO
            XPSAQ(I)    = ZERO
            ZUOSP(I)    = .FALSE.
         ENDIF
  430 CONTINUE
      DO 440 I=1,IXTS
         IF (ZUOST(I)) THEN
            ITVAL       = ITOVT(IFROST(I))
            XTVQ(ITVAL) = XTVQ(ITVAL)+XTSQ(I)+XTSAQ(I)
            XTSQ(I)     = ZERO
            XTSAQ(I)    = ZERO
            ZUOST(I)    = .FALSE.
         ENDIF
  440 CONTINUE
      DO 450 I=1,IXPV
         IF (ZUOVP(I)) ISTHKK(IFROVP(I)) = 13
  450 CONTINUE
      DO 460 I=1,IXTV
         IF (ZUOVT(I)) ISTHKK(IFROVT(I)+IP) = 14
  460 CONTINUE

      RETURN
      END
c
c===samsdq=============================================================*
c
CDECK  ID>, DT_SAMSDQ
      SUBROUTINE DT_SAMSDQ(ECM,IDX1,IDX2,MODE,IREJ)

c***********************************************************************
c SAMpling of Sea-DiQuarks                                             *
c              ECM        cm-energy of the nucleon-nucleon system      *
c              IDX1,2     indices of x-values of the participating     *
c                         partons (IDX2 is always the sea-q-pair to be *
c                         changed to sea-qq-pair)                      *
c              MODE       = 1  valence-q - sea-diq                     *
c                         = 2  sea-diq   - valence-q                   *
c                         = 3  sea-q     - sea-diq                     *
c                         = 4  sea-diq   - sea-q                       *
c Based on DIQVS, DIQSV, DIQSSD, DIQDSS.                               *
c This version dated 17.10.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER (ZERO=0.0D0)

c threshold values for x-sampling (DTUNUC 1.x)
      COMMON /DTXCUT/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     &                SSMIMQ,VVMTHR

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT


      PARAMETER ( MAXNCL = 210,

     &            MAXVQU = MAXNCL,
     &            MAXSQU = 20*MAXVQU,
     &            MAXINT = MAXVQU+MAXSQU)

c x-values of partons (DTUNUC 1.x)
      COMMON /DTDPMX/ XPVQ(MAXVQU),XPVD(MAXVQU),
     &                XTVQ(MAXVQU),XTVD(MAXVQU),
     &                XPSQ(MAXSQU),XPSAQ(MAXSQU),
     &                XTSQ(MAXSQU),XTSAQ(MAXSQU)

c flavors of partons (DTUNUC 1.x)
      COMMON /DTDPMF/ IPVQ(MAXVQU),IPPV1(MAXVQU),IPPV2(MAXVQU),
     &                ITVQ(MAXVQU),ITTV1(MAXVQU),ITTV2(MAXVQU),
     &                IPSQ(MAXSQU),IPSQ2(MAXSQU),
     &                IPSAQ(MAXSQU),IPSAQ2(MAXSQU),
     &                ITSQ(MAXSQU),ITSQ2(MAXSQU),
     &                ITSAQ(MAXSQU),ITSAQ2(MAXSQU),
     &                KKPROJ(MAXVQU),KKTARG(MAXVQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPMI/ NVV,NSV,NVS,NSS,NDV,NVD,NDS,NSD,
     &                IXPV,IXPS,IXTV,IXTS,
     &                INTVV1(MAXVQU),INTVV2(MAXVQU),
     &                INTSV1(MAXVQU),INTSV2(MAXVQU),
     &                INTVS1(MAXVQU),INTVS2(MAXVQU),
     &                INTSS1(MAXSQU),INTSS2(MAXSQU),
     &                INTDV1(MAXVQU),INTDV2(MAXVQU),
     &                INTVD1(MAXVQU),INTVD2(MAXVQU),
     &                INTDS1(MAXSQU),INTDS2(MAXSQU),
     &                INTSD1(MAXSQU),INTSD2(MAXSQU)

c auxiliary common for x-value and flavor storage of partons (DTUNUC 1.x)
      COMMON /DTDPM0/ IFROVP(MAXVQU),ITOVP(MAXVQU),IFROSP(MAXSQU),
     &                IFROVT(MAXVQU),ITOVT(MAXVQU),IFROST(MAXSQU)

c auxiliary common for chain system storage (DTUNUC 1.x)
      COMMON /DTCHSY/ ISKPCH(8,MAXINT),IPOSP(MAXNCL),IPOST(MAXNCL)


      IREJ = 0
c  threshold-x for valence diquarks
      XDTHR = CDQ/ECM

      GOTO (1,2,3,4) MODE

c---------------------------------------------------------------------
c proj. valence partons - targ. sea partons
c get x-values and flavors for target sea-diquark pair

    1 CONTINUE
      IDXVP = IDX1
      IDXST = IDX2

c  index of corr. val-diquark-x in target nucleon
      IDXVT = ITOVT(IFROST(IDXST))
c  available x above diquark thresholds for valence- and sea-diquarks
      XXD   = XTVD(IDXVT)+XTSQ(IDXST)+XTSAQ(IDXST)-3.0D0*XDTHR

      IF (XXD.GE.ZERO) THEN
c  x-values for the three diquarks of the target nucleon
         RR1    = DT_RNDM(XXD)
         RR2    = DT_RNDM(RR1)
         RR3    = DT_RNDM(RR2)
         SR123  = RR1+RR2+RR3
         XXTV   = XDTHR+RR1*XXD/SR123
         XXTSQ  = XDTHR+RR2*XXD/SR123
         XXTSAQ = XDTHR+RR3*XXD/SR123
      ELSE
         XXTV   = XTVD(IDXVT)
         XXTSQ  = XTSQ(IDXST)
         XXTSAQ = XTSAQ(IDXST)
      ENDIF
c  flavor of the second quarks in the sea-diquark pair
      ITSQ2(IDXST)  = INT(1.0D0+DT_RNDM(RR3)*(2.0D0+SEASQ))
      ITSAQ2(IDXST) = -ITSQ2(IDXST)
c  check masses of the new val-q - sea-qq, val-qq - sea-aqaq chains
      AM1    = XXTSQ *XPVQ(IDXVP)*ECM**2
      AM2    = XXTSAQ*XPVD(IDXVP)*ECM**2
      IF ( (ITSQ(IDXST).EQ.3).AND.(ITSQ2(IDXST).EQ.3).AND.
c    ss-asas pair
     &     ((AM2.LE.18.0D0).OR.(AM1.LE.6.6D0))            ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( ((ITSQ(IDXST).EQ.3).OR.(ITSQ2(IDXST).EQ.3)).AND.
c    at least one strange quark
     &         ((AM2.LE.14.6D0).OR.(AM1.LE.5.8D0))        ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( (AM2.LE.13.4D0).OR.(AM1.LE.5.0D0) ) THEN
         IREJ = 1
         RETURN
      ENDIF
c  accept the new sea-diquark
      XTVD(IDXVT)   = XXTV
      XTSQ(IDXST)   = XXTSQ
      XTSAQ(IDXST)  = XXTSAQ
      NVD           = NVD+1
      INTVD1(NVD)   = IDXVP
      INTVD2(NVD)   = IDXST
      ISKPCH(7,NVD) = 0
      RETURN

c---------------------------------------------------------------------
c proj. sea partons - targ. valence partons
c get x-values and flavors for projectile sea-diquark pair

    2 CONTINUE
      IDXSP = IDX2
      IDXVT = IDX1

c  index of corr. val-diquark-x in projectile nucleon
      IDXVP = ITOVP(IFROSP(IDXSP))
c  available x above diquark thresholds for valence- and sea-diquarks
      XXD   = XPVD(IDXVP)+XPSQ(IDXSP)+XPSAQ(IDXSP)-3.0D0*XDTHR

      IF (XXD.GE.ZERO) THEN
c  x-values for the three diquarks of the projectile nucleon
         RR1    = DT_RNDM(XXD)
         RR2    = DT_RNDM(RR1)
         RR3    = DT_RNDM(RR2)
         SR123  = RR1+RR2+RR3
         XXPV   = XDTHR+RR1*XXD/SR123
         XXPSQ  = XDTHR+RR2*XXD/SR123
         XXPSAQ = XDTHR+RR3*XXD/SR123
      ELSE
         XXPV   = XPVD(IDXVP)
         XXPSQ  = XPSQ(IDXSP)
         XXPSAQ = XPSAQ(IDXSP)
      ENDIF
c  flavor of the second quarks in the sea-diquark pair
      IPSQ2(IDXSP)  = INT(1.0D0+DT_RNDM(XXD)*(2.0D0+SEASQ))
      IPSAQ2(IDXSP) = -IPSQ2(IDXSP)
c  check masses of the new sea-qq - val-q, sea-aqaq - val-qq chains
      AM1    = XXPSQ *XTVQ(IDXVT)*ECM**2
      AM2    = XXPSAQ*XTVD(IDXVT)*ECM**2
      IF ( (IPSQ(IDXSP).EQ.3).AND.(IPSQ2(IDXSP).EQ.3).AND.
c    ss-asas pair
     &     ((AM2.LE.18.0D0).OR.(AM1.LE.6.6D0))            ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( ((IPSQ(IDXSP).EQ.3).OR.(IPSQ2(IDXSP).EQ.3)).AND.
c    at least one strange quark
     &         ((AM2.LE.14.6D0).OR.(AM1.LE.5.8D0))        ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( (AM2.LE.13.4D0).OR.(AM1.LE.5.0D0) ) THEN
         IREJ = 1
         RETURN
      ENDIF
c  accept the new sea-diquark
      XPVD(IDXVP)   = XXPV
      XPSQ(IDXSP)   = XXPSQ
      XPSAQ(IDXSP)  = XXPSAQ
      NDV           = NDV+1
      INTDV1(NDV)   = IDXSP
      INTDV2(NDV)   = IDXVT
      ISKPCH(5,NDV) = 0
      RETURN

c---------------------------------------------------------------------
c proj. sea partons - targ. sea partons
c get x-values and flavors for target sea-diquark pair

    3 CONTINUE
      IDXSP = IDX1
      IDXST = IDX2

c  index of corr. val-diquark-x in target nucleon
      IDXVT = ITOVT(IFROST(IDXST))
c  available x above diquark thresholds for valence- and sea-diquarks
      XXD   = XTVD(IDXVT)+XTSQ(IDXST)+XTSAQ(IDXST)-3.0D0*XDTHR

      IF (XXD.GE.ZERO) THEN
c  x-values for the three diquarks of the target nucleon
         RR1    = DT_RNDM(XXD)
         RR2    = DT_RNDM(RR1)
         RR3    = DT_RNDM(RR2)
         SR123  = RR1+RR2+RR3
         XXTV   = XDTHR+RR1*XXD/SR123
         XXTSQ  = XDTHR+RR2*XXD/SR123
         XXTSAQ = XDTHR+RR3*XXD/SR123
      ELSE
         XXTV   = XTVD(IDXVT)
         XXTSQ  = XTSQ(IDXST)
         XXTSAQ = XTSAQ(IDXST)
      ENDIF
c  flavor of the second quarks in the sea-diquark pair
      ITSQ2(IDXST)  = INT(1.0D0+DT_RNDM(XXD)*(2.0D0+SEASQ))
      ITSAQ2(IDXST) = -ITSQ2(IDXST)
c  check masses of the new sea-q - sea-qq, sea-aq - sea-aqaq chains
      AM1    = XXTSQ *XPSQ(IDXSP)*ECM**2
      AM2    = XXTSAQ*XPSAQ(IDXSP)*ECM**2
      IF ( (ITSQ(IDXST).EQ.3).AND.(ITSQ2(IDXST).EQ.3).AND.
c    ss-asas pair
     &     ((AM2.LE.6.6D0).OR.(AM1.LE.6.6D0))            ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( ((ITSQ(IDXST).EQ.3).OR.(ITSQ2(IDXST).EQ.3)).AND.
c    at least one strange quark
     &         ((AM2.LE.5.8D0).OR.(AM1.LE.5.8D0))        ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( (AM2.LE.5.0D0).OR.(AM1.LE.5.0D0) ) THEN
         IREJ = 1
         RETURN
      ENDIF
c  accept the new sea-diquark
      XTVD(IDXVT)   = XXTV
      XTSQ(IDXST)   = XXTSQ
      XTSAQ(IDXST)  = XXTSAQ
      NSD           = NSD+1
      INTSD1(NSD)   = IDXSP
      INTSD2(NSD)   = IDXST
      ISKPCH(3,NSD) = 0
      RETURN

c---------------------------------------------------------------------
c proj. sea partons - targ. sea partons
c get x-values and flavors for projectile sea-diquark pair

    4 CONTINUE
      IDXSP = IDX2
      IDXST = IDX1

c  index of corr. val-diquark-x in projectile nucleon
      IDXVP = ITOVP(IFROSP(IDXSP))
c  available x above diquark thresholds for valence- and sea-diquarks
      XXD   = XPVD(IDXVP)+XPSQ(IDXSP)+XPSAQ(IDXSP)-3.0D0*XDTHR

      IF (XXD.GE.ZERO) THEN
c  x-values for the three diquarks of the projectile nucleon
         RR1    = DT_RNDM(XXD)
         RR2    = DT_RNDM(RR1)
         RR3    = DT_RNDM(RR2)
         SR123  = RR1+RR2+RR3
         XXPV   = XDTHR+RR1*XXD/SR123
         XXPSQ  = XDTHR+RR2*XXD/SR123
         XXPSAQ = XDTHR+RR3*XXD/SR123
      ELSE
         XXPV   = XPVD(IDXVP)
         XXPSQ  = XPSQ(IDXSP)
         XXPSAQ = XPSAQ(IDXSP)
      ENDIF
c  flavor of the second quarks in the sea-diquark pair
      IPSQ2(IDXSP)  = INT(1.0D0+DT_RNDM(RR3)*(2.0D0+SEASQ))
      IPSAQ2(IDXSP) = -IPSQ2(IDXSP)
c  check masses of the new sea-qq - sea-q, sea-aqaq - sea-qq chains
      AM1    = XXPSQ *XTSQ(IDXST)*ECM**2
      AM2    = XXPSAQ*XTSAQ(IDXST)*ECM**2
      IF ( (IPSQ(IDXSP).EQ.3).AND.(IPSQ2(IDXSP).EQ.3).AND.
c    ss-asas pair
     &     ((AM2.LE.6.6D0).OR.(AM1.LE.6.6D0))            ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( ((IPSQ(IDXSP).EQ.3).OR.(IPSQ2(IDXSP).EQ.3)).AND.
c    at least one strange quark
     &         ((AM2.LE.5.8D0).OR.(AM1.LE.5.8D0))        ) THEN
         IREJ = 1
         RETURN
      ELSEIF ( (AM2.LE.5.0D0).OR.(AM1.LE.5.0D0) ) THEN
         IREJ = 1
         RETURN
      ENDIF
c  accept the new sea-diquark
      XPVD(IDXVP)   = XXPV
      XPSQ(IDXSP)   = XXPSQ
      XPSAQ(IDXSP)  = XXPSAQ
      NDS           = NDS+1
      INTDS1(NDS)   = IDXSP
      INTDS2(NDS)   = IDXST
      ISKPCH(2,NDS) = 0
      RETURN
      END
c
c===difevt=============================================================*
c
CDECK  ID>, DT_DIFEVT
      SUBROUTINE DT_DIFEVT(IFP1,IFP2,PP,MOP,
     &                  IFT1,IFT2,PT,MOT,JDIFF,NCSY,IREJ)

c***********************************************************************
c Interface to treatment of diffractive interactions.                  *
c  (input)          IFP1/2        PDG-indizes of projectile partons    *
c                                 (baryon: IFP2 - adiquark)            *
c                   PP(4)         projectile 4-momentum                *
c                   IFT1/2        PDG-indizes of target partons        *
c                                 (baryon: IFT1 - adiquark)            *
c                   PT(4)         target 4-momentum                    *
c  (output)         JDIFF = 0     no diffraction                       *
c                         = 1/-1  LMSD/LMDD                            *
c                         = 2/-2  HMSD/HMDD                            *
c                   NCSY          counter for two-chain systems        *
c                                 dumped to DTEVT1                     *
c This version dated 14.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY10=1.0D-10,TINY5=1.0D-5,
     &           OHALF=0.5D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF


      DIMENSION PP(4),PT(4)

      LOGICAL LFIRST
      DATA LFIRST /.TRUE./

      IREJ   = 0
      JDIFF  = 0
      IFLAGD = JDIFF

c cm. energy
      XM = SQRT((PP(4)+PT(4))**2-(PP(1)+PT(1))**2-
     &          (PP(2)+PT(2))**2-(PP(3)+PT(3))**2)
c identities of projectile hadron / target nucleon
      KPROJ = IDT_ICIHAD(IDHKK(MOP))
      KTARG = IDT_ICIHAD(IDHKK(MOT))

c single diffractive xsections
      CALL DT_SHNDIF(XM,KPROJ,KTARG,SDTOT,SDHM)
c double diffractive xsections
c*!! no double diff yet
C     CALL DT_SHNDIF(XM,KPROJ,KTARG,SDTOT,SDHM,DDTOT,DDHM)
      DDTOT = 0.0D0
      DDHM  = 0.0D0
c*!!
c total inelastic xsection
C     SIGIN  = DT_SHNTOT(KPROJ,KTARG,XM,ZERO)-DT_SHNELA(KPROJ,KTARG,XM)
      DUMZER = ZERO
      CALL DT_XSHN(KPROJ,KTARG,DUMZER,XM,SIGTO,SIGEL)
      SIGIN  = MAX(SIGTO-SIGEL,ZERO)

c fraction of diffractive processes
      FRADIF = (SDTOT+DDTOT)/SIGIN

      IF (LFIRST) THEN
         WRITE(ErrorOut,1000) XM,SDTOT,SIGIN
 1000    FORMAT(1X,'DIFEVT: SINGLE DIFFRACTION REQUESTED AT E_CM = ',
     &          F5.1,' GEV',/,9X,'SIGMA_SD = ',F4.1,' MB, SIGMA_IN = ',
     &          F5.1,' MB',/)
         LFIRST = .FALSE.
      ENDIF

      IF ((DT_RNDM(DDHM).LE.FRADIF).OR.
     &    (ISINGD.GT.1).OR.(IDOUBD.GT.1)) THEN
c diffractive interaction requested by x-section or by user
         FRASD  = SDTOT/(SDTOT+DDTOT)
         FRASDH = SDHM/SDTOT
c*sr needs to be specified!!
C        FRADDH = DDHM/DDTOT
         FRADDH = 1.0D0
c*
         IF ((DT_RNDM(FRASD).LE.FRASD).OR.(ISINGD.GT.1)) THEN
c   single diffraction
            KDIFF = 1
            IF (DT_RNDM(DDTOT).LE.FRASDH) THEN
               KP = 2
               KT = 0
               IF (((ISINGD.EQ.4).OR.(DT_RNDM(DDTOT).GE.OHALF)).AND.
     &               ISINGD.NE.3) THEN
                  KP = 0
                  KT = 2
               ENDIF
            ELSE
               KP = 1
               KT = 0
               IF (((ISINGD.EQ.4).OR.(DT_RNDM(FRADDH).GE.OHALF)).AND.
     &               ISINGD.NE.3) THEN
                  KP = 0
                  KT = 1
               ENDIF
            ENDIF
         ELSE
c   double diffraction
            KDIFF = -1
            IF (DT_RNDM(FRADDH).LE.FRADDH) THEN
               KP = 2
               KT = 2
            ELSE
               KP = 1
               KT = 1
            ENDIF
         ENDIF
         CALL DT_DIFFKI(IFP1,IFP2,PP,MOP,KP,
     &               IFT1,IFT2,PT,MOT,KT,NCSY,IREJ1)
         IF (IREJ1.EQ.0) THEN
            IFLAGD = 2*KDIFF
            IF ((KP.EQ.1).OR.(KT.EQ.1)) IFLAGD = KDIFF
         ELSE
            GOTO 9999
         ENDIF
      ENDIF
      JDIFF = IFLAGD

      RETURN

 9999 CONTINUE
      IREJ  = 1
      RETURN
      END
c
c===difkin=============================================================*
c
CDECK  ID>, DT_DIFFKI
      SUBROUTINE DT_DIFFKI(IFP1,IFP2,PP,MOP,KP,
     &                  IFT1,IFT2,PT,MOT,KT,NCSY,IREJ)

c***********************************************************************
c Kinematics of diffractive nucleon-nucleon interaction.               *
c          IFP1/2   PDG-indizes of projectile partons                  *
c                   (baryon: IFP2 - adiquark)                          *
c          PP(4)    projectile 4-momentum                              *
c          IFT1/2   PDG-indizes of target partons                      *
c                   (baryon: IFT1 - adiquark)                          *
c          PT(4)    target 4-momentum                                  *
c          KP   = 0 projectile quasi-elastically scattered             *
c               = 1            excited to low-mass diff. state         *
c               = 2            excited to high-mass diff. state        *
c          KT   = 0 target     quasi-elastically scattered             *
c               = 1            excited to low-mass diff. state         *
c               = 2            excited to high-mass diff. state        *
c This version dated 12.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY10=1.0D-10,TINY5=1.0D-5)

      LOGICAL LSTART

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c kinematics of diffractive interactions (DTUNUC 1.x)
      COMMON /DTDIKI/ XPH(2),XPPO(2),XTH(2),XTPO(2),PPOM(4),PSC(4),
     &                PPF(4),PTF(4),
     &                PPLM1(4),PPLM2(4),PTLM1(4),PTLM2(4),
     &                IDPR,IDXPR,IDTR,IDXTR,IFPPO(2),IFTPO(2)


      DIMENSION PITOT(4),BGTOT(4),PP1(4),PT1(4),PPBLOB(4),PTBLOB(4),
     &          PP(4),PT(4),PPOM1(4),DEV1(4),DEV2(4)

      DATA LSTART /.TRUE./

      IF (LSTART) THEN
         WRITE(ErrorOut,2000)
 2000    FORMAT(/,1X,'DIFEVT:  DIFFRACTIVE INTERACTIONS TREATED ')
         LSTART = .FALSE.
      ENDIF

      IREJ = 0

c initialize common /DTDIKI/
      CALL DT_DIFINI
c store momenta of initial incoming particles for emc-check
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(PP(1),PP(2),PP(3),PP(4),1,IDUM,IDUM)
         CALL DT_EVTEMC(PT(1),PT(2),PT(3),PT(4),2,IDUM,IDUM)
      ENDIF

c masses of initial particles
      XMP2 = PP(4)**2-PP(1)**2-PP(2)**2-PP(3)**2
      XMT2 = PT(4)**2-PT(1)**2-PT(2)**2-PT(3)**2
      IF ((XMP2.LT.ZERO).OR.(XMT2.LT.ZERO)) GOTO 9999
      XMP  = SQRT(XMP2)
      XMT  = SQRT(XMT2)
c check quark-input (used to adjust coherence cond. for M-selection)
      IBP  = 0
      IF ((ABS(IFP1).GE.1000).OR.(ABS(IFP2).GE.1000)) IBP = 1
      IBT  = 0
      IF ((ABS(IFT1).GE.1000).OR.(ABS(IFT2).GE.1000)) IBT = 1

c parameter for Lorentz-transformation into nucleon-nucleon cms
      DO 3 K=1,4
         PITOT(K) = PP(K)+PT(K)
    3 CONTINUE
      XMTOT2 = PITOT(4)**2-PITOT(1)**2-PITOT(2)**2-PITOT(3)**2
      IF (XMTOT2.LE.ZERO) THEN
         WRITE(ErrorOut,1000) XMTOT2
 1000    FORMAT(1X,'DIFEVT:   NEGATIVE CM. ENERGY!  ',
     &          'XMTOT2 = ',E12.3)
         GOTO 9999
      ENDIF
      XMTOT = SQRT(XMTOT2)
      DO 4 K=1,4
         BGTOT(K) = PITOT(K)/XMTOT
    4 CONTINUE
c transformation of nucleons into cms
      CALL DT_DALTRA(BGTOT(4),-BGTOT(1),-BGTOT(2),-BGTOT(3),PP(1),PP(2),
     &            PP(3),PP(4),PPTOT,PP1(1),PP1(2),PP1(3),PP1(4))
      CALL DT_DALTRA(BGTOT(4),-BGTOT(1),-BGTOT(2),-BGTOT(3),PT(1),PT(2),
     &            PT(3),PT(4),PTTOT,PT1(1),PT1(2),PT1(3),PT1(4))
c rotation angles
      COD = PP1(3)/PPTOT
C     SID = SQRT((ONE-COD)*(ONE+COD))
      PPT = SQRT(PP1(1)**2+PP1(2)**2)
      SID = PPT/PPTOT
      COF = ONE
      SIF = ZERO
      IF(PPTOT*SID.GT.TINY10) THEN
         COF   = PP1(1)/(SID*PPTOT)
         SIF   = PP1(2)/(SID*PPTOT)
         ANORF = SQRT(COF*COF+SIF*SIF)
         COF   = COF/ANORF
         SIF   = SIF/ANORF
      ENDIF
c check consistency
      DO 5 K=1,4
         DEV1(K) = ABS(PP1(K)+PT1(K))
    5 CONTINUE
      DEV1(4) = ABS(DEV1(4)-XMTOT)
      IF ((DEV1(1).GT.TINY10).OR.(DEV1(2).GT.TINY10).OR.
     &    (DEV1(3).GT.TINY10).OR.(DEV1(4).GT.TINY10))     THEN
         WRITE(ErrorOut,1001) DEV1
 1001    FORMAT(1X,'DIFEVT:   INCONSITENT LORENTZ-TRANSFORMATION! ',
     &          /,8X,4E12.3)
         GOTO 9999
      ENDIF

c select x-fractions in high-mass diff. interactions
      IF ((KP.EQ.2).OR.(KT.EQ.2)) CALL DT_XVALHM(KP,KT)

c select diffractive masses
c - projectile
      IF (KP.EQ.1) THEN
         XMPF = DT_XMLMD(XMTOT)
         CALL DT_LM2RES(IFP1,IFP2,XMPF,IDPR,IDXPR,IREJ1)
         IF (IREJ1.GT.0) GOTO 9999
      ELSEIF (KP.EQ.2) THEN
         XMPF = DT_XMHMD(XMTOT,IBP,1)
      ELSE
         XMPF = XMP
      ENDIF
c - target
      IF (KT.EQ.1) THEN
         XMTF = DT_XMLMD(XMTOT)
         CALL DT_LM2RES(IFT1,IFT2,XMTF,IDTR,IDXTR,IREJ1)
         IF (IREJ1.GT.0) GOTO 9999
      ELSEIF (KT.EQ.2) THEN
         XMTF = DT_XMHMD(XMTOT,IBT,2)
      ELSE
         XMTF = XMT
      ENDIF

c kinematical treatment of "two-particle" system (masses - XMPF,XMTF)
      XMPF2 = XMPF**2
      XMTF2 = XMTF**2
      PPBLOB(3) = DT_YLAMB(XMTOT2,XMPF2,XMTF2)/(2.D0*XMTOT)
      PPBLOB(4) = SQRT(XMPF2+PPBLOB(3)**2)

c select momentum transfer (all t-values used here are <0)
c   minimum absolute value to produce diffractive masses
      TMIN = XMP2+XMPF2-2.0D0*(PP1(4)*PPBLOB(4)-PPTOT*PPBLOB(3))
      TT   = DT_TDIFF(XMTOT,TMIN,XMPF,KP,XMTF,KT,IREJ1)
      IF (IREJ1.GT.0) GOTO 9999

c longitudinal momentum of excited/elastically scattered projectile
      PPBLOB(3) = (TT-XMP2-XMPF2+2.0D0*PP1(4)*PPBLOB(4))/(2.0D0*PPTOT)
c total transverse momentum due to t-selection
      PPBLT2 = PPBLOB(4)**2-PPBLOB(3)**2-XMPF2
      IF (PPBLT2.LT.ZERO) THEN
         WRITE(ErrorOut,1002) PPBLT2,KP,PP1,XMPF,KT,PT1,XMTF,TT
 1002    FORMAT(1X,'DIFEVT:   INCONSISTENT TRANSVERSE MOMENTUM! ',
     &          E12.3,2(/,1X,I2,5E12.3),/,1X,E12.3)
         GOTO 9999
      ENDIF
      CALL DT_DSFECF(SINPHI,COSPHI)
      PPBLT     = SQRT(PPBLT2)
      PPBLOB(1) = COSPHI*PPBLT
      PPBLOB(2) = SINPHI*PPBLT

c rotate excited/elastically scattered projectile into n-n cms.
      CALL DT_MYTRAN(1,PPBLOB(1),PPBLOB(2),PPBLOB(3),COD,SID,COF,SIF,
     &                                                    XX,YY,ZZ)
      PPBLOB(1) = XX
      PPBLOB(2) = YY
      PPBLOB(3) = ZZ

c 4-momentum of excited/elastically scattered target and of exchanged
c Pomeron
      DO 6 K=1,4
         IF (K.LT.4) PTBLOB(K) = -PPBLOB(K)
         PPOM1(K) = PP1(K)-PPBLOB(K)
    6 CONTINUE
      PTBLOB(4) = XMTOT-PPBLOB(4)

c Lorentz-transformation back into system of initial diff. collision
      CALL DT_DALTRA(BGTOT(4),BGTOT(1),BGTOT(2),BGTOT(3),
     &            PPBLOB(1),PPBLOB(2),PPBLOB(3),PPBLOB(4),
     &            PPTOTF,PPF(1),PPF(2),PPF(3),PPF(4))
      CALL DT_DALTRA(BGTOT(4),BGTOT(1),BGTOT(2),BGTOT(3),
     &            PTBLOB(1),PTBLOB(2),PTBLOB(3),PTBLOB(4),
     &            PTTOTF,PTF(1),PTF(2),PTF(3),PTF(4))
      CALL DT_DALTRA(BGTOT(4),BGTOT(1),BGTOT(2),BGTOT(3),
     &            PPOM1(1),PPOM1(2),PPOM1(3),PPOM1(4),
     &            PPOMTO,PPOM(1),PPOM(2),PPOM(3),PPOM(4))

c store 4-momentum of elastically scattered particle (in single diff.
c events)
      IF (KP.EQ.0) THEN
         DO 7 K=1,4
            PSC(K) = PPF(K)
    7    CONTINUE
      ELSEIF (KT.EQ.0) THEN
         DO 8 K=1,4
            PSC(K) = PTF(K)
    8    CONTINUE
      ENDIF

c check consistency of kinematical treatment so far
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(-PPF(1),-PPF(2),-PPF(3),-PPF(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(-PTF(1),-PTF(2),-PTF(3),-PTF(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(DUM,DUM,DUM,DUM,3,60,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
      ENDIF
      DO 9 K=1,4
         DEV1(K) = ABS(PP(K)-PPF(K)-PPOM(K))
         DEV2(K) = ABS(PT(K)-PTF(K)+PPOM(K))
    9 CONTINUE
      IF ((DEV1(1).GT.TINY5).OR.(DEV1(2).GT.TINY5).OR.
     &    (DEV1(3).GT.TINY5).OR.(DEV1(4).GT.TINY5).OR.
     &    (DEV2(1).GT.TINY5).OR.(DEV2(2).GT.TINY5).OR.
     &    (DEV2(3).GT.TINY5).OR.(DEV2(4).GT.TINY5))     THEN
         WRITE(ErrorOut,1003) DEV1,DEV2
 1003    FORMAT(1X,'DIFEVT:   INCONSITENT KINEMATICAL TREATMENT!  ',
     &          2(/,8X,4E12.3))
         GOTO 9999
      ENDIF

c kinematical treatment for low-mass diffraction
      CALL DT_LMKINE(IFP1,IFP2,KP,IFT1,IFT2,KT,IREJ1)
      IF (IREJ1.NE.0) GOTO 9999

c dump diffractive chains into DTEVT1
      CALL DT_DIFPUT(IFP1,IFP2,PP,MOP,KP,IFT1,IFT2,PT,MOT,KT,NCSY,IREJ1)
      IF (IREJ1.NE.0) GOTO 9999

      RETURN

 9999 CONTINUE
      IRDIFF(1) = IRDIFF(1)+1
      IREJ      = 1
      RETURN
      END
c
c===xmhmd==============================================================*
c
CDECK  ID>, DT_XMHMD
      DOUBLE PRECISION FUNCTION DT_XMHMD(ECM,IB,MODE)

c***********************************************************************
c Diffractive mass in high mass single/double diffractive events.      *
c This version dated 11.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (OHALF=0.5D0,ONE=1.0D0,ZERO=0.0D0)

c kinematics of diffractive interactions (DTUNUC 1.x)
      COMMON /DTDIKI/ XPH(2),XPPO(2),XTH(2),XTPO(2),PPOM(4),PSC(4),
     &                PPF(4),PTF(4),
     &                PPLM1(4),PPLM2(4),PTLM1(4),PTLM2(4),
     &                IDPR,IDXPR,IDTR,IDXTR,IFPPO(2),IFTPO(2)


C     DATA XCOLOW /0.05D0/
      DATA XCOLOW /0.15D0/

      DT_XMHMD = ZERO
      XH = XPH(2)
      IF (MODE.EQ.2) XH = XTH(2)

c minimum Pomeron-x for high-mass diffraction
c (adjusted to get a smooth transition between HM and LM component)
      R = DT_RNDM(XH)
      XDIMIN = (3.0D0+400.0D0*R**2)/(XH*ECM**2)
      IF (ECM.LE.300.0D0) THEN
         RR     = (1.0D0-EXP(-((ECM/140.0D0)**4)))
         XDIMIN = (3.0D0+400.0D0*(R**2)*RR)/(XH*ECM**2)
      ENDIF
c maximum Pomeron-x for high-mass diffraction
c (coherence condition, adjusted to fit to experimental data)
      IF (IB.NE.0) THEN
c   baryon-diffraction
         XDIMAX = XCOLOW*(1.0D0+EXP(-((ECM/420.0D0)**2)))
      ELSE
c   meson-diffraction
         XDIMAX = XCOLOW*(1.0D0+4.0D0*EXP(-((ECM/420.0D0)**2)))
      ENDIF
c check boundaries
      IF (XDIMIN.GE.XDIMAX) THEN
         XDIMIN = OHALF*XDIMAX
      ENDIF

      KLOOP = 0
    1 CONTINUE
      KLOOP = KLOOP+1
      IF (KLOOP.GT.20) RETURN
c sample Pomeron-x from 1/x-distribution (critical Pomeron)
      XDIFF = DT_SAMPEX(XDIMIN,XDIMAX)
c corr. diffr. mass
      DT_XMHMD = ECM*SQRT(XDIFF)
      IF (DT_XMHMD.LT.2.5D0) GOTO 1

      RETURN
      END
c
c===xmlmd==============================================================*
c
CDECK  ID>, DT_XMLMD
      DOUBLE PRECISION FUNCTION DT_XMLMD(ECM)

c***********************************************************************
c Diffractive mass in high mass single/double diffractive events.      *
c This version dated 11.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c minimum Pomeron-x for low-mass diffraction
C     AMO = 1.5D0
      AMO = 2.0D0
c maximum Pomeron-x for low-mass diffraction
c (adjusted to get a smooth transition between HM and LM component)
      R   = DT_RNDM(AMO)
      SAM = 1.0D0
      IF (ECM.LE.300.0D0) SAM = 1.0D0-EXP(-((ECM/200.0D0)**4))
      R   = DT_RNDM(AMO)*SAM
      AMAX= (1.0D0-SAM)*SQRT(0.1D0*ECM**2)+SAM*SQRT(400.0D0)
      AMU = R*SQRT(100.0D0)+(1.0D0-R)*AMAX

c selection of diffractive mass
c (adjusted to get a smooth transition between HM and LM component)
      R   = DT_RNDM(AMU)
      IF (ECM.LE.50.0D0) THEN
         DT_XMLMD = AMO*(AMU/AMO)**R
      ELSE
         A = 0.7D0
         IF (ECM.LE.300.0D0) A = 0.7D0*(1.0D0-EXP(-((ECM/100.0D0)**2)))
         DT_XMLMD = 1.0D0/((R/(AMU**A)+(1.0D0-R)/(AMO**A))**(1.0D0/A))
      ENDIF

      RETURN
      END
c
c===tdiff==============================================================*
c
CDECK  ID>, DT_TDIFF
      DOUBLE PRECISION FUNCTION DT_TDIFF(ECM,TMIN,XM1I,K1,XM2I,K2,IREJ)

c***********************************************************************
c t-selection for single/double diffractive interactions.              *
c          ECM      cm. energy                                         *
c          TMIN     minimum momentum transfer to produce diff. masses  *
c          XM1/XM2  diffractively produced masses                      *
c                   (for single diffraction XM2 is obsolete)           *
c          K1/K2= 0 not excited                                        *
c               = 1 low-mass excitation                                *
c               = 2 high-mass excitation                               *
c This version dated 11.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0)

      PARAMETER ( BTP0   = 3.7D0,
     &            ALPHAP = 0.24D0 )

      IREJ   = 0
      NCLOOP = 0
      DT_TDIFF  = ZERO

      IF (K1.GT.0) THEN
         XM1 = XM1I
         XM2 = XM2I
      ELSE
         XM1 = XM2I
      ENDIF
      XDI = (XM1/ECM)**2
      IF ((K1.EQ.0).OR.(K2.EQ.0)) THEN
c slope for single diffraction
         SLOPE = BTP0-2.0D0*ALPHAP*LOG(XDI)
      ELSE
c slope for double diffraction
         SLOPE = -2.0D0*ALPHAP*LOG(XDI*XM2**2)
      ENDIF

    1 CONTINUE
      NCLOOP = NCLOOP+1
      IF (MOD(NCLOOP,1000).EQ.0) GOTO 9999
      Y = DT_RNDM(XDI)
      T = -LOG(1.0D0-Y)/SLOPE
      IF (ABS(T).LE.ABS(TMIN)) GOTO 1
      DT_TDIFF = -ABS(T)

      RETURN

 9999 CONTINUE
      WRITE(ErrorOut,1000) ECM,TMIN,XM1I,XM2I,K1,K2
 1000 FORMAT(1X,'DT_TDIFF:   T-SELECTION REJECTED!',/,
     &       1X,'ECM  = ',E12.3,' TMIN = ',E12.2,/,1X,'XM1I = ',
     &       E12.3,' XM2I = ',E12.3,' K1 = ',I2,' K2 = ',I2)
      IREJ = 1
      RETURN
      END
c
c===xvalhm=============================================================*
c
CDECK  ID>, DT_XVALHM
      SUBROUTINE DT_XVALHM(KP,KT)

c***********************************************************************
c Sampling of parton x-values in high-mass diffractive interactions.   *
c This version dated 12.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,OHALF=0.5D0,ONE=1.0D0,TINY2=1.0D-2)

c kinematics of diffractive interactions (DTUNUC 1.x)
      COMMON /DTDIKI/ XPH(2),XPPO(2),XTH(2),XTPO(2),PPOM(4),PSC(4),
     &                PPF(4),PTF(4),
     &                PPLM1(4),PPLM2(4),PTLM1(4),PTLM2(4),
     &                IDPR,IDXPR,IDTR,IDXTR,IFPPO(2),IFTPO(2)

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT


      DATA UNON,XVQTHR /2.0D0,0.8D0/

      IF (KP.EQ.2) THEN
c x-fractions of projectile valence partons
    1    CONTINUE
         XPH(1) = DT_DBETAR(OHALF,UNON)
         IF (XPH(1).GE.XVQTHR) GOTO 1
         XPH(2) = ONE-XPH(1)
c x-fractions of Pomeron q-aq-pair
         XPOLO = TINY2
         XPOHI = ONE-TINY2
         XPPO(1) = DT_SAMPEX(XPOLO,XPOHI)
         XPPO(2) = ONE-XPPO(1)
c flavors of Pomeron q-aq-pair
         IFLAV    = INT(ONE+DT_RNDM(UNON)*(2.0D0+SEASQ))
         IFPPO(1) = IFLAV
         IFPPO(2) = -IFLAV
         IF (DT_RNDM(UNON).GT.OHALF) THEN
            IFPPO(1) = -IFLAV
            IFPPO(2) = IFLAV
         ENDIF
      ENDIF

      IF (KT.EQ.2) THEN
c x-fractions of projectile target partons
    2    CONTINUE
         XTH(1) = DT_DBETAR(OHALF,UNON)
         IF (XTH(1).GE.XVQTHR) GOTO 2
         XTH(2) = ONE-XTH(1)
c x-fractions of Pomeron q-aq-pair
         XPOLO = TINY2
         XPOHI = ONE-TINY2
         XTPO(1) = DT_SAMPEX(XPOLO,XPOHI)
         XTPO(2) = ONE-XTPO(1)
c flavors of Pomeron q-aq-pair
         IFLAV    = INT(ONE+DT_RNDM(XPOLO)*(2.0D0+SEASQ))
         IFTPO(1) = IFLAV
         IFTPO(2) = -IFLAV
         IF (DT_RNDM(XPOLO).GT.OHALF) THEN
            IFTPO(1) = -IFLAV
            IFTPO(2) = IFLAV
         ENDIF
      ENDIF

      RETURN
      END
c
c===lm2res=============================================================*
c
CDECK  ID>, DT_LM2RES
      SUBROUTINE DT_LM2RES(IF1,IF2,XM,IDR,IDXR,IREJ)

c***********************************************************************
c Check low-mass diffractive excitation for resonance mass.            *
c   (input)   IF1/2    PDG-indizes of valence partons                  *
c   (in/out)  XM       diffractive mass requested/corrected            *
c   (output)  IDR/IDXR id./BAMJET-index of resonance                   *
c This version dated 12.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,OHALF=0.5D0,ONE=1.0D0)

c kinematics of diffractive interactions (DTUNUC 1.x)
      COMMON /DTDIKI/ XPH(2),XPPO(2),XTH(2),XTPO(2),PPOM(4),PSC(4),
     &                PPF(4),PTF(4),
     &                PPLM1(4),PPLM2(4),PTLM1(4),PTLM2(4),
     &                IDPR,IDXPR,IDTR,IDXTR,IFPPO(2),IFTPO(2)


      IREJ = 0
      IF1B = 0
      IF2B = 0
      XMI  = XM

c BAMJET indices of partons
      IF1A = IDT_IPDG2B(IF1,1,2)
      IF (ABS(IF1).GE.1000) IF1B = IDT_IPDG2B(IF1,2,2)
      IF2A = IDT_IPDG2B(IF2,1,2)
      IF (ABS(IF2).GE.1000) IF2B = IDT_IPDG2B(IF2,2,2)

c get kind of chains (1 - q-aq, 2 - q-qq/aq-aqaq)
      IDCH = 2
      IF ((IF1B.EQ.0).AND.(IF2B.EQ.0)) IDCH = 1

c check for resonance mass
      CALL DT_CH2RES(IF1A,IF1B,IF2A,IF2B,IDR,IDXR,XMI,XMN,IDCH,IREJ1)
      IF (IREJ1.NE.0) GOTO 9999

      XM = XMN
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===lmkine=============================================================*
c
CDECK  ID>, DT_LMKINE
      SUBROUTINE DT_LMKINE(IFP1,IFP2,KP,IFT1,IFT2,KT,IREJ)

c***********************************************************************
c Kinematical treatment of low-mass excitations.                       *
c This version dated 12.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,OHALF=0.5D0,ONE=1.0D0)



c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c kinematics of diffractive interactions (DTUNUC 1.x)
      COMMON /DTDIKI/ XPH(2),XPPO(2),XTH(2),XTPO(2),PPOM(4),PSC(4),
     &                PPF(4),PTF(4),
     &                PPLM1(4),PPLM2(4),PTLM1(4),PTLM2(4),
     &                IDPR,IDXPR,IDTR,IDXTR,IFPPO(2),IFTPO(2)


      DIMENSION P1(4),P2(4)

      IREJ = 0

      IF (KP.EQ.1) THEN
         PABS = SQRT(PPF(1)**2+PPF(2)**2+PPF(3)**2)
         POE  = PPF(4)/PABS
         FAC1 = OHALF*(POE+ONE)
         FAC2 = -OHALF*(POE-ONE)
         DO 1 K=1,3
            PPLM1(K) = FAC1*PPF(K)
            PPLM2(K) = FAC2*PPF(K)
    1    CONTINUE
         PPLM1(4) = FAC1*PABS
         PPLM2(4) = -FAC2*PABS
         IF (IMSHL.EQ.1) THEN

            XM1 = PYMASS(IFP1)
            XM2 = PYMASS(IFP2)

            CALL DT_MASHEL(PPLM1,PPLM2,XM1,XM2,P1,P2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            DO 2 K=1,4
               PPLM1(K) = P1(K)
               PPLM2(K) = P2(K)
    2       CONTINUE
         ENDIF
      ENDIF

      IF (KT.EQ.1) THEN
         PABS = SQRT(PTF(1)**2+PTF(2)**2+PTF(3)**2)
         POE  = PTF(4)/PABS
         FAC1 = OHALF*(POE+ONE)
         FAC2 = -OHALF*(POE-ONE)
         DO 3 K=1,3
            PTLM2(K) = FAC1*PTF(K)
            PTLM1(K) = FAC2*PTF(K)
    3    CONTINUE
         PTLM2(4) = FAC1*PABS
         PTLM1(4) = -FAC2*PABS
         IF (IMSHL.EQ.1) THEN

            XM1 = PYMASS(IFT1)
            XM2 = PYMASS(IFT2)

            CALL DT_MASHEL(PTLM1,PTLM2,XM1,XM2,P1,P2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            DO 4 K=1,4
               PTLM1(K) = P1(K)
               PTLM2(K) = P2(K)
    4       CONTINUE
         ENDIF
      ENDIF

      RETURN

 9999 CONTINUE
      WRITE(ErrorOut,
     * '(A)') 'LMKINE:   kinematical treatment rejected'
      IREJ = 1
      RETURN
      END
c
c===difini=============================================================*
c
CDECK  ID>, DT_DIFINI
      SUBROUTINE DT_DIFINI

c***********************************************************************
c Initialization of common /DTDIKI/                                    *
c This version dated 12.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,OHALF=0.5D0,ONE=1.0D0)

c kinematics of diffractive interactions (DTUNUC 1.x)
      COMMON /DTDIKI/ XPH(2),XPPO(2),XTH(2),XTPO(2),PPOM(4),PSC(4),
     &                PPF(4),PTF(4),
     &                PPLM1(4),PPLM2(4),PTLM1(4),PTLM2(4),
     &                IDPR,IDXPR,IDTR,IDXTR,IFPPO(2),IFTPO(2)


      DO 1 K=1,4
         PPOM(K)  = ZERO
         PSC(K)   = ZERO
         PPF(K)   = ZERO
         PTF(K)   = ZERO
         PPLM1(K) = ZERO
         PPLM2(K) = ZERO
         PTLM1(K) = ZERO
         PTLM2(K) = ZERO
    1 CONTINUE
      DO 2 K=1,2
         XPH(K)   = ZERO
         XPPO(K)  = ZERO
         XTH(K)   = ZERO
         XTPO(K)  = ZERO
         IFPPO(K) = 0
         IFTPO(K) = 0
    2 CONTINUE
      IDPR  = 0
      IDXPR = 0
      IDTR  = 0
      IDXTR = 0

      RETURN
      END
c
c===difput=============================================================*
c
CDECK  ID>, DT_DIFPUT
      SUBROUTINE DT_DIFPUT(IFP1,IFP2,PP,MOP,KP,IFT1,IFT2,PT,MOT,KT,NCSY,
     &                                                          IREJ)

c***********************************************************************
c Dump diffractive chains into DTEVT1                                  *
c This version dated 12.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,OHALF=0.5D0,ONE=1.0D0)

      LOGICAL LCHK

c kinematics of diffractive interactions (DTUNUC 1.x)
      COMMON /DTDIKI/ XPH(2),XPPO(2),XTH(2),XTPO(2),PPOM(4),PSC(4),
     &                PPF(4),PTF(4),
     &                PPLM1(4),PPLM2(4),PTLM1(4),PTLM2(4),
     &                IDPR,IDXPR,IDTR,IDXTR,IFPPO(2),IFTPO(2)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC


      DIMENSION PP1(4),PP2(4),PT1(4),PT2(4),PCH(4),PP(4),PT(4),
     &          P1(4),P2(4),P3(4),P4(4)

      IREJ = 0

      IF (KP.EQ.1) THEN
         DO 1 K=1,4
            PCH(K) = PPLM1(K)+PPLM2(K)
    1    CONTINUE
         ID1 = IFP1
         ID2 = IFP2
         IF (DT_RNDM(PT).GT.OHALF) THEN
            ID1 = IFP2
            ID2 = IFP1
         ENDIF
         CALL DT_EVTPUT(21,ID1,MOP,0,PPLM1(1),PPLM1(2),PPLM1(3),
     &                                        PPLM1(4),0,0,0)
         CALL DT_EVTPUT(21,ID2,MOP,0,PPLM2(1),PPLM2(2),PPLM2(3),
     &                                        PPLM2(4),0,0,0)
         CALL DT_EVTPUT(281,88888,-2,-1,PCH(1),PCH(2),PCH(3),PCH(4),
     &                                              IDPR,IDXPR,8)
      ELSEIF (KP.EQ.2) THEN
         DO 2 K=1,4
            PP1(K) = XPH(1)*PP(K)
            PP2(K) = XPH(2)*PP(K)
            PT1(K) = -XPPO(1)*PPOM(K)
            PT2(K) = -XPPO(2)*PPOM(K)
    2    CONTINUE
         CALL  DT_CHKCSY(IFP1,IFPPO(1),LCHK)
         XM1 = ZERO
         XM2 = ZERO
         IF (LCHK) THEN
            CALL DT_MASHEL(PP1,PT1,XM1,XM2,P1,P2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            CALL DT_MASHEL(PP2,PT2,XM1,XM2,P3,P4,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            DO 3 K=1,4
               PP1(K) = P1(K)
               PT1(K) = P2(K)
               PP2(K) = P3(K)
               PT2(K) = P4(K)
    3       CONTINUE
            CALL DT_EVTPUT(-21,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                       0,0,8)
            CALL DT_EVTPUT(-41,IFPPO(1),MOT,0,PT1(1),PT1(2),PT1(3),
     &                                             PT1(4),0,0,8)
            CALL DT_EVTPUT(-21,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                       0,0,8)
            CALL DT_EVTPUT(-41,IFPPO(2),MOT,0,PT2(1),PT2(2),PT2(3),
     &                                             PT2(4),0,0,8)
         ELSE
            CALL DT_MASHEL(PP1,PT2,XM1,XM2,P1,P2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            CALL DT_MASHEL(PP2,PT1,XM1,XM2,P3,P4,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            DO 4 K=1,4
               PP1(K) = P1(K)
               PT2(K) = P2(K)
               PP2(K) = P3(K)
               PT1(K) = P4(K)
    4       CONTINUE
            CALL DT_EVTPUT(-21,IFP1,MOP,0,PP1(1),PP1(2),PP1(3),PP1(4),
     &                                                       0,0,8)
            CALL DT_EVTPUT(-41,IFPPO(2),MOT,0,PT2(1),PT2(2),PT2(3),
     &                                                PT2(4),0,0,8)
            CALL DT_EVTPUT(-21,IFP2,MOP,0,PP2(1),PP2(2),PP2(3),PP2(4),
     &                                                       0,0,8)
            CALL DT_EVTPUT(-41,IFPPO(1),MOT,0,PT1(1),PT1(2),PT1(3),
     &                                                PT1(4),0,0,8)
         ENDIF
         NCSY = NCSY+1
      ELSE
         CALL DT_EVTPUT(1,IDHKK(MOP),MOP,0,PSC(1),PSC(2),PSC(3),PSC(4),
     &                                                        0,0,0)
      ENDIF

      IF (KT.EQ.1) THEN
         DO 5 K=1,4
            PCH(K) = PTLM1(K)+PTLM2(K)
    5    CONTINUE
         ID1 = IFT1
         ID2 = IFT2
         IF (DT_RNDM(PT).GT.OHALF) THEN
            ID1 = IFT2
            ID2 = IFT1
         ENDIF
         CALL DT_EVTPUT(22,ID1,MOT,0,PTLM1(1),PTLM1(2),PTLM1(3),
     &                                              PTLM1(4),0,0,0)
         CALL DT_EVTPUT(22,ID2,MOT,0,PTLM2(1),PTLM2(2),PTLM2(3),
     &                                              PTLM2(4),0,0,0)
         CALL DT_EVTPUT(281,88888,-2,-1,PCH(1),PCH(2),PCH(3),PCH(4),
     &                                              IDTR,IDXTR,8)
      ELSEIF (KT.EQ.2) THEN
         DO 6 K=1,4
            PP1(K) = XTPO(1)*PPOM(K)
            PP2(K) = XTPO(2)*PPOM(K)
            PT1(K) = XTH(2)*PT(K)
            PT2(K) = XTH(1)*PT(K)
    6    CONTINUE
         CALL  DT_CHKCSY(IFTPO(1),IFT1,LCHK)
         XM1 = ZERO
         XM2 = ZERO
         IF (LCHK) THEN
            CALL DT_MASHEL(PP1,PT1,XM1,XM2,P1,P2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            CALL DT_MASHEL(PP2,PT2,XM1,XM2,P3,P4,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            DO 7 K=1,4
               PP1(K) = P1(K)
               PT1(K) = P2(K)
               PP2(K) = P3(K)
               PT2(K) = P4(K)
    7       CONTINUE
            CALL DT_EVTPUT(-41,IFTPO(1),MOP,0,PP1(1),PP1(2),PP1(3),
     &                                                PP1(4),0,0,8)
            CALL DT_EVTPUT(-21,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                       0,0,8)
            CALL DT_EVTPUT(-41,IFTPO(2),MOP,0,PP2(1),PP2(2),PP2(3),
     &                                                PP2(4),0,0,8)
            CALL DT_EVTPUT(-21,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                       0,0,8)
         ELSE
            CALL DT_MASHEL(PP1,PT2,XM1,XM2,P1,P2,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            CALL DT_MASHEL(PP2,PT1,XM1,XM2,P3,P4,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            DO 8 K=1,4
               PP1(K) = P1(K)
               PT2(K) = P2(K)
               PP2(K) = P3(K)
               PT1(K) = P4(K)
    8       CONTINUE
            CALL DT_EVTPUT(-41,IFTPO(1),MOP,0,PP1(1),PP1(2),PP1(3),
     &                                                PP1(4),0,0,8)
            CALL DT_EVTPUT(-21,IFT2,MOT,0,PT2(1),PT2(2),PT2(3),PT2(4),
     &                                                       0,0,8)
            CALL DT_EVTPUT(-41,IFTPO(2),MOP,0,PP2(1),PP2(2),PP2(3),
     &                                                PP2(4),0,0,8)
            CALL DT_EVTPUT(-21,IFT1,MOT,0,PT1(1),PT1(2),PT1(3),PT1(4),
     &                                                       0,0,8)
         ENDIF
         NCSY = NCSY+1
      ELSE
         CALL DT_EVTPUT(1,IDHKK(MOT),MOT,0,PSC(1),PSC(2),PSC(3),PSC(4),
     &                                                        0,0,0)
      ENDIF

      RETURN

 9999 CONTINUE
      IRDIFF(2) = IRDIFF(2)+1
      IREJ      = 1
      RETURN
      END
c
c===evtfrg=============================================================*
c
CDECK  ID>, DT_EVTFRG
      SUBROUTINE DT_EVTFRG(KMODE,NFRG,NPYMEM,IREJ)

c***********************************************************************
c Hadronization of chains in DTEVT1.                                   *
c                                                                      *
c Input:                                                               *
c   KMODE = 1   hadronization of PHOJET-chains (id=77xxx)              *
c         = 2   hadronization of DTUNUC-chains (id=88xxx)              *
c   NFRG  if KMODE = 1 : upper index of PHOJET-scatterings to be       *
c                        hadronized with one PYEXEC call               *
c         if KMODE = 2 : max. number of DTUNUC-chains to be hadronized *
c                        with one PYEXEC call                          *
c Output:                                                              *
c   NPYMEM      number of entries in JETSET-common after hadronization *
c   IREJ        rejection flag                                         *
c                                                                      *
c This version dated 17.09.00 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY3=1.0D-3,TINY1=1.0D-1)
      PARAMETER (ONE=1.0D0,ZERO=0.0D0)

      LOGICAL LACCEP

      PARAMETER (MXJOIN=200)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c flags for diffractive interactions (DTUNUC 1.x)
      COMMON /DTFLG3/ ISINGD,IDOUBD,IFLAGD,IDIFF

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c phojet
C  model switches and parameters
      CHARACTER*8 MDLNA
      INTEGER ISWMDL,IPAMDL
      DOUBLE PRECISION PARMDL
      COMMON /POMDLS/ MDLNA(50),ISWMDL(50),PARMDL(400),IPAMDL(400)

c jetset

      COMMON/PYDAT1/MSTU(200),PARU(200),MSTJ(200),PARJ(200)



      PARAMETER (MAXLND=4000)
      COMMON/PYJETS/N,NPAD,K(MAXLND,5),P(MAXLND,5),V(MAXLND,5)



      INTEGER PYK

      DIMENSION IJOIN(MXJOIN),ISJOIN(MXJOIN),IHISMO(8000),IFLG(4000)

      MODE = KMODE
      ISTSTG = 7
      IF (MODE.NE.1) ISTSTG = 8
      IREJ = 0

      IP     = 0
      ISH    = 0
      INIEMC = 1
      NEND   = NHKK
      NACCEP = 0
      IFRG   = 0
      IF (NPOINT(4).LE.NPOINT(3)) NPOINT(4) = NHKK+1
      DO 10 I=NPOINT(3),NEND
c sr 14.02.00: seems to be not necessary anymore, commented
C        LACCEP = ((NOBAM(I).EQ.0).AND.(MODE.EQ.1)).OR.
C    &            ((NOBAM(I).NE.0).AND.(MODE.EQ.2))
         LACCEP = .TRUE.
c pick up chains from dtevt1
         IDCHK = IDHKK(I)/10000
         IF ((IDCHK.EQ.ISTSTG).AND.LACCEP) THEN
            IF (IDCHK.EQ.7) THEN
               IPJE = IDHKK(I)-IDCHK*10000
               IF (IPJE.NE.IFRG) THEN
                  IFRG = IPJE
                  IF (IFRG.GT.NFRG) GOTO 16
               ENDIF
            ELSE
               IPJE = 1
               IFRG = IFRG+1
               IF (IFRG.GT.NFRG) THEN
                  NFRG = -1
                  GOTO 16
               ENDIF
            ENDIF
c   statistics counter
c           IF (IDCH(I).LE.8)
c    &         ICCHAI(2,IDCH(I)) = ICCHAI(2,IDCH(I))+1
c           IF (IDRES(I).NE.0) ICRES(IDCH(I)) = ICRES(IDCH(I))+1
c special treatment for small chains already corrected to hadrons
            IF (IDRES(I).NE.0) THEN
               IF (IDRES(I).EQ.11) THEN
                  ID = IDXRES(I)
               ELSE
                  ID = IDT_IPDGHA(IDXRES(I))
               ENDIF
               IF (LEMCCK) THEN
                  CALL DT_EVTEMC(PHKK(1,I),PHKK(2,I),PHKK(3,I),
     &                              PHKK(4,I),INIEMC,IDUM,IDUM)
                  INIEMC = 2
               ENDIF
               IP = IP+1
               IF (IP.GT.MSTU(4)) STOP ' NEWFRA 1: IP.GT.MSTU(4) !'
               P(IP,1) = PHKK(1,I)
               P(IP,2) = PHKK(2,I)
               P(IP,3) = PHKK(3,I)
               P(IP,4) = PHKK(4,I)
               P(IP,5) = PHKK(5,I)
               K(IP,1) = 1
               K(IP,2) = ID
               K(IP,3) = 0
               K(IP,4) = 0
               K(IP,5) = 0
               IHIST(2,I) = 10000*IPJE+IP
               IF (IHIST(1,I).LE.-100) THEN
                  ISH = ISH+1
                  IF (ISH.GT.MXJOIN) STOP 'ISH > MXJOIN !'
                  ISJOIN(ISH) = I
               ENDIF
               N = IP
               IHISMO(IP) = I
            ELSE
               IJ  = 0
               DO 11 KK=JMOHKK(1,I),JMOHKK(2,I)
                  IF (LEMCCK) THEN
                     CALL DT_EVTEMC(PHKK(1,KK),PHKK(2,KK),PHKK(3,KK),
     &                                   PHKK(4,KK),INIEMC,IDUM,IDUM)
                     CALL DT_EVTFLC(IDHKK(KK),1,INIEMC,IDUM,IDUM)
                     INIEMC = 2
                  ENDIF
                  ID = IDHKK(KK)
                  IF (ID.EQ.0) ID = 21
c                  PTOT = SQRT(PHKK(1,KK)**2+PHKK(2,KK)**2+PHKK(3,KK)**2)
c                  AM0  = SQRT(ABS((PHKK(4,KK)-PTOT)*(PHKK(4,KK)+PTOT)))

c                  AMRQ   = PYMASS(ID)

c                  AMDIF2 = (AM0-AMRQ)*(AM0+AMRQ)
c                  IF ((ABS(AMDIF2).GT.TINY3).AND.(PTOT.GT.ZERO).AND.
c     &                (ABS(IDIFF).EQ.0)) THEN
cC                    WRITE(LOUT,*)'here: ',NEVHKK,AM0,AMRQ
c                     DELTA      = -AMDIF2/(2.0D0*(PHKK(4,KK)+PTOT))
c                     PHKK(4,KK) = PHKK(4,KK)+DELTA
c                     PTOT1      = PTOT-DELTA
c                     PHKK(1,KK) = PHKK(1,KK)*PTOT1/PTOT
c                     PHKK(2,KK) = PHKK(2,KK)*PTOT1/PTOT
c                     PHKK(3,KK) = PHKK(3,KK)*PTOT1/PTOT
c                     PHKK(5,KK) = AMRQ
c                  ENDIF
                  IP = IP+1
                  IF (IP.GT.MSTU(4)) STOP ' NEWFRA 2: IP.GT.MSTU(4) !'
                  P(IP,1) = PHKK(1,KK)
                  P(IP,2) = PHKK(2,KK)
                  P(IP,3) = PHKK(3,KK)
                  P(IP,4) = PHKK(4,KK)
                  P(IP,5) = PHKK(5,KK)
                  K(IP,1) = 1
                  K(IP,2) = ID
                  K(IP,3) = 0
                  K(IP,4) = 0
                  K(IP,5) = 0
                  IHIST(2,KK) = 10000*IPJE+IP
                  IF (IHIST(1,KK).LE.-100) THEN
                     ISH = ISH+1
                     IF (ISH.GT.MXJOIN) STOP 'ISH > MXJOIN !'
                     ISJOIN(ISH) = KK
                  ENDIF
                  IJ = IJ+1
                  IF (IJ.GT.MXJOIN) STOP 'IJ > MXJOIN !'
                  IJOIN(IJ)  = IP
                  IHISMO(IP) = I
   11          CONTINUE
               N = IP
c join the two-parton system

               CALL PYJOIN(IJ,IJOIN)

            ENDIF
            IDHKK(I) = 99999
         ENDIF
   10 CONTINUE
   16 CONTINUE
      N = IP

      IF (IP.GT.0) THEN

c final state parton shower
         DO 136 NPJE=1,IPJE
            IF ((MCGENE.EQ.2).AND.(ISH.GE.2)) THEN
               IF ((ISWMDL(8).EQ.1).OR.(ISWMDL(8).EQ.3)) THEN
                  DO 130 K1=1,ISH
                     IF (ISJOIN(K1).EQ.0) GOTO 130
                     I = ISJOIN(K1)
                     IF ((IPAMDL(102).EQ.1).AND.(IHIST(1,I).NE.-100))
     &                                                       GOTO 130
                     IH1 = IHIST(2,I)/10000
                     IF (IH1.NE.NPJE) GOTO 130
                     IH1 = IHIST(2,I)-IH1*10000
                     DO 135 K2=K1+1,ISH
                        IF (ISJOIN(K2).EQ.0) GOTO 135
                        II = ISJOIN(K2)
                        IH2 = IHIST(2,II)/10000
                        IF (IH2.NE.NPJE) GOTO 135
                        IH2 = IHIST(2,II)-IH2*10000
                        IF (IHIST(1,I).EQ.IHIST(1,II)) THEN
                           PT1 = SQRT(PHKK(1,II)**2+PHKK(2,II)**2)
                           PT2 = SQRT(PHKK(1, I)**2+PHKK(2, I)**2)

                           RQLUN = MIN(PT1,PT2)
                           CALL PYSHOW(IH1,IH2,RQLUN)

                           ISJOIN(K1) = 0
                           ISJOIN(K2) = 0
                           GOTO 130
                        ENDIF
 135                 CONTINUE
 130              CONTINUE
               ENDIF
            ENDIF
 136     CONTINUE

         CALL DT_INITJS(MODE)
c hadronization

         CALL PYEXEC

         IF (MSTU(24).NE.0) THEN
            WRITE(ErrorOut,*) ' JETSET-reject at event',
     &                    NEVHKK,MSTU(24),KMODE
C           CALL DT_EVTOUT(4)

C           CALL PYLIST(2)

            GOTO 9999
         ENDIF

c   number of entries in LUJETS

         NLINES = PYK(0,1)

         NPYMEM = NLINES

         DO 12 I=1,NLINES
            IFLG(I) = 0
   12    CONTINUE

         DO 13 II=1,NLINES

            IF ((PYK(II,7).EQ.1).AND.(IFLG(II).NE.1)) THEN

c  pick up mother resonance if possible and put it together with
c  their decay-products into the common
               IDXMOR = K(II,3)
               IF ((IDXMOR.GE.1).AND.(IDXMOR.LE.MAXLND)) THEN
                  KFMOR = K(IDXMOR,2)
                  ISMOR = K(IDXMOR,1)
               ELSE
                  KFMOR = 91
                  ISMOR = 1
               ENDIF
               IF ((KFMOR.NE.91).AND.(KFMOR.NE.92).AND.
     &             (KFMOR.NE.94).AND.(ISMOR.EQ.11)) THEN
                  ID = K(IDXMOR,2)

                  MO = IHISMO(PYK(IDXMOR,15))
                  PX = PYP(IDXMOR,1)
                  PY = PYP(IDXMOR,2)
                  PZ = PYP(IDXMOR,3)
                  PE = PYP(IDXMOR,4)

                  CALL DT_EVTPUT(2,ID,MO,0,PX,PY,PZ,PE,0,0,0)
                  IFLG(IDXMOR) = 1
                  MO = NHKK
                  DO 15 JDAUG=K(IDXMOR,4),K(IDXMOR,5)

                     IF (PYK(JDAUG,7).EQ.1) THEN
                        ID = PYK(JDAUG,8)
                        PX = PYP(JDAUG,1)
                        PY = PYP(JDAUG,2)
                        PZ = PYP(JDAUG,3)
                        PE = PYP(JDAUG,4)

                        CALL DT_EVTPUT(1,ID,MO,0,PX,PY,PZ,PE,0,0,0)
                        IF (LEMCCK) THEN

                           PX = -PYP(JDAUG,1)
                           PY = -PYP(JDAUG,2)
                           PZ = -PYP(JDAUG,3)
                           PE = -PYP(JDAUG,4)

                           CALL DT_EVTEMC(PX,PY,PZ,PE,2,IDUM,IDUM)
                        ENDIF
                        IFLG(JDAUG) = 1
                     ENDIF
   15             CONTINUE
               ELSE
c  there was no mother resonance

                  MO = IHISMO(PYK(II,15))
                  ID = PYK(II,8)
                  PX = PYP(II,1)
                  PY = PYP(II,2)
                  PZ = PYP(II,3)
                  PE = PYP(II,4)

                  CALL DT_EVTPUT(1,ID,MO,0,PX,PY,PZ,PE,0,0,0)
                  IF (LEMCCK) THEN

                     PX = -PYP(II,1)
                     PY = -PYP(II,2)
                     PZ = -PYP(II,3)
                     PE = -PYP(II,4)

                     CALL DT_EVTEMC(PX,PY,PZ,PE,2,IDUM,IDUM)
                  ENDIF
               ENDIF
            ENDIF
   13    CONTINUE
         IF (LEMCCK) THEN
            CHKLEV = TINY1
            CALL DT_EVTEMC(DUM,DUM,DUM,CHKLEV,-1,6,IREJ1)
C           IF (IREJ1.NE.0) CALL DT_EVTOUT(4)
         ENDIF

c global energy-momentum & flavor conservation check
c*sr 16.5. this check is skipped in case of phojet-treatment
         IF (MCGENE.EQ.1)
     &      CALL DT_EMC2(9,10,0,0,0,3,1,0,0,0,0,3,4,12,IREJ3)

c update statistics-counter for diffraction
c        IF (IFLAGD.NE.0) THEN
c           ICDIFF(1) = ICDIFF(1)+1
c           IF (IFLAGD.EQ. 1) ICDIFF(2) = ICDIFF(2)+1
c           IF (IFLAGD.EQ. 2) ICDIFF(3) = ICDIFF(3)+1
c           IF (IFLAGD.EQ.-1) ICDIFF(4) = ICDIFF(4)+1
c           IF (IFLAGD.EQ.-2) ICDIFF(5) = ICDIFF(5)+1
c        ENDIF

      ENDIF

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===decay==============================================================*
c
CDECK  ID>, DT_DECAYS
      SUBROUTINE DT_DECAYS(PIN,IDXIN,POUT,IDXOUT,NSEC,IREJ)

c***********************************************************************
c Resonance-decay.                                                     *
c This subroutine replaces DDECAY/DECHKK.                              *
c             PIN(4)      4-momentum of resonance          (input)     *
c             IDXIN       BAMJET-index of resonance        (input)     *
c             POUT(20,4)  4-momenta of decay-products      (output)    *
c             IDXOUT(20)  BAMJET-indices of decay-products (output)    *
c             NSEC        number of secondaries            (output)    *
c Adopted from the original version DECHKK.                            *
c This version dated 09.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY17=1.0D-17)

c HADRIN: decay channel information
      PARAMETER (IDMAX9=602)
      CHARACTER*8 ZKNAME
      COMMON /HNDECH/ ZKNAME(IDMAX9),WT(IDMAX9),NZK(IDMAX9,3)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME


      DIMENSION PIN(4),PI(20,4),POUT(20,4),IDXOUT(20),
     &          EF(3),PF(3),PFF(3),IDXSTK(20),IDX(3),
     &          CODF(3),COFF(3),SIFF(3),DCOS(3),DCOSF(3)

c ISTAB = 1 strong and weak decays
c       = 2 strong decays only
c       = 3 strong decays, weak decays for charmed particles and tau
c           leptons only
      DATA ISTAB /2/

      IREJ = 0
      NSEC = 0
c put initial resonance to stack
      NSTK = 1
      IDXSTK(NSTK) = IDXIN
      DO 5 I=1,4
         PI(NSTK,I) = PIN(I)
    5 CONTINUE

c store initial configuration for energy-momentum cons. check
      IF (LEMCCK) CALL DT_EVTEMC(PI(NSTK,1),PI(NSTK,2),PI(NSTK,3),
     &                                   PI(NSTK,4),1,IDUM,IDUM)

  100 CONTINUE
c get particle from stack
      IDXI = IDXSTK(NSTK)
c skip stable particles
      IF (ISTAB.EQ.1) THEN
         IF ((IDXI.EQ.135).OR. (IDXI.EQ.136)) GOTO 10
         IF ((IDXI.GE.  1).AND.(IDXI.LE.  7)) GOTO 10
      ELSEIF (ISTAB.EQ.2) THEN
         IF ((IDXI.GE.  1).AND.(IDXI.LE. 30)) GOTO 10
         IF ((IDXI.GE. 97).AND.(IDXI.LE.103)) GOTO 10
         IF ((IDXI.GE.115).AND.(IDXI.LE.122)) GOTO 10
         IF ((IDXI.GE.131).AND.(IDXI.LE.136)) GOTO 10
         IF ( IDXI.EQ.109)                    GOTO 10
         IF ((IDXI.GE.137).AND.(IDXI.LE.160)) GOTO 10
      ELSEIF (ISTAB.EQ.3) THEN
         IF ((IDXI.GE.  1).AND.(IDXI.LE. 23)) GOTO 10
         IF ((IDXI.GE. 97).AND.(IDXI.LE.103)) GOTO 10
         IF ((IDXI.GE.109).AND.(IDXI.LE.115)) GOTO 10
         IF ((IDXI.GE.133).AND.(IDXI.LE.136)) GOTO 10
      ENDIF

c calculate direction cosines and Lorentz-parameter of decaying part.
      PTOT = SQRT(PI(NSTK,1)**2+PI(NSTK,2)**2+PI(NSTK,3)**2)
      PTOT = MAX(PTOT,TINY17)
      DO 1 I=1,3
         DCOS(I) = PI(NSTK,I)/PTOT
    1 CONTINUE
      GAM  = PI(NSTK,4)/AAM(IDXI)
      BGAM = PTOT/AAM(IDXI)

c get decay-channel
      KCHAN = K1(IDXI)-1
    2 CONTINUE
      KCHAN = KCHAN+1
      IF ((DT_RNDM(GAM)-TINY17).GT.WT(KCHAN)) GOTO 2

c identities of secondaries
      IDX(1) = NZK(KCHAN,1)
      IDX(2) = NZK(KCHAN,2)
      IF (IDX(2).LT.1) GOTO 9999
      IDX(3) = NZK(KCHAN,3)

c handle decay in rest system of decaying particle
      IF (IDX(3).EQ.0) THEN
c   two-particle decay
         NDEC = 2
         CALL DT_DTWOPD(AAM(IDXI),EF(1),EF(2),PF(1),PF(2),
     &               CODF(1),COFF(1),SIFF(1),CODF(2),COFF(2),SIFF(2),
     &               AAM(IDX(1)),AAM(IDX(2)))
      ELSE
c   three-particle decay
         NDEC = 3
         CALL DT_DTHREP(AAM(IDXI),EF(1),EF(2),EF(3),PF(1),PF(2),PF(3),
     &               CODF(1),COFF(1),SIFF(1),CODF(2),COFF(2),SIFF(2),
     &               CODF(3),COFF(3),SIFF(3),
     &               AAM(IDX(1)),AAM(IDX(2)),AAM(IDX(3)))
      ENDIF
      NSTK = NSTK-1

c transform decay products back
      DO 3 I=1,NDEC
         NSTK = NSTK+1
         CALL DT_DTRAFO(GAM,BGAM,DCOS(1),DCOS(2),DCOS(3),
     &               CODF(I),COFF(I),SIFF(I),PF(I),EF(I),
     &               PFF(I),DCOSF(1),DCOSF(2),DCOSF(3),PI(NSTK,4))
c add particle to stack
         IDXSTK(NSTK) = IDX(I)
         DO 4 J=1,3
            PI(NSTK,J) = DCOSF(J)*PFF(I)
    4    CONTINUE
    3 CONTINUE
      GOTO 100

   10 CONTINUE
c stable particle, put to output-arrays
      NSEC = NSEC+1
      DO 6 I=1,4
         POUT(NSEC,I) = PI(NSTK,I)
    6 CONTINUE
      IDXOUT(NSEC) = IDXSTK(NSTK)
c store secondaries for energy-momentum conservation check
      IF (LEMCCK)
     &CALL DT_EVTEMC(-POUT(NSEC,1),-POUT(NSEC,2),-POUT(NSEC,3),
     &            -POUT(NSEC,4),2,IDUM,IDUM)
      NSTK = NSTK-1
      IF (NSTK.GT.0) GOTO 100

c check energy-momentum conservation
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(DUM,DUM,DUM,DUM,3,5,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
      ENDIF

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===decay1=============================================================*
c
CDECK  ID>, DT_DECAY1
      SUBROUTINE DT_DECAY1

c***********************************************************************
c Decay of resonances stored in DTEVT1.                                *
c This version dated 20.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)


      DIMENSION PIN(4),POUT(20,4),IDXOUT(20)

      NEND = NHKK
C     DO 1 I=NPOINT(5),NEND
      DO 1 I=NPOINT(4),NEND
         IF (ABS(ISTHKK(I)).EQ.1) THEN
            DO 2 K=1,4
               PIN(K) = PHKK(K,I)
    2       CONTINUE
            IDXIN = IDBAM(I)
            CALL DT_DECAYS(PIN,IDXIN,POUT,IDXOUT,NSEC,IREJ)
            IF (NSEC.GT.1) THEN
               DO 3 N=1,NSEC
                  IDHAD = IDT_IPDGHA(IDXOUT(N))
                  CALL DT_EVTPUT(1,IDHAD,I,0,POUT(N,1),POUT(N,2),
     &                               POUT(N,3),POUT(N,4),0,0,0)
    3          CONTINUE
            ENDIF
         ENDIF
    1 CONTINUE

      RETURN
      END
c
c===decpi0=============================================================*
c
CDECK  ID>, DT_DECPI0
      SUBROUTINE DT_DECPI0

c***********************************************************************
c Decay of pi0 handled with JETSET.                                    *
c This version dated 18.02.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY3=1.0D-3,ONE=1.0D0,ZERO=0.0D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)


      COMMON/PYDAT3/MDCY(500,3),MDME(4000,2),BRAT(4000),KFDP(4000,5)



      COMMON/PYDAT1/MSTU(200),PARU(200),MSTJ(200),PARJ(200)



      PARAMETER (MAXLND=4000)
      COMMON/PYJETS/N,NPAD,K(MAXLND,5),P(MAXLND,5),V(MAXLND,5)


c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME



      INTEGER PYCOMP,PYK


      DIMENSION IHISMO(NMXHKK),P1(4)

      TWOPI = 2.0D0*ATAN2(0.0D0,-1.0D0)

      CALL DT_INITJS(2)
c allow pi0 decay

      KC = PYCOMP(111)

      MDCY(KC,1) = 1

      NN  = 0
      INI = 0
      DO 1 I=1,NHKK
         IF ((ISTHKK(I).EQ.1).AND.(IDHKK(I).EQ.111)) THEN
            IF (INI.EQ.0) THEN
               INI = 1
            ELSE
               INI = 2
            ENDIF
            IF (LEMCCK) CALL DT_EVTEMC(PHKK(1,I),PHKK(2,I),PHKK(3,I),
     &                                    PHKK(4,I),INI,IDUM,IDUM)
            PT    = SQRT(PHKK(1,I)**2+PHKK(2,I)**2)
            PTOT  = SQRT(PT**2+PHKK(3,I)**2)
            COSTH = PHKK(3,I)/(PTOT+TINY10)
            IF (COSTH.GT.ONE) THEN
               THETA = ZERO
            ELSEIF (COSTH.LT.-ONE) THEN
               THETA = TWOPI/2.0D0
            ELSE
               THETA = ACOS(COSTH)
            ENDIF
            PHI     = ASIN(PHKK(2,I)/(PT  +TINY10))
            IF (PHKK(1,I).LT.0.0D0)

     &         PHI  = SIGN(TWOPI/2.0D0-ABS(PHI),PHI)

            ENER    = PHKK(4,I)
            NN      = NN+1
            KTEMP   = MSTU(10)
            MSTU(10)= 1
            P(NN,5) = PHKK(5,I)

            CALL PY1ENT(NN,111,ENER,THETA,PHI)

            MSTU(10)  = KTEMP
            IHISMO(NN)= I
         ENDIF
    1 CONTINUE
      IF (NN.GT.0) THEN

         CALL PYEXEC


         NLINES = PYK(0,1)

         DO 2 II=1,NLINES

            IF (PYK(II,7).EQ.1) THEN

               DO 3 KK=1,4

                  P1(KK) = PYP(II,KK)

    3          CONTINUE

               ID = PYK(II,8)
               MO = IHISMO(PYK(II,15))

               CALL DT_EVTPUT(1,ID,MO,0,P1(1),P1(2),P1(3),P1(4),0,0,0)
               IF (LEMCCK)
     &            CALL DT_EVTEMC(-P1(1),-P1(2),-P1(3),-P1(4),2,
     &                                            IDUM,IDUM)
csr: flag with neg. sign (for HELIOS p/A-W jobs)
               ISTHKK(MO) = -2
            ENDIF
    2    CONTINUE
         IF (LEMCCK) CALL DT_EVTEMC(DUM,DUM,DUM,DUM,4,7000,IREJ1)
      ENDIF
      MDCY(KC,1) = 0

      RETURN
      END
c
c===dtwopd=============================================================*
c
CDECK  ID>, DT_DTWOPD
      SUBROUTINE DT_DTWOPD(UMO,ECM1,ECM2,PCM1,PCM2,COD1,COF1,SIF1,COD2,
     &                                            COF2,SIF2,AM1,AM2)

c***********************************************************************
c Two-particle decay.                                                  *
c  UMO                 cm-energy of the decaying system       (input)  *
c  AM1/AM2             masses of the decay products           (input)  *
c  ECM1,ECM2/PCM1,PCM2 cm-energies/momenta of the decay prod. (output) *
c  COD,COF,SIF         direction cosines of the decay prod.   (output) *
c Revised by S. Roesler, 20.11.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0,ZERO=0.0D0)

      IF (UMO.LT.(AM1+AM2)) THEN
         WRITE(ErrorOut,1000) UMO,AM1,AM2
 1000    FORMAT(1X,'DTWOPD:    INCONSISTENT KINEMATICS - UMO,AM1,AM2 ',
     &          3E12.3)
         STOP
      ENDIF

      ECM1 = ((UMO-AM2)*(UMO+AM2)+AM1*AM1)/(TWO*UMO)
      ECM2 = UMO-ECM1
      PCM1 = SQRT((ECM1-AM1)*(ECM1+AM1))
      PCM2 = PCM1
      CALL DT_DSFECF(SIF1,COF1)
      COD1 = TWO*DT_RNDM(PCM2)-ONE
      COD2 = -COD1
      COF2 = -COF1
      SIF2 = -SIF1

      RETURN
      END
c
c===dthrep=============================================================*
c
CDECK  ID>, DT_DTHREP
      SUBROUTINE DT_DTHREP(UMO,ECM1,ECM2,ECM3,PCM1,PCM2,PCM3,COD1,COF1,
     &                  SIF1,COD2,COF2,SIF2,COD3,COF3,SIF3,AM1,AM2,AM3)

c***********************************************************************
c Three-particle decay.                                                *
c  UMO                 cm-energy of the decaying system       (input)  *
c  AM1/2/3             masses of the decay products           (input)  *
c  ECM1/2/2,PCM1/2/3   cm-energies/momenta of the decay prod. (output) *
c  COD,COF,SIF         direction cosines of the decay prod.   (output) *
c                                                                      *
c Threpd89: slight revision by A. Ferrari                              *
c Last change on   11-oct-93   by    Alfredo Ferrari, INFN - Milan     *
c Revised by S. Roesler, 20.11.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( PIPIPI = 3.1415926535897932270 D+00 )

      COMMON /HNGAMR/ REDU,AMO,AMM(15)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME


      DIMENSION F(5),XX(5)
      DATA EPS /AZRZRZ/

      UMOO=UMO+UMO
C***S1, S2, S3 ARE THE INVARIANT MASSES OF THE PARTICLES 1, 2, 3
C***J. VON NEUMANN - RANDOM - SELECTION OF S2
C***CALCULATION OF THE MAXIMUM OF THE S2 - DISTRIBUTION
      UUMO=UMO
      AAM1=AM1
      AAM2=AM2
      AAM3=AM3
      GU=(AM2+AM3)**2
      GO=(UMO-AM1)**2
c     UFAK=1.0000000000001D0
c     IF (GU.GT.GO) UFAK=0.9999999999999D0
      IF (GU.GT.GO) THEN
         UFAK=ONEMNS
      ELSE
         UFAK=ONEPLS
      END IF
      OFAK=2.D0-UFAK
      GU=GU*UFAK
      GO=GO*OFAK
      DS2=(GO-GU)/99.D0
      AM11=AM1*AM1
      AM22=AM2*AM2
      AM33=AM3*AM3
      UMO2=UMO*UMO
      RHO2=0.D0
      S22=GU
      DO 124 I=1,100
         S21=S22
         S22=GU+(I-1.D0)*DS2
         RHO1=RHO2
         RHO2=DT_YLAMB(S22,UMO2,AM11)*DT_YLAMB(S22,AM22,AM33)/
     *                                             (S22+EPS)
         IF(RHO2.LT.RHO1) GO TO 125
  124 CONTINUE
  125 S2SUP=(S22-S21)*.5D0+S21
      SUPRHO=DT_YLAMB(S2SUP,UMO2,AM11)*DT_YLAMB(S2SUP,AM22,AM33)/
     *                                           (S2SUP+EPS)
      SUPRHO=SUPRHO*1.05D0
      XO=S21-DS2
      IF (GU.LT.GO.AND.XO.LT.GU) XO=GU
      IF (GU.GT.GO.AND.XO.GT.GU) XO=GU
      XX(1)=XO
      XX(3)=S22
      X1=(XO+S22)*0.5D0
      XX(2)=X1
      F(3)=RHO2
      F(1)=DT_YLAMB(XO,UMO2,AM11)*DT_YLAMB(XO,AM22,AM33)/(XO+EPS)
      F(2)=DT_YLAMB(X1,UMO2,AM11)*DT_YLAMB(X1,AM22,AM33)/(X1+EPS)
      DO 126 I=1,16
         X4=(XX(1)+XX(2))*0.5D0
         X5=(XX(2)+XX(3))*0.5D0
         F(4)=DT_YLAMB(X4,UMO2,AM11)*DT_YLAMB(X4,AM22,AM33)/
     *                                               (X4+EPS)
         F(5)=DT_YLAMB(X5,UMO2,AM11)*DT_YLAMB(X5,AM22,AM33)/
     *                                               (X5+EPS)
         XX(4)=X4
         XX(5)=X5
         DO 128 II=1,5
            IA=II
            DO 128 III=IA,5
               IF (F (II).GE.F (III)) GO TO 128
               FH=F(II)
               F(II)=F(III)
               F(III)=FH
               FH=XX(II)
               XX(II)=XX(III)
               XX(III)=FH
128      CONTINUE
         SUPRHO=F(1)
         S2SUP=XX(1)
         DO 129 II=1,3
            IA=II
            DO 129 III=IA,3
               IF (XX(II).GE.XX(III)) GO TO 129
               FH=F(II)
               F(II)=F(III)
               F(III)=FH
               FH=XX(II)
               XX(II)=XX(III)
               XX(III)=FH
129      CONTINUE
126   CONTINUE
      AM23=(AM2+AM3)**2
      ITH=0
      REDU=2.D0
    1 CONTINUE
      ITH=ITH+1
      IF (ITH.GT.200) REDU=-9.D0
      IF (ITH.GT.200) GO TO 400
      C=DT_RNDM(REDU)
c     S2=AM23+C*((UMO-AM1)**2-AM23)
      S2=AM23+C*(UMO-AM1-AM2-AM3)*(UMO-AM1+AM2+AM3)
      Y=DT_RNDM(S2)
      Y=Y*SUPRHO
      RHO=DT_YLAMB(S2,UMO2,AM11)*DT_YLAMB(S2,AM22,AM33)/S2
      IF(Y.GT.RHO) GO TO 1
C***RANDOM SELECTION OF S3 AND CALCULATION OF S1
      S1=DT_RNDM(S2)
      S1=S1*RHO+AM11+AM22-(S2-UMO2+AM11)*(S2+AM22-AM33)/(2.D0*S2)-
     &RHO*.5D0
      S3=UMO2+AM11+AM22+AM33-S1-S2
      ECM1=(UMO2+AM11-S2)/UMOO
      ECM2=(UMO2+AM22-S3)/UMOO
      ECM3=(UMO2+AM33-S1)/UMOO
      PCM1=SQRT((ECM1+AM1)*(ECM1-AM1))
      PCM2=SQRT((ECM2+AM2)*(ECM2-AM2))
      PCM3=SQRT((ECM3+AM3)*(ECM3-AM3))
      CALL DT_DSFECF(SFE,CFE)
C***TH IS THE ANGLE BETWEEN PARTICLES 1 AND 2
C***TH1, TH2 ARE THE ANGLES BETWEEN PARTICLES 1, 2 AND THE DIRECTION OF
      PCM12 = PCM1 * PCM2
      IF ( PCM12 .LT. ANGLSQ ) GO TO 200
      COSTH=(ECM1*ECM2+0.5D+00*(AM11+AM22-S1))/PCM12
      GO TO 300
 200  CONTINUE
         UW=DT_RNDM(S1)
         COSTH=(UW-0.5D+00)*2.D+00
 300  CONTINUE
c     IF(ABS(COSTH).GT.0.9999999999999999D0)
c    &COSTH=SIGN(0.9999999999999999D0,COSTH)
      IF(ABS(COSTH).GT.ONEONE)
     &COSTH=SIGN(ONEONE,COSTH)
      IF (REDU.LT.1.D+00) RETURN
      COSTH2=(PCM3*PCM3+PCM2*PCM2-PCM1*PCM1)/(2.D+00*PCM2*PCM3)
c     IF(ABS(COSTH2).GT.0.9999999999999999D0)
c    &COSTH2=SIGN(0.9999999999999999D0,COSTH2)
      IF(ABS(COSTH2).GT.ONEONE)
     &COSTH2=SIGN(ONEONE,COSTH2)
      SINTH2=SQRT((ONEONE-COSTH2)*(ONEONE+COSTH2))
      SINTH =SQRT((ONEONE-COSTH)*(ONEONE+COSTH))
      SINTH1=COSTH2*SINTH-COSTH*SINTH2
      COSTH1=COSTH*COSTH2+SINTH2*SINTH
C***RANDOM SELECTION OF THE SPHERICAL COORDINATES OF THE DIRECTION OF PA
C***CFE, SFE ARE COS AND SIN OF THE ROTATION ANGLE OF THE SYSTEM 1, 2 AR
C***THE DIRECTION OF PARTICLE 3
C***CALCULATION OF THE SPHERICAL COORDINATES OF PARTICLES 1, 2
      CX11=-COSTH1
      CY11=SINTH1*CFE
      CZ11=SINTH1*SFE
      CX22=-COSTH2
      CY22=-SINTH2*CFE
      CZ22=-SINTH2*SFE
      CALL DT_DSFECF(SIF3,COF3)
      COD3=TWOTWO*DT_RNDM(CX11)-ONEONE
      SID3=SQRT((1.D+00-COD3)*(1.D+00+COD3))
    2 FORMAT(5F20.15)
      COD1=CX11*COD3+CZ11*SID3
      CHLP=(ONEONE-COD1)*(ONEONE+COD1)
      IF(CHLP.LT.1.D-14)WRITE(ErrorOut,2)COD1,COF3,SID3,
     &CX11,CZ11
      SID1=SQRT(CHLP)
      COF1=(CX11*SID3*COF3-CY11*SIF3-CZ11*COD3*COF3)/SID1
      SIF1=(CX11*SID3*SIF3+CY11*COF3-CZ11*COD3*SIF3)/SID1
      COD2=CX22*COD3+CZ22*SID3
      SID2=SQRT((ONEONE-COD2)*(ONEONE+COD2))
      COF2=(CX22*SID3*COF3-CY22*SIF3-CZ22*COD3*COF3)/SID2
      SIF2=(CX22*SID3*SIF3+CY22*COF3-CZ22*COD3*SIF3)/SID2
 400  CONTINUE
c === Energy conservation check: === *
      EOCHCK = UMO - ECM1 - ECM2 - ECM3
c     SID1 = SQRT ( ( ONEONE - COD1 ) * ( ONEONE + COD1 ) )
c     SID2 = SQRT ( ( ONEONE - COD2 ) * ( ONEONE + COD2 ) )
c     SID3 = SQRT ( ( ONEONE - COD3 ) * ( ONEONE + COD3 ) )
      PZCHCK = PCM1 * COD1 + PCM2 * COD2 + PCM3 * COD3
      PXCHCK = PCM1 * COF1 * SID1 + PCM2 * COF2 * SID2
     &       + PCM3 * COF3 * SID3
      PYCHCK = PCM1 * SIF1 * SID1 + PCM2 * SIF2 * SID2
     &       + PCM3 * SIF3 * SID3
      EOCMPR = 1.D-12 * UMO
      IF ( ABS (EOCHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &     .GT. EOCMPR ) THEN
c*sr 5.5.95 output-unit changed
         IF (IOULEV(1).GT.0) THEN
            WRITE(ErrorOut,*)
     &      ' *** THREPD: ENERGY/MOMENTUM CONSERVATION FAILURE! ***',
     &      EOCHCK,PXCHCK,PYCHCK,PZCHCK
            WRITE(ErrorOut,
     * *)' *** SID1,SID2,SID3',SID1,SID2,SID3
         ENDIF
c*
      END IF
      RETURN
      END
c
c===dbklas=============================================================*
c
CDECK  ID>, DT_DBKLAS
      SUBROUTINE DT_DBKLAS(I,J,K,I8,I10)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c quark-content to particle index conversion (DTUNUC 1.x)
      COMMON /DTQ2ID/ IMPS(6,6),IMVE(6,6),IB08(6,21),IB10(6,21),
     &                IA08(6,21),IA10(6,21)


      IF (I) 20,20,10
c baryons
   10 CONTINUE
      CALL DT_INDEXD(J,K,IND)
      I8  = IB08(I,IND)
      I10 = IB10(I,IND)
      IF (I8.LE.0) I8 = I10
      RETURN
c antibaryons
   20 CONTINUE
      II = IABS(I)
      JJ = IABS(J)
      KK = IABS(K)
      CALL DT_INDEXD(JJ,KK,IND)
      I8  = IA08(II,IND)
      I10 = IA10(II,IND)
      IF (I8.LE.0) I8 = I10

      RETURN
      END
c
c===indexd=============================================================*
c
CDECK  ID>, DT_INDEXD
      SUBROUTINE DT_INDEXD(KA,KB,IND)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      KP = KA*KB
      KS = KA+KB
      IF (KP.EQ.1) IND=1
      IF (KP.EQ.2) IND=2
      IF (KP.EQ.3) IND=3
      IF ((KP.EQ.4).AND.(KS.EQ.5)) IND=4
      IF (KP.EQ.5) IND=5
      IF ((KP.EQ.6).AND.(KS.EQ.7)) IND=6
      IF ((KP.EQ.4).AND.(KS.EQ.4)) IND=7
      IF ((KP.EQ.6).AND.(KS.EQ.5)) IND=8
      IF (KP.EQ.8)  IND=9
      IF (KP.EQ.10) IND=10
      IF ((KP.EQ.12).AND.(KS.EQ.8)) IND=11
      IF (KP.EQ.9)  IND=12
      IF ((KP.EQ.12).AND.(KS.EQ.7)) IND=13
      IF (KP.EQ.15) IND=14
      IF (KP.EQ.18) IND=15
      IF (KP.EQ.16) IND=16
      IF (KP.EQ.20) IND=17
      IF (KP.EQ.24) IND=18
      IF (KP.EQ.25) IND=19
      IF (KP.EQ.30) IND=20
      IF (KP.EQ.36) IND=21

      RETURN
      END
c
c===dchant=============================================================*
c
CDECK  ID>, DT_DCHANT
      SUBROUTINE DT_DCHANT

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ONE=1.0D0,ZERO=0.0D0)

c HADRIN: decay channel information
      PARAMETER (IDMAX9=602)
      CHARACTER*8 ZKNAME
      COMMON /HNDECH/ ZKNAME(IDMAX9),WT(IDMAX9),NZK(IDMAX9,3)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      DIMENSION HWT(IDMAX9)

c change of weights wt from absolut values into the sum of wt of a dec.
      DO 10 J=1,IDMAX9
         HWT(J) = ZERO
   10 CONTINUE
C     DO 999 KKK=1,210
C        WRITE(LOUT,'(A8,F5.2,2E10.3,2I4,2I10)')
C    &      ANAME(KKK),AAM(KKK),GA(KKK),TAU(KKK),IICH(KKK),IIBAR(KKK),
C    &      K1(KKK),K2(KKK)
C 999 CONTINUE
C     STOP
      DO 30 I=1,210
         IK1 = K1(I)
         IK2 = K2(I)
         HV  = ZERO
         DO 20 J=IK1,IK2
            HV     = HV+WT(J)
            HWT(J) = HV
c*sr 13.1.95
            IF (HWT(J).GT.1.0001) WRITE(ErrorOut,
     * 1000) HWT(J),J,I,IK1
 1000       FORMAT(2X,15H ERROR IN HWT =,1F10.5,8H J,I,K1=,3I5)
   20    CONTINUE
   30 CONTINUE
      DO 40 J=1,IDMAX9
         WT(J) = HWT(J)
   40 CONTINUE

      RETURN
      END
c
c===ddatar=============================================================*
c
CDECK  ID>, DT_DDATAR
      SUBROUTINE DT_DDATAR

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ONE=1.0D0,ZERO=0.0D0)

c quark-content to particle index conversion (DTUNUC 1.x)
      COMMON /DTQ2ID/ IMPS(6,6),IMVE(6,6),IB08(6,21),IB10(6,21),
     &                IA08(6,21),IA10(6,21)


      DIMENSION IV(36),IP(36),IB(126),IBB(126),IA(126),IAA(126)

      DATA IV/ 33, 34, 38,123,  0,  0, 32, 33, 39,124,
     &          0,  0, 36, 37, 96,127,  0,  0,126,125,
     &        128,129,14*0/
      DATA IP/ 23, 14, 16,116,  0,  0, 13, 23, 25,117,
     &          0,  0, 15, 24, 31,120,  0,  0,119,118,
     &        121,122,14*0/
      DATA IB/  0,  1, 21,140,  0,  0,  8, 22,137,  0,
     &          0, 97,138,  0,  0,146,  0,  0,  0,  0,
     &          0,  1,  8, 22,137,  0,  0,  0, 20,142,
     &          0,  0, 98,139,  0,  0,147,  0,  0,  0,
     &          0,  0, 21, 22, 97,138,  0,  0, 20, 98,
     &        139,  0,  0,  0,145,  0,  0,148,  0,  0,
     &          0,  0,  0,140,137,138,146,  0,  0,142,
     &        139,147,  0,  0,145,148,           50*0/
      DATA IBB/53, 54,104,161,  0,  0, 55,105,162,  0,
     &          0,107,164,  0,  0,167,  0,  0,  0,  0,
     &          0, 54, 55,105,162,  0,  0, 56,106,163,
     &          0,  0,108,165,  0,  0,168,  0,  0,  0,
     &          0,  0,104,105,107,164,  0,  0,106,108,
     &        165,  0,  0,109,166,  0,  0,169,  0,  0,
     &          0,  0,  0,161,162,164,167,  0,  0,163,
     &        165,168,  0,  0,166,169,  0,  0,170,47*0/
      DATA IA/  0,  2, 99,152,  0,  0,  9,100,149,  0,
     &          0,102,150,  0,  0,158,  0,  0,  0,  0,
     &          0,  2,  9,100,149,  0,  0,  0,101,154,
     &          0,  0,103,151,  0,  0,159,  0,  0,  0,
     &          0,  0, 99,100,102,150,  0,  0,101,103,
     &        151,  0,  0,  0,157,  0,  0,160,  0,  0,
     &          0,  0,  0,152,149,150,158,  0,  0,154,
     &        151,159,  0,  0,157,160,           50*0/
      DATA IAA/67, 68,110,171,  0,  0, 69,111,172,  0,
     &          0,113,174,  0,  0,177,  0,  0,  0,  0,
     &          0, 68, 69,111,172,  0,  0, 70,112,173,
     &          0,  0,114,175,  0,  0,178,  0,  0,  0,
     &          0,  0,110,111,113,174,  0,  0,112,114,
     &        175,  0,  0,115,176,  0,  0,179,  0,  0,
     &          0,  0,  0,171,172,174,177,  0,  0,173,
     &        175,178,  0,  0,176,179,  0,  0,180,47*0/

      L=0
      DO 2 I=1,6
         DO 1 J=1,6
            L = L+1
            IMPS(I,J) = IP(L)
            IMVE(I,J) = IV(L)
    1    CONTINUE
    2 CONTINUE
      L=0
      DO 4 I=1,6
         DO 3 J=1,21
            L = L+1
            IB08(I,J) = IB(L)
            IB10(I,J) = IBB(L)
            IA08(I,J) = IA(L)
            IA10(I,J) = IAA(L)
    3    CONTINUE
    4 CONTINUE
C     A1  = 0.88D0
C     B1  = 3.0D0
C     B2  = 3.0D0
C     B3  = 8.0D0
C     LT  = 0
C     LB  = 0
C     BET = 12.0D0
C     AS  = 0.25D0
C     B8  = 0.33D0
C     AME = 0.95D0
C     DIQ = 0.375D0
C     ISU = 4

      RETURN
      END
c
c===initjs=============================================================*
c
CDECK  ID>, DT_INITJS
      SUBROUTINE DT_INITJS(MODE)

c***********************************************************************
c Initialize JETSET paramters.                                         *
c           MODE = 0 default settings                                  *
c                = 1 PHOJET settings                                   *
c                = 2 DTUNUC settings                                   *
c This version dated 16.02.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ONE=1.0D0,ZERO=0.0D0)

      LOGICAL LFIRST,LFIRDT,LFIRPH


      COMMON/PYDAT1/MSTU(200),PARU(200),MSTJ(200),PARJ(200)



      COMMON/PYDAT3/MDCY(500,3),MDME(4000,2),BRAT(4000),KFDP(4000,5)


c flags for particle decays
      COMMON /DTFRPA/ MSTUX(20),PARUX(20),MSTJX(20),PARJX(20),
     &                IMSTU(20),IPARU(20),IMSTJ(20),IPARJ(20),
     &                NMSTU,NPARU,NMSTJ,NPARJ,PDB,PDBSEA(3),ISIG0,IPI0

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME



      INTEGER PYCOMP


      DIMENSION IDXSTA(40)
      DATA IDXSTA
c          K0s   pi0  lam   alam  sig+  asig+ sig-  asig- tet0  atet0
     &  /  310,  111, 3122,-3122, 3222,-3222, 3112,-3112, 3322,-3322,
c          tet- atet-  om-  aom-   D+    D-    D0    aD0   Ds+   aDs+
     &    3312,-3312, 3334,-3334,  411, -411,  421, -421,  431, -431,
c          etac lamc+alamc+sigc++ sigc+ sigc0asigc++asigc+asigc0 Ksic+
     &     441, 4122,-4122, 4222, 4212, 4112,-4222,-4212,-4112, 4232,
c         Ksic0 aKsic+aKsic0 sig0 asig0
     &    4132,-4232,-4132, 3212,-3212, 5*0/

      DATA LFIRST,LFIRDT,LFIRPH /.TRUE.,.TRUE.,.TRUE./

      IF (LFIRST) THEN
c save default settings
         PDEF1  = PARJ(1)
         PDEF2  = PARJ(2)
         PDEF3  = PARJ(3)
         PDEF5  = PARJ(5)
         PDEF6  = PARJ(6)
         PDEF7  = PARJ(7)
         PDEF18 = PARJ(18)
         PDEF19 = PARJ(19)
         PDEF21 = PARJ(21)
         PDEF42 = PARJ(42)
         MDEF12 = MSTJ(12)
c LUJETS / PYJETS array-dimensions

         MSTU(4) = 4000

c increase maximum number of JETSET-error prints
         MSTU(22) = 50000
c prevent particles decaying
         DO 1 I=1,35
            IF (I.LT.34) THEN

               KC = PYCOMP(IDXSTA(I))

               IF (I.EQ.2) THEN
c  pi0 decay
C                 MDCY(KC,1) = 1
                  MDCY(KC,1) = 0
c*cr mode
C              ELSEIF ((I.EQ.4).OR.(I.EQ. 6).OR.
C   &                 (I.EQ.8).OR.(I.EQ.10)) THEN
C              ELSEIF (I.EQ.4) THEN
C                 MDCY(KC,1) = 1
c*
               ELSE
                  MDCY(KC,1) = 0
               ENDIF
            ELSEIF (((I.EQ.34).OR.(I.EQ.35)).AND.(ISIG0.EQ.0)) THEN

               KC = PYCOMP(IDXSTA(I))

               MDCY(KC,1) = 0
            ENDIF
    1    CONTINUE
c popcorn:
         IF (PDB.LE.ZERO) THEN
c   no popcorn-mechanism
            MSTJ(12) = 1
         ELSE
            MSTJ(12) = 3
            PARJ(5)  = PDB
         ENDIF
c set JETSET-parameter requested by input cards
         IF (NMSTU.GT.0) THEN
            DO 2 I=1,NMSTU
               MSTU(IMSTU(I)) = MSTUX(I)
    2       CONTINUE
         ENDIF
         IF (NMSTJ.GT.0) THEN
            DO 3 I=1,NMSTJ
               MSTJ(IMSTJ(I)) = MSTJX(I)
    3       CONTINUE
         ENDIF
         IF (NPARU.GT.0) THEN
            DO 4 I=1,NPARU
               PARU(IPARU(I)) = PARUX(I)
    4       CONTINUE
         ENDIF
         LFIRST = .FALSE.
      ENDIF
c
c PARJ(1)  suppression of qq-aqaq pair prod. compared to
c          q-aq pair prod.                      (default: 0.1)
c PARJ(2)  strangeness suppression               (default: 0.3)
c PARJ(3)  extra suppression of strange diquarks (default: 0.4)
c PARJ(6)  extra suppression of sas-pair shared by B and
c          aB in BMaB                           (default: 0.5)
c PARJ(7)  extra suppression of strange meson M in BMaB
c          configuration                        (default: 0.5)
c PARJ(18) spin 3/2 baryon suppression           (default: 1.0)
c PARJ(21) width sigma in Gaussian p_x, p_y transverse
c          momentum distrib. for prim. hadrons  (default: 0.35)
c PARJ(42) b-parameter for symmetric Lund-fragmentation
c          function                             (default: 0.9 GeV^-2)
c
c PHOJET settings
      IF (MODE.EQ.1) THEN
c   JETSET default
C        PARJ(1)  = PDEF1
C        PARJ(2)  = PDEF2
C        PARJ(3)  = PDEF3
C        PARJ(6)  = PDEF6
C        PARJ(7)  = PDEF7
C        PARJ(18) = PDEF18
C        PARJ(21) = PDEF21
C        PARJ(42) = PDEF42
c*sr 18.11.98 parameter tuning
C        PARJ(1)  = 0.092D0
C        PARJ(2)  = 0.25D0
C        PARJ(3)  = 0.45D0
C        PARJ(19) = 0.3D0
C        PARJ(21) = 0.45D0
C        PARJ(42) = 1.0D0
c*sr 28.04.99 parameter tuning (May 99 minor modifications)
         PARJ(1)  = 0.085D0
         PARJ(2)  = 0.26D0
         PARJ(3)  = 0.8D0
         PARJ(11) = 0.38D0
         PARJ(18) = 0.3D0
         PARJ(19) = 0.4D0
         PARJ(21) = 0.36D0
         PARJ(41) = 0.3D0
         PARJ(42) = 0.86D0
         IF (NPARJ.GT.0) THEN
            DO 10 I=1,NPARJ
               IF (IPARJ(I).GT.0) PARJ(IPARJ(I)) = PARJX(I)
   10       CONTINUE
         ENDIF
         IF (LFIRPH) THEN
            WRITE(ErrorOut,'(1X,A)')
     &         'DT_INITJS: JETSET-PARAMETER FOR PHOJET'
            CALL DT_JSPARA(0)
            LFIRPH = .FALSE.
         ENDIF
c DTUNUC settings
      ELSEIF (MODE.EQ.2) THEN
         IF (IFRAG(2).EQ.1) THEN
c*sr parameters before 9.3.96
C           PARJ(2)  = 0.27D0
C           PARJ(3)  = 0.6D0
C           PARJ(6)  = 0.75D0
C           PARJ(7)  = 0.75D0
C           PARJ(21) = 0.55D0
C           PARJ(42) = 1.3D0
c*sr 18.11.98 parameter tuning
C           PARJ(1)  = 0.05D0
C           PARJ(2)  = 0.27D0
C           PARJ(3)  = 0.4D0
C           PARJ(19) = 0.2D0
C           PARJ(21) = 0.45D0
C           PARJ(42) = 1.0D0
c*sr 28.04.99 parameter tuning
            PARJ(1)  = 0.11D0
            PARJ(2)  = 0.36D0
            PARJ(3)  = 0.8D0
            PARJ(19) = 0.2D0
            PARJ(21) = 0.3D0
            PARJ(41) = 0.3D0
            PARJ(42) = 0.58D0
            IF (NPARJ.GT.0) THEN
               DO 20 I=1,NPARJ
                  IF (IPARJ(I).LT.0) THEN
                     IDX = ABS(IPARJ(I))
                     PARJ(IDX) = PARJX(I)
                  ENDIF
   20          CONTINUE
            ENDIF
            IF (LFIRDT) THEN
               WRITE(ErrorOut,'(1X,A)')
     &           'DT_INITJS: JETSET-PARAMETER FOR DTUNUC'
               CALL DT_JSPARA(0)
               LFIRDT = .FALSE.
            ENDIF
         ELSEIF (IFRAG(2).EQ.2) THEN
            PARJ(1)  = 0.11D0
            PARJ(2)  = 0.27D0
            PARJ(3)  = 0.3D0
            PARJ(6)  = 0.35D0
            PARJ(7)  = 0.45D0
            PARJ(18) = 0.66D0
C           PARJ(21) = 0.55D0
C           PARJ(42) = 1.0D0
            PARJ(21) = 0.60D0
            PARJ(42) = 1.3D0
         ELSE
            PARJ(1)  = PDEF1
            PARJ(2)  = PDEF2
            PARJ(3)  = PDEF3
            PARJ(6)  = PDEF6
            PARJ(7)  = PDEF7
            PARJ(18) = PDEF18
            PARJ(21) = PDEF21
            PARJ(42) = PDEF42
         ENDIF
      ELSE
         PARJ(1)  = PDEF1
         PARJ(2)  = PDEF2
         PARJ(3)  = PDEF3
         PARJ(5)  = PDEF5
         PARJ(6)  = PDEF6
         PARJ(7)  = PDEF7
         PARJ(18) = PDEF18
         PARJ(19) = PDEF19
         PARJ(21) = PDEF21
         PARJ(42) = PDEF42
         MSTJ(12) = MDEF12
      ENDIF

      RETURN
      END
c
c===jspara=============================================================*
c
CDECK  ID>, DT_JSPARA
      SUBROUTINE DT_JSPARA(MODE)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY3=1.0D-3,TINY1=1.0D-1,
     &           ONE=1.0D0,ZERO=0.0D0)

      LOGICAL LFIRST


      COMMON/PYDAT1/MSTU(200),PARU(200),MSTJ(200),PARJ(200)



      DIMENSION ISTU(200),QARU(200),ISTJ(200),QARJ(200)

      DATA LFIRST /.TRUE./

c save the default JETSET-parameter on the first call
      IF (LFIRST) THEN
         DO 1 I=1,200
            ISTU(I) = MSTU(I)
            QARU(I) = PARU(I)
            ISTJ(I) = MSTJ(I)
            QARJ(I) = PARJ(I)
    1    CONTINUE
         LFIRST = .FALSE.
      ENDIF

      WRITE(ErrorOut,1000)
 1000 FORMAT(1X,'DT_JSPARA: NEW VALUE (DEFAULT VALUE)')

c compare the default JETSET-parameter with the present values
      DO 2 I=1,200
         IF ((MSTU(I).NE.ISTU(I)).AND.(I.NE.31)) THEN
            WRITE(ErrorOut,1002) 'MSTU(',I,MSTU(I),ISTU(I)
C           ISTU(I) = MSTU(I)
         ENDIF
         DIFF = ABS(PARU(I)-QARU(I))
         IF ((DIFF.GE.1.0D-5).AND.(I.NE.21)) THEN
            WRITE(ErrorOut,1001) 'PARU(',I,PARU(I),QARU(I)
C           QARU(I) = PARU(I)
         ENDIF
         IF (MSTJ(I).NE.ISTJ(I)) THEN
            WRITE(ErrorOut,1002) 'MSTJ(',I,MSTJ(I),ISTJ(I)
C           ISTJ(I) = MSTJ(I)
         ENDIF
         DIFF = ABS(PARJ(I)-QARJ(I))
         IF (DIFF.GE.1.0D-5) THEN
            WRITE(ErrorOut,1001) 'PARJ(',I,PARJ(I),QARJ(I)
C           QARJ(I) = PARJ(I)
         ENDIF
    2 CONTINUE
 1001 FORMAT(12X,A5,I3,'): ',F6.3,' (',F6.3,')')
 1002 FORMAT(12X,A5,I3,'): ',I6,' (',I6,')')

      RETURN
      END
c
c===fozoca=============================================================*
c
CDECK  ID>, DT_FOZOCA
      SUBROUTINE DT_FOZOCA(LFZC,IREJ)

c***********************************************************************
c This subroutine treats the complete FOrmation ZOne supressed intra-  *
c nuclear CAscade.                                                     *
c               LFZC = .true.  cascade has been treated                *
c                    = .false. cascade skipped                         *
c This is a completely revised version of the original FOZOKL.         *
c This version dated 18.11.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (DLARGE=1.0D10,OHALF=0.5D0,ZERO=0.0D0)
      PARAMETER (FM2MM=1.0D-12,RNUCLE = 1.12D0)

      LOGICAL LSTART,LCAS,LFZC

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c final state after intranuclear cascade step
      COMMON /DTPAUL/ EWOUND(2,300),NWOUND(2),IDXINC(2000),NOINC

c parameter for intranuclear cascade
      LOGICAL LPAULI
      COMMON /DTFOTI/ TAUFOR,KTAUGE,ITAUVE,INCMOD,LPAULI


      DIMENSION NCWOUN(2)

      DATA LSTART /.TRUE./

      LFZC = .TRUE.
      IREJ = 0

c skip cascade if hadron-hadron interaction or if supressed by user
      IF (((IP.EQ.1).AND.(IT.EQ.1)).OR.(KTAUGE.LT.1)) GOTO 9999
c skip cascade if not all possible chains systems are hadronized
      DO 1 I=1,8
         IF (.NOT.LHADRO(I)) GOTO 9999
    1 CONTINUE

      IF (LSTART) THEN
         WRITE(ErrorOut,1000) KTAUGE,TAUFOR,INCMOD
 1000    FORMAT(/,1X,'FOZOCA:  INTRANUCLEAR CASCADE TREATED FOR A ',
     &          'MAXIMUM OF',I4,' GENERATIONS',/,10X,'FORMATION TIME ',
     &          'PARAMETER:',F5.1,'  FM/C',9X,'MODUS:',I2)
         IF (ITAUVE.EQ.1) WRITE(ErrorOut,1001)
         IF (ITAUVE.EQ.2) WRITE(ErrorOut,1002)
 1001    FORMAT(10X,'P_T DEPENDENT FORMATION ZONE',/)
 1002    FORMAT(10X,'CONSTANT FORMATION ZONE',/)
         LSTART = .FALSE.
      ENDIF

c in order to avoid wasting of cpu-time the DTEVT1-indices of nucleons
c which may interact with final state particles are stored in a seperate
c array - here all proj./target nucleon-indices (just for simplicity)
      NOINC = 0
      DO 9 I=1,NPOINT(1)-1
         NOINC = NOINC+1
         IDXINC(NOINC) = I
    9 CONTINUE

c initialize Pauli-principle treatment (find wounded nucleons)
      NWOUND(1) = 0
      NWOUND(2) = 0
      NCWOUN(1) = 0
      NCWOUN(2) = 0
      DO 2 J=1,NPOINT(1)
         DO 3 I=1,2
            IF (ISTHKK(J).EQ.10+I) THEN
               NWOUND(I) = NWOUND(I)+1
               EWOUND(I,NWOUND(I)) = PHKK(4,J)
               IF (IDHKK(J).EQ.2212) NCWOUN(I) = NCWOUN(I)+1
            ENDIF
    3    CONTINUE
    2 CONTINUE

c modify nuclear potential for wounded nucleons
      IPRCL  = IP -NWOUND(1)
      IPZRCL = IPZ-NCWOUN(1)
      ITRCL  = IT -NWOUND(2)
      ITZRCL = ITZ-NCWOUN(2)
      CALL DT_NCLPOT(IPZRCL,IPRCL,ITZRCL,ITRCL,ZERO,ZERO,1)

      NSTART = NPOINT(4)
      NEND   = NHKK

    7 CONTINUE
      DO 8 I=NSTART,NEND

         IF ((ABS(ISTHKK(I)).EQ.1).AND.(IDCH(I).LT.KTAUGE)) THEN
c select nucleus the cascade starts first (proj. - 1, target - -1)
            NCAS   = 1
c   projectile/target with probab. 1/2
            IF ((INCMOD.EQ.1).OR.(IDCH(I).GT.0)) THEN
               IF (DT_RNDM(TAUFOR).GT.OHALF) NCAS = -NCAS
c   in the nucleus with highest mass
            ELSEIF (INCMOD.EQ.2) THEN
               IF (IP.GT.IT) THEN
                  NCAS = -NCAS
               ELSEIF (IP.EQ.IT) THEN
                  IF (DT_RNDM(TAUFOR).GT.OHALF) NCAS = -NCAS
               ENDIF
c the nucleus the cascade starts first is requested to be the one
c moving in the direction of the secondary
            ELSEIF (INCMOD.EQ.3) THEN
               NCAS = INT(SIGN(1.0D0,PHKK(3,I)))
            ENDIF
c check that the selected "nucleus" is not a hadron
            IF (((NCAS.EQ. 1).AND.(IP.LE.1)).OR.
     &          ((NCAS.EQ.-1).AND.(IT.LE.1)))    NCAS = -NCAS

c treat intranuclear cascade in the nucleus selected first
            LCAS = .FALSE.
            CALL DT_INUCAS(IT,IP,I,LCAS,NCAS,IREJ1)
            IF (IREJ1.NE.0) GOTO 9998
c treat intranuclear cascade in the other nucleus if this isn't a had.
            NCAS = -NCAS
            IF (((NCAS.EQ. 1).AND.(IP.GT.1)).OR.
     &          ((NCAS.EQ.-1).AND.(IT.GT.1)))    THEN
               IF (LCAS) CALL DT_INUCAS(IT,IP,I,LCAS,NCAS,IREJ1)
               IF (IREJ1.NE.0) GOTO 9998
            ENDIF

         ENDIF

    8 CONTINUE
      NSTART = NEND+1
      NEND   = NHKK
      IF (NSTART.LE.NEND) GOTO 7

      RETURN

 9998 CONTINUE
c reject this event
      IRINC = IRINC+1
      IREJ = 1

 9999 CONTINUE
c intranucl. cascade not treated because of interaction properties or
c it is supressed by user or it was rejected or...
      LFZC = .FALSE.
c reset flag characterizing direction of motion in n-n-cms
c*sr14-11-95
C     DO 9990 I=NPOINT(5),NHKK
C        IF (ISTHKK(I).EQ.-1) ISTHKK(I)=1
C9990 CONTINUE

      RETURN
      END
c
c===inucas=============================================================*
c
CDECK  ID>, DT_INUCAS
      SUBROUTINE DT_INUCAS(IT,IP,IDXCAS,LCAS,NCAS,IREJ)

c***********************************************************************
c Formation zone supressed IntraNUclear CAScade for one final state    *
c particle.                                                            *
c           IT, IP    mass numbers of target, projectile nuclei        *
c           IDXCAS    index of final state particle in DTEVT1          *
c           NCAS =  1 intranuclear cascade in projectile               *
c                = -1 intranuclear cascade in target                   *
c This version dated 18.11.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER (TINY10=1.0D-10,TINY2=1.0D-2,ZERO=0.0D0,DLARGE=1.0D10,
     &           OHALF=0.5D0,ONE=1.0D0)
      PARAMETER (FM2MM=1.0D-12,RNUCLE = 1.12D0)
      PARAMETER (TWOPI=6.283185307179586454D+00)
      PARAMETER (PLOWH=0.01D0,PHIH=9.0D0)

      LOGICAL LABSOR,LCAS

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c final state after inc step
      PARAMETER (MAXFSP=10)
      COMMON /DTCAPA/ PFSP(5,MAXFSP),IDFSP(MAXFSP),NFSP

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c Glauber formalism: collision properties
      COMMON /DTGLCP/ RPROJ,RTARG,BIMPAC,
     &                NWTSAM,NWASAM,NWBSAM,NWTACC,NWAACC,NWBACC

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c parameter for intranuclear cascade
      LOGICAL LPAULI
      COMMON /DTFOTI/ TAUFOR,KTAUGE,ITAUVE,INCMOD,LPAULI

c final state after intranuclear cascade step
      COMMON /DTPAUL/ EWOUND(2,300),NWOUND(2),IDXINC(2000),NOINC

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c statistics: residual nuclei
      COMMON /DTSTA2/ EXCDPM(4),EXCEVA(2),
     &                NINCGE,NINCCO(2,3),NINCHR(2,2),NINCWO(2),
     &                NINCST(2,4),NINCEV(2),
     &                NRESTO(2),NRESPR(2),NRESNU(2),NRESBA(2),
     &                NRESPB(2),NRESCH(2),NRESEV(4),
     &                NEVA(2,6),NEVAGA(2),NEVAHT(2),NEVAHY(2,2,240),
     &                NEVAFI(2,2)


      DIMENSION PCAS(2,5),PTOCAS(2),COSCAS(2,3),VTXCAS(2,4),VTXCA1(2,4),
     &          PCAS1(5),PNUC(5),BGTA(4),
     &          BGCAS(2),GACAS(2),BECAS(2),
     &          RNUC(2),BIMPC(2),VTXDST(3),IDXSPE(2),IDSPE(2),NWTMP(2)

      DATA PDIF /0.545D0/

      IREJ = 0

c update counter
      IF (NINCEV(1).NE.NEVHKK) THEN
         NINCEV(1) = NEVHKK
         NINCEV(2) = NINCEV(2)+1
      ENDIF

c "BAMJET-index" of this hadron
      IDCAS = IDBAM(IDXCAS)
c////////////KK   NOte if next call is activated, Epics will have
c                 unresolved external reference. 
c      if(IDCAS .le. 0) then
c         call checkstat("inucas1")
c         goto 9999
c      endif
c/////////////
      IF (IDT_MCHAD(IDCAS).EQ.-1) RETURN

c skip gammas, electrons, etc..
      IF (AAM(IDCAS).LT.TINY2) RETURN

c Lorentz-trsf. into projectile rest system
      IF (IP.GT.1) THEN
         CALL DT_LTRANS(PHKK(1,IDXCAS),PHKK(2,IDXCAS),PHKK(3,IDXCAS),
     &               PHKK(4,IDXCAS),PCAS(1,1),PCAS(1,2),PCAS(1,3),
     &               PCAS(1,4),IDCAS,-2)
         PTOCAS(1) = SQRT(PCAS(1,1)**2+PCAS(1,2)**2+PCAS(1,3)**2)
         PCAS(1,5) = (PCAS(1,4)-PTOCAS(1))*(PCAS(1,4)+PTOCAS(1))
         IF (PCAS(1,5).GT.ZERO) THEN
            PCAS(1,5) = SQRT(PCAS(1,5))
         ELSE
            PCAS(1,5) = AAM(IDCAS)
         ENDIF
         DO 20 K=1,3
            COSCAS(1,K) = PCAS(1,K)/MAX(PTOCAS(1),TINY10)
   20    CONTINUE
c Lorentz-parameters
c   particle rest system --> projectile rest system
         BGCAS(1) = PTOCAS(1)/MAX(PCAS(1,5),TINY10)
         GACAS(1) = PCAS(1,4)/MAX(PCAS(1,5),TINY10)
         BECAS(1) = BGCAS(1)/GACAS(1)
      ELSE
         DO 21 K=1,5
            PCAS(1,K) = ZERO
            IF (K.LE.3) COSCAS(1,K) = ZERO
   21    CONTINUE
         PTOCAS(1) = ZERO
         BGCAS(1)  = ZERO
         GACAS(1)  = ZERO
         BECAS(1)  = ZERO
      ENDIF
c Lorentz-trsf. into target rest system
      IF (IT.GT.1) THEN
c LEPTO: final state particles are already in target rest frame
C        IF (MCGENE.EQ.3) THEN
C           PCAS(2,1) = PHKK(1,IDXCAS)
C           PCAS(2,2) = PHKK(2,IDXCAS)
C           PCAS(2,3) = PHKK(3,IDXCAS)
C           PCAS(2,4) = PHKK(4,IDXCAS)
C        ELSE
            CALL DT_LTRANS(PHKK(1,IDXCAS),PHKK(2,IDXCAS),PHKK(3,IDXCAS),
     &                  PHKK(4,IDXCAS),PCAS(2,1),PCAS(2,2),PCAS(2,3),
     &                  PCAS(2,4),IDCAS,-3)
C        ENDIF
         PTOCAS(2) = SQRT(PCAS(2,1)**2+PCAS(2,2)**2+PCAS(2,3)**2)
         PCAS(2,5) = (PCAS(2,4)-PTOCAS(2))*(PCAS(2,4)+PTOCAS(2))
         IF (PCAS(2,5).GT.ZERO) THEN
            PCAS(2,5) = SQRT(PCAS(2,5))
         ELSE
            PCAS(2,5) = AAM(IDCAS)
         ENDIF
         DO 22 K=1,3
            COSCAS(2,K) = PCAS(2,K)/MAX(PTOCAS(2),TINY10)
   22    CONTINUE
c Lorentz-parameters
c   particle rest system --> target rest system
         BGCAS(2) = PTOCAS(2)/MAX(PCAS(2,5),TINY10)
         GACAS(2) = PCAS(2,4)/MAX(PCAS(2,5),TINY10)
         BECAS(2) = BGCAS(2)/GACAS(2)
      ELSE
         DO 23 K=1,5
            PCAS(2,K) = ZERO
            IF (K.LE.3) COSCAS(2,K) = ZERO
   23    CONTINUE
         PTOCAS(2) = ZERO
         BGCAS(2)  = ZERO
         GACAS(2)  = ZERO
         BECAS(2)  = ZERO
      ENDIF

c radii of nuclei (mm) modified by the wall-depth of the Woods-Saxon-
c potential (see CONUCL)
      RNUC(1)  = (RPROJ+4.605D0*PDIF)*FM2MM
      RNUC(2)  = (RTARG+4.605D0*PDIF)*FM2MM
c impact parameter (the projectile moving along z)
      BIMPC(1) = ZERO
      BIMPC(2) = BIMPAC*FM2MM

c get position of initial hadron in projectile/target rest-syst.
      DO 3 K=1,4
         VTXCAS(1,K) = WHKK(K,IDXCAS)
         VTXCAS(2,K) = VHKK(K,IDXCAS)
    3 CONTINUE

      ICAS = 1
      I2   = 2
      IF (NCAS.EQ.-1) THEN
         ICAS = 2
         I2   = 1
      ENDIF

      IF (PTOCAS(ICAS).LT.TINY10) THEN
         WRITE(ErrorOut,1000) PTOCAS
 1000    FORMAT(1X,'INUCAS:   WARNING! ZERO MOMENTUM OF INITIAL',
     &          '  HADRON ',/,20X,2E12.4)
         GOTO 9999
      ENDIF

c reset spectator flags
      NSPE = 0
      IDXSPE(1) = 0
      IDXSPE(2) = 0
      IDSPE(1)  = 0
      IDSPE(2)  = 0

c formation length (in fm)
C     IF (LCAS) THEN
C        DEL0 = ZERO
C     ELSE
         DEL0 = TAUFOR*BGCAS(ICAS)
         IF (ITAUVE.EQ.1) THEN
            AMT  = PCAS(ICAS,1)**2+PCAS(ICAS,2)**2+PCAS(ICAS,5)**2
            DEL0 = DEL0*PCAS(ICAS,5)**2/AMT
         ENDIF
C     ENDIF
c   sample from exp(-del/del0)
      DEL1   = -DEL0*LOG(MAX(DT_RNDM(DEL0),TINY10))
c save formation time
      TAUSA1 = DEL1/BGCAS(ICAS)
      REL1   = TAUSA1*BGCAS(I2)

      DEL    = DEL1
      TAUSAM = DEL/BGCAS(ICAS)
      REL    = TAUSAM*BGCAS(I2)

c special treatment for negative particles unable to escape
c nuclear potential (implemented for ap, pi-, K- only)
      LABSOR = .FALSE.
      IF ((IICH(IDCAS).EQ.-1).AND.(IDCAS.LT.20)) THEN
c   threshold energy = nuclear potential + Coulomb potential
c   (nuclear potential for hadron-nucleus interactions only)
         ETHR = AAM(IDCAS)+EPOT(ICAS,IDCAS)+ETACOU(ICAS)
         IF (PCAS(ICAS,4).LT.ETHR) THEN
            DO 4 K=1,5
               PCAS1(K) = PCAS(ICAS,K)
    4       CONTINUE
c   "absorb" negative particle in nucleus
            CALL DT_ABSORP(IDCAS,PCAS1,NCAS,NSPE,IDSPE,IDXSPE,0,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            IF (NSPE.GE.1) LABSOR = .TRUE.
         ENDIF
      ENDIF

c if the initial particle has not been absorbed proceed with
c "normal" cascade
      IF (.NOT.LABSOR) THEN

c   calculate coordinates of hadron at the end of the formation zone
c   transport-time and -step in the rest system where this step is
c   treated
         DSTEP  = DEL*FM2MM
         DTIME  = DSTEP/BECAS(ICAS)
         RSTEP  = REL*FM2MM
         IF ((IP.GT.1).AND.(IT.GT.1)) THEN
            RTIME = RSTEP/BECAS(I2)
         ELSE
            RTIME = ZERO
         ENDIF
c   save step whithout considering the overlapping region
         DSTEP1 = DEL1*FM2MM
         DTIME1 = DSTEP1/BECAS(ICAS)
         RSTEP1 = REL1*FM2MM
         IF ((IP.GT.1).AND.(IT.GT.1)) THEN
            RTIME1 = RSTEP1/BECAS(I2)
         ELSE
            RTIME1 = ZERO
         ENDIF
c   transport to the end of the formation zone in this system
         DO 5 K=1,3
            VTXCA1(ICAS,K) = VTXCAS(ICAS,K)+DSTEP1*COSCAS(ICAS,K)
            VTXCA1(I2,K)   = VTXCAS(I2,K)  +RSTEP1*COSCAS(I2,K)
            VTXCAS(ICAS,K) = VTXCAS(ICAS,K)+DSTEP*COSCAS(ICAS,K)
            VTXCAS(I2,K)   = VTXCAS(I2,K)  +RSTEP*COSCAS(I2,K)
    5    CONTINUE
         VTXCA1(ICAS,4) = VTXCAS(ICAS,4)+DTIME1
         VTXCA1(I2,4)   = VTXCAS(I2,4)  +RTIME1
         VTXCAS(ICAS,4) = VTXCAS(ICAS,4)+DTIME
         VTXCAS(I2,4)   = VTXCAS(I2,4)  +RTIME

         IF ((IP.GT.1).AND.(IT.GT.1)) THEN
            XCAS   = VTXCAS(ICAS,1)
            YCAS   = VTXCAS(ICAS,2)
            XNCLTA = BIMPAC*FM2MM
            RNCLPR = (RPROJ+RNUCLE)*FM2MM
            RNCLTA = (RTARG+RNUCLE)*FM2MM
C           RNCLPR = (RPROJ+1.605D0*PDIF)*FM2MM
C           RNCLTA = (RTARG+1.605D0*PDIF)*FM2MM
C           RNCLPR = (RPROJ)*FM2MM
C           RNCLTA = (RTARG)*FM2MM
            RCASPR = SQRT( XCAS**2        +YCAS**2)
            RCASTA = SQRT((XCAS-XNCLTA)**2+YCAS**2)
            IF ((RCASPR.LT.RNCLPR).AND.(RCASTA.LT.RNCLTA)) THEN
               IF (IDCH(IDXCAS).EQ.0) NOBAM(IDXCAS) = 3
            ENDIF
         ENDIF

c   check if particle is already outside of the corresp. nucleus
         RDIST = SQRT((VTXCAS(ICAS,1)-BIMPC(ICAS))**2+
     &                VTXCAS(ICAS,2)**2+VTXCAS(ICAS,3)**2)
         IF (RDIST.GE.RNUC(ICAS)) THEN
c   here: IDCH is the generation of the final state part. starting
c   with zero for hadronization products
c   flag particles of generation 0 being outside the nuclei after
c   formation time (to be used for excitation energy calculation)
            IF ((IDCH(IDXCAS).EQ.0).AND.(NOBAM(IDXCAS).LT.3))
     &         NOBAM(IDXCAS) = NOBAM(IDXCAS)+ICAS
            GOTO 9997
         ENDIF
         DIST   = DLARGE
         DISTP  = DLARGE
         DISTN  = DLARGE
         IDXP   = 0
         IDXN   = 0

c   already here: skip particles being outside HADRIN "energy-window"
c   to avoid wasting of time
         NINCHR(ICAS,1) = NINCHR(ICAS,1)+1
         IF ((PTOCAS(ICAS).LE.PLOWH).OR.(PTOCAS(ICAS).GE.PHIH)) THEN
            NINCHR(ICAS,2) = NINCHR(ICAS,2)+1
C           WRITE(LOUT,1002) IDXCAS,IDCAS,ICAS,PTOCAS(ICAS),NEVHKK
C1002       FORMAT(1X,'INUCAS:   warning! momentum of particle with ',
C    &             'index ',I5,' (id: ',I3,') ',I3,/,11X,'p_tot = ',
C    &             E12.4,', above or below HADRIN-thresholds',I6)
            NSPE = 0
            GOTO 9997
         ENDIF

         DO 7 IDXHKK=1,NOINC
            I = IDXINC(IDXHKK)
c   scan DTEVT1 for unwounded or excited nucleons
            IF ((ISTHKK(I).EQ.12+ICAS).OR.(ISTHKK(I).EQ.14+ICAS)) THEN
               DO 8 K=1,3
                  IF (ICAS.EQ.1) THEN
                     VTXDST(K) = WHKK(K,I)-VTXCAS(1,K)
                  ELSEIF (ICAS.EQ.2) THEN
                     VTXDST(K) = VHKK(K,I)-VTXCAS(2,K)
                  ENDIF
    8          CONTINUE
               POSNUC = VTXDST(1)*COSCAS(ICAS,1)+
     &                  VTXDST(2)*COSCAS(ICAS,2)+
     &                  VTXDST(3)*COSCAS(ICAS,3)
c   check if nucleon is situated in forward direction
               IF (POSNUC.GT.ZERO) THEN
c   distance between hadron and this nucleon
                  DISTNU = SQRT(VTXDST(1)**2+VTXDST(2)**2+
     &                          VTXDST(3)**2)
c   impact parameter
                  BIMNU2 = DISTNU**2-POSNUC**2
                  IF (BIMNU2.LT.ZERO) THEN
                     WRITE(ErrorOut,1001) DISTNU,POSNUC,BIMNU2
 1001                FORMAT(1X,'INUCAS:   WARNING! INCONSISTENT IMPACT',
     &                      '  PARAMETER ',/,20X,3E12.4)
                     GOTO 7
                  ENDIF
                  BIMNU  = SQRT(BIMNU2)
c   maximum impact parameter to have interaction
                  IDNUC  = IDT_ICIHAD(IDHKK(I))
c////////////KK
c      if(IDNUC .le. 0) then
c         call checkstat("inucas2")
c         goto 9999
c      endif
c      if(IDCAS .le. 0) then
c         call checkstat("inucas3")
c         goto 9999
c      endif
c/////////////

                  IDNUC1 = IDT_MCHAD(IDNUC)
                  IDCAS1 = IDT_MCHAD(IDCAS)
                  DO 19 K=1,5
                     PCAS1(K) = PCAS(ICAS,K)
                     PNUC(K)  = PHKK(K,I)
   19             CONTINUE
c Lorentz-parameter for trafo into rest-system of target
                  DO 18 K=1,4
                     BGTA(K) = PNUC(K)/MAX(PNUC(5),TINY10)
   18             CONTINUE
c transformation of projectile into rest-system of target
                  CALL DT_DALTRA(BGTA(4),-BGTA(1),-BGTA(2),-BGTA(3),
     &                        PCAS1(1),PCAS1(2),PCAS1(3),PCAS1(4),
     &                        PPTOT,PX,PY,PZ,PE)
c*
C                 CALL DT_SIHNIN(IDCAS1,IDNUC1,PPTOT,SIGIN)
C                 CALL DT_SIHNEL(IDCAS1,IDNUC1,PPTOT,SIGEL)
                  DUMZER = ZERO
                  CALL DT_XSHN(IDCAS1,IDNUC1,PPTOT,DUMZER,SIGTOT,SIGEL)
                  CALL DT_SIHNAB(IDCAS1,IDNUC1,PPTOT,SIGAB)
                  IF (((IDCAS1.EQ.13).OR.(IDCAS1.EQ.14)).AND.
     &                (PPTOT.LT.0.15D0)) SIGEL = SIGEL/2.0D0
                  SIGIN = SIGTOT-SIGEL-SIGAB
C                 SIGTOT = SIGIN+SIGEL+SIGAB
c*
                  BIMMAX = SQRT(SIGTOT/(5.0D0*TWOPI))*FM2MM
c   check if interaction is possible
                  IF (BIMNU.LE.BIMMAX) THEN
c   get nucleon with smallest distance and kind of interaction
c   (elastic/inelastic)
                     IF (DISTNU.LT.DIST) THEN
                        DIST      = DISTNU
                        BINT      = BIMNU
                        IF (IDNUC.NE.IDSPE(1)) THEN
                           IDSPE(2)  = IDSPE(1)
                           IDXSPE(2) = IDXSPE(1)
                           IDSPE(1)  = IDNUC
                        ENDIF
                        IDXSPE(1) = I
                        NSPE      = 1
c*sr
                        SELA = SIGEL
                        SABS = SIGAB
                        STOT = SIGTOT
C                       IF ((IDCAS.EQ.2).OR.(IDCAS.EQ.9)) THEN
C                          SELA = SIGEL
C                          STOT = SIGIN+SIGEL
C                       ELSE
C                          SELA = SIGEL+0.75D0*SIGIN
C                          STOT = 0.25D0*SIGIN+SELA
C                       ENDIF
c*
                     ENDIF
                  ENDIF
               ENDIF
               DISTNU = SQRT(VTXDST(1)**2+VTXDST(2)**2+
     &                       VTXDST(3)**2)
               IDNUC  = IDT_ICIHAD(IDHKK(I))
               IF (IDNUC.EQ.1) THEN
                  IF (DISTNU.LT.DISTP) THEN
                     DISTP = DISTNU
                     IDXP  = I
                     POSP  = POSNUC
                  ENDIF
               ELSEIF (IDNUC.EQ.8) THEN
                  IF (DISTNU.LT.DISTN) THEN
                     DISTN = DISTNU
                     IDXN  = I
                     POSN  = POSNUC
                  ENDIF
               ENDIF
            ENDIF
    7    CONTINUE

c there is no nucleon for a secondary interaction
         IF (NSPE.EQ.0) GOTO 9997

C        IF ((IDCAS.EQ.13).AND.((PCAS(ICAS,4)-PCAS(ICAS,5)).LT.0.1D0))
C    &      WRITE(LOUT,*) STOT,SELA,SABS,IDXSPE
         IF (IDXSPE(2).EQ.0) THEN
            IF ((IDSPE(1).EQ.1).AND.(IDXN.GT.0)) THEN
C              DO 80 K=1,3
C                 IF (ICAS.EQ.1) THEN
C                    VTXDST(K) = WHKK(K,IDXN)-WHKK(K,IDXSPE(1))
C                 ELSEIF (ICAS.EQ.2) THEN
C                    VTXDST(K) = VHKK(K,IDXN)-VHKK(K,IDXSPE(1))
C                 ENDIF
C  80          CONTINUE
C              DISTNU = SQRT(VTXDST(1)**2+VTXDST(2)**2+
C    &                       VTXDST(3)**2)
C              IF ((DISTNU.LT.15.0D0*FM2MM).OR.(POSN.GT.ZERO)) THEN
                  IDXSPE(2) = IDXN
                  IDSPE(2)  = 8
C              ELSE
C                 STOT = STOT-SABS
C                 SABS = ZERO
C              ENDIF
            ELSEIF ((IDSPE(1).EQ.8).AND.(IDXP.GT.0)) THEN
C              DO 81 K=1,3
C                 IF (ICAS.EQ.1) THEN
C                    VTXDST(K) = WHKK(K,IDXP)-WHKK(K,IDXSPE(1))
C                 ELSEIF (ICAS.EQ.2) THEN
C                    VTXDST(K) = VHKK(K,IDXP)-VHKK(K,IDXSPE(1))
C                 ENDIF
C  81          CONTINUE
C              DISTNU = SQRT(VTXDST(1)**2+VTXDST(2)**2+
C    &                       VTXDST(3)**2)
C              IF ((DISTNU.LT.15.0D0*FM2MM).OR.(POSP.GT.ZERO)) THEN
                  IDXSPE(2) = IDXP
                  IDSPE(2)  = 1
C              ELSE
C                 STOT = STOT-SABS
C                 SABS = ZERO
C              ENDIF
            ELSE
               STOT = STOT-SABS
               SABS = ZERO
            ENDIF
         ENDIF
         RR = DT_RNDM(DIST)
         IF (RR.LT.SELA/STOT) THEN
            IPROC = 2
         ELSEIF ((RR.GE.SELA/STOT).AND.(RR.LT.(SELA+SABS)/STOT)) THEN
            IPROC = 3
         ELSE
            IPROC = 1
         ENDIF

         DO 9 K=1,5
            PCAS1(K) = PCAS(ICAS,K)
            PNUC(K)  = PHKK(K,IDXSPE(1))
    9    CONTINUE
         IF (IPROC.EQ.3) THEN
c 2-nucleon absorption of pion
            NSPE = 2
            CALL DT_ABSORP(IDCAS,PCAS1,NCAS,NSPE,IDSPE,IDXSPE,1,IREJ1)
            IF (IREJ1.NE.0) GOTO 9999
            IF (NSPE.GE.1) LABSOR = .TRUE.
         ELSE
c sample secondary interaction
            IDNUC = IDBAM(IDXSPE(1))
            CALL DT_HADRIN(IDCAS,PCAS1,IDNUC,PNUC,IPROC,IREJ1)
            IF (IREJ1.EQ.1) GOTO 9999
            IF (IREJ1.GT.1) GOTO 9998
         ENDIF
      ENDIF

c update arrays to include Pauli-principle
      DO 10 I=1,NSPE
         IF (NWOUND(ICAS).LE.299) THEN
            NWOUND(ICAS) = NWOUND(ICAS)+1
            EWOUND(ICAS,NWOUND(ICAS)) = PHKK(4,IDXSPE(I))
         ENDIF
   10 CONTINUE

c dump initial hadron for energy-momentum conservation check
      IF (LEMCCK)
     &   CALL DT_EVTEMC(PCAS(ICAS,1),PCAS(ICAS,2),PCAS(ICAS,3),
     &               PCAS(ICAS,4),1,IDUM,IDUM)

c dump final state particles into DTEVT1

c   check if Pauli-principle is fulfilled
      NPAULI = 0
      NWTMP(1) = NWOUND(1)
      NWTMP(2) = NWOUND(2)
      DO 111 I=1,NFSP
         NPAULI = 0
         J1 = 2
         IF (((NCAS.EQ. 1).AND.(IT.LE.1)).OR.
     &       ((NCAS.EQ.-1).AND.(IP.LE.1)))    J1 = 1
         DO 117 J=1,J1
            IF ((NPAULI.NE.0).AND.(J.EQ.2)) GOTO 117
            IF (J.EQ.1) THEN
               IDX = ICAS
               PE  = PFSP(4,I)
            ELSE
               IDX  = I2
               MODE = 1
               IF (IDX.EQ.1) MODE = -1
               CALL DT_LTNUC(PFSP(3,I),PFSP(4,I),PZ,PE,MODE)
            ENDIF
c first check if cascade step is forbidden due to Pauli-principle
c (in case of absorpion this step is forced)
            IF ((.NOT.LABSOR).AND.LPAULI.AND.((IDFSP(I).EQ.1).OR.
     &          (IDFSP(I).EQ.8))) THEN
c   get nuclear potential barrier
               POT = EPOT(IDX,IDFSP(I))+AAM(IDFSP(I))
               IF (IDFSP(I).EQ.1) THEN
                  POTLOW = POT-EBINDP(IDX)
               ELSE
                  POTLOW = POT-EBINDN(IDX)
               ENDIF
c   final state particle not able to escape nucleus
               IF (PE.LE.POTLOW) THEN
c     check if there are wounded nucleons
                  IF ((NWOUND(IDX).GE.1).AND.(PE.GE.
     &                 EWOUND(IDX,NWOUND(IDX)))) THEN
                     NPAULI      = NPAULI+1
                     NWOUND(IDX) = NWOUND(IDX)-1
                  ELSE
c     interaction prohibited by Pauli-principle
                     NWOUND(1) = NWTMP(1)
                     NWOUND(2) = NWTMP(2)
                     GOTO 9997
                  ENDIF
               ENDIF
            ENDIF
  117    CONTINUE
  111 CONTINUE

      NPAULI = 0
      NWOUND(1) = NWTMP(1)
      NWOUND(2) = NWTMP(2)

      DO 11 I=1,NFSP

         IST = ISTHKK(IDXCAS)

         NPAULI = 0
         J1 = 2
         IF (((NCAS.EQ. 1).AND.(IT.LE.1)).OR.
     &       ((NCAS.EQ.-1).AND.(IP.LE.1)))    J1 = 1
         DO 17 J=1,J1
            IF ((NPAULI.NE.0).AND.(J.EQ.2)) GOTO 17
            IDX = ICAS
            PE  = PFSP(4,I)
            IF (J.EQ.2) THEN
               IDX = I2
               CALL DT_LTNUC(PFSP(3,I),PFSP(4,I),PZ,PE,NCAS)
            ENDIF
c first check if cascade step is forbidden due to Pauli-principle
c (in case of absorpion this step is forced)
            IF ((.NOT.LABSOR).AND.LPAULI.AND.((IDFSP(I).EQ.1).OR.
     &          (IDFSP(I).EQ.8))) THEN
c   get nuclear potential barrier
               POT = EPOT(IDX,IDFSP(I))+AAM(IDFSP(I))
               IF (IDFSP(I).EQ.1) THEN
                  POTLOW = POT-EBINDP(IDX)
               ELSE
                  POTLOW = POT-EBINDN(IDX)
               ENDIF
c   final state particle not able to escape nucleus
               IF (PE.LE.POTLOW) THEN
c     check if there are wounded nucleons
                  IF ((NWOUND(IDX).GE.1).AND.(PE.GE.
     &                 EWOUND(IDX,NWOUND(IDX)))) THEN
                     NWOUND(IDX) = NWOUND(IDX)-1
                     NPAULI = NPAULI+1
                     IST    = 14+IDX
                  ELSE
c     interaction prohibited by Pauli-principle
                     NWOUND(1) = NWTMP(1)
                     NWOUND(2) = NWTMP(2)
                     GOTO 9997
                  ENDIF
c*sr
c               ELSEIF (PE.LE.POT) THEN
cC              ELSEIF ((PE.LE.POT).AND.(NWOUND(IDX).GE.1)) THEN
cC                 NWOUND(IDX) = NWOUND(IDX)-1
c**
c                  NPAULI = NPAULI+1
c                  IST    = 14+IDX
               ENDIF
            ENDIF
   17    CONTINUE

c dump final state particles for energy-momentum conservation check
         IF (LEMCCK) CALL DT_EVTEMC(-PFSP(1,I),-PFSP(2,I),-PFSP(3,I),
     &                           -PFSP(4,I),2,IDUM,IDUM)

         PX = PFSP(1,I)
         PY = PFSP(2,I)
         PZ = PFSP(3,I)
         PE = PFSP(4,I)
         IF (ABS(IST).EQ.1) THEN
c transform particles back into n-n cms
c LEPTO: leave final state particles in target rest frame
C           IF (MCGENE.EQ.3) THEN
C              PFSP(1,I) = PX
C              PFSP(2,I) = PY
C              PFSP(3,I) = PZ
C              PFSP(4,I) = PE
C           ELSE
               IMODE = ICAS+1
               CALL DT_LTRANS(PX,PY,PZ,PE,PFSP(1,I),PFSP(2,I),PFSP(3,I),
     &                     PFSP(4,I),IDFSP(I),IMODE)
C           ENDIF
         ELSEIF ((ICAS.EQ.2).AND.(IST.EQ.15)) THEN
c target cascade but fsp got stuck in proj. --> transform it into
c proj. rest system
            CALL DT_LTRANS(PX,PY,PZ,PE,PFSP(1,I),PFSP(2,I),PFSP(3,I),
     &                  PFSP(4,I),IDFSP(I),-1)
         ELSEIF ((ICAS.EQ.1).AND.(IST.EQ.16)) THEN
c proj. cascade but fsp got stuck in target --> transform it into
c target rest system
            CALL DT_LTRANS(PX,PY,PZ,PE,PFSP(1,I),PFSP(2,I),PFSP(3,I),
     &                  PFSP(4,I),IDFSP(I),1)
         ENDIF

c dump final state particles into DTEVT1
         IGEN = IDCH(IDXCAS)+1
         ID   = IDT_IPDGHA(IDFSP(I))
         IXR  = 0
         IF (LABSOR) IXR = 99
         CALL DT_EVTPUT(IST,ID,IDXCAS,IDXSPE(1),PFSP(1,I),
     &               PFSP(2,I),PFSP(3,I),PFSP(4,I),0,IXR,IGEN)

c update the counter for particles which got stuck inside the nucleus
         IF ((IST.EQ.15).OR.(IST.EQ.16)) THEN
            NOINC = NOINC+1
            IDXINC(NOINC) = NHKK
         ENDIF
         IF (LABSOR) THEN
c   in case of absorption the spatial treatment is an approximate
c   solution anyway (the positions of the nucleons which "absorb" the
c   cascade particle are not taken into consideration) therefore the
c   particles are produced at the position of the cascade particle
            DO 12 K=1,4
               WHKK(K,NHKK) = WHKK(K,IDXCAS)
               VHKK(K,NHKK) = VHKK(K,IDXCAS)
   12       CONTINUE
         ELSE
c   DDISTL - distance the cascade particle moves to the intera. point
c   (the position where impact-parameter = distance to the interacting
c   nucleon), DIST - distance to the interacting nucleon at the time of
c   formation of the cascade particle, BINT - impact-parameter of this
c   cascade-interaction
            DDISTL = SQRT(DIST**2-BINT**2)
            DTIME  = DDISTL/BECAS(ICAS)
            DTIMEL = DDISTL/BGCAS(ICAS)
            RDISTL = DTIMEL*BGCAS(I2)
            IF ((IP.GT.1).AND.(IT.GT.1)) THEN
               RTIME = RDISTL/BECAS(I2)
            ELSE
               RTIME = ZERO
            ENDIF
c   RDISTL, RTIME are this step and time in the rest system of the other
c   nucleus
            DO 13 K=1,3
               VTXCA1(ICAS,K) = VTXCAS(ICAS,K)+COSCAS(ICAS,K)*DDISTL
               VTXCA1(I2,K)   = VTXCAS(I2,K)  +COSCAS(I2,K)  *RDISTL
   13       CONTINUE
            VTXCA1(ICAS,4) = VTXCAS(ICAS,4)+DTIME
            VTXCA1(I2,4)   = VTXCAS(I2,4)  +RTIME
c   position of particle production is half the impact-parameter to
c   the interacting nucleon
            DO 14 K=1,3
               WHKK(K,NHKK) = OHALF*(VTXCA1(1,K)+WHKK(K,IDXSPE(1)))
               VHKK(K,NHKK) = OHALF*(VTXCA1(2,K)+VHKK(K,IDXSPE(1)))
   14       CONTINUE
c   time of production of secondary = time of interaction
            WHKK(4,NHKK) = VTXCA1(1,4)
            VHKK(4,NHKK) = VTXCA1(2,4)
         ENDIF

   11 CONTINUE

c modify status and position of cascade particle (the latter for
c statistics reasons only)
      ISTHKK(IDXCAS) = 2
      IF (LABSOR) ISTHKK(IDXCAS) = 19
      IF (.NOT.LABSOR) THEN
         DO 15 K=1,4
            WHKK(K,IDXCAS) = VTXCA1(1,K)
            VHKK(K,IDXCAS) = VTXCA1(2,K)
   15    CONTINUE
      ENDIF

      DO 16 I=1,NSPE
         IS = IDXSPE(I)
c dump interacting nucleons for energy-momentum conservation check
         IF (LEMCCK)
     &      CALL DT_EVTEMC(PHKK(1,IS),PHKK(2,IS),PHKK(3,IS),PHKK(4,IS),
     &                                                  2,IDUM,IDUM)
c modify entry for interacting nucleons
         IF (ISTHKK(IS).EQ.12+ICAS) ISTHKK(IS)=16+ICAS
         IF (ISTHKK(IS).EQ.14+ICAS) ISTHKK(IS)=2
         IF (I.GE.2) THEN
            JDAHKK(1,IS) = JDAHKK(1,IDXSPE(1))
            JDAHKK(2,IS) = JDAHKK(2,IDXSPE(1))
         ENDIF
   16 CONTINUE

c check energy-momentum conservation
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(DUM,DUM,DUM,DUM,4,500,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
      ENDIF

c update counter
      IF (LABSOR) THEN
         NINCCO(ICAS,1) = NINCCO(ICAS,1)+1
      ELSE
         IF (IPROC.EQ.1) NINCCO(ICAS,2) = NINCCO(ICAS,2)+1
         IF (IPROC.EQ.2) NINCCO(ICAS,3) = NINCCO(ICAS,3)+1
      ENDIF

      RETURN

 9997 CONTINUE
 9998 CONTINUE
c transport-step but no cascade step due to configuration (i.e. there
c is no nucleon for interaction etc.)
      IF (LCAS) THEN
         DO 100 K=1,4
C           WHKK(K,IDXCAS) = VTXCAS(1,K)
C           VHKK(K,IDXCAS) = VTXCAS(2,K)
            WHKK(K,IDXCAS) = VTXCA1(1,K)
            VHKK(K,IDXCAS) = VTXCA1(2,K)
  100    CONTINUE
      ENDIF

C9998 CONTINUE
c no cascade-step because of configuration
c (i.e. hadron outside nucleus etc.)
      LCAS = .TRUE.
      RETURN

 9999 CONTINUE
c rejection
      IREJ = 1
      RETURN
      END
c
c===absorp=============================================================*
c
CDECK  ID>, DT_ABSORP
      SUBROUTINE DT_ABSORP(IDCAS,PCAS,NCAS,NSPE,IDSPE,IDXSPE,MODE,IREJ)

c***********************************************************************
c Two-nucleon absorption of antiprotons, pi-, and K-.                  *
c Antiproton absorption is handled by HADRIN.                          *
c The following channels for meson-absorption are considered:          *
c          pi- + p + p ---> n + p                                      *
c          pi- + p + n ---> n + n                                      *
c          K-  + p + p ---> sigma+ + n / Lam + p / sigma0 + p          *
c          K-  + p + n ---> sigma- + n / Lam + n / sigma0 + n          *
c          K-  + p + p ---> sigma- + n                                 *
c      IDCAS, PCAS   identity, momentum of particle to be absorbed     *
c      NCAS =  1     intranuclear cascade in projectile                *
c           = -1     intranuclear cascade in target                    *
c      NSPE          number of spectator nucleons involved             *
c      IDXSPE(2)     DTEVT1-indices of spectator nucleons involved     *
c Revised version of the original STOPIK written by HJM and J. Ranft.  *
c This version dated 24.02.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY5=1.0D-5,ONE=1.0D0,
     &           ONETHI=0.3333D0,TWOTHI=0.6666D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c final state after inc step
      PARAMETER (MAXFSP=10)
      COMMON /DTCAPA/ PFSP(5,MAXFSP),IDFSP(MAXFSP),NFSP

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      DIMENSION PCAS(5),IDXSPE(2),IDSPE(2),PSPE(2,5),PSPE1(5),
     &          PTOT3P(4),BG3P(4),
     &          ECMF(2),PCMF(2),CODF(2),COFF(2),SIFF(2)

      IREJ = 0
      NFSP = 0

c skip particles others than ap, pi-, K- for mode=0
      IF ((MODE.EQ.0).AND.
     &    (IDCAS.NE.2).AND.(IDCAS.NE.14).AND.(IDCAS.NE.16)) RETURN
c skip particles others than pions for mode=1
c (2-nucleon absorption in intranuclear cascade)
      IF ((MODE.EQ.1).AND.
     &    (IDCAS.NE.13).AND.(IDCAS.NE.14).AND.(IDCAS.NE.23)) RETURN

      NUCAS = NCAS
      IF (NUCAS.EQ.-1) NUCAS = 2

      IF (MODE.EQ.0) THEN
c scan spectator nucleons for nucleons being able to "absorb"
         NSPE      = 0
         IDXSPE(1) = 0
         IDXSPE(2) = 0
         DO 1 I=1,NHKK
            IF ((ISTHKK(I).EQ.12+NUCAS).OR.(ISTHKK(I).EQ.14+NUCAS)) THEN
               NSPE         = NSPE+1
               IDXSPE(NSPE) = I
               IDSPE(NSPE)  = IDBAM(I)
               IF ((NSPE.EQ.1).AND.(IDCAS.EQ.2)) GOTO 2
               IF (NSPE.EQ.2) THEN
                  IF ((IDCAS.EQ.14).AND.(IDSPE(1).EQ.8).AND.
     &                                  (IDSPE(2).EQ.8)) THEN
c    there is no pi-+n+n channel
                     NSPE = 1
                     GOTO 1
                  ELSE
                     GOTO 2
                  ENDIF
               ENDIF
            ENDIF
    1    CONTINUE

    2    CONTINUE
      ENDIF
c transform excited projectile nucleons (status=15) into proj. rest s.
      DO 3 I=1,NSPE
         DO 4 K=1,5
            PSPE(I,K) = PHKK(K,IDXSPE(I))
    4    CONTINUE
    3 CONTINUE

c antiproton absorption
      IF ((IDCAS.EQ.2).AND.(NSPE.GE.1)) THEN
         DO 5 K=1,5
            PSPE1(K) = PSPE(1,K)
    5    CONTINUE
         CALL DT_HADRIN(IDCAS,PCAS,IDSPE(1),PSPE1,1,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999

c meson absorption
      ELSEIF (((IDCAS.EQ.13).OR.(IDCAS.EQ.14).OR.(IDCAS.EQ.23)
     &                      .OR.(IDCAS.EQ.16)).AND.(NSPE.GE.2)) THEN
         IF (IDCAS.EQ.14) THEN
c   pi- absorption
            IDFSP(1) = 8
            IDFSP(2) = 8
            IF ((IDSPE(1).EQ.1).AND.(IDSPE(2).EQ.1)) IDFSP(2) = 1
         ELSEIF (IDCAS.EQ.13) THEN
c   pi+ absorption
            IDFSP(1) = 1
            IDFSP(2) = 1
            IF ((IDSPE(1).EQ.8).AND.(IDSPE(2).EQ.8)) IDFSP(2) = 8
         ELSEIF (IDCAS.EQ.23) THEN
c   pi0 absorption
            IDFSP(1) = IDSPE(1)
            IDFSP(2) = IDSPE(2)
         ELSEIF (IDCAS.EQ.16) THEN
c   K- absorption
            R = DT_RNDM(PCAS)
            IF ((IDSPE(1).EQ.1).AND.(IDSPE(2).EQ.1)) THEN
               IF (R.LT.ONETHI) THEN
                  IDFSP(1) = 21
                  IDFSP(2) = 8
               ELSEIF (R.LT.TWOTHI) THEN
                  IDFSP(1) = 17
                  IDFSP(2) = 1
               ELSE
                  IDFSP(1) = 22
                  IDFSP(2) = 1
               ENDIF
            ELSEIF ((IDSPE(1).EQ.8).AND.(IDSPE(2).EQ.8)) THEN
               IDFSP(1) = 20
               IDFSP(2) = 8
            ELSE
               IF (R.LT.ONETHI) THEN
                  IDFSP(1) = 20
                  IDFSP(2) = 1
               ELSEIF (R.LT.TWOTHI) THEN
                  IDFSP(1) = 17
                  IDFSP(2) = 8
               ELSE
                  IDFSP(1) = 22
                  IDFSP(2) = 8
               ENDIF
            ENDIF
         ENDIF
c   dump initial particles for energy-momentum cons. check
         IF (LEMCCK) THEN
            CALL DT_EVTEMC(PCAS(1),PCAS(2),PCAS(3),PCAS(4),1,IDUM,IDUM)
            CALL DT_EVTEMC(PSPE(1,1),PSPE(1,2),PSPE(1,3),PSPE(1,4),2,
     &                                                    IDUM,IDUM)
            CALL DT_EVTEMC(PSPE(2,1),PSPE(2,2),PSPE(2,3),PSPE(2,4),2,
     &                                                    IDUM,IDUM)
         ENDIF
c   get Lorentz-parameter of 3 particle initial state
         DO 6 K=1,4
            PTOT3P(K) = PCAS(K)+PSPE(1,K)+PSPE(2,K)
    6    CONTINUE
         P3P  = SQRT(PTOT3P(1)**2+PTOT3P(2)**2+PTOT3P(3)**2)
         AM3P = SQRT( (PTOT3P(4)-P3P)*(PTOT3P(4)+P3P) )
         DO 7 K=1,4
            BG3P(K) = PTOT3P(K)/MAX(AM3P,TINY10)
    7    CONTINUE
c   2-particle decay of the 3-particle compound system
         CALL DT_DTWOPD(AM3P,ECMF(1),ECMF(2),PCMF(1),PCMF(2),
     &               CODF(1),COFF(1),SIFF(1),CODF(2),COFF(2),SIFF(2),
     &               AAM(IDFSP(1)),AAM(IDFSP(2)))
         DO 8 I=1,2
            SDF = SQRT((ONE-CODF(I))*(ONE+CODF(I)))
            PX  = PCMF(I)*COFF(I)*SDF
            PY  = PCMF(I)*SIFF(I)*SDF
            PZ  = PCMF(I)*CODF(I)
            CALL DT_DALTRA(BG3P(4),BG3P(1),BG3P(2),BG3P(3),PX,PY,PZ,
     &                  ECMF(I),PTOFSP,PFSP(1,I),PFSP(2,I),PFSP(3,I),
     &                  PFSP(4,I))
            PFSP(5,I) = SQRT( (PFSP(4,I)-PTOFSP)*(PFSP(4,I)+PTOFSP) )
c   check consistency of kinematics
            IF (ABS(AAM(IDFSP(I))-PFSP(5,I)).GT.TINY5) THEN
               WRITE(ErrorOut,
     * 1001) IDFSP(I),AAM(IDFSP(I)),PFSP(5,I)
 1001          FORMAT(1X,'ABSORP:   WARNING! INCONSISTENT',
     &                ' TREE-PARTICLE KINEMATICS',/,20X,'ID: ',I3,
     &                ' AAM = ',E10.4,' MFSP = ',E10.4)
            ENDIF
c   dump final state particles for energy-momentum cons. check
            IF (LEMCCK) CALL DT_EVTEMC(-PFSP(1,I),-PFSP(2,I),
     &                              -PFSP(3,I),-PFSP(4,I),2,IDUM,IDUM)
    8    CONTINUE
         NFSP = 2
         IF (LEMCCK) THEN
            CALL DT_EVTEMC(DUM,DUM,DUM,DUM,3,100,IREJ1)
            IF (IREJ1.NE.0) THEN
               WRITE(ErrorOut,
     * *)'ABSORB: EMC ',AAM(IDFSP(1)),AAM(IDFSP(2)),
     &                      AM3P
               GOTO 9999
            ENDIF
         ENDIF
      ELSE
         IF (IOULEV(3).GT.0) WRITE(ErrorOut,1000) IDCAS,NSPE
 1000    FORMAT(1X,'ABSORP:   WARNING! ABSORPTION FOR PARTICLE ',I3,
     &          ' IMPOSSIBLE',/,20X,'TOO FEW SPECTATORS (',I2,')')
         NSPE = 0
      ENDIF

      RETURN

 9999 CONTINUE
      IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in ABSORP'
      IREJ = 1
      RETURN
      END
c
c===hadrin=============================================================*
c
CDECK  ID>, DT_HADRIN
      SUBROUTINE DT_HADRIN(IDPR,PPR,IDTA,PTA,MODE,IREJ)

c***********************************************************************
c Interface to the HADRIN-routines for inelastic and elastic           *
c scattering.                                                          *
c      IDPR,PPR(5)   identity, momentum of projectile                  *
c      IDTA,PTA(5)   identity, momentum of target                      *
c      MODE  = 1     inelastic interaction                             *
c            = 2     elastic   interaction                             *
c Revised version of the original FHAD.                                *
c This version dated 27.10.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,TINY5=1.0D-5,TINY3=1.0D-3,
     &           TINY2=1.0D-2,TINY1=1.0D-1,ONE=1.0D0)

      LOGICAL LCORR,LMSSG

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c final state after inc step
      PARAMETER (MAXFSP=10)
      COMMON /DTCAPA/ PFSP(5,MAXFSP),IDFSP(MAXFSP),NFSP

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c output-common for DHADRI/ELHAIN
c final state from HADRIN interaction
      PARAMETER (MAXFIN=10)
      COMMON /HNFSPA/ ITRH(MAXFIN),CXRH(MAXFIN),CYRH(MAXFIN),
     &                CZRH(MAXFIN),ELRH(MAXFIN),PLRH(MAXFIN),IRH


      DIMENSION PPR(5),PPR1(5),PTA(5),BGTA(4),
     &          P1IN(4),P2IN(4),P1OUT(4),P2OUT(4),IMCORR(2)

      DATA LMSSG /.TRUE./

      IREJ  = 0
      NFSP  = 0
      KCORR = 0
      IMCORR(1) = 0
      IMCORR(2) = 0
      LCORR = .FALSE.

c   dump initial particles for energy-momentum cons. check
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(PPR(1),PPR(2),PPR(3),PPR(4),1,IDUM,IDUM)
         CALL DT_EVTEMC(PTA(1),PTA(2),PTA(3),PTA(4),2,IDUM,IDUM)
      ENDIF

      AMP2 = PPR(4)**2-PPR(1)**2-PPR(2)**2-PPR(3)**2
      AMT2 = PTA(4)**2-PTA(1)**2-PTA(2)**2-PTA(3)**2
      IF ((AMP2.LT.ZERO).OR.(AMT2.LT.ZERO).OR.
     &    (ABS(AMP2-AAM(IDPR)**2).GT.TINY5).OR.
     &    (ABS(AMT2-AAM(IDTA)**2).GT.TINY5)) THEN
         IF (LMSSG.AND.(IOULEV(3).GT.0))
     &   WRITE(ErrorOut,
     * 1000) AMP2,AAM(IDPR)**2,AMT2,AAM(IDTA)**2
 1000    FORMAT(1X,'HADRIN:   WARNING! INCONSISTENT PROJECTILE/TARGET',
     &          ' MASS',/,20X,'AMP2 = ',E12.4,', AAM(IDPR)**2 = ',
     &          E12.4,/,20X,'AMT2 = ',E12.4,', AAM(IDTA)**2 = ',E12.4)
         LMSSG = .FALSE.
         LCORR = .TRUE.
      ENDIF

c convert initial state particles into particles which can be
c handled by HADRIN
      IDHPR = IDPR
      IDHTA = IDTA
      IF ((IDHPR.LE.0).OR.(IDHPR.GE.111).OR.LCORR) THEN
         IF ((IDHPR.LE.0).OR.(IDHPR.GE.111)) IDHPR = 1
         DO 1 K=1,4
            P1IN(K) = PPR(K)
            P2IN(K) = PTA(K)
    1    CONTINUE
         XM1 = AAM(IDHPR)
         XM2 = AAM(IDHTA)
         CALL DT_MASHEL(P1IN,P2IN,XM1,XM2,P1OUT,P2OUT,IREJ1)
         IF (IREJ1.GT.0) THEN
            WRITE(ErrorOut,
     * '(1X,A)') 'HADRIN:   inconsistent mass trsf.'
            GOTO 9999
         ENDIF
         DO 2 K=1,4
            PPR(K) = P1OUT(K)
            PTA(K) = P2OUT(K)
    2    CONTINUE
         PPR(5) = SQRT(PPR(4)**2-PPR(1)**2-PPR(2)**2-PPR(3)**2)
         PTA(5) = SQRT(PTA(4)**2-PTA(1)**2-PTA(2)**2-PTA(3)**2)
      ENDIF

c Lorentz-parameter for trafo into rest-system of target
      DO 3 K=1,4
         BGTA(K) = PTA(K)/PTA(5)
    3 CONTINUE
c transformation of projectile into rest-system of target
      CALL DT_DALTRA(BGTA(4),-BGTA(1),-BGTA(2),-BGTA(3),PPR(1),PPR(2),
     &            PPR(3),PPR(4),PPRTO1,PPR1(1),PPR1(2),PPR1(3),
     &            PPR1(4))

c direction cosines of projectile in target rest system
      CX = PPR1(1)/PPRTO1
      CY = PPR1(2)/PPRTO1
      CZ = PPR1(3)/PPRTO1

c sample inelastic interaction
      IF (MODE.EQ.1) THEN
         CALL DT_DHADRI(IDHPR,PPRTO1,PPR1(4),CX,CY,CZ,IDHTA)
         IF (IRH.EQ.1) GOTO 9998
c sample elastic interaction
      ELSEIF (MODE.EQ.2) THEN
         CALL DT_ELHAIN(IDHPR,PPRTO1,PPR1(4),CX,CY,CZ,IDHTA,IREJ1)
         IF (IREJ1.NE.0) THEN
            IF (IOULEV(1).GT.0) WRITE(ErrorOut,
     * *) 'rejected 1 in HADRIN'
            GOTO 9999
         ENDIF
         IF (IRH.EQ.1) GOTO 9998
      ELSE
         WRITE(ErrorOut,1001) MODE,INTHAD
 1001    FORMAT(1X,'HADRIN:   WARNING! INCONSISTENT INTERACTION MODE',
     &          I4,' (INTHAD =',I4,')')
         GOTO 9999
      ENDIF

c transform final state particles back into Lab.
      DO 4 I=1,IRH
         NFSP = NFSP+1
         PX   = CXRH(I)*PLRH(I)
         PY   = CYRH(I)*PLRH(I)
         PZ   = CZRH(I)*PLRH(I)
         CALL DT_DALTRA(BGTA(4),BGTA(1),BGTA(2),BGTA(3),
     &               PX,PY,PZ,ELRH(I),PTOFSP,PFSP(1,NFSP),
     &               PFSP(2,NFSP),PFSP(3,NFSP),PFSP(4,NFSP))
         IDFSP(NFSP) = ITRH(I)
         AMFSP2 = PFSP(4,NFSP)**2-PFSP(1,NFSP)**2-PFSP(2,NFSP)**2-
     &                                            PFSP(3,NFSP)**2
         IF (AMFSP2.LT.-TINY3) THEN
            WRITE(ErrorOut,
     * 1002) IDFSP(NFSP),PFSP(1,NFSP),PFSP(2,NFSP),
     &                       PFSP(3,NFSP),PFSP(4,NFSP),AMFSP2
 1002       FORMAT(1X,'HADRIN:   WARNING! FINAL STATE PARTICLE (ID = ',
     &             I2,') WITH NEGATIVE MASS^2',/,1X,5E12.4)
            GOTO 9999
         ELSE
            PFSP(5,NFSP) = SQRT(ABS(AMFSP2))
            IF (ABS(PFSP(5,NFSP)-AAM(IDFSP(NFSP))).GT.TINY1) THEN
               WRITE(ErrorOut,
     * 1003) IDFSP(NFSP),AAM(IDFSP(NFSP)),
     &                          PFSP(5,NFSP)
 1003          FORMAT(1X,'HADRIN:   WARNING! FINAL STATE PARTICLE',
     &                ' (ID = ',I2,') WITH INCONSISTENT MASS',/,1X,
     &                2E12.4)
               KCORR         = KCORR+1
               IF (KCORR.GT.2) GOTO 9999
               IMCORR(KCORR) = NFSP
            ENDIF
         ENDIF
c   dump final state particles for energy-momentum cons. check
         IF (LEMCCK) CALL DT_EVTEMC(-PFSP(1,I),-PFSP(2,I),
     &                           -PFSP(3,I),-PFSP(4,I),2,IDUM,IDUM)
    4 CONTINUE

c transform momenta on mass shell in case of inconsistencies in
c HADRIN
      IF (KCORR.GT.0) THEN
         IF (KCORR.EQ.2) THEN
            I1 = IMCORR(1)
            I2 = IMCORR(2)
         ELSE
            IF (IMCORR(1).EQ.1) THEN
               I1 = 1
               I2 = 2
            ELSE
               I1 = 1
               I2 = IMCORR(1)
            ENDIF
         ENDIF
         IF (LEMCCK) CALL DT_EVTEMC(PFSP(1,I1),PFSP(2,I1),
     &                           PFSP(3,I1),PFSP(4,I1),2,IDUM,IDUM)
         IF (LEMCCK) CALL DT_EVTEMC(PFSP(1,I2),PFSP(2,I2),
     &                           PFSP(3,I2),PFSP(4,I2),2,IDUM,IDUM)
         DO 5 K=1,4
            P1IN(K) = PFSP(K,I1)
            P2IN(K) = PFSP(K,I2)
    5    CONTINUE
         XM1 = AAM(IDFSP(I1))
         XM2 = AAM(IDFSP(I2))
         CALL DT_MASHEL(P1IN,P2IN,XM1,XM2,P1OUT,P2OUT,IREJ1)
         IF (IREJ1.GT.0) THEN
            WRITE(ErrorOut,
     * '(1X,A)') 'HADRIN:   inconsistent mass trsf.'
C           GOTO 9999
         ENDIF
         DO 6 K=1,4
            PFSP(K,I1) = P1OUT(K)
            PFSP(K,I2) = P2OUT(K)
    6    CONTINUE
         PFSP(5,I1) = SQRT(PFSP(4,I1)**2-PFSP(1,I1)**2
     &                    -PFSP(2,I1)**2-PFSP(3,I1)**2)
         PFSP(5,I2) = SQRT(PFSP(4,I2)**2-PFSP(1,I2)**2
     &                    -PFSP(2,I2)**2-PFSP(3,I2)**2)
c   dump final state particles for energy-momentum cons. check
         IF (LEMCCK) CALL DT_EVTEMC(-PFSP(1,I1),-PFSP(2,I1),
     &                           -PFSP(3,I1),-PFSP(4,I1),2,IDUM,IDUM)
         IF (LEMCCK) CALL DT_EVTEMC(-PFSP(1,I2),-PFSP(2,I2),
     &                           -PFSP(3,I2),-PFSP(4,I2),2,IDUM,IDUM)
      ENDIF

c check energy-momentum conservation
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(DUM,DUM,DUM,DUM,4,102,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
      ENDIF

      RETURN

 9998 CONTINUE
      IREJ = 2
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===hadcol=============================================================*
c
CDECK  ID>, DT_HADCOL
      SUBROUTINE DT_HADCOL(IDPROJ,PPN,IDXTAR,IREJ)

c***********************************************************************
c Interface to the HADRIN-routines for inelastic and elastic           *
c scattering. This subroutine samples hadron-nucleus interactions      *
c below DPM-threshold.                                                 *
c      IDPROJ        BAMJET-index of projectile hadron                 *
c      PPN           projectile momentum in target rest frame          *
c      IDXTAR        DTEVT1-index of target nucleon undergoing         *
c                    interaction with projectile hadron                *
c This subroutine replaces HADHAD.                                     *
c This version dated 5.5.95 is written by S. Roesler                   *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,TINY3=1.0D-3,ONE=1.0D0)

      LOGICAL LSTART

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c interface HADRIN-DPM
      COMMON /HNTHRE/ EHADTH,EHADLO,EHADHI,INTHAD,IDXTA

c parameter for intranuclear cascade
      LOGICAL LPAULI
      COMMON /DTFOTI/ TAUFOR,KTAUGE,ITAUVE,INCMOD,LPAULI

c final state after inc step
      PARAMETER (MAXFSP=10)
      COMMON /DTCAPA/ PFSP(5,MAXFSP),IDFSP(MAXFSP),NFSP

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      DIMENSION PPROJ(5),PNUC(5)
      
      DATA LSTART /.TRUE./
c//////////////////////KK
      integer counter/0/
      save counter
c///////////////////



      IREJ   = 0

      NPOINT(1) = NHKK+1

      TAUSAV = TAUFOR
      TAUFOR = TAUFOR/2.0D0
      IF (LSTART) THEN
         WRITE(ErrorOut,1000)
 1000    FORMAT(/,1X,'HADCOL:  SCATTERING HANDLED BY HADRIN')
         WRITE(ErrorOut,1001) TAUFOR
 1001    FORMAT(/,1X,'HADCOL:  FORMATION ZONE PARAMETER SET TO ',
     &          F5.1,' FM/C')
         LSTART = .FALSE.
      ENDIF

      IDNUC  = IDBAM(IDXTAR)
c//////////////KK   this happenend for pion -  1.08 Gev
c      if(IDNUCS .le. 0) then
c         counter = counter + 1
c         if(counter .le. 2) then
c            call checkstat("inucas4")
c         endif
c         goto 9999
c      endif
c      if(IDPROJ .le. 0) then
c         call checkstat("inucas5")
c         goto 9999
c      endif
c/////////////
      IDNUC1 = IDT_MCHAD(IDNUC)
      IDPRO1 = IDT_MCHAD(IDPROJ)

      IF ((INTHAD.EQ.1).OR.(INTHAD.EQ.2)) THEN
         IPROC = INTHAD
      ELSE
c
C        CALL DT_SIHNIN(IDPRO1,IDNUC1,PPN,SIGIN)
C        CALL DT_SIHNEL(IDPRO1,IDNUC1,PPN,SIGEL)
         DUMZER = ZERO
         CALL DT_XSHN(IDPRO1,IDNUC1,PPN,DUMZER,SIGTOT,SIGEL)
         SIGIN = SIGTOT-SIGEL
C        SIGTOT = SIGIN+SIGEL
c*
         IPROC  = 1
         IF (DT_RNDM(SIGIN).LT.SIGEL/SIGTOT) IPROC = 2
      ENDIF

      PPROJ(1) = ZERO
      PPROJ(2) = ZERO
      PPROJ(3) = PPN
      PPROJ(5) = AAM(IDPROJ)
      PPROJ(4) = SQRT(PPROJ(5)**2+PPROJ(3)**2)
      DO 1 K=1,5
         PNUC(K)  = PHKK(K,IDXTAR)
    1 CONTINUE

      ILOOP = 0
    2 CONTINUE
      ILOOP = ILOOP+1
      IF (ILOOP.GT.100) GOTO 9999

      CALL DT_HADRIN(IDPROJ,PPROJ,IDNUC,PNUC,IPROC,IREJ1)
      IF (IREJ1.EQ.1) GOTO 9999

      IF (IREJ1.GT.1) THEN
c no interaction possible
c   require Pauli blocking
         IF ((IDPROJ.EQ.1).AND.(PPROJ(4).LE.PFERMP(2)+PPROJ(5))) GOTO 2
         IF ((IDPROJ.EQ.8).AND.(PPROJ(4).LE.PFERMN(2)+PPROJ(5))) GOTO 2
         IF ((IIBAR(IDPROJ).NE.1).AND.
     &       (PPROJ(4).LE.EPOT(2,IDPROJ)+PPROJ(5)))              GOTO 2
c   store incoming particle as final state particle
         CALL DT_LTNUC(PPROJ(3),PPROJ(4),PCMS,ECMS,3)
         CALL DT_EVTPUT(1,IDPROJ,1,0,PPROJ(1),PPROJ(2),PCMS,ECMS,0,0,0)
         NPOINT(4) = NHKK
      ELSE
c require Pauli blocking for final state nucleons
         DO 4 I=1,NFSP
            IF ((IDFSP(I).EQ.1).AND.
     &          (PFSP(4,I).LE.PFERMP(2)+AAM(IDFSP(I))))       GOTO 2
            IF ((IDFSP(I).EQ.8).AND.
     &          (PFSP(4,I).LE.PFERMN(2)+AAM(IDFSP(I))))       GOTO 2
            IF ((IIBAR(IDFSP(I)).NE.1).AND.
     &          (PFSP(4,I).LE.EPOT(2,IDFSP(I))+AAM(IDFSP(I))))GOTO 2
    4    CONTINUE
c store final state particles
         DO 5 I=1,NFSP
            IST = 1
            IF ((IIBAR(IDFSP(I)).EQ.1).AND.
     &          (PFSP(4,I).LE.EPOT(2,IDFSP(I))+AAM(IDFSP(I)))) IST = 16
            IDHAD = IDT_IPDGHA(IDFSP(I))
            CALL DT_LTNUC(PFSP(3,I),PFSP(4,I),PCMS,ECMS,3)
            CALL DT_EVTPUT(IST,IDHAD,1,IDXTAR,PFSP(1,I),PFSP(2,I),
     &                                        PCMS,ECMS,0,0,0)
            IF (I.EQ.1) NPOINT(4) = NHKK
            VHKK(1,NHKK) = 0.5D0*(VHKK(1,1)+VHKK(1,IDXTAR))
            VHKK(2,NHKK) = 0.5D0*(VHKK(2,1)+VHKK(2,IDXTAR))
            VHKK(3,NHKK) = VHKK(3,IDXTAR)
            VHKK(4,NHKK) = VHKK(4,IDXTAR)
            WHKK(1,NHKK) = 0.5D0*(WHKK(1,1)+WHKK(1,IDXTAR))
            WHKK(2,NHKK) = 0.5D0*(WHKK(2,1)+WHKK(2,IDXTAR))
            WHKK(3,NHKK) = WHKK(3,1)
            WHKK(4,NHKK) = WHKK(4,1)
    5    CONTINUE
      ENDIF
      TAUFOR = TAUSAV
      RETURN

 9999 CONTINUE
      IREJ = 1
      TAUFOR = TAUSAV
      RETURN
      END
c
c===getemu=============================================================*
c
CDECK  ID>, DT_GETEMU
      SUBROUTINE DT_GETEMU(IT,ITZ,KKMAT,MODE)

c***********************************************************************
c Sampling of emulsion component to be considered as target-nucleus.   *
c This version dated 6.5.95   is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY3=1.0D-3,TINY10=1.0D-10)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c Glauber formalism: flags and parameters for statistics
      LOGICAL LPROD
      CHARACTER*8 CGLB
      COMMON /DTGLGP/ JSTATB,JBINSB,CGLB,IOGLB,LPROD


      IF (MODE.EQ.0) THEN
         SUMFRA = ZERO
         RR = DT_RNDM(SUMFRA)
         IT  = 0
         ITZ = 0
         DO 1 ICOMP=1,NCOMPO
            SUMFRA = SUMFRA+EMUFRA(ICOMP)
            IF (SUMFRA.GT.RR) THEN
               IT    = IEMUMA(ICOMP)
               ITZ   = IEMUCH(ICOMP)
               KKMAT = ICOMP
               GOTO 2
            ENDIF
    1    CONTINUE
    2    CONTINUE
         IF (IT.LE.0) THEN
            WRITE(ErrorOut,'(1X,A,E12.3)')
     &       'WARNING!  NORM. FAILURE WITHIN EMULSION FRACTIONS',
     &       SUMFRA
            STOP
         ENDIF
      ELSEIF (MODE.EQ.1) THEN
         NDIFF = 10000
         DO 3 I=1,NCOMPO
            IDIFF = ABS(IT-IEMUMA(I))
            IF (IDIFF.LT.NDIFF) THEN
               KKMAT = I
               NDIFF = IDIFF
            ENDIF
    3    CONTINUE
      ELSE
         STOP 'DT_GETEMU'
      ENDIF

c bypass for variable projectile/target/energy runs: the correct
c Glauber data will be always loaded on kkmat=1
      IF (IOGLB.EQ.100) THEN
         KKMAT = 1
      ENDIF

      RETURN
      END
c
c===nclpot=============================================================*
c
CDECK  ID>, DT_NCLPOT
      SUBROUTINE DT_NCLPOT(IPZ,IP,ITZ,IT,AFERP,AFERT,MODE)

c***********************************************************************
c Calculation of Coulomb and nuclear potential for a given configurat. *
c               IPZ, IP       charge/mass number of proj.              *
c               ITZ, IT       charge/mass number of targ.              *
c               AFERP,AFERT   factors modifying proj./target pot.      *
c                             if =0, FERMOD is used                    *
c               MODE = 0      calculation of binding energy            *
c                    = 1      pre-calculated binding energy is used    *
c This version dated 16.11.95  is written by S. Roesler.               *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY3=1.0D-3,TINY2=1.0D-2,
     &           TINY10=1.0D-10)

      LOGICAL LSTART

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI


      DIMENSION IDXPOT(14)
c                   ap   an  lam  alam sig- sig+ sig0 tet0 tet- asig-
      DATA IDXPOT /   2,   9,  17,  18,  20,  21,  22,  97,  98,  99,
c                 asig0 asig+ atet0 atet+
     &              100, 101, 102, 103/

      DATA AN     /0.4D0/
      DATA LSTART /.TRUE./

      IF (MODE.EQ.0) THEN
         EBINDP(1) = ZERO
         EBINDN(1) = ZERO
         EBINDP(2) = ZERO
         EBINDN(2) = ZERO
      ENDIF
      AIP  = DBLE(IP)
      AIPZ = DBLE(IPZ)
      AIT  = DBLE(IT)
      AITZ = DBLE(ITZ)

      FERMIP = AFERP
      IF (AFERP.LE.ZERO) FERMIP = FERMOD
      FERMIT = AFERT
      IF (AFERT.LE.ZERO) FERMIT = FERMOD

c Fermi momenta and binding energy for projectile
      IF ((IP.GT.1).AND.LFERMI) THEN
         IF (MODE.EQ.0) THEN
C           EBINDP(1) = DT_EBIND(IP,IPZ)-DT_EBIND(IP-1,IPZ-1)
C           EBINDN(1) = DT_EBIND(IP,IPZ)-DT_EBIND(IP-1,IPZ)
            BIP  = AIP -ONE
            BIPZ = AIPZ-ONE
            EBINDP(1) = 1.0D-3*ABS(DT_ENERGY(AIP,AIPZ)
     &                            -DT_ENERGY(BIP,BIPZ))
            IF (AIP.LE.AIPZ) THEN
               EBINDN(1) = EBINDP(1)
               WRITE(ErrorOut,
     * *) ' DT_NCLPOT: AIP.LE.AIPZ (',AIP,AIPZ,')'
            ELSE
               EBINDN(1) = 1.0D-3*ABS(DT_ENERGY(AIP,AIPZ)
     &                               -DT_ENERGY(BIP,AIPZ))
            ENDIF
         ENDIF
         PFERMP(1) = FERMIP*AN*(AIPZ/AIP)**0.333333D0
         PFERMN(1) = FERMIP*AN*((AIP-AIPZ)/AIP)**0.33333D0
      ELSE
         PFERMP(1) = ZERO
         PFERMN(1) = ZERO
      ENDIF
c effective nuclear potential for projectile
C     EPOT(1,1) = PFERMP(1)**2/(2.0D0*AAM(1)) + EBINDP(1)
C     EPOT(1,8) = PFERMN(1)**2/(2.0D0*AAM(8)) + EBINDN(1)
      EPOT(1,1) = SQRT(PFERMP(1)**2+AAM(1)**2) -AAM(1) + EBINDP(1)
      EPOT(1,8) = SQRT(PFERMN(1)**2+AAM(8)**2) -AAM(8) + EBINDN(1)

c Fermi momenta and binding energy for target
      IF ((IT.GT.1).AND.LFERMI) THEN
         IF (MODE.EQ.0) THEN
C           EBINDP(2) = DT_EBIND(IT,ITZ)-DT_EBIND(IT-1,ITZ-1)
C           EBINDN(2) = DT_EBIND(IT,ITZ)-DT_EBIND(IT-1,ITZ)
            BIT  = AIT -ONE
            BITZ = AITZ-ONE
            EBINDP(2) = 1.0D-3*ABS(DT_ENERGY(AIT,AITZ)
     &                            -DT_ENERGY(BIT,BITZ))
            IF (AIT.LE.AITZ) THEN
               EBINDN(2) = EBINDP(2)
               WRITE(ErrorOut,
     * *) ' DT_NCLPOT: AIT.LE.AIPT (',AIT,AIPT,')'
            ELSE
               EBINDN(2) = 1.0D-3*ABS(DT_ENERGY(AIT,AITZ)
     &                               -DT_ENERGY(BIT,AITZ))
            ENDIF
         ENDIF
         PFERMP(2) = FERMIT*AN*(AITZ/AIT)**0.333333D0
         PFERMN(2) = FERMIT*AN*((AIT-AITZ)/AIT)**0.33333D0
      ELSE
         PFERMP(2) = ZERO
         PFERMN(2) = ZERO
      ENDIF
c effective nuclear potential for target
C     EPOT(2,1) = PFERMP(2)**2/(2.0D0*AAM(1)) + EBINDP(2)
C     EPOT(2,8) = PFERMN(2)**2/(2.0D0*AAM(8)) + EBINDN(2)
      EPOT(2,1) = SQRT(PFERMP(2)**2+AAM(1)**2) -AAM(1) + EBINDP(2)
      EPOT(2,8) = SQRT(PFERMN(2)**2+AAM(8)**2) -AAM(8) + EBINDN(2)

      DO 2 I=1,14
         EPOT(1,IDXPOT(I)) = EPOT(1,8)
         EPOT(2,IDXPOT(I)) = EPOT(2,8)
    2 CONTINUE

c Coulomb energy
      ETACOU(1) = ZERO
      ETACOU(2) = ZERO
      IF (ICOUL.EQ.1) THEN
         IF (IP.GT.1)
     &   ETACOU(1) = 0.001116D0*AIPZ/(1.0D0+AIP**0.333D0)
         IF (IT.GT.1)
     &   ETACOU(2) = 0.001116D0*AITZ/(1.0D0+AIT**0.333D0)
      ENDIF

      IF (LSTART) THEN
         WRITE(ErrorOut,1000) IP,IPZ,IT,ITZ,EBINDP,EBINDN,
     &                    EPOT(1,1)-EBINDP(1),EPOT(2,1)-EBINDP(2),
     &                    EPOT(1,8)-EBINDN(1),EPOT(2,8)-EBINDN(2),
     &                    FERMOD,ETACOU
 1000    FORMAT(/,/,1X,'NCLPOT:    QUANTITIES FOR INCLUSION OF NUCLEAR'
     &           ,' EFFECTS',/,12X,'---------------------------',
     &           '----------------',/,/,38X,'PROJECTILE',
     &           '      TARGET',/,/,1X,'MASS NUMBER / CHARGE',
     &           17X,I3,' /',I3,6X,I3,' /',I3,/,1X,'BINDING ENERGY  -',
     &           ' PROTON   (GEV) ',2E14.4,/,17X,'- NEUTRON  (GEV)'
     &          ,1X,2E14.4,/,1X,'FERMI-POTENTIAL - PROTON   (GEV)',
     &           1X,2E14.4,/,17X,'- NEUTRON  (GEV) ',2E14.4,/,/,
     &           1X,'SCALE FACTOR FOR FERMI-MOMENTUM    ',F4.2,/,
     &           /,1X,'COULOMB-ENERGY ',2(E14.4,' GEV  '),/,/)
         LSTART = .FALSE.
      ENDIF

      RETURN
      END
c
c===resncl=============================================================*
c
CDECK  ID>, DT_RESNCL
      SUBROUTINE DT_RESNCL(EPN,NLOOP,MODE)

c***********************************************************************
c Treatment of residual nuclei and nuclear effects.                    *
c         MODE = 1     initializations                                 *
c              = 2     treatment of final state                        *
c This version dated 16.11.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.D0,ONE=1.D0,TWO=2.D0,THREE=3.D0,TINY3=1.0D-3,
     &           TINY2=1.0D-2,TINY1=1.0D-1,TINY4=1.0D-4,TINY10=1.0D-10,
     &           ONETHI=ONE/THREE)
      PARAMETER (AMUAMU = 0.93149432D0,
     &           FM2MM  = 1.0D-12,
     &           RNUCLE = 1.12D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c treatment of residual nuclei: wounded nucleons
      COMMON /DTWOUN/ NPW,NPW0,NPCW,NTW,NTW0,NTCW,IPW(210),ITW(210)

c treatment of residual nuclei: 4-momenta
      LOGICAL LRCLPR,LRCLTA
      COMMON /DTRNU1/ PINIPR(5),PINITA(5),PRCLPR(5),PRCLTA(5),
     &                TRCLPR(5),TRCLTA(5),LRCLPR,LRCLTA


      DIMENSION PFSP(4),PSEC(4),PSEC0(4)
      DIMENSION PMOMB(5000),IDXB(5000),PMOMM(10000),IDXM(10000),
     &          IDXCOR(15000),IDXOTH(NMXHKK)

      GOTO (1,2) MODE

c------- initializations
    1 CONTINUE

c initialize arrays for residual nuclei
      DO 10 K=1,5
         IF (K.LE.4) THEN
            PFSP(K)     = ZERO
         ENDIF
         PINIPR(K) = ZERO
         PINITA(K) = ZERO
         PRCLPR(K) = ZERO
         PRCLTA(K) = ZERO
         TRCLPR(K) = ZERO
         TRCLTA(K) = ZERO
   10 CONTINUE
      SCPOT = ONE
      NLOOP = 0

c correction of projectile 4-momentum for effective target pot.
c and Coulomb-energy (in case of hadron-nucleus interaction only)
      IF ((IP.EQ.1).AND.(IT.GT.1).AND.LFERMI) THEN
         EPNI = EPN
c   Coulomb-energy:
c     positively charged hadron - check energy for Coloumb pot.
         IF (IICH(IJPROJ).EQ.1) THEN
            THRESH = ETACOU(2)+AAM(IJPROJ)
            IF (EPNI.LE.THRESH) THEN
               WRITE(ErrorOut,1000)
 1000          FORMAT(/,1X,'KKINC:  WARNING!  PROJECTILE ENERGY',
     &                ' BELOW COULOMB THRESHOLD - EVENT REJECTED',/)
               ISTHKK(1) = 1
               RETURN
            ENDIF
c     negatively charged hadron - increase energy by Coulomb energy
         ELSEIF (IICH(IJPROJ).EQ.-1) THEN
            EPNI = EPNI+ETACOU(2)
         ENDIF
         IF ((IJPROJ.EQ.1).OR.(IJPROJ.EQ.8)) THEN
c   Effective target potential
csr 6.6. binding energy only (to avoid negative exc. energies)
C           EPNI = EPNI+EPOT(2,IJPROJ)
            EBIPOT = EBINDP(2)
            IF ((IJPROJ.NE.1).AND.(ABS(EPOT(2,IJPROJ)).GT.5.0D-3))
     &         EBIPOT = EBINDN(2)
            EPNI = EPNI+ABS(EBIPOT)
c re-initialization of DTLTRA
            DUM1 = ZERO
            DUM2 = ZERO
            CALL DT_LTINI(IJPROJ,IJTARG,EPNI,DUM1,DUM2,0)
         ENDIF
      ENDIF

c projectile in n-n cms
      IF ((IP.LE.1).AND.(IT.GT.1)) THEN
         PMASS1 = AAM(IJPROJ)
C* VDM assumption
C         IF (IJPROJ.EQ.7) PMASS1 = AAM(33)
         IF (IJPROJ.EQ.7) PMASS1 = AAM(IJPROJ)-SQRT(VIRT)
         PMASS2 = AAM(1)
         PM1 = SIGN(PMASS1**2,PMASS1)
         PM2 = SIGN(PMASS2**2,PMASS2)
         PINIPR(4) = (UMO**2-PM2+PM1)/(TWO*UMO)
         PINIPR(5) = PMASS1
         IF (PMASS1.GT.ZERO) THEN
            PINIPR(3) = SQRT((PINIPR(4)-PINIPR(5))
     &                      *(PINIPR(4)+PINIPR(5)))
         ELSE
            PINIPR(3) = SQRT(PINIPR(4)**2-PM1)
         ENDIF
         AIT  = DBLE(IT)
         AITZ = DBLE(ITZ)
         PINITA(5) = AIT*AMUAMU+1.0D-3*DT_ENERGY(AIT,AITZ)
         CALL DT_LTNUC(ZERO,PINITA(5),PINITA(3),PINITA(4),3)
      ELSEIF ((IP.GT.1).AND.(IT.LE.1)) THEN
         PMASS1 = AAM(1)
         PMASS2 = AAM(IJTARG)
         PM1 = SIGN(PMASS1**2,PMASS1)
         PM2 = SIGN(PMASS2**2,PMASS2)
         PINITA(4) = (UMO**2-PM1+PM2)/(TWO*UMO)
         PINITA(5) = PMASS2
         PINITA(3) = -SQRT((PINITA(4)-PINITA(5))
     &                    *(PINITA(4)+PINITA(5)))
         AIP  = DBLE(IP)
         AIPZ = DBLE(IPZ)
         PINIPR(5) = AIP*AMUAMU+1.0D-3*DT_ENERGY(AIP,AIPZ)
         CALL DT_LTNUC(ZERO,PINIPR(5),PINIPR(3),PINIPR(4),2)
      ELSEIF ((IP.GT.1).AND.(IT.GT.1)) THEN
         AIP  = DBLE(IP)
         AIPZ = DBLE(IPZ)
         PINIPR(5) = AIP*AMUAMU+1.0D-3*DT_ENERGY(AIP,AIPZ)
         CALL DT_LTNUC(ZERO,PINIPR(5),PINIPR(3),PINIPR(4),2)
         AIT  = DBLE(IT)
         AITZ = DBLE(ITZ)
         PINITA(5) = AIT*AMUAMU+1.0D-3*DT_ENERGY(AIT,AITZ)
         CALL DT_LTNUC(ZERO,PINITA(5),PINITA(3),PINITA(4),3)
      ENDIF

      RETURN

c------- treatment of final state
    2 CONTINUE

      NLOOP = NLOOP+1
      IF (NLOOP.GT.1) SCPOT = 0.10D0
C     WRITE(LOUT,*) 'event ',NEVHKK,NLOOP,SCPOT

      JPW  = NPW
      JPCW = NPCW
      JTW  = NTW
      JTCW = NTCW
      DO 40 K=1,4
         PFSP(K)   = ZERO
   40 CONTINUE

      NOB = 0
      NOM = 0
      DO 900 I=NPOINT(4),NHKK
         IDXOTH(I) = -1
         IF (ISTHKK(I).EQ.1) THEN
            IF (IDBAM(I).EQ.7) GOTO 900
            IPOT = 0
            IOTHER = 0
c particle moving into forward direction
            IF (PHKK(3,I).GE.ZERO) THEN
c   most likely to be effected by projectile potential
               IPOT = 1
c     there is no projectile nucleus, try target
               IF ((IP.LE.1).OR.((IP-NPW).LE.1)) THEN
                  IPOT   = 2
                  IF (IP.GT.1) IOTHER = 1
c       there is no target nucleus --> skip
                  IF ((IT.LE.1).OR.((IT-NTW).LE.1)) GOTO 900
               ENDIF
c particle moving into backward direction
            ELSE
c   most likely to be effected by target potential
               IPOT = 2
c     there is no target nucleus, try projectile
               IF ((IT.LE.1).OR.((IT-NTW).LE.1)) THEN
                  IPOT   = 1
                  IF (IT.GT.1) IOTHER = 1
c       there is no projectile nucleus --> skip
                  IF ((IP.LE.1).OR.((IP-NPW).LE.1)) GOTO 900
               ENDIF
            ENDIF
            IFLG = -IPOT
c nobam=3: particle is in overlap-region or neither inside proj. nor target
c      =1: particle is not in overlap-region AND is inside target (2)
c      =2: particle is not in overlap-region AND is inside projectile (1)
c flag particles which are inside the nucleus ipot but not in its
c overlap region
            IF ((NOBAM(I).NE.IPOT).AND.(NOBAM(I).LT.3)) IFLG = IPOT
c baryons: keep all nucleons and all others where flag is set
c          IDBAM = 0 happens when ITRNS is set to -1
c             in v3.05, nothing is done so KK follows it
            if( IDBAM(I) > 0 ) then
               IF (IIBAR(IDBAM(I)).NE.0) THEN
                  IF ((IDBAM(I).EQ.1).OR.(IDBAM(I).EQ.8).OR.(IFLG.GT.0))
     &                                                           THEN
                     NOB = NOB+1
                     PMOMB(NOB) = PHKK(3,I)
                     IDXB(NOB)  = SIGN(1000000*IABS(IFLG)
     &                    +100000*IOTHER+I,IFLG)
                  ENDIF
c mesons: keep only those mesons where flag is set
               ELSE
                  IF (IFLG.GT.0) THEN
                     NOM = NOM+1
                     PMOMM(NOM) = PHKK(3,I)
                     IDXM(NOM)  = 1000000*IFLG+100000*IOTHER+I
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
  900 CONTINUE
c
c sort particles in the arrays according to increasing long. momentum
      CALL DT_SORT1(PMOMB,IDXB,NOB,1,NOB,1)
      CALL DT_SORT1(PMOMM,IDXM,NOM,1,NOM,1)
c
c shuffle indices into one and the same array according to the later
c sequence of correction
      NCOR = 0
      IF (IT.GT.1) THEN
         DO 910 I=1,NOB
            IF (PMOMB(I).GT.ZERO) GOTO 911
            NCOR = NCOR+1
            IDXCOR(NCOR) = IDXB(I)
  910    CONTINUE
  911    CONTINUE
         IF (IP.GT.1) THEN
            DO 912 J=1,NOB
               I = NOB+1-J
               IF (PMOMB(I).LT.ZERO) GOTO 913
               NCOR = NCOR+1
               IDXCOR(NCOR) = IDXB(I)
  912       CONTINUE
  913       CONTINUE
         ELSE
            DO 914 I=1,NOB
               IF (PMOMB(I).GT.ZERO) THEN
                  NCOR = NCOR+1
                  IDXCOR(NCOR) = IDXB(I)
               ENDIF
  914       CONTINUE
         ENDIF
      ELSE
         DO 915 J=1,NOB
            I = NOB+1-J
            NCOR = NCOR+1
            IDXCOR(NCOR) = IDXB(I)
  915    CONTINUE
      ENDIF
      DO 925 I=1,NOM
         IF (PMOMM(I).GT.ZERO) GOTO 926
         NCOR = NCOR+1
         IDXCOR(NCOR) = IDXM(I)
  925 CONTINUE
  926 CONTINUE
      DO 927 J=1,NOM
         I = NOM+1-J
         IF (PMOMM(I).LT.ZERO) GOTO 928
         NCOR = NCOR+1
         IDXCOR(NCOR) = IDXM(I)
  927 CONTINUE
  928 CONTINUE
c
C      IF (NEVHKK.EQ.484) THEN
C         WRITE(LOUT,9000) JPCW,JPW-JPCW,JTCW,JTW-JTCW
C 9000    FORMAT(1X,'wounded nucleons (proj.-p,n  targ.-p,n)',/,4I10)
C         WRITE(LOUT,9001) NOB,NOM,NCOR
C 9001    FORMAT(1X,'produced particles (baryons,mesons,all)',3I10)
C         WRITE(LOUT,'(/,A)') ' baryons '
C         DO 950 I=1,NOB
CC           J     = IABS(IDXB(I))
CC           INDEX = J-IABS(J/1000000)*1000000
C            IPOT   = IABS(IDXB(I))/1000000
C            IOTHER = IABS(IDXB(I))/100000-IPOT*10
C            INDEX = IABS(IDXB(I))-IPOT*1000000-IOTHER*100000
C            WRITE(LOUT,9002) I,INDEX,IDXB(I),IDBAM(INDEX),PMOMB(I)
C  950    CONTINUE
C         WRITE(LOUT,'(/,A)') ' mesons '
C         DO 951 I=1,NOM
CC           INDEX = IDXM(I)-IABS(IDXM(I)/1000000)*1000000
C            IPOT   = IABS(IDXM(I))/1000000
C            IOTHER = IABS(IDXM(I))/100000-IPOT*10
C            INDEX = IABS(IDXM(I))-IPOT*1000000-IOTHER*100000
C            WRITE(LOUT,9002) I,INDEX,IDXM(I),IDBAM(INDEX),PMOMM(I)
C  951    CONTINUE
C 9002    FORMAT(1X,4I14,E14.5)
C         WRITE(LOUT,'(/,A)') ' all '
C         DO 952 I=1,NCOR
CC           J     = IABS(IDXCOR(I))
CC           INDEX = J-IABS(J/1000000)*1000000
CC            IPOT   = IABS(IDXCOR(I))/1000000
C            IOTHER = IABS(IDXCOR(I))/100000-IPOT*10
C            INDEX = IABS(IDXCOR(I))-IPOT*1000000-IOTHER*100000
C            WRITE(LOUT,9003) I,INDEX,IDXCOR(I),IDBAM(INDEX)
C  952    CONTINUE
C 9003    FORMAT(1X,4I14)
C      ENDIF
c
      DO 20 ICOR=1,NCOR
         IPOT   = IABS(IDXCOR(ICOR))/1000000
         IOTHER = IABS(IDXCOR(ICOR))/100000-IPOT*10
         I = IABS(IDXCOR(ICOR))-IPOT*1000000-IOTHER*100000
         IDXOTH(I) = 1

         IDSEC  = IDBAM(I)

c reduction of particle momentum by corresponding nuclear potential
c (this applies only if Fermi-momenta are requested)

         IF (LFERMI) THEN

c   Lorentz-transformation into the rest system of the selected nucleus
            IMODE = -IPOT-1
            CALL DT_LTRANS(PHKK(1,I),PHKK(2,I),PHKK(3,I),PHKK(4,I),
     &                  PSEC(1),PSEC(2),PSEC(3),PSEC(4),IDSEC,IMODE)
            PSECO  = SQRT(PSEC(1)**2+PSEC(2)**2+PSEC(3)**2)
            AMSEC  = SQRT(ABS((PSEC(4)-PSECO)*(PSEC(4)+PSECO)))
            JPMOD  = 0

            CHKLEV = TINY3
            IF ((EPROJ.GE.1.0D4).AND.(IDSEC.EQ.7)) CHKLEV = TINY1
            IF (EPROJ.GE.2.0D6) CHKLEV = 1.0D0
            IF (ABS(AMSEC-AAM(IDSEC)).GT.CHKLEV) THEN
               IF (IOULEV(3).GT.0)
     &            WRITE(ErrorOut,
     * 2000) I,NEVHKK,IDSEC,AMSEC,AAM(IDSEC)
 2000          FORMAT(1X,'RESNCL: INCONSISTENT MASS OF PARTICLE',
     &                ' AT ENTRY ',I5,' (EVT.',I8,')',/,' IDSEC: ',
     &                I4,'   AMSEC: ',E12.3,'  AAM(IDSEC): ',E12.3,/)
               GOTO 23
            ENDIF

            DO 21 K=1,4
               PSEC0(K) = PSEC(K)
   21       CONTINUE

c   the correction for nuclear potential effects is applied to as many
c   p/n as many nucleons were wounded; the momenta of other final state
c   particles are corrected only if they materialize inside the corresp.
c   nucleus (here: NOBAM = 1 part. outside proj., = 2 part. outside targ
c   = 3 part. outside proj. and targ., >=10 in overlapping region)
            IF ((IDSEC.EQ.1).OR.(IDSEC.EQ.8)) THEN
               IF (IPOT.EQ.1) THEN
                  IF ((JPW.GT.0).AND.(IOTHER.EQ.0)) THEN
c      this is most likely a wounded nucleon
c*test
C                    RDIST = SQRT((VHKK(1,IPW(JPW))/FM2MM)**2
C    &                           +(VHKK(2,IPW(JPW))/FM2MM)**2
C    &                           +(VHKK(3,IPW(JPW))/FM2MM)**2)
C                    RAD   = RNUCLE*DBLE(IP)**ONETHI
C                    FDEN  = 1.4D0*DT_DENSIT(IP,RDIST,RAD)
C                    PSEC(4) = PSEC(4)-SCPOT*FDEN*EPOT(IPOT,IDSEC)
c*
                     PSEC(4) = PSEC(4)-SCPOT*EPOT(IPOT,IDSEC)
                     JPW = JPW-1
                     JPMOD = 1
                  ELSE
c      correct only if part. was materialized inside nucleus
c      and if it is ouside the overlapping region
                     IF ((NOBAM(I).NE.1).AND.(NOBAM(I).LT.3)) THEN
                        PSEC(4) = PSEC(4)-SCPOT*EPOT(IPOT,IDSEC)
                        JPMOD = 1
                     ENDIF
                  ENDIF
               ELSEIF (IPOT.EQ.2) THEN
                  IF ((JTW.GT.0).AND.(IOTHER.EQ.0)) THEN
c      this is most likely a wounded nucleon
c*test
C                    RDIST = SQRT((VHKK(1,ITW(JTW))/FM2MM)**2
C    &                           +(VHKK(2,ITW(JTW))/FM2MM)**2
C    &                           +(VHKK(3,ITW(JTW))/FM2MM)**2)
C                    RAD   = RNUCLE*DBLE(IT)**ONETHI
C                    FDEN  = 1.4D0*DT_DENSIT(IT,RDIST,RAD)
C                    PSEC(4) = PSEC(4)-SCPOT*FDEN*EPOT(IPOT,IDSEC)
c*
                     PSEC(4) = PSEC(4)-SCPOT*EPOT(IPOT,IDSEC)
                     JTW = JTW-1
                     JPMOD = 1
                  ELSE
c      correct only if part. was materialized inside nucleus
                     IF ((NOBAM(I).NE.2).AND.(NOBAM(I).LT.3)) THEN
                        PSEC(4) = PSEC(4)-SCPOT*EPOT(IPOT,IDSEC)
                        JPMOD = 1
                     ENDIF
                  ENDIF
               ENDIF
            ELSE
               IF ((NOBAM(I).NE.IPOT).AND.(NOBAM(I).LT.3)) THEN
                  PSEC(4) = PSEC(4)-SCPOT*EPOT(IPOT,IDSEC)
                  JPMOD = 1
               ENDIF
            ENDIF

            IF (NLOOP.EQ.1) THEN
c Coulomb energy correction:
c the treatment of Coulomb potential correction is similar to the
c one for nuclear potential
               IF (IDSEC.EQ.1) THEN
                  IF ((IPOT.EQ.1).AND.(JPCW.GT.0)) THEN
                     JPCW = JPCW-1
                  ELSEIF ((IPOT.EQ.2).AND.(JTCW.GT.0)) THEN
                     JTCW = JTCW-1
                  ELSE
                     IF ((NOBAM(I).EQ.IPOT).OR.(NOBAM(I).EQ.3)) GOTO 25
                  ENDIF
               ELSE
                  IF ((NOBAM(I).EQ.IPOT).OR.(NOBAM(I).EQ.3)) GOTO 25
               ENDIF
               IF (IICH(IDSEC).EQ.1) THEN
c    pos. particles: check if they are able to escape Coulomb potential
                  IF (PSEC(4).LT.AMSEC+ETACOU(IPOT)) THEN
                     ISTHKK(I) = 14+IPOT
                     IF (ISTHKK(I).EQ.15) THEN
                        DO 26 K=1,4
                           PHKK(K,I) = PSEC0(K)
                           TRCLPR(K) = TRCLPR(K)+PSEC0(K)
   26                CONTINUE
                        IF ((IDSEC.EQ.1).OR.(IDSEC.EQ.8)) NPW = NPW-1
                        IF (IDSEC.EQ.1) NPCW = NPCW-1
                     ELSEIF (ISTHKK(I).EQ.16) THEN
                        DO 27 K=1,4
                           PHKK(K,I) = PSEC0(K)
                           TRCLTA(K) = TRCLTA(K)+PSEC0(K)
   27                   CONTINUE
                        IF ((IDSEC.EQ.1).OR.(IDSEC.EQ.8)) NTW = NTW-1
                        IF (IDSEC.EQ.1) NTCW = NTCW-1
                     ENDIF
                     GOTO 20
                  ENDIF
               ELSEIF (IICH(IDSEC).EQ.-1) THEN
c    neg. particles: decrease energy by Coulomb-potential
                  PSEC(4) = PSEC(4)-ETACOU(IPOT)
                  JPMOD = 1
               ENDIF
            ENDIF

   25       CONTINUE

            IF (PSEC(4).LT.AMSEC) THEN
               IF (IOULEV(6).GT.0)
     &            WRITE(ErrorOut,2001) I,IDSEC,PSEC(4),AMSEC
 2001          FORMAT(1X,'KKINC: PARTICLE AT DTEVT1-POS. ',I5,
     &                ' IS NOT ALLOWED TO ESCAPE NUCLEUS',/,
     &                8X,'ID : ',I3,'   REDUCED ENERGY: ',E15.4,
     &                '   MASS: ',E12.3)
               ISTHKK(I) = 14+IPOT
               IF (ISTHKK(I).EQ.15) THEN
                  DO 28 K=1,4
                     PHKK(K,I) = PSEC0(K)
                     TRCLPR(K) = TRCLPR(K)+PSEC0(K)
   28             CONTINUE
                  IF ((IDSEC.EQ.1).OR.(IDSEC.EQ.8)) NPW = NPW-1
                  IF (IDSEC.EQ.1) NPCW = NPCW-1
               ELSEIF (ISTHKK(I).EQ.16) THEN
                  DO 29 K=1,4
                     PHKK(K,I) = PSEC0(K)
                     TRCLTA(K) = TRCLTA(K)+PSEC0(K)
   29             CONTINUE
                  IF ((IDSEC.EQ.1).OR.(IDSEC.EQ.8)) NTW = NTW-1
                  IF (IDSEC.EQ.1) NTCW = NTCW-1
               ENDIF
               GOTO 20
            ENDIF

            IF (JPMOD.EQ.1) THEN
               PSECN  = SQRT( (PSEC(4)-AMSEC)*(PSEC(4)+AMSEC) )
c 4-momentum after correction for nuclear potential
               DO 22 K=1,3
                  PSEC(K) = PSEC(K)*PSECN/PSECO
   22          CONTINUE

c store recoil momentum from particles escaping the nuclear potentials
               DO 30 K=1,4
                  IF (IPOT.EQ.1) THEN
                     TRCLPR(K) = TRCLPR(K)+PSEC0(K)-PSEC(K)
                  ELSEIF (IPOT.EQ.2) THEN
                     TRCLTA(K) = TRCLTA(K)+PSEC0(K)-PSEC(K)
                  ENDIF
   30          CONTINUE

c transform momentum back into n-n cms
               IMODE = IPOT+1
               CALL DT_LTRANS(PSEC(1),PSEC(2),PSEC(3),PSEC(4),
     &                     PHKK(1,I),PHKK(2,I),PHKK(3,I),PHKK(4,I),
     &                     IDSEC,IMODE)
            ENDIF

         ENDIF

   23    CONTINUE
         DO 31 K=1,4
            PFSP(K) = PFSP(K)+PHKK(K,I)
   31    CONTINUE

   20 CONTINUE

      DO 33 I=NPOINT(4),NHKK
         IF ((ISTHKK(I).EQ.1).AND.(IDXOTH(I).LT.0)) THEN
            PFSP(1) = PFSP(1)+PHKK(1,I)
            PFSP(2) = PFSP(2)+PHKK(2,I)
            PFSP(3) = PFSP(3)+PHKK(3,I)
            PFSP(4) = PFSP(4)+PHKK(4,I)
         ENDIF
   33 CONTINUE

      DO 34 K=1,5
         PRCLPR(K) = TRCLPR(K)
         PRCLTA(K) = TRCLTA(K)
   34 CONTINUE

      IF ((IP.EQ.1).AND.(IT.GT.1).AND.LFERMI) THEN
c hadron-nucleus interactions: get residual momentum from energy-
c momentum conservation
         DO 32 K=1,4
            PRCLPR(K) = ZERO
            PRCLTA(K) = PINIPR(K)+PINITA(K)-PFSP(K)
   32    CONTINUE
      ELSE
c nucleus-hadron, nucleus-nucleus: get residual momentum from
c accumulated recoil momenta of particles leaving the spectators
c   transform accumulated recoil momenta of residual nuclei into
c   n-n cms
         PZI = PRCLPR(3)
         PEI = PRCLPR(4)
         CALL DT_LTNUC(PZI,PEI,PRCLPR(3),PRCLPR(4),2)
         PZI = PRCLTA(3)
         PEI = PRCLTA(4)
         CALL DT_LTNUC(PZI,PEI,PRCLTA(3),PRCLTA(4),3)
C        IF (IP.GT.1) THEN
            PRCLPR(3) = PRCLPR(3)+PINIPR(3)
            PRCLPR(4) = PRCLPR(4)+PINIPR(4)
C        ENDIF
         IF (IT.GT.1) THEN
            PRCLTA(3) = PRCLTA(3)+PINITA(3)
            PRCLTA(4) = PRCLTA(4)+PINITA(4)
         ENDIF
      ENDIF

c check momenta of residual nuclei
      IF (LEMCCK) THEN
         CALL DT_EVTEMC(-PINIPR(1),-PINIPR(2),-PINIPR(3),-PINIPR(4),
     &               1,IDUM,IDUM)
         CALL DT_EVTEMC(-PINITA(1),-PINITA(2),-PINITA(3),-PINITA(4),
     &               2,IDUM,IDUM)
         CALL DT_EVTEMC(PRCLPR(1),PRCLPR(2),PRCLPR(3),PRCLPR(4),
     &               2,IDUM,IDUM)
         CALL DT_EVTEMC(PRCLTA(1),PRCLTA(2),PRCLTA(3),PRCLTA(4),
     &               2,IDUM,IDUM)
         CALL DT_EVTEMC(PFSP(1),PFSP(2),PFSP(3),PFSP(4),2,IDUM,IDUM)
c*sr 19.12. changed to avoid output when used with phojet
C        CHKLEV = TINY3
         CHKLEV = TINY1
         CALL DT_EVTEMC(DUM,DUM,DUM,CHKLEV,-1,501,IREJ1)
C        IF ((NEVHKK.EQ.409).OR.(NEVHKK.EQ.460).OR.(NEVHKK.EQ.765))
C    &      CALL DT_EVTOUT(4)
         IF (IREJ1.GT.0) RETURN
      ENDIF

      RETURN
      END
c
c===scn4ba=============================================================*
c
CDECK  ID>, DT_SCN4BA
      SUBROUTINE DT_SCN4BA

c***********************************************************************
c SCan /DTEVT1/ 4 BAryons which are not able to escape nuclear pot.    *
c This version dated 12.12.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY3=1.0D-3,TINY2=1.0D-2,
     &           TINY10=1.0D-10)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c treatment of residual nuclei: wounded nucleons
      COMMON /DTWOUN/ NPW,NPW0,NPCW,NTW,NTW0,NTCW,IPW(210),ITW(210)

c treatment of residual nuclei: 4-momenta
      LOGICAL LRCLPR,LRCLTA
      COMMON /DTRNU1/ PINIPR(5),PINITA(5),PRCLPR(5),PRCLTA(5),
     &                TRCLPR(5),TRCLTA(5),LRCLPR,LRCLTA


      DIMENSION PLAB(2,5),PCMS(4)

      IREJ = 0

c get number of wounded nucleons
      NPW    = 0
      NPW0   = 0
      NPCW   = 0
      NPSTCK = 0
      NTW    = 0
      NTW0   = 0
      NTCW   = 0
      NTSTCK = 0

      ISGLPR = 0
      ISGLTA = 0
      LRCLPR = .FALSE.
      LRCLTA = .FALSE.

C     DO 2 I=1,NHKK
      DO 2 I=1,NPOINT(1)
c projectile nucleons wounded in primary interaction and in fzc
         IF ((ISTHKK(I).EQ.11).OR.(ISTHKK(I).EQ.17)) THEN
            NPW      = NPW+1
            IPW(NPW) = I
            NPSTCK   = NPSTCK+1
            IF (IDHKK(I).EQ.2212) NPCW = NPCW+1
            IF (ISTHKK(I).EQ.11)  NPW0 = NPW0+1
C           IF (IP.GT.1) THEN
               DO 5 K=1,4
                  TRCLPR(K) = TRCLPR(K)-PHKK(K,I)
    5          CONTINUE
C           ENDIF
c target nucleons wounded in primary interaction and in fzc
         ELSEIF ((ISTHKK(I).EQ.12).OR.(ISTHKK(I).EQ.18)) THEN
            NTW      = NTW+1
            ITW(NTW) = I
            NTSTCK   = NTSTCK+1
            IF (IDHKK(I).EQ.2212) NTCW = NTCW+1
            IF (ISTHKK(I).EQ.12)  NTW0 = NTW0+1
            IF (IT.GT.1) THEN
               DO 6 K=1,4
                  TRCLTA(K) = TRCLTA(K)-PHKK(K,I)
    6          CONTINUE
            ENDIF
         ELSEIF (ISTHKK(I).EQ.13) THEN
            ISGLPR = I
         ELSEIF (ISTHKK(I).EQ.14) THEN
            ISGLTA = I
         ENDIF
    2 CONTINUE

      DO 11 I=NPOINT(4),NHKK
c baryons which are unable to escape the nuclear potential of proj.
         IF (ISTHKK(I).EQ.15) THEN
            ISGLPR = I
            NPSTCK = NPSTCK-1
            IF (IIBAR(IDBAM(I)).NE.0) THEN
               NPW    = NPW-1
               IF (IICH(IDBAM(I)).GT.0) NPCW = NPCW-1
            ENDIF
            DO 7 K=1,4
               TRCLPR(K) = TRCLPR(K)+PHKK(K,I)
    7       CONTINUE
c baryons which are unable to escape the nuclear potential of targ.
         ELSEIF (ISTHKK(I).EQ.16) THEN
            ISGLTA = I
            NTSTCK = NTSTCK-1
            IF (IIBAR(IDBAM(I)).NE.0) THEN
               NTW    = NTW-1
               IF (IICH(IDBAM(I)).GT.0) NTCW = NTCW-1
            ENDIF
            DO 8 K=1,4
               TRCLTA(K) = TRCLTA(K)+PHKK(K,I)
    8       CONTINUE
         ENDIF
   11 CONTINUE

c residual nuclei so far
      IRESP = IP-NPSTCK
      IREST = IT-NTSTCK

c ckeck for "residual nuclei" consisting of one nucleon only
c treat it as final state particle
      IF (IRESP.EQ.1) THEN
         ID  = IDBAM(ISGLPR)
         IST = ISTHKK(ISGLPR)
         CALL DT_LTRANS(PHKK(1,ISGLPR),PHKK(2,ISGLPR),
     &               PHKK(3,ISGLPR),PHKK(4,ISGLPR),
     &               PCMS(1),PCMS(2),PCMS(3),PCMS(4),ID,2)
         IF (IST.EQ.13) THEN
            ISTHKK(ISGLPR) = 11
         ELSE
            ISTHKK(ISGLPR) = 2
         ENDIF
         CALL DT_EVTPUT(1,IDHKK(ISGLPR),ISGLPR,0,
     &               PCMS(1),PCMS(2),PCMS(3),PCMS(4),
     &               IDRES(ISGLPR),IDXRES(ISGLPR),IDCH(ISGLPR))
         NOBAM(NHKK)      = NOBAM(ISGLPR)
         JDAHKK(1,ISGLPR) = NHKK
         DO 21 K=1,4
            TRCLPR(K) = TRCLPR(K)-PHKK(K,ISGLPR)
   21    CONTINUE
      ENDIF
      IF (IREST.EQ.1) THEN
         ID  = IDBAM(ISGLTA)
         IST = ISTHKK(ISGLTA)
         CALL DT_LTRANS(PHKK(1,ISGLTA),PHKK(2,ISGLTA),
     &               PHKK(3,ISGLTA),PHKK(4,ISGLTA),
     &               PCMS(1),PCMS(2),PCMS(3),PCMS(4),ID,3)
         IF (IST.EQ.14) THEN
            ISTHKK(ISGLTA) = 12
         ELSE
            ISTHKK(ISGLTA) = 2
         ENDIF
         CALL DT_EVTPUT(1,IDHKK(ISGLTA),ISGLTA,0,
     &               PCMS(1),PCMS(2),PCMS(3),PCMS(4),
     &               IDRES(ISGLTA),IDXRES(ISGLTA),IDCH(ISGLTA))
         NOBAM(NHKK)      = NOBAM(ISGLTA)
         JDAHKK(1,ISGLTA) = NHKK
         DO 22 K=1,4
            TRCLTA(K) = TRCLTA(K)-PHKK(K,ISGLTA)
   22    CONTINUE
      ENDIF

c get nuclear potential corresp. to the residual nucleus
      IPRCL  = IP -NPW
      IPZRCL = IPZ-NPCW
      ITRCL  = IT -NTW
      ITZRCL = ITZ-NTCW
      CALL DT_NCLPOT(IPZRCL,IPRCL,ITZRCL,ITRCL,ZERO,ZERO,1)

c baryons unable to escape the nuclear potential are treated as
c excited nucleons (ISTHKK=15,16)
      DO 3 I=NPOINT(4),NHKK
         IF (ISTHKK(I).EQ.1) THEN
            ID  = IDBAM(I)
            IF ( ((ID.EQ.1).OR.(ID.EQ.8)).AND.(NOBAM(I).NE.3) ) THEN
c   final state n and p not being outside of both nuclei are considered
               NPOTP = 1
               NPOTT = 1
               IF ( (IP.GT.1)      .AND.(IRESP.GT.1).AND.
     &              (NOBAM(I).NE.1).AND.(NPW.GT.0)        ) THEN
c     Lorentz-trsf. into proj. rest sys. for those being inside proj.
                  CALL DT_LTRANS(PHKK(1,I),PHKK(2,I),PHKK(3,I),
     &                        PHKK(4,I),PLAB(1,1),PLAB(1,2),PLAB(1,3),
     &                        PLAB(1,4),ID,-2)
                  PLABT = SQRT(PLAB(1,1)**2+PLAB(1,2)**2+PLAB(1,3)**2)
                  PLAB(1,5) = SQRT(ABS( (PLAB(1,4)-PLABT)*
     &                                  (PLAB(1,4)+PLABT) ))
                  EKIN = PLAB(1,4)-PLAB(1,5)
                  IF (EKIN.LE.EPOT(1,ID)) NPOTP = 15
                  IF ((ID.EQ.1).AND.(NPCW.LE.0)) NPOTP = 1
               ENDIF
               IF ( (IT.GT.1)      .AND.(IREST.GT.1).AND.
     &              (NOBAM(I).NE.2).AND.(NTW.GT.0)        ) THEN
c     Lorentz-trsf. into targ. rest sys. for those being inside targ.
                  CALL DT_LTRANS(PHKK(1,I),PHKK(2,I),PHKK(3,I),
     &                        PHKK(4,I),PLAB(2,1),PLAB(2,2),PLAB(2,3),
     &                        PLAB(2,4),ID,-3)
                  PLABT = SQRT(PLAB(2,1)**2+PLAB(2,2)**2+PLAB(2,3)**2)
                  PLAB(2,5) = SQRT(ABS( (PLAB(2,4)-PLABT)*
     &                                  (PLAB(2,4)+PLABT) ))
                  EKIN = PLAB(2,4)-PLAB(2,5)
                  IF (EKIN.LE.EPOT(2,ID)) NPOTT = 16
                  IF ((ID.EQ.1).AND.(NTCW.LE.0)) NPOTT = 1
               ENDIF
               IF (PHKK(3,I).GE.ZERO) THEN
                  ISTHKK(I) = NPOTT
                  IF (NPOTP.NE.1) ISTHKK(I) = NPOTP
               ELSE
                  ISTHKK(I) = NPOTP
                  IF (NPOTT.NE.1) ISTHKK(I) = NPOTT
               ENDIF
               IF (ISTHKK(I).NE.1) THEN
                  J = ISTHKK(I)-14
                  DO 4 K=1,5
                     PHKK(K,I) = PLAB(J,K)
    4             CONTINUE
                  IF (ISTHKK(I).EQ.15) THEN
                     NPW = NPW-1
                     IF (ID.EQ.1) NPCW = NPCW-1
                     DO 9 K=1,4
                        TRCLPR(K) = TRCLPR(K)+PHKK(K,I)
    9                CONTINUE
                  ELSEIF (ISTHKK(I).EQ.16) THEN
                     NTW = NTW-1
                     IF (ID.EQ.1) NTCW = NTCW-1
                     DO 10 K=1,4
                        TRCLTA(K) = TRCLTA(K)+PHKK(K,I)
   10                CONTINUE
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
    3 CONTINUE

c again: get nuclear potential corresp. to the residual nucleus
      IPRCL  = IP -NPW
      IPZRCL = IPZ-NPCW
      ITRCL  = IT -NTW
      ITZRCL = ITZ-NTCW
c      AFERP = 1.2D0*FERMOD*(ONE+(DBLE(IP+10-NPW0)/DBLE(IP+10))**1.1D0)
cC     AFERP = 1.21D0*FERMOD*(ONE+(DBLE(IP+40-NPW0)/DBLE(IP+40))**1.1D0)
c     &             *(0.94D0+0.3D0*EXP(-DBLE(NPW0)/5.0D0)) /2.0D0
C     AFERP = 0.0D0
c      AFERT = 1.2D0*FERMOD*(ONE+(DBLE(IT+10-NTW0)/DBLE(IT+10))**1.1D0)
cC     AFERT = 1.21D0*FERMOD*(ONE+(DBLE(IT+40-NTW0)/DBLE(IT+40))**1.1D0)
c     &             *(0.94D0+0.3D0*EXP(-DBLE(NTW0)/5.0D0)) /2.0D0
C     AFERT = 0.0D0
C     IF (AFERP.LT.FERMOD) AFERP = FERMOD+0.1
C     IF (AFERT.LT.FERMOD) AFERT = FERMOD+0.1
C     IF (AFERP.GT.0.85D0) AFERP = 0.85D0
C     IF (AFERT.GT.0.85D0) AFERT = 0.85D0
      AFERP = FERMOD+0.1D0
      AFERT = FERMOD+0.1D0

      CALL DT_NCLPOT(IPZRCL,IPRCL,ITZRCL,ITRCL,AFERP,AFERT,1)

      RETURN
      END
c
c===ficonf=============================================================*
c
CDECK  ID>, DT_FICONF
      SUBROUTINE DT_FICONF(IJPROJ,IP,IPZ,IT,ITZ,NLOOP,IREJ)

c***********************************************************************
c Treatment of FInal CONFiguration including evaporation, fission and  *
c Fermi-break-up (for light nuclei only).                              *
c Adopted from the original routine FINALE and extended to residual    *
c projectile nuclei.                                                   *
c This version dated 12.12.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY3=1.0D-3,TINY10=1.0D-10)
      PARAMETER (ANGLGB=5.0D-16)
      PARAMETER (AMUAMU=0.93149432D0,AMELEC=0.51099906D-3)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c central particle production, impact parameter biasing
      COMMON /DTIMPA/ BIMIN,BIMAX,XSFRAC,ICENTR

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c treatment of residual nuclei: 4-momenta
      LOGICAL LRCLPR,LRCLTA
      COMMON /DTRNU1/ PINIPR(5),PINITA(5),PRCLPR(5),PRCLTA(5),
     &                TRCLPR(5),TRCLTA(5),LRCLPR,LRCLTA

c treatment of residual nuclei: properties of residual nuclei
      COMMON /DTRNU2/ AMRCL0(2),EEXC(2),EEXCFI(2),
     &                NTOT(2),NPRO(2),NN(2),NH(2),NHPOS(2),NQ(2),
     &                NTOTFI(2),NPROFI(2)

c statistics: residual nuclei
      COMMON /DTSTA2/ EXCDPM(4),EXCEVA(2),
     &                NINCGE,NINCCO(2,3),NINCHR(2,2),NINCWO(2),
     &                NINCST(2,4),NINCEV(2),
     &                NRESTO(2),NRESPR(2),NRESNU(2),NRESBA(2),
     &                NRESPB(2),NRESCH(2),NRESEV(4),
     &                NEVA(2,6),NEVAGA(2),NEVAHT(2),NEVAHY(2,2,240),
     &                NEVAFI(2,2)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c (original name: FINUC)
      PARAMETER (MXP=999)
      COMMON /FKFINU/ CXR    (MXP), CYR    (MXP), CZR    (MXP),
     &                CXRPOL (MXP), CYRPOL (MXP), CZRPOL (MXP),
     &                TKI    (MXP), PLR    (MXP), WEI    (MXP),
     &                TV, TVCMS, TVRECL, TVHEAV, TVBIND, NP0, NP,
     &                KPART  (MXP)

c (original name: RESNUC)
      LOGICAL LRNFSS, LFRAGM
      COMMON /FKRESN/  AMNTAR, AMMTAR, AMNZM1, AMMZM1, AMNNM1, AMMNM1,
     &                   ANOW,   ZNOW, ANCOLL, ZNCOLL, AMMLFT, AMNLFT,
     &                   ERES,  EKRES, AMNRES, AMMRES,  PTRES,  PXRES,
     &                  PYRES,  PZRES, PTRES2,  KTARP,  KTARN, IGREYP,
     &                 IGREYN, IPREEH, IPRDEU, IPRTRI, IPR3HE, IPR4HE,
     &                  ICRES,  IBRES, ISTRES, IEVAPL, IEVAPH, IEVNEU,
     &                 IEVPRO, IEVDEU, IEVTRI, IEV3HE, IEV4HE, IDEEXG,
     &                  IBTAR, ICHTAR, IBLEFT, ICLEFT, IOTHER, LRNFSS,
     &                 LFRAGM

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c event flag
      COMMON /DTEVNO/ NEVENT,ICASCA


      DIMENSION INUC(2),IDXPAR(2),IDPAR(2),AIF(2),AIZF(2),AMRCL(2),
     &          PRCL(2,4),MO1(2),MO2(2),VRCL(2,4),WRCL(2,4),
     &          P1IN(4),P2IN(4),P1OUT(4),P2OUT(4)

      DIMENSION EXPNUC(2),EXC(2,210),NEXC(2,210)
      DATA EXC,NEXC /420*ZERO,420*0/
      DATA EXPNUC /4.0D-3,4.0D-3/

      IREJ   = 0
      LRCLPR = .FALSE.
      LRCLTA = .FALSE.

c skip residual nucleus treatment if not requested or in case
c of central collisions
      IF ((.NOT.LEVPRT).OR.(ICENTR.GT.0).OR.(ICENTR.EQ.-1)) RETURN

      DO 1 K=1,2
         IDPAR(K) = 0
         IDXPAR(K)= 0
         NTOT(K)  = 0
         NTOTFI(K)= 0
         NPRO(K)  = 0
         NPROFI(K)= 0
         NN(K)    = 0
         NH(K)    = 0
         NHPOS(K) = 0
         NQ(K)    = 0
         EEXC(K)  = ZERO
         MO1(K)   = 0
         MO2(K)   = 0
         DO 2 I=1,4
            VRCL(K,I) = ZERO
            WRCL(K,I) = ZERO
    2    CONTINUE
    1 CONTINUE
      NFSP = 0
      INUC(1) = IP
      INUC(2) = IT

      DO 3 I=1,NHKK

c number of final state particles
         IF (ABS(ISTHKK(I)).EQ.1) THEN
            NFSP  = NFSP+1
            IDFSP = IDBAM(I)
         ENDIF

c properties of remaining nucleon configurations
         KF = 0
         IF ((ISTHKK(I).EQ.13).OR.(ISTHKK(I).EQ.15)) KF = 1
         IF ((ISTHKK(I).EQ.14).OR.(ISTHKK(I).EQ.16)) KF = 2
         IF (KF.GT.0) THEN
            IF (MO1(KF).EQ.0) MO1(KF) = I
            MO2(KF)  = I
c   position of residual nucleus = average position of nucleons
            DO 4 K=1,4
               VRCL(KF,K) = VRCL(KF,K)+VHKK(K,I)
               WRCL(KF,K) = WRCL(KF,K)+WHKK(K,I)
    4       CONTINUE
c   total number of particles contributing to each residual nucleus
            NTOT(KF)  = NTOT(KF)+1
            IDTMP     = IDBAM(I)
            IDXTMP    = I
c   total charge of residual nuclei
            NQ(KF) = NQ(KF)+IICH(IDTMP)
c   number of protons
            IF (IDHKK(I).EQ.2212) THEN
               NPRO(KF) = NPRO(KF)+1
c   number of neutrons
            ELSEIF (IDHKK(I).EQ.2112) THEN
               NN(KF) = NN(KF)+1
            ELSE
c   number of baryons other than n, p
               IF (IIBAR(IDTMP).EQ.1) THEN
                  NH(KF) = NH(KF)+1
                  IF (IICH(IDTMP).EQ.1) NHPOS(KF) = NHPOS(KF)+1
               ELSE
c   any other mesons (status set to 1)
C                 WRITE(LOUT,1002) KF,IDTMP
C1002             FORMAT(1X,'FICONF:   residual nucleus ',I2,
C    &                   ' containing meson ',I4,', status set to 1')
                  ISTHKK(I) = 1
                  IDTMP     = IDPAR(KF)
                  IDXTMP    = IDXPAR(KF)
                  NTOT(KF)  = NTOT(KF)-1
               ENDIF
            ENDIF
            IDPAR(KF)  = IDTMP
            IDXPAR(KF) = IDXTMP
         ENDIF
    3 CONTINUE

c reject elastic events (def: one final state particle = projectile)
      IF ((IP.EQ.1).AND.(NFSP.EQ.1).AND.(IDFSP.EQ.IJPROJ)) THEN
         IREXCI(3) = IREXCI(3)+1
         GOTO 9999
C        RETURN
      ENDIF

c check if one nucleus disappeared..
C     IF ((IP.GT.1).AND.(NTOT(1).EQ.0).AND.(NTOT(2).NE.0)) THEN
C        DO 5 K=1,4
C           PRCLTA(K) = PRCLTA(K)+PRCLPR(K)
C           PRCLPR(K) = ZERO
C   5    CONTINUE
C     ELSEIF ((IT.GT.1).AND.(NTOT(2).EQ.0).AND.(NTOT(1).NE.0)) THEN
C        DO 6 K=1,4
C           PRCLPR(K) = PRCLPR(K)+PRCLTA(K)
C           PRCLTA(K) = ZERO
C   6    CONTINUE
C     ENDIF

      ICOR   = 0
      INORCL = 0
      DO 7 I=1,2
         DO 8 K=1,4
c get the average of the nucleon positions
            VRCL(I,K) = VRCL(I,K)/MAX(NTOT(I),1)
            WRCL(I,K) = WRCL(I,K)/MAX(NTOT(I),1)
            IF (I.EQ.1) PRCL(1,K) = PRCLPR(K)
            IF (I.EQ.2) PRCL(2,K) = PRCLTA(K)
    8    CONTINUE
c mass number and charge of residual nuclei
         AIF(I)  = DBLE(NTOT(I))
         AIZF(I) = DBLE(NPRO(I)+NHPOS(I))
         IF (NTOT(I).GT.1) THEN
c masses of residual nuclei in ground state
            AMRCL0(I) = AIF(I)*AMUAMU+1.0D-3*DT_ENERGY(AIF(I),AIZF(I))
c masses of residual nuclei
            PTORCL   = SQRT(PRCL(I,1)**2+PRCL(I,2)**2+PRCL(I,3)**2)
            AMRCL(I) = (PRCL(I,4)-PTORCL)*(PRCL(I,4)+PTORCL)
            IF (AMRCL(I).GT.ZERO) AMRCL(I) = SQRT(AMRCL(I))
            IF (AMRCL(I).LE.ZERO) THEN
               IF (IOULEV(3).GT.0)
     &            WRITE(ErrorOut,
     * 1000) I,PRCL(I,1),PRCL(I,2),PRCL(I,3),
     &                             PRCL(I,4),NTOT
 1000          FORMAT(1X,'WARNING! NEGATIVE EXCITATION ENERGY',/,
     &                I4,4E15.4,2I4)
               AMRCL(I) = ZERO
               EEXC(I)  = ZERO
               IF (NLOOP.LE.500) THEN
                  GOTO 9998
               ELSE
                  IREXCI(2) = IREXCI(2)+1
                  GOTO 9999
               ENDIF
            ELSEIF ((AMRCL(I).GT.ZERO).AND.(AMRCL(I).LT.AMRCL0(I)))
     &                                                         THEN
c*sr
C              WRITE(6,*) NEVHKK,I,NTOT(1),NTOT(2),AMRCL(I),AMRCL0(I)
c*
c*sr 3.3
C              AMRCL(I) = AMRCL0(I)+EXPNUC(I)*DBLE(NTOT(I))
               M = MIN(NTOT(I),210)
               IF (NEXC(I,M).GT.0) THEN
                  AMRCL(I) = AMRCL0(I)+EXC(I,M)/DBLE(NEXC(I,M))
               ELSE
   70             CONTINUE
                  M = M+1
                  IF (M.GE.INUC(I)) THEN
                     AMRCL(I) = AMRCL0(I)+EXPNUC(I)*DBLE(NTOT(I))
                  ELSE
                     IF (NEXC(I,M).GT.0) THEN
                        AMRCL(I) = AMRCL0(I)+EXC(I,M)/DBLE(NEXC(I,M))
                     ELSE
                        GOTO 70
                     ENDIF
                  ENDIF
               ENDIF
c*
               EEXC(I)  = AMRCL(I)-AMRCL0(I)
               ICOR     = ICOR+I
            ELSE
c excitation energies of residual nuclei
               EEXC(I)   = AMRCL(I)-AMRCL0(I)
               IF (ICASCA.EQ.0) THEN
c*sr 15.1.
C                 EXPNUC(I) = EEXC(I)/DBLE(NTOT(I))
                  EXPNUC(I) = EEXC(I)/MAX(1,INUC(I)-NTOT(I))
                  M = MIN(NTOT(I),210)
                  EXC(I,M)  = EXC(I,M)+EEXC(I)
                  NEXC(I,M) = NEXC(I,M)+1
               ENDIF
            ENDIF
         ELSEIF (NTOT(I).EQ.1) THEN
            WRITE(ErrorOut,1003) I
 1003       FORMAT(1X,'FICONF:   WARNING! NTOT(I)=1? (I=',I3,')')
            GOTO 9999
         ELSE
            AMRCL0(I) = ZERO
            AMRCL(I)  = ZERO
            EEXC(I)   = ZERO
            INORCL    = INORCL+I
         ENDIF
    7 CONTINUE

      PRCLPR(5) = AMRCL(1)
      PRCLTA(5) = AMRCL(2)

      IF (ICOR.GT.0) THEN
         IF (INORCL.EQ.0) THEN
c one or both residual nuclei consist of one nucleon only, transform
c this nucleon on mass shell
            DO 9 K=1,4
               P1IN(K) = PRCL(1,K)
               P2IN(K) = PRCL(2,K)
    9       CONTINUE
            XM1 = AMRCL(1)
            XM2 = AMRCL(2)
            CALL DT_MASHEL(P1IN,P2IN,XM1,XM2,P1OUT,P2OUT,IREJ1)
            IF (IREJ1.GT.0) THEN
               WRITE(ErrorOut,*) 'ficonf-mashel rejection'
               GOTO 9999
            ENDIF
            DO 10 K=1,4
               PRCL(1,K) = P1OUT(K)
               PRCL(2,K) = P2OUT(K)
               PRCLPR(K) = P1OUT(K)
               PRCLTA(K) = P2OUT(K)
   10       CONTINUE
            PRCLPR(5) = AMRCL(1)
            PRCLTA(5) = AMRCL(2)
         ELSE
            IF (IOULEV(3).GT.0)
     &      WRITE(ErrorOut,
     * 1001) NEVHKK,INT(AIF(1)),INT(AIZF(1)),
     &                       INT(AIF(2)),INT(AIZF(2)),AMRCL0(1),
     &                       AMRCL(1),AMRCL(1)-AMRCL0(1),AMRCL0(2),
     &                       AMRCL(2),AMRCL(2)-AMRCL0(2)
 1001       FORMAT(1X,'FICONF:   WARNING! NO RESIDUAL NUCLEUS FOR',
     &             ' CORRECTION',/,11X,'AT EVENT',I8,
     &             ',  NUCLEON CONFIG. 1:',2I4,' 2:',2I4,
     &             2(/,11X,3E12.3))
            IF (NLOOP.LE.500) THEN
               GOTO 9998
            ELSE
               IREXCI(1) = IREXCI(1)+1
            ENDIF
         ENDIF
      ENDIF

c update counter
C     IF (NRESEV(1).NE.NEVHKK) THEN
C        NRESEV(1) = NEVHKK
C        NRESEV(2) = NRESEV(2)+1
C     ENDIF
      NRESEV(2) = NRESEV(2)+1
      DO 15 I=1,2
         EXCDPM(I)   = EXCDPM(I)+EEXC(I)
         EXCDPM(I+2) = EXCDPM(I+2)+(EEXC(I)/MAX(NTOT(I),1))
         NRESTO(I) = NRESTO(I)+NTOT(I)
         NRESPR(I) = NRESPR(I)+NPRO(I)
         NRESNU(I) = NRESNU(I)+NN(I)
         NRESBA(I) = NRESBA(I)+NH(I)
         NRESPB(I) = NRESPB(I)+NHPOS(I)
         NRESCH(I) = NRESCH(I)+NQ(I)
   15 CONTINUE

c evaporation
      IF (LEVPRT) THEN
         DO 13 I=1,2
c initialize evaporation counter
            NP = 0
            EEXCFI(I) = ZERO
            IF ((INUC(I).GT.1).AND.(AIF(I).GT.ONE).AND.
     &          (EEXC(I).GT.ZERO)) THEN
c put residual nuclei into DTEVT1
               IDRCL = 80000
               JMASS = INT( AIF(I))
               JCHAR = INT(AIZF(I))
               CALL DT_EVTPUT(1000,IDRCL,MO1(I),MO2(I),PRCL(I,1),
     &              PRCL(I,2),PRCL(I,3),PRCL(I,4),JMASS,JCHAR,0)
c*sr 22.6.97
               NOBAM(NHKK) = I
c*
               DO 14 J=1,4
                  VHKK(J,NHKK) = VRCL(I,J)
                  WHKK(J,NHKK) = WRCL(I,J)
   14          CONTINUE
c  interface to evaporation module - fill final residual nucleus into
c  common FKRESN
               PXRES  = PRCL(I,1)
               PYRES  = PRCL(I,2)
               PZRES  = PRCL(I,3)
               IBRES  = NPRO(I)+NN(I)+NH(I)
               ICRES  = NPRO(I)+NHPOS(I)
               ANOW   = DBLE(IBRES)
               ZNOW   = DBLE(ICRES)
               PTRES  = SQRT(PXRES**2+PYRES**2+PZRES**2)
c   ground state mass of the residual nucleus (should be equal to AM0T)
               AMMRES = AMRCL0(I)
               AMNRES = AMMRES-ZNOW*AMELEC+ELBNDE(ICRES)
c  common FKFINU
               TV = ZERO
c   kinetic energy of residual nucleus
               TVRECL = PRCL(I,4)-AMRCL(I)
c   excitation energy of residual nucleus
               TVCMS  = EEXC(I)
               PTOLD  = PTRES
               PTRES  = SQRT(ABS(TVRECL*(TVRECL+2.0D0*(AMMRES+TVCMS))))
               IF (PTOLD.LT.ANGLGB) THEN
                  CALL DT_RACO(PXRES,PYRES,PZRES)
                  PTOLD = ONE
               ENDIF
               PXRES = PXRES*PTRES/PTOLD
               PYRES = PYRES*PTRES/PTOLD
               PZRES = PZRES*PTRES/PTOLD
c evaporation
               WE = ONE
               CALL DT_EVEVAP(WE)
c put evaporated particles and residual nuclei to DTEVT1
               MO = NHKK
               CALL DT_EVA2HE(MO,EXCITF,I,IREJ1)
               EEXCFI(I) = EXCITF
               EXCEVA(I) = EXCEVA(I)+EXCITF
            ENDIF
   13    CONTINUE
      ENDIF

      RETURN

C9998 IREXCI(1) = IREXCI(1)+1
 9998 IREJ   = IREJ+1
 9999 CONTINUE
      LRCLPR = .TRUE.
      LRCLTA = .TRUE.
      IREJ   = IREJ+1
      RETURN
      END
c                                                                      *
c====eva2he============================================================*
c                                                                      *
CDECK  ID>, DT_EVA2HE
      SUBROUTINE DT_EVA2HE(MO,EEXCF,IRCL,IREJ)

c***********************************************************************
c Interface between common's of evaporation module (FKFINU,FKFHVY)     *
c and DTEVT1.                                                          *
c    MO    DTEVT1-index of "mother" (residual) nucleus before evap.    *
c    EEXCF exitation energy of residual nucleus after evaporation      *
c    IRCL  = 1 projectile residual nucleus                             *
c          = 2 target     residual nucleus                             *
c This version dated 19.04.95 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY3=1.0D-3)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c Note: DTEVT2 - special use for heavy fragments !
c       (IDRES(I) = mass number, IDXRES(I) = charge)
c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c statistics: residual nuclei
      COMMON /DTSTA2/ EXCDPM(4),EXCEVA(2),
     &                NINCGE,NINCCO(2,3),NINCHR(2,2),NINCWO(2),
     &                NINCST(2,4),NINCEV(2),
     &                NRESTO(2),NRESPR(2),NRESNU(2),NRESBA(2),
     &                NRESPB(2),NRESCH(2),NRESEV(4),
     &                NEVA(2,6),NEVAGA(2),NEVAHT(2),NEVAHY(2,2,240),
     &                NEVAFI(2,2)

c treatment of residual nuclei: properties of residual nuclei
      COMMON /DTRNU2/ AMRCL0(2),EEXC(2),EEXCFI(2),
     &                NTOT(2),NPRO(2),NN(2),NH(2),NHPOS(2),NQ(2),
     &                NTOTFI(2),NPROFI(2)

c (original name: FINUC)
      PARAMETER (MXP=999)
      COMMON /FKFINU/ CXR    (MXP), CYR    (MXP), CZR    (MXP),
     &                CXRPOL (MXP), CYRPOL (MXP), CZRPOL (MXP),
     &                TKI    (MXP), PLR    (MXP), WEI    (MXP),
     &                TV, TVCMS, TVRECL, TVHEAV, TVBIND, NP0, NP,
     &                KPART  (MXP)

c (original name: FHEAVY,FHEAVC)
      PARAMETER ( MXHEAV = 100 )
      CHARACTER*8 ANHEAV
      COMMON /FKFHVY/ CXHEAV (MXHEAV), CYHEAV (MXHEAV),
     &                CZHEAV (MXHEAV), TKHEAV (MXHEAV),
     &                PHEAVY (MXHEAV), WHEAVY (MXHEAV),
     &                AMHEAV  ( 12 ) , AMNHEA  ( 12 ) ,
     &                KHEAVY (MXHEAV), ICHEAV  ( 12 ) ,
     &                IBHEAV  ( 12 ) , NPHEAV
      COMMON /FKFHVC/ ANHEAV  ( 12 )

c (original name: RESNUC)
      LOGICAL LRNFSS, LFRAGM
      COMMON /FKRESN/  AMNTAR, AMMTAR, AMNZM1, AMMZM1, AMNNM1, AMMNM1,
     &                   ANOW,   ZNOW, ANCOLL, ZNCOLL, AMMLFT, AMNLFT,
     &                   ERES,  EKRES, AMNRES, AMMRES,  PTRES,  PXRES,
     &                  PYRES,  PZRES, PTRES2,  KTARP,  KTARN, IGREYP,
     &                 IGREYN, IPREEH, IPRDEU, IPRTRI, IPR3HE, IPR4HE,
     &                  ICRES,  IBRES, ISTRES, IEVAPL, IEVAPH, IEVNEU,
     &                 IEVPRO, IEVDEU, IEVTRI, IEV3HE, IEV4HE, IDEEXG,
     &                  IBTAR, ICHTAR, IBLEFT, ICLEFT, IOTHER, LRNFSS,
     &                 LFRAGM


      DIMENSION IPTOKP(39)
      DATA IPTOKP / 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
     & 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 99,
     & 100, 101, 97, 102, 98, 103, 109, 115 /

      IREJ = 0

c skip if evaporation package is not included
      IF (.NOT.LEVAPO) RETURN

c update counter
      IF (NRESEV(3).NE.NEVHKK) THEN
         NRESEV(3) = NEVHKK
         NRESEV(4) = NRESEV(4)+1
      ENDIF

      IF (LEMCCK)
     &   CALL DT_EVTEMC(PHKK(1,MO),PHKK(2,MO),PHKK(3,MO),PHKK(4,MO),1,
     &                                                   IDUM,IDUM)
c mass number/charge of residual nucleus before evaporation
      IBTOT = IDRES(MO)
      IZTOT = IDXRES(MO)

c protons/neutrons/gammas
      DO 1 I=1,NP
         PX    = CXR(I)*PLR(I)
         PY    = CYR(I)*PLR(I)
         PZ    = CZR(I)*PLR(I)
         ID    = IPTOKP(KPART(I))
         IDPDG = IDT_IPDGHA(ID)
         AM    = ((PLR(I)+TKI(I))*(PLR(I)-TKI(I)))/
     &           (2.0D0*MAX(TKI(I),TINY10))
         IF (ABS(AM-AAM(ID)).GT.TINY3) THEN
            WRITE(ErrorOut,1000) ID,AM,AAM(ID)
 1000       FORMAT(1X,'EVA2HE:  INCONSISTENT MASS OF EVAP. ',
     &             'PARTICLE',I3,2E10.3)
         ENDIF
         PE = TKI(I)+AM

         CALL DT_EVTPUT(-1,IDPDG,MO,0,PX,PY,PZ,PE,0,0,0)
         NOBAM(NHKK) = IRCL
         IF (LEMCCK) CALL DT_EVTEMC(-PX,-PY,-PZ,-PE,2,IDUM,IDUM)
         IBTOT = IBTOT-IIBAR(ID)
         IZTOT = IZTOT-IICH(ID)
    1 CONTINUE

c heavy fragments
      DO 2 I=1,NPHEAV
         PX     = CXHEAV(I)*PHEAVY(I)
         PY     = CYHEAV(I)*PHEAVY(I)
         PZ     = CZHEAV(I)*PHEAVY(I)
         IDHEAV = 80000
         AM     = ((PHEAVY(I)+TKHEAV(I))*(PHEAVY(I)-TKHEAV(I)))/
     &            (2.0D0*MAX(TKHEAV(I),TINY10))
         PE     = TKHEAV(I)+AM
         CALL DT_EVTPUT(-1,IDHEAV,MO,0,PX,PY,PZ,PE,
     &                  IBHEAV(KHEAVY(I)),ICHEAV(KHEAVY(I)),0)
         NOBAM(NHKK) = IRCL
         IF (LEMCCK) CALL DT_EVTEMC(-PX,-PY,-PZ,-PE,2,IDUM,IDUM)
         IBTOT = IBTOT-IBHEAV(KHEAVY(I))
         IZTOT = IZTOT-ICHEAV(KHEAVY(I))
    2 CONTINUE

      IF (IBRES.GT.0) THEN
c residual nucleus after evaporation
         IDNUC = 80000
         CALL DT_EVTPUT(1001,IDNUC,MO,0,PXRES,PYRES,PZRES,ERES,
     &                                        IBRES,ICRES,0)
         NOBAM(NHKK) = IRCL
      ENDIF
      EEXCF = TVCMS
      NTOTFI(IRCL) = IBRES
      NPROFI(IRCL) = ICRES
      IF (LEMCCK) CALL DT_EVTEMC(-PXRES,-PYRES,-PZRES,-ERES,2,IDUM,IDUM)
      IBTOT = IBTOT-IBRES
      IZTOT = IZTOT-ICRES

c count events with fission
      NEVAFI(1,IRCL) = NEVAFI(1,IRCL)+1
      IF (LRNFSS) NEVAFI(2,IRCL) = NEVAFI(2,IRCL)+1

c energy-momentum conservation check
      IF (LEMCCK) CALL DT_EVTEMC(DUM,DUM,DUM,DUM,5,40,IREJ)
C     IF (IREJ.GT.0) THEN
C        CALL DT_EVTOUT(4)
C        WRITE(*,*) EEXC(2),EEXCFI(2),NP,NPHEAV
C     ENDIF
c baryon-number/charge conservation check
      IF (IBTOT+IZTOT.NE.0) THEN
         WRITE(ErrorOut,1001) NEVHKK,IBTOT,IZTOT
 1001    FORMAT(1X,'EVA2HE:   BARYON-NUMBER/CHARGE CONSERVATION ',
     &          'FAILURE AT EVENT ',I8,' :  IBTOT,IZTOT = ',2I3)
      ENDIF

      RETURN
      END
c
c===ebind==============================================================*
c
CDECK  ID>, DT_EBIND
      DOUBLE PRECISION FUNCTION DT_EBIND(IA,IZ)

c***********************************************************************
c Binding energy for nuclei.                                           *
c (Shirokov & Yudin, Yad. Fizika, Nauka, Moskva 1972)                  *
c                 IA        mass number                                *
c                 IZ        atomic number                              *
c This version dated 5.5.95   is updated by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0)

      DATA       A1,       A2,        A3,        A4,      A5
     &     / 0.01575D0, 0.0178D0, 0.000710D0, 0.0237D0, 0.034D0/

      IF ((IA.LE.1).OR.(IZ.EQ.0)) THEN
         WRITE(ErrorOut,
     * '(1X,A,2I5)') 'DT_EBIND IA,IZ set EBIND=0.  ',IA,IZ
         DT_EBIND = ZERO
         RETURN
      ENDIF
      AA = IA
      DT_EBIND = A1*AA - A2*AA**0.666667D0-A3*IZ*IZ*AA**(-0.333333D0)
     &        -A4*(IA-2*IZ)**2/AA
      IF (MOD(IA,2).EQ.1) THEN
         IA5 = 0
      ELSEIF (MOD(IZ,2).EQ.1) THEN
         IA5 = 1
      ELSE
         IA5 = -1
      ENDIF
      DT_EBIND = DT_EBIND - IA5*A5*AA**(-0.75D0)

      RETURN
      END

c*sr 30.6. routine replaced completely
c$ CREATE DT_ENERGY.FOR
cCOPY DT_ENERGY
c                                                                      *
c=== energy ===========================================================*
c                                                                      *
CDECK  ID>, DT_ENERGY
      DOUBLE PRECISION FUNCTION DT_ENERGY( A, Z )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Revised version of the original routine from EVAP:               *
c                                                                      *
c     Created on   15 may 1990     by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 19-sep-95     by    Alfredo Ferrari               *
c                                                                      *
c     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c     !!!  It is supposed to be used with the updated atomic   !!!     *
c     !!!                    mass data file                    !!!     *
c     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c                                                                      *
c----------------------------------------------------------------------*
c
c  Mass number below which "unknown" isotopes out of the Z-interval
c  reported in the mass tabulations are completely unstable and made
c  up by Z proton masses + N neutron masses:
      PARAMETER ( KAFREE =  4 )
c  Mass number below which "unknown" isotopes out of the Z-interval
c  reported in the mass tabulations are supposed to be particle unstable
      PARAMETER ( KAPUNS = 12 )
c  Minimum energy required for particle unstable isotopes
      PARAMETER ( DEPUNS = 0.5D+00 )
c
c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: ISOTOP)
      PARAMETER ( NAMSMX = 270 )
      PARAMETER ( NZGVAX =  15 )
      PARAMETER ( NISMMX = 574 )
      COMMON /FKISOT/ WAPS   (NAMSMX,NZGVAX),  T12NUC (NAMSMX,NZGVAX),
     &                WAPISM (NISMMX), T12ISM (NISMMX),
     &                ABUISO (NSTBIS), ASTLIN (2,100), ZSTLIN (2,260),
     &                AMSSST (100)  , ISOMNM (NSTBIS), ISONDX (2,100),
     &                JSPNUC (NAMSMX,NZGVAX), JPTNUC (NAMSMX,NZGVAX),
     &                INWAPS (NAMSMX), JSPISM (NISMMX),
     &                JPTISM (NISMMX), IZWISM (NISMMX),
     &                INWISM (0:NAMSMX)

c
c         //////////
c      SAVE KA0, KZ0, IZ0
c           /////////////
      DATA KA0, KZ0, IZ0 / -1, -1, -1 /
c
      IFLAG = 1
      GO TO 10
c======================================================================*
c                                                                      *
c     Entry ENergy - KNOWn                                             *
c                                                                      *
c======================================================================*
      ENTRY DT_ENKNOW ( A, Z, IZZ0 )
      IZZ0  =-1
      IFLAG = 2
   10 CONTINUE
c
      KA0 = NINT ( A )
      KZ0 = NINT ( Z )
      N   = KA0 - KZ0
c  +-------------------------------------------------------------------*
c  |  Null residual nucleus:
      IF ( KA0 .EQ. 0 .AND. KZ0 .LE. 0 ) THEN
         IF ( IFLAG .EQ. 1 ) THEN
            DT_ENERGY = ZERZER
         ELSE
            DT_ENKNOW = ZERZER
            IZZ0   = -1
         END IF
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  Only protons:
      ELSE IF ( N .LE. 0 ) THEN
         IF ( N .LT. 0 ) THEN
            WRITE ( ErrorOut, * )
     &     ' DPMJET STOPPED IN ENERGY: MASS NUMBER =< ATOMIC NUMBER !!',
     &       KA0, KZ0
            WRITE ( ErrorOut, * )
     &     ' DPMJET STOPPED IN ENERGY: MASS NUMBER =< ATOMIC NUMBER !!',
     &       KA0, KZ0
               WRITE ( 77, * )
     &  ' ^^^DPMJET STOPPED IN ENERGY: MASS NUMBER =< ATOMIC NUMBER !!',
     &       KA0, KZ0
            STOP 'DT_ENERGY:KA0-KZ0'
         END IF
         IZ0    = -1
         IF ( IFLAG .EQ. 1 ) THEN
            DT_ENERGY = Z * WAPS ( 1, 2 )
         ELSE
            DT_ENKNOW = Z * WAPS ( 1, 2 )
            IZZ0   = -1
         END IF
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  Only neutrons:
      ELSE IF ( KZ0 .LE. 0 ) THEN
         IF ( KZ0 .LT. 0 ) THEN
            WRITE ( ErrorOut, * )
     &   ' DPMJET STOPPED IN ENERGY: NEGATIVE ATOMIC NUMBER !!',KA0,KZ0
            WRITE ( ErrorOut, * )
     &   ' DPMJET STOPPED IN ENERGY: NEGATIVE ATOMIC NUMBER !!',KA0,KZ0
            WRITE ( 77, * )
     &' ^^^DPMJET STOPPED IN ENERGY: NEGATIVE ATOMIC NUMBER !!',KA0,KZ0
            STOP 'DT_ENERGY:KZ0<0'
         END IF
         IZ0    = -1
         IF ( IFLAG .EQ. 1 ) THEN
            DT_ENERGY = A * WAPS ( 1, 1 )
         ELSE
            DT_ENKNOW = A * WAPS ( 1, 1 )
            IZZ0   = -1
         END IF
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  No actual nucleus
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  A larger than maximum allowed:
      IF ( KA0 .GT. NAMSMX ) THEN
         IZ0    = -1
         IF ( IFLAG .EQ. 1 ) THEN
            DT_ENERGY = DT_ENRG( A, Z )
         ELSE
            DT_ENKNOW = DT_ENRG( A, Z )
            IZZ0   = -1
         END IF
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
      IZZ = INWAPS ( KA0 )
c  +-------------------------------------------------------------------*
c  |  Too much neutron rich with respect to the stability line:
      IF ( KZ0 .LT. IZZ ) THEN
c  |  +----------------------------------------------------------------*
c  |  |  Up to A=Kafree all "bound" masses are known, set it unbound:
         IF ( KA0 .LE. KAFREE ) THEN
            DT_ENERGY = AINFNT
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Up to Kapuns: be sure it is particle unstable
         ELSE IF ( KA0 .LE. KAPUNS ) THEN
c  |  |  Exp. excess mass for A,IZZ
            ENEEXP = WAPS ( KA0, 1 )
c  |  |  Cameron excess mass for A, IZZ
            ENECA1 = DT_ENRG( A, DBLE (IZZ) )
c  |  |  Cameron excess mass for A, Z
            DT_ENERGY = DT_ENRG( A, Z )
c  |  |  Use just the difference according to Cameron!!!
            DT_ENERGY = ENEEXP + DT_ENERGY - ENECA1
            JZZ    = INWAPS ( KA0 - 1 )
            LZZ    = INWAPS ( KA0 - 2 )
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Residual mass for n-decay known:
            IF ( KZ0 .GE. JZZ .AND. KZ0 .LE. JZZ + NZGVAX - 1 ) THEN
               IZ0    = KZ0 - JZZ + 1
               DT_ENERGY = MAX(DT_ENERGY,WAPS (KA0-1,IZ0) + WAPS (1,1)
     &                      + DEPUNS )
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Residual mass for 2n-decay known:
            ELSE IF ( KZ0 .GE. LZZ .AND. KZ0 .LE. LZZ + NZGVAX - 1 )THEN
               IZ0    = KZ0 - LZZ + 1
               DT_ENERGY = MAX ( DT_ENERGY, WAPS (KA0-2,IZ0) + TWOTWO *
     &                      ( WAPS (1,1) + DEPUNS ) )
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Set it unbound:
            ELSE
               DT_ENERGY = AINFNT
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Proceed as usual:
         ELSE
c  |  |  Exp. excess mass for A,IZZ
            ENEEXP = WAPS ( KA0, 1 )
c  |  |  Cameron excess mass for A, IZZ
            ENECA1 = DT_ENRG( A, DBLE (IZZ) )
c  |  |  Cameron excess mass for A, Z
            DT_ENERGY = DT_ENRG( A, Z )
c  |  |  Use just the difference according to Cameron!!!
            DT_ENERGY = ENEEXP + DT_ENERGY - ENECA1
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Be sure not to have a positive energy state:
         DT_ENERGY = MIN(DT_ENERGY,(A-Z) * WAPS (1,1) + Z * WAPS (1,2) )
         IZ0    = -1
         IF ( IFLAG .EQ. 2 ) THEN
            DT_ENKNOW = DT_ENERGY
            IZZ0   = -1
         END IF
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  Too much proton rich with respect to the stability line:
      ELSE IF ( KZ0 .GT. IZZ + NZGVAX - 1 ) THEN
c  |  +----------------------------------------------------------------*
c  |  |  Up to A=Kafree all "bound" masses are known, set it unbound:
         IF ( KA0 .LE. KAFREE ) THEN
            DT_ENERGY = AINFNT
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Up to Kapuns: be sure it is particle unstable
         ELSE IF ( KA0 .LE. KAPUNS ) THEN
c  |  |  Exp. excess mass for A,IZZ+NZGVAX-1
            ENEEXP = WAPS ( KA0, NZGVAX )
c  |  |  Cameron excess mass for A, IZZ+NZGVAX-1
            ENECA1 = DT_ENRG( A, DBLE (IZZ+NZGVAX-1) )
c  |  |  Cameron excess mass for A, Z
            DT_ENERGY = DT_ENRG( A, Z )
c  |  |  Use just the difference according to Cameron!!!
            DT_ENERGY = ENEEXP + DT_ENERGY - ENECA1
            JZZ    = INWAPS ( KA0 - 1 )
            LZZ    = INWAPS ( KA0 - 2 )
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Residual mass for p-decay known:
            IF ( KZ0-1 .GE. JZZ .AND. KZ0-1 .LE. JZZ + NZGVAX - 1 ) THEN
               IZ0    = KZ0 - 1 - JZZ + 1
               DT_ENERGY = MAX (DT_ENERGY, WAPS (KA0-1,IZ0) + WAPS (1,2)
     &                      + DEPUNS )
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Residual mass for 2p-decay known:
            ELSE IF ( KZ0-2 .GE. LZZ .AND. KZ0-2 .LE. LZZ + NZGVAX - 1 )
     &         THEN
               IZ0    = KZ0 - 2 - LZZ + 1
               DT_ENERGY = MAX ( DT_ENERGY, WAPS (KA0-2,IZ0) + TWOTWO *
     &                      ( WAPS (1,2) + DEPUNS ) )
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Set it unbound:
            ELSE
               DT_ENERGY = AINFNT
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Proceed as usual:
         ELSE
c  |  |  Exp. excess mass for A,IZZ+NZGVAX-1
            ENEEXP = WAPS ( KA0, NZGVAX )
c  |  |  Cameron excess mass for A, IZZ+NZGVAX-1
            ENECA1 = DT_ENRG( A, DBLE (IZZ+NZGVAX-1) )
c  |  |  Cameron excess mass for A, Z
            DT_ENERGY = DT_ENRG( A, Z )
c  |  |  Use just the difference according to Cameron!!!
            DT_ENERGY = ENEEXP + DT_ENERGY - ENECA1
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Be sure not to have a positive energy state:
         DT_ENERGY = MIN(DT_ENERGY,(A-Z) * WAPS (1,1) + Z * WAPS (1,2) )
         IZ0    = -1
         IF ( IFLAG .EQ. 2 ) THEN
            DT_ENKNOW = DT_ENERGY
            IZZ0   = -1
         END IF
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  Known isotope or anyway isotope "inside" the stability zone
      ELSE
         IZ0    = KZ0 - IZZ + 1
         DT_ENERGY = WAPS ( KA0, IZ0 )
         IF ( IFLAG .EQ. 2 ) IZZ0 = IZ0
c  |  +----------------------------------------------------------------*
c  |  |  Mass not known
         IF ( ABS (DT_ENERGY) .LT. ANGLGB .AND. (KA0 .NE. 12 .OR. KZ0
     &        .NE. 6) ) THEN
            IF ( IFLAG .EQ. 2 ) IZZ0 = -1
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Set it unbound:
            IF ( KA0 .LE. KAFREE ) THEN
               DT_ENERGY = AINFNT
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Try to get a reasonable excess mass:
            ELSE
               JZ0 = -100
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Check the closest one known:
               DO 500 JZZ = 1, NZGVAX
                  IF ( ABS ( WAPS (KA0,JZZ) ) .GT. ANGLGB .AND.
     &                 ABS (JZZ-IZ0) .LT. ABS (JZ0-IZ0) ) JZ0 = JZZ
                  IF ( ABS (JZ0-IZ0) .EQ. 1 ) GO TO 550
  500          CONTINUE
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
  550          CONTINUE
c  |  |  |  Exp. excess mass for A,IZZ+JZ0-1
               ENEEXP = WAPS ( KA0, JZ0 )
c  |  |  |  Cameron excess mass for A, IZZ+JZ0-1
               ENECA1 = DT_ENRG( A, DBLE (IZZ+JZ0-1) )
c  |  |  |  Cameron excess mass for A, Z
               DT_ENERGY = DT_ENRG( A, Z )
c  |  |  |  Use just the difference according to Cameron!!!
               DT_ENERGY = ENEEXP + DT_ENERGY - ENECA1
               IZ0    = -1
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  Be sure not to have a positive energy state:
            DT_ENERGY = MIN(DT_ENERGY,(A-Z)*WAPS(1,1)+Z*WAPS (1,2) )
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         IF ( IFLAG .EQ. 2 ) DT_ENKNOW = DT_ENERGY
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
c=== End of Function Energy ===========================================*
c     RETURN
      END
c*
c                                                                      *
c=== enrg =============================================================*
c                                                                      *
CDECK  ID>, DT_ENRG
      DOUBLE PRECISION FUNCTION DT_ENRG(A,Z)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( LUNIN  = 5  )
      PARAMETER ( LUNOUT = 6  )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Revised version of the original routine from EVAP:               *
c                                                                      *
c     Created on   15 may 1990     by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 01-oct-94     by    Alfredo Ferrari               *
c                                                                      *
c     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c     !!!  It is supposed to be used with the updated atomic   !!!     *
c     !!!                    mass data file                    !!!     *
c     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c                                                                      *
c----------------------------------------------------------------------*
c
      PARAMETER ( O16OLD = 931.145  D+00 )
      PARAMETER ( O16NEW = 931.19826D+00 )
      PARAMETER ( O16RAT = O16NEW / O16OLD )
      PARAMETER ( C12NEW = 931.49432D+00 )
      PARAMETER ( ADJUST = -8.322737768178909D-02 )
      PARAMETER ( AINFNT = 1.0D+30 )
c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

      LOGICAL LFIRST
c//////// KK
c      SAVE LFIRST, EXHYDR, EXNEUT
c//////////
      DATA LFIRST / .TRUE. /
c
      IF ( LFIRST ) THEN
         LFIRST = .FALSE.
c*sr 30.6.
C        EXHYDR = DT_ENERGY( ONEONE, ONEONE )
C        EXNEUT = DT_ENERGY( ONEONE, ZERZER )
         EXHYDR = A
         EXNEUT = Z
         DT_ENRG   = -AINFNT
         RETURN
c*
      END IF
      IZ0 = NINT (Z)
      IF ( IZ0 .LE. 0 ) THEN
         DT_ENRG = A * EXNEUT
         RETURN
      END IF
      N   = NINT (A-Z)
      IF ( N .LE. 0 ) THEN
         DT_ENRG = Z * EXHYDR
         RETURN
      END IF
      AM2ZOA= (A-Z-Z)/A
      AM2ZOA=AM2ZOA*AM2ZOA
      A13 = RMASS(NINT(A))
c     A13 = A**.3333333333333333D+00
      AM13 = 1.D+00/A13
      EV=-17.0354D+00*(1.D+00 -1.84619 D+00*AM2ZOA)*A
      ES= 25.8357D+00*(1.D+00 -1.712185D+00*AM2ZOA)*
     &    (1.D+00 -0.62025D+00*AM13*AM13)*
     &    (A13*A13 -.62025D+00)
      EC= 0.799D+00*Z*(Z-1.D+00)*AM13*(((1.5772D+00*AM13 +1.2273D+00)*
     &    AM13-1.5849D+00)*
     &    AM13*AM13 +1.D+00)
      EEX= -0.4323D+00*AM13*Z**1.3333333D+00*
     &   (((0.49597D+00*AM13 -0.14518D+00)*AM13 -0.57811D+00) * AM13
     &   + 1.D+00)
      DT_ENRG=8.367D+00*A-0.783D+00*Z +EV +ES +EC +EEX+CAM2(IZ0)+CAM3(N)
      DT_ENRG=(DT_ENRG + A * O16OLD ) * O16RAT - A * ( C12NEW - ADJUST )
      DT_ENRG  = MIN ( DT_ENRG, Z * EXHYDR + ( A - Z ) * EXNEUT )
      RETURN
c=== End of function Enrg =============================================*
      END
c                                                                      *
c=== incini ===========================================================*
c                                                                      *
CDECK  ID>, DT_INCINI
      SUBROUTINE DT_INCINI

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( EMVGEV = 1.0                D-03 )

      PARAMETER ( LUNOUT = 6  )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created on  10  june  1990   by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 02-may-95     by    Alfredo Ferrari               *
c                                                                      *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: FHEAVY,FHEAVC)
      PARAMETER ( MXHEAV = 100 )
      CHARACTER*8 ANHEAV
      COMMON /FKFHVY/ CXHEAV (MXHEAV), CYHEAV (MXHEAV),
     &                CZHEAV (MXHEAV), TKHEAV (MXHEAV),
     &                PHEAVY (MXHEAV), WHEAVY (MXHEAV),
     &                AMHEAV  ( 12 ) , AMNHEA  ( 12 ) ,
     &                KHEAVY (MXHEAV), ICHEAV  ( 12 ) ,
     &                IBHEAV  ( 12 ) , NPHEAV
      COMMON /FKFHVC/ ANHEAV  ( 12 )

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c (original name: NUCOLD)
      COMMON /FKNOLD/ HELP (2), HHLP (2), FTVTH (2), FINCX (2),
     &                EKPOLD (2), BBOLD, ZZOLD, SQROLD, ASEASQ,
     &                FSPRED, FEX0RD

c
      BBOLD  = - 1.D+10
      ZZOLD  = - 1.D+10
      SQROLD = - 1.D+10
      APFRMX = PLABRC * ( ANINEN * PIPIPI / EIGEIG )**ONETHI / R0NUCL
      AMNUCL (1) = AMPROT
      AMNUCL (2) = AMNEUT
      AMNUSQ (1) = AMPROT * AMPROT
      AMNUSQ (2) = AMNEUT * AMNEUT
      AMNHLP = HLFHLF * ( AMNUCL (1) + AMNUCL (2) )
      ASQHLP = AMNHLP**2
c     ASQHLP = HLFHLF * ( AMNUSQ (1) + AMNUSQ (2) )
      AEFRMX = SQRT ( ASQHLP + APFRMX**2 ) - AMNHLP
      AEFRMA = 0.3D+00 * APFRMX**2 / AMNHLP * ( ONEONE - APFRMX**2 /
     &         ( 5.6D+00 * ASQHLP ) )
      AV0WEL = AEFRMX + EBNDAV
      EBNDNG (1) = EBNDAV
      EBNDNG (2) = EBNDAV
      AEXC12 = EMVGEV * DT_ENERGY( 12.D+00, 6.D+00 )
      CEXC12 = EMVGEV * DT_ENRG( 12.D+00, 6.D+00 )
      AMMC12 = 12.D+00 * AMUGEV + AEXC12
      AMNC12 = AMMC12 - 6.D+00 * AMELCT + FERTHO * 6.D+00**EXPEBN
      AEXO16 = EMVGEV * DT_ENERGY( 16.D+00, 8.D+00 )
      CEXO16 = EMVGEV * DT_ENRG( 16.D+00, 8.D+00 )
      AMMO16 = 16.D+00 * AMUGEV + AEXO16
      AMNO16 = AMMO16 - 8.D+00 * AMELCT + FERTHO * 8.D+00**EXPEBN
      AEXS28 = EMVGEV * DT_ENERGY( 28.D+00, 14.D+00 )
      CEXS28 = EMVGEV * DT_ENRG( 28.D+00, 14.D+00 )
      AMMS28 = 28.D+00 * AMUGEV + AEXS28
      AMNS28 = AMMS28 - 14.D+00 * AMELCT + FERTHO * 14.D+00**EXPEBN
      AEXC40 = EMVGEV * DT_ENERGY( 40.D+00, 20.D+00 )
      CEXC40 = EMVGEV * DT_ENRG( 40.D+00, 20.D+00 )
      AMMC40 = 40.D+00 * AMUGEV + AEXC40
      AMNC40 = AMMC40 - 20.D+00 * AMELCT + FERTHO * 20.D+00**EXPEBN
      AEXF56 = EMVGEV * DT_ENERGY( 56.D+00, 26.D+00 )
      CEXF56 = EMVGEV * DT_ENRG( 56.D+00, 26.D+00 )
      AMMF56 = 56.D+00 * AMUGEV + AEXF56
      AMNF56 = AMMF56 - 26.D+00 * AMELCT + FERTHO * 26.D+00**EXPEBN
      AEX107 = EMVGEV * DT_ENERGY( 107.D+00, 47.D+00 )
      CEX107 = EMVGEV * DT_ENRG( 107.D+00, 47.D+00 )
      AMM107 = 107.D+00 * AMUGEV + AEX107
      AMN107 = AMM107 - 47.D+00 * AMELCT + FERTHO * 47.D+00**EXPEBN
      AEX132 = EMVGEV * DT_ENERGY( 132.D+00, 54.D+00 )
      CEX132 = EMVGEV * DT_ENRG( 132.D+00, 54.D+00 )
      AMM132 = 132.D+00 * AMUGEV + AEX132
      AMN132 = AMM132 - 54.D+00 * AMELCT + FERTHO * 54.D+00**EXPEBN
      AEX181 = EMVGEV * DT_ENERGY( 181.D+00, 73.D+00 )
      CEX181 = EMVGEV * DT_ENRG( 181.D+00, 73.D+00 )
      AMM181 = 181.D+00 * AMUGEV + AEX181
      AMN181 = AMM181 - 73.D+00 * AMELCT + FERTHO * 73.D+00**EXPEBN
      AEX208 = EMVGEV * DT_ENERGY( 208.D+00, 82.D+00 )
      CEX208 = EMVGEV * DT_ENRG( 208.D+00, 82.D+00 )
      AMM208 = 208.D+00 * AMUGEV + AEX208
      AMN208 = AMM208 - 82.D+00 * AMELCT + FERTHO * 82.D+00**EXPEBN
      AEX238 = EMVGEV * DT_ENERGY( 238.D+00, 92.D+00 )
      CEX238 = EMVGEV * DT_ENRG( 238.D+00, 92.D+00 )
      AMM238 = 238.D+00 * AMUGEV + AEX238
      AMN238 = AMM238 - 92.D+00 * AMELCT + FERTHO * 92.D+00**EXPEBN

      AMHEAV (1) = AMUGEV + EMVGEV * DT_ENERGY( ONEONE, ZERZER )
      AMHEAV (2) = AMUGEV + EMVGEV * DT_ENERGY( ONEONE, ONEONE )
      AMHEAV (3) = TWOTWO * AMUGEV
     &             + EMVGEV * DT_ENERGY( TWOTWO, ONEONE )
      AMHEAV (4) = THRTHR * AMUGEV
     &             + EMVGEV * DT_ENERGY( THRTHR, ONEONE )
      AMHEAV (5) = THRTHR * AMUGEV
     &             + EMVGEV * DT_ENERGY( THRTHR, TWOTWO )
      AMHEAV (6) = FOUFOU * AMUGEV
     &             + EMVGEV * DT_ENERGY( FOUFOU, TWOTWO )
      ELBNDE (0) = ZERZER
      ELBNDE (1) = 13.6D-09
      DO 2000 IZ = 2, 100
         ELBNDE ( IZ ) = FERTHO * DBLE ( IZ )**EXPEBN
2000  CONTINUE
      AMNHEA (1) = AMHEAV (1) + ELBNDE (0)
      AMNHEA (2) = AMHEAV (2) - AMELCT + ELBNDE (1)
      AMNHEA (3) = AMHEAV (3) - AMELCT + ELBNDE (1)
      AMNHEA (4) = AMHEAV (4) - AMELCT + ELBNDE (1)
      AMNHEA (5) = AMHEAV (5) - TWOTWO * AMELCT + ELBNDE (2)
      AMNHEA (6) = AMHEAV (6) - TWOTWO * AMELCT + ELBNDE (2)
      IF ( LEVPRT ) THEN
         WRITE ( ErrorOut,
     *  * )' **** Evaporation from residual nucleus',
     &                      ' ACTIVATED **** '
         IF ( LDEEXG ) WRITE ( ErrorOut,
     *  * )' **** Deexcitation gamma',
     &                      ' PRODUCTION ACTIVATED **** '
c*sr 18.5.95
c commented, since obsolete
C        IF ( LHEAVY ) WRITE ( LUNOUT, * )' **** Evaporated "heavies"',
C    &                      ' transport activated **** '
         IF ( IFISS .GT. 0 )
     &                 WRITE ( ErrorOut,
     *  * )' **** High Energy fission ',
     &                      ' REQUESTED & ACTIVATED **** '
         IF ( LFRMBK )
     &                 WRITE ( ErrorOut,
     *  * )' **** Fermi Break Up ',
     &                      ' REQUESTED & ACTIVATED **** '
         IF ( LFRMBK ) CALL DT_FRBKIN(.FALSE.,.FALSE.)
      ELSE
         LDEEXG = .FALSE.
         LHEAVY = .FALSE.
         LFRMBK = .FALSE.
         IFISS  = 0
      END IF
      RETURN
c=== End of subroutine incini =========================================*
      END
c                                                                      *
c=== stalin ===========================================================*
c                                                                      *
CDECK  ID>, DT_STALIN
      SUBROUTINE DT_STALIN

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( LUNIN  = 5  )
      PARAMETER ( LUNOUT = 6  )
c
c----------------------------------------------------------------------*
c                                                                      *
c     STAbility LINe calculation:                                      *
c                                                                      *
c     Created on 04 december 1992  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 04-dec-92     by    Alfredo Ferrari               *
c                                                                      *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: ISOTOP)
      PARAMETER ( NAMSMX = 270 )
      PARAMETER ( NZGVAX =  15 )
      PARAMETER ( NISMMX = 574 )
      COMMON /FKISOT/ WAPS   (NAMSMX,NZGVAX),  T12NUC (NAMSMX,NZGVAX),
     &                WAPISM (NISMMX), T12ISM (NISMMX),
     &                ABUISO (NSTBIS), ASTLIN (2,100), ZSTLIN (2,260),
     &                AMSSST (100)  , ISOMNM (NSTBIS), ISONDX (2,100),
     &                JSPNUC (NAMSMX,NZGVAX), JPTNUC (NAMSMX,NZGVAX),
     &                INWAPS (NAMSMX), JSPISM (NISMMX),
     &                JPTISM (NISMMX), IZWISM (NISMMX),
     &                INWISM (0:NAMSMX)

c
      DIMENSION ZNORM (260)
c  +-------------------------------------------------------------------*
c  |
      DO 1000 IZ=1,100
         DO 500 J=1,2
            ASTLIN (J,IZ) = ZERZER
  500    CONTINUE
 1000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |
      DO 2000 IA=1,260
         ZNORM (IA) = ZERZER
         DO 1500 J=1,2
            ZSTLIN (J,IA) = ZERZER
 1500    CONTINUE
 2000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Loop on the Atomic Number
      DO 3000 IZ=1,100
         AMSSST (IZ) = ZERZER
         ANORM       = ONEONE
         ZTAR        = IZ
c  |  +----------------------------------------------------------------*
c  |  |    Loop on the stable isotopes
         DO 2500 IS = ISONDX (1,IZ), ISONDX (2,IZ)
            IA = ISOMNM (IS)
            ASTLIN (1,IZ) = ASTLIN (1,IZ) + ABUISO (IS) * IA
            ASTLIN (2,IZ) = ASTLIN (2,IZ) + ABUISO (IS) * IA**2
            ZNORM    (IA) = ZNORM (IA) + ABUISO (IS)
            ZSTLIN (1,IA) = ZSTLIN (1,IA) + ABUISO (IS) * IZ
            ZSTLIN (2,IA) = ZSTLIN (2,IA) + ABUISO (IS) * IZ**2
            AHELP  = IA
            IF ( AHELP .LE. 1.00001D+00 ) THEN
               ANORM = ONEONE / ( ONEONE - ABUISO (IS) )
               GO TO 2500
            END IF
            AMSSST (IZ) = ABUISO (IS) * ( AHELP * AMUGEV
     &                  + EMVGEV * DT_ENERGY(AHELP,ZTAR) ) + AMSSST (IZ)
 2500    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         AMSSST (IZ) = ANORM * AMSSST (IZ) / AMUGEV
c  |  Normalize and print A_stab versus Z data:
         ASTLIN (2,IZ) = MAX ( SQRT (ASTLIN(2,IZ)-ASTLIN(1,IZ)**2),
     &                         0.5D+00 )
c        WRITE (LUNOUT,*)'  Z:',IZ,' A_stab:',SNGL(ASTLIN(1,IZ)),
c    &                   '  Sigma_st',SNGL(ASTLIN(2,IZ))
 3000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Normalize and print Z_stab versus A data:
      DO 4000 IA=1,260
         ZSTLIN (1,IA) = ZSTLIN (1,IA) / MAX ( ZNORM (IA), 1.D-10 )
         ZSTLIN (2,IA) = ZSTLIN (2,IA) / MAX ( ZNORM (IA), 1.D-10 )
         ZSTLIN (2,IA) = MAX ( ZSTLIN (2,IA), ZSTLIN (1,IA)**2 )
         IF ( ZNORM (IA) .GT. ANGLGB )
c*sr 2.11. avoid underflows at Pentium
     &      ZSTLIN (2,IA) =
     &               MAX ( SQRT ( ABS(ZSTLIN(2,IA)-ZSTLIN(1,IA)**2) ),
C    &      ZSTLIN (2,IA) = MAX ( SQRT (ZSTLIN(2,IA)-ZSTLIN(1,IA)**2),
     &                            0.3D+00 )
 4000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Normalize and print Z_stab versus A data:
      DO 5000 IA=1,260
         IF ( ZNORM (IA) .LE. ANGLGB ) THEN
            DO 4200 JA = IA-1,1,-1
               IF ( ZNORM (JA) .GT. ANGLGB ) THEN
                  IA1 = JA
                  GO TO 4300
               END IF
 4200       CONTINUE
 4300       CONTINUE
            DO 4400 JA = IA+1,260
               IF ( ZNORM (JA) .GT. ANGLGB ) THEN
                  IA2 = JA
                  GO TO 4500
               END IF
 4400       CONTINUE
            IA2 = IA1
            IA1 = IA1 - 1
 4500       CONTINUE
            ZSTLIN (1,IA) = DBLE (IA-IA1) / DBLE (IA2-IA1)
     &                    * ( ZSTLIN (1,IA2) - ZSTLIN (1,IA1) )
     &                    + ZSTLIN (1,IA1)
            ZSTLIN (2,IA) = DBLE (IA-IA1) / DBLE (IA2-IA1)
     &                    * ( ZSTLIN (2,IA2) - ZSTLIN (2,IA1) )
     &                    + ZSTLIN (2,IA1)
         END IF
         IZ = MIN ( 100, NINT (ZSTLIN(1,IA)) )
         ATOZ = IZ / ASTLIN (1,IZ)
         ZSTLIN (2,IA) = MAX ( ZSTLIN (2,IA), ATOZ * ASTLIN (2,IZ) )
c        WRITE (LUNOUT,*)'  A:',IA,' Z_stab:',SNGL(ZSTLIN(1,IA)),
c    &                   '  Sigma_st',SNGL(ZSTLIN(2,IA))
 5000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      RETURN
      END

c*sr 30.6. routine replaced completely
c$ CREATE DRES.FOR
cCOPY DRES
c                                                                      *
c=== dres =============================================================*
c                                                                      *
CDECK  ID>, DT_DRES
      SUBROUTINE DT_DRES( M2, M3, T1, U, EREC, LOPPAR, JFISS, IFKEY )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c  New version of DRES created  by A.Ferrari & P.Sala, INFN - Milan    *
c                                                                      *
c  Last change  on  14-feb-96  by  Alfredo Ferrari, INFN - Milan       *
c                                                                      *
c  Dres95: Dres93 plus the newly developed Fermi Break Up model        *
c  Dres93: Dres91 plus the RAL fission model taken from LAHET thanks   *
c          to R.E.Prael and extensively modified to get rid of the     *
c          unphysical patches required by HETC which are no longer     *
c          needed with a proper preequilibrium stage                   *
c  Dres91: new version from A. Ferrari and P. Sala, INFN - Milan       *
c          This routine has been adapted from the original one of the  *
c          Evap-5 module (KFA - Julich). Main modifications concern    *
c          with kinematics which is now fully relativistic and with    *
c          the treatment of few nucleons nuclei, which are now frag-   *
c          mented, even though in a very rough manner. Changes have    *
c          been made also to other routines of the Evap-5 package      *
c                                                                      *
c----------------------------------------------------------------------*
c
c----------------------------------------------------------------------*
c                                                                      *
c  Input variables:                                                    *
c     M2 = Mass number of the residual nucleus                         *
c     M3 = Atomic number of the residual nucleus                       *
c     T1 = Excitation energy of the residual nucleus before evaporation*
c     U  = Excitation energy of the residual nucleus after evaporation *
c     Erec = Recoil kinetic energy of the residual nucleus             *
c            The recoil direction is given by Coslbr (i)               *
c                                                                      *
c  Significant variables:                                              *
c     JA = Present mass number of the residual nucleus                 *
c     JZ = Present atomic number of the residual nucleus               *
c     Smom1 = Energy accumulators for the six types of evaporated      *
c             particles                                                *
c                                                                      *
c    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c    !!!! Please note that the following variables concerning !!!!     *
c    !!!! with the present residual nucleus must be set before!!!!     *
c    !!!! entering DRES91: Ammres, Ptres                      !!!!     *
c    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: EVA1)
c*sr
C     COMMON /FKEVA1/ NPART(6),EPART(100,6),COSEVP(3,100,6),HEVSUM
      COMMON /FKEVA1/ NPART(6),EPART(200,6),COSEVP(3,200,6),HEVSUM
c*

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: HIGFIS)
      PARAMETER ( IZFSMX = 61 )
      LOGICAL FISINH, LFRGMN, LAGOES
      COMMON /FKHIGF/ AFIS  (10), ZFIS  (10), UFIS  (10), EKFIS  (10),
     &                AMFIS (10), PPFIS (10), COSLFF(3,0:10),
     &                ATFIS (10), ZTFIS (10), UTFIS (10), RECFIS (10),
     &                AMTFIS(10), PPTFIS(10), EBFISS, AMDIFF,
     &                APR0, ZPR0, EREC0, UU0, HEVFIS (0:10),
     &                ISTFIS(10), NPARTF (6,0:10), NFISS, FISINH,
     &                LFRGMN, LAGOES
      DIMENSION COSLF0 (3)
      EQUIVALENCE ( COSLF0 (1), COSLFF (1,0) )

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

c (original name: LABCOS)
      COMMON /FKLABC/ COSLBP(3),COSLBR(3)

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c (original name: RESNUC)
      LOGICAL LRNFSS, LFRAGM
      COMMON /FKRESN/  AMNTAR, AMMTAR, AMNZM1, AMMZM1, AMNNM1, AMMNM1,
     &                   ANOW,   ZNOW, ANCOLL, ZNCOLL, AMMLFT, AMNLFT,
     &                   ERES,  EKRES, AMNRES, AMMRES,  PTRES,  PXRES,
     &                  PYRES,  PZRES, PTRES2,  KTARP,  KTARN, IGREYP,
     &                 IGREYN, IPREEH, IPRDEU, IPRTRI, IPR3HE, IPR4HE,
     &                  ICRES,  IBRES, ISTRES, IEVAPL, IEVAPH, IEVNEU,
     &                 IEVPRO, IEVDEU, IEVTRI, IEV3HE, IEV4HE, IDEEXG,
     &                  IBTAR, ICHTAR, IBLEFT, ICLEFT, IOTHER, LRNFSS,
     &                 LFRAGM

c
      PARAMETER ( NEVPRD = 6 )
c
      DIMENSION ZMASS (6), Z2MASS(6), C(3), Q(0:6), FLKCOU(6), CCOUL(6),
     &          THRESH(6), SMALLA(6), R(6), S  (6), SOS   (6), STRUN(6),
     &          EYE1  (6), EYE0  (6), SMOM1    (6), BNMASS(6)
      DIMENSION CORRRR(6)
      LOGICAL LOPPAR, PENBAR, LFIRST, LCFRBK
c////////// K K
c      SAVE ZMASS, Z2MASS, EMHN, EMNUM, UM, AMUMEV, AMEMEV, QBRBE8,
c     &     BNMASS, IEVEVP, NBE8, NRNEEP, LFIRST
c//////////
      DATA IEVEVP / 0 /
      DATA LFIRST / .TRUE. /
c
      IEVEVP = IEVEVP + 1
C-------------------------------------- 1.ST CALL INIT
      IF ( LFIRST ) THEN
         LFIRST = .FALSE.
         IFKEY  = 0
         NBE8   = 0
         NRNEEP = 0
c  |  The following are old values already superseded by the next ones
C        ZMASS(1)=939.5124
C        ZMASS(2)=938.7298
C        ZMASS(3)=1876.0177
C        ZMASS(4)=2809.2727
C        ZMASS(5) = 2809.2539
C        ZMASS(6) = 3728.1883
C        EMH=938.7298
C        EMN=939.5124
C        UM=931.145
c  | These exmass values represents the differences between the actual
c  | atomic mass of particle I (1=neutron, 2=proton, 3=deuteron,
c  | 4=3-H, 5=3-He, 6=4-He) and A*UM (Um is one unit of the old atomic
c  | mass). All the data on the Bertini tape are consistent with an ato-
c  | mic mass unit of 931.504 which is the old value for 1/12 of the
c  | mass of the 12-C atom. All the initialization in this routine are
c  | consistent with an atomic mass unit BASED ON 16-O, 931.20793 MeV!!!
c  | Now they are computed at the very beginning when reading
c  | the Bertini tape. Zmass's are the atomic masses of these particles,
c  | now they are computed for consistency (with the proper values).
c        EXMASS(1) = 8.3675489D0
c        EXMASS(2) = 7.5851116D0
c        EXMASS(3) = 13.727994D0
c        EXMASS(4) = 15.838178D0
c        EXMASS(5) = 15.819549D0
c        EXMASS(6) = 3.6092443D0
c        ZMASS(1) = 939.57548D0
c        ZMASS(2) = 938.79304D0
c        ZMASS(3) = 1876.1438D0
c        ZMASS(4) = 2809.4620D0
c        ZMASS(5) = 2809.4433D0
c        ZMASS(6) = 3728.4409D0
c        EMH = 938.79304D0
c        EMN = 939.57548D0
c        UM  = 931.20793D0
         EXMASS(1) = GEVMEV * ( AMNEUT - AMUGEV )
         EXMASS(2) = DT_ENERGY( ONEONE, ONEONE )
         EXMASS(3) = DT_ENERGY( TWOTWO, ONEONE )
         EXMASS(4) = DT_ENERGY( THRTHR, ONEONE )
         EXMASS(5) = DT_ENERGY( THRTHR, TWOTWO )
         EXMASS(6) = DT_ENERGY( FOUFOU, TWOTWO )
         ZMASS(1) = GEVMEV * AMUGEV + EXMASS (1)
         ZMASS(2) = GEVMEV * AMUGEV + EXMASS (2)
         ZMASS(3) = TWOTWO * GEVMEV * AMUGEV + EXMASS (3)
         ZMASS(4) = THRTHR * GEVMEV * AMUGEV + EXMASS (4)
         ZMASS(5) = THRTHR * GEVMEV * AMUGEV + EXMASS (5)
         ZMASS(6) = FOUFOU * GEVMEV * AMUGEV + EXMASS (6)
         BNMASS (1) = ZERZER
         BNMASS (2) = ZERZER
         BNMASS (3) = ZMASS (1) + ZMASS (2) - ZMASS (3)
         BNMASS (4) = TWOTWO * ZMASS (1) + ZMASS (2) - ZMASS (4)
         BNMASS (5) = ZMASS (1) + TWOTWO * ZMASS (2) - ZMASS (5)
         BNMASS (6) = TWOTWO * ( ZMASS (1) + ZMASS (2) ) - ZMASS (6)
         DO 1234 KK = 1,6
            Z2MASS (KK) = ZMASS (KK) * ZMASS (KK)
 1234    CONTINUE
         AMUMEV = GEVMEV * AMUGEV
         AMEMEV = GEVMEV * AMELCT
         QBRBE8 = DT_ENERGY( EIGEIG, FOUFOU ) - TWOTWO * EXMASS (6)
         EMN    = GEVMEV * AMNEUT
         EMH    = ZMASS (2)
         UM     = AMUMEV + DT_ENERGY( 16.D+00, EIGEIG ) / 16.D+00
         EMHN   = EMH - EMN
         EMNUM  = EMN - UM
      END IF
c  |  End of initialization:
c  +-------------------------------------------------------------------*
C     --------------------------------- START OF PROCESS
c  +-------------------------------------------------------------------*
c  |  Initialize Npart and Smom if nothing has been already evaporated
c  |  for this event
      IF ( JFISS .LE. 0 ) THEN
         DO 775 I=1,6
            NPART(I) = 0
            SMOM1(I) = ZERZER
  775    CONTINUE
      END IF
c  |
c  +-------------------------------------------------------------------*
      JA = M2
      JZ = M3
      A  = JA
      Z  = JZ
      U  = T1
      RNMASS = GEVMEV * AMMRES + U
c P2res and  Ptres are the squared momentum and the momentum of the
c residual nucleus (now in relativistic kinematics), Umo the
c invariant mass of the system!
      UMO     = RNMASS
      UMO2    = UMO * UMO
      ELBTOT  = RNMASS + EREC
      GAMCM   = ELBTOT / RNMASS
      ETACM   = GEVMEV * PTRES / RNMASS
      HEVSUM  = ZERZER
      LCFRBK  = LFRMBK
      ISTRES  = 0
 1000 CONTINUE
      LOPPAR = .FALSE.
c  +-------------------------------------------------------------------*
c  |                Check for starting data inconsistencies
      IF (JA-JZ .LT. 0) THEN
         WRITE(ErrorOut,6401)
         WRITE(ErrorOut,6401)
 6401    FORMAT('1 DRES: CASCADE RESIDUAL NUCLEUS HAS MASS NO. LESS',
     &       ' THAN Z!!')
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |     Standard hook for Fermi break-up (if activated):
      ELSE IF ( JA .LE. NXAFBK .AND. JA-JZ .LE. NXNFBK .AND.
     &          JZ .LE. NXZFBK .AND. LCFRBK ) THEN
         AMRESD = A * AMUMEV + DT_ENERGY(A,Z)
         EXCRES = U
         PXRES  = GEVMEV * PXRES
         PYRES  = GEVMEV * PYRES
         PZRES  = GEVMEV * PZRES
         PTRES  = GEVMEV * PTRES
         CALL DT_FRMBRK( JA, JZ, AMRESD, EXCRES, EREC  , PXRES , PYRES ,
     &                 PZRES , PTRES , SMOM1 , ISTRES, LCFRBK )
         AMMRES = EMVGEV * AMRESD
         EKRES  = EMVGEV * EREC
         PXRES  = EMVGEV * PXRES
         PYRES  = EMVGEV * PYRES
         PZRES  = EMVGEV * PZRES
         PTRES  = EMVGEV * PTRES
         IF ( PTRES .GE. ANGLGB ) THEN
            COSLBR (1) = PXRES / PTRES
            COSLBR (2) = PYRES / PTRES
            COSLBR (3) = PZRES / PTRES
         END IF
         U      = EXCRES
         IARES  = JA
         IZRES  = JZ
c  |  +----------------------------------------------------------------*
c  |  |  Fermi Break up successful:
         IF ( LCFRBK ) THEN
            IF ( IARES  .LE. 0 .AND. .NOT. LFRGMN ) NRNEEP = NRNEEP + 1
            IF ( ISTRES .GE. 0 ) THEN
               LOPPAR = .FALSE.
               IFKEY  = 1
               GO TO 72
            ELSE
               WRITE (ErrorOut,*)
     &  ' *** DRES: UNSTABLE NUCLEUS OUT OF THE FERMI BREAK UP',
     &         IARES, IZRES, ISTRES
               ISTRES = 0
               LCFRBK = .FALSE.
               GO TO 1000
            END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Fermi Break Up not possible
         ELSE
            GO TO 1000
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |
c  +-------------------------------------------------------------------*
c  |                Rough treatment for very few nucleon residual
c  |                nuclei. The basic ideas are:
c  |        a) as many as possible alpha particles are emitted
c  |        b) particles are emitted one per time leaving a residual
c  |           excitation energy proportional to number of nucleons
c  |           left in the residual nucleus (so we deal only with
c  |           two body kinematics)
c  |       T A K E   I N T O   A C C O U N T   T H A T   T H I S
c  |       T R E A T M E N T   I S   E X T R E M E L Y   R O U G H
c  |       T H E   T A S K   B E I N G   O N L Y   T O   S U P P L Y
c  |       S O M E T H I N G   T O   S H A R E   E N E R G Y   A N D
c  |       M O M E N T U M   A M O N G   A   F E W   F R A G M E N T S
      ELSE IF ( JA .LE. 6 .OR. JZ .LE. 2 ) THEN
c  | 1000 continue moved above according to FCA suggestion
c1000    CONTINUE
         JRESID = 0
         IF ( JA .GT. 4 ) GO TO 2000
c  |  +----------------------------------------------------------------*
c  |  | First check we are not concerning with a couple of neutrons or
c  |  | protons
         IF ( JA .EQ. 2 .AND. JZ .NE. 1 ) THEN
            JEMISS = 1 + JZ / 2
            JRESID = JEMISS
            RNMASS = ZMASS (JRESID)
            U = ZERZER
            DELTU = UMO - 2.D+00 * ZMASS (JEMISS)
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            IF ( DELTU .LE. ZERZER ) THEN
               IF ( DELTU .LT. - 2.D+00 * ANGLGB * UMO ) THEN
                  WRITE ( ErrorOut,
     *  * )' *** Dres: insufficient Umo for',
     &                               ' A NUCLEON COUPLE', UMO,
     &                                 2.D+00 * ZMASS (JEMISS)
               END IF
               UMO = ( UMO + DELTU ) * ( 1.D+00 + ANGLGB )
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            GO TO 2500
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  +----------------------------------------------------------------*
c  |  | Then check we are not concerning with one of the six
c  |  | standard particles
         DO 1700 J = 6, 1, -1
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            IF ( JZ .EQ. IZ (J) .AND. JA .EQ. IA (J) ) THEN
               HEVSUM = SMOM1(3) + SMOM1(5) + SMOM1(6) + SMOM1(4)
               GO TO ( 1100, 1100, 1600, 1500, 1400, 1300 ), J
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Proton or neutron, nothing can be done
 1100          CONTINUE
                  RETURN
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Alpha:
 1300          CONTINUE
                  DEUDEU = MAX ( ZERZER, U + TWOTWO * BNMASS (3)
     &                           - BNMASS (6) )
                  PROTRI = MAX ( ZERZER, U + BNMASS (4) - BNMASS (6) )
                  UEU3HE = MAX ( ZERZER, U + BNMASS (5) - BNMASS (6) )
                  QNORM  = DEUDEU + PROTRI + UEU3HE
c  |  |  |  |  If we cannot split then return
                  IF ( QNORM .LE. ZERZER ) RETURN
                  V = DT_RNDM(V)
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split or into two deuterons or a triton and a proton
c  |  |  |  |  | or a 3-He and a neutron: no account is made for
c  |  |  |  |  | Coulomb effects, probability is simply assumed
c  |  |  |  |  | proportional to reaction Qs
                  IF ( V .LT. DEUDEU / QNORM ) THEN
c  |  |  |  |  | Two deuterons selected
                     JEMISS = 3
                     JRESID = 3
                     RNMASS = ZMASS (3)
                     U = ZERZER
                     GO TO 2500
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split into a triton and a proton
                  ELSE IF ( V .LT. ( DEUDEU + PROTRI ) / QNORM ) THEN
                     JEMISS = 2
                     JRESID = 4
                     RNMASS = ZMASS (4)
                     U = ZERZER
                     GO TO 2500
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split into a 3-He and a neutron
                  ELSE
                     JEMISS = 1
                     JRESID = 5
                     RNMASS = ZMASS (5)
                     U = ZERZER
                     GO TO 2500
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  3-He:
 1400          CONTINUE
                  DEUPRO = MAX ( ZERZER, U + BNMASS (3) - BNMASS (5) )
                  PRPRNE = MAX ( ZERZER, U - BNMASS (5) )
                  QNORM  = DEUPRO + PRPRNE
c  |  |  |  |  If we cannot split then return
                  IF ( QNORM .LE. ZERZER ) RETURN
                  V = DT_RNDM(V)
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split or into a deuteron and a proton
c  |  |  |  |  | or into two protons and one neutron: no account is
c  |  |  |  |  | made for Coulomb effects, probability is simply assumed
c  |  |  |  |  | prportional to reaction Qs
                  IF ( V .LT. DEUPRO / QNORM ) THEN
c  |  |  |  |  | A deuteron and a proton selected
                     JEMISS = 2
                     JRESID = 3
                     RNMASS = ZMASS (3)
                     U = ZERZER
                     GO TO 2500
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split into 2 protons and 1 neutron: part of the exci-
c  |  |  |  |  | tation energy is conserved to allow the further
c  |  |  |  |  | splitting of the deuteron
                  ELSE
                     JEMISS = 2
                     JRESID = 0
                     FACT = ONEONE
c  |  |  |  |  |  +----------------------------------------------------*
c  |  |  |  |  |  | Loop to compute the residual excitation energy
 1450                CONTINUE
                        FACT = FACT * 0.6666666666666667D+00
c  |  |  |  |  |  | Erncm, Eepcm are the total energies of the residual
c  |  |  |  |  |  | nucleus and of the emitted particle in the CMS frame
                        U      = FACT * PRPRNE + BNMASS (3)
                        RNMASS = ZMASS (3) + U
                        ERNCM  = HLFHLF * ( UMO2 + RNMASS**2
     &                         - Z2MASS (JEMISS) ) / UMO
                        EEPCM  = UMO - ERNCM
                     IF ( EEPCM .LE. ZMASS (JEMISS) ) GO TO 1450
c  |  |  |  |  |  |
c  |  |  |  |  |  +----------------------------------------------------*
                     GO TO 2600
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Triton:
 1500          CONTINUE
                  DEUNEU = MAX ( ZERZER, U + BNMASS (3) - BNMASS (4) )
                  PRNENE = MAX ( ZERZER, U - BNMASS (4) )
                  QNORM  = DEUNEU + PRNENE
c  |  |  |  |  If we cannot split then return
                  IF ( QNORM .LE. ZERZER ) RETURN
                  V = DT_RNDM(V)
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split or into a deuteron and a neutron
c  |  |  |  |  | or into two protons and one neutron: no account is
c  |  |  |  |  | made for Coulomb effects, probability is simply assumed
c  |  |  |  |  | proportional to reaction Qs
                  IF ( V .LT. DEUNEU / QNORM ) THEN
c  |  |  |  |  | A deuteron and a proton selected
                     JEMISS = 1
                     JRESID = 3
                     RNMASS = ZMASS (3)
                     U = ZERZER
                     GO TO 2500
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split into 1 proton and 2 neutrons: part of the exci-
c  |  |  |  |  | tation energy is conserved to allow the further
c  |  |  |  |  | splitting of the deuteron
                  ELSE
                     JEMISS = 1
                     JRESID = 0
                     FACT = ONEONE
c  |  |  |  |  |  +----------------------------------------------------*
c  |  |  |  |  |  | Loop to compute the residual excitation energy
 1550                CONTINUE
                        FACT = FACT * 0.6666666666666667D+00
c  |  |  |  |  |  | Erncm, Eepcm are the total energies of the residual
c  |  |  |  |  |  | nucleus and of the emitted particle in the CMS frame
                        U      = FACT * PRNENE + BNMASS (3)
                        RNMASS = ZMASS (3) + U
                        ERNCM  = HLFHLF * ( UMO2 + RNMASS**2
     &                         - Z2MASS (JEMISS) ) / UMO
                        EEPCM  = UMO - ERNCM
                     IF ( EEPCM .LE. ZMASS (JEMISS) ) GO TO 1550
c  |  |  |  |  |  |
c  |  |  |  |  |  +----------------------------------------------------*
                     GO TO 2600
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Deuteron:
 1600          CONTINUE
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Split into a proton and a neutron if it is possible
                  IF ( U .GT. BNMASS (3) ) THEN
                     JEMISS = 1
                     JRESID = 2
                     RNMASS = ZMASS (2)
                     U = ZERZER
                     GO TO 2500
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  | Energy too low to split the deuteron, return
                  ELSE
                     WRITE (ErrorOut,
     * *)' **Dres: energy too low to split',
     &                               ' A DEUTERON! M2,M3',M2,M3
                     RETURN
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
 1700    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
 2000    CONTINUE
         A = DBLE (JA)
         Z = DBLE (JZ)
         Q (0)  = ZERZER
         ENERG0 = DT_ENERGY(A,Z)
c  |  +----------------------------------------------------------------*
c  |  |   Note that Q(i) are not the reaction Qs but the remaining
c  |  |   energy after the reaction
         DO 2100 K = 1, 6
            JJA = JA - IA (K)
            JJZ = JZ - IZ (K)
            JJN = JJA - JJZ
            IF ( JJN .LT. 0 .OR. JJZ .LT. 0 ) THEN
               Q (K) = Q (K-1)
               GO TO 2100
            END IF
            Q (K) = MAX ( U + ENERG0 - DT_ENERGY( DBLE(JJA), DBLE(JJZ) )
     &            - EXMASS (K), ZERZER ) + Q (K-1)
 2100    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
c  |  +----------------------------------------------------------------*
c  |  |  If no emission channel is open then return
         IF ( Q (6) .LE. ZERZER ) THEN
            HEVSUM = SMOM1(3) + SMOM1(5) + SMOM1(6) + SMOM1(4)
            RETURN
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         V = DT_RNDM(V)
         FACT = ONEONE
c  |  +----------------------------------------------------------------*
c  |  |
         DO 2200 J = 1, 6
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            IF ( V .LT. Q (J) / Q (6) ) THEN
               JEMISS = J
               JJA    = JA - IA (JEMISS)
               JJZ    = JZ - IZ (JEMISS)
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |
               DO 2150 JJ = 1, 6
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |
                  IF ( JJA .EQ. IA (JJ) .AND. JJZ .EQ. IZ (JJ) ) THEN
                     JRESID = JJ
                     RNMASS = ZMASS (JRESID)
                     ERNCM  = HLFHLF * ( UMO2 + Z2MASS (JRESID)
     &                      - Z2MASS (JEMISS) ) / UMO
                     EEPCM  = UMO - ERNCM
                     U = ZERZER
                     GO TO 2600
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
 2150          CONTINUE
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
               AJJA   = DBLE (JJA)
               ZJJZ   = DBLE (JJZ)
               RNMAS0 = AJJA * AMUMEV + DT_ENERGY( AJJA, ZJJZ )
               GO TO 2300
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
 2200    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         WRITE ( ErrorOut,
     * * )' **** error in Dres, few nucleon treatment',
     &                     ' ****'
         WRITE ( ErrorOut,
     * * )' **** error in Dres, few nucleon treatment',
     &                     ' ****'
         RETURN
c  |  +----------------------------------------------------------------*
c  |  | Loop to compute the residual excitation energy
 2300    CONTINUE
            FACT = FACT * AJJA / A
            U = FACT * ( Q (JEMISS) - Q (JEMISS-1) )
c  |  | Erncm, Eepcm are the total energies of the residual
c  |  | nucleus and of the emitted particle in the CMS frame
            RNMASS = RNMAS0 + U
            ERNCM  = HLFHLF * ( UMO2 + RNMASS**2
     &             - Z2MASS (JEMISS) ) / UMO
            EEPCM  = UMO - ERNCM
         IF ( EEPCM .LE. ZMASS (JEMISS) ) THEN
            IF ( Q (JEMISS) - Q (JEMISS-1) .GE. 1.D-06 ) GO TO 2300
c  |  +--<--<--<--<--<--< Loop back
c  |  |  Actually there is no excitation energy available!
            U = ANGLGB
            RNMASS = ONEPLS * RNMAS0
            ERNCM  = ONEPLS * RNMASS
            EEPCM  = ONEPLS * ZMASS (JEMISS)
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         GO TO 2600
c  |  From here standard two bodies kinematics with Jemiss, Rnmass
c  |  (new excitation energy is U)
 2500    CONTINUE
c  |  Erncm, Eepcm are the total energies of the residual
c  |  nucleus and of the emitted particle in the CMS frame
         ERNCM = HLFHLF * ( UMO2 + RNMASS**2 - Z2MASS (JEMISS) ) / UMO
         EEPCM = UMO - ERNCM
 2600    CONTINUE
c  |  C(i) are the direction cosines of the emitted particle
c  |  (Jemiss) in the CMS frame, of course - C(i)
c  |  are the ones of the residual nucleus (Jresid if one of the
c  |  standard partcles, say the proton)
         CALL DT_RACO(C(1),C(2),C(3))
         PCMS  = SQRT ( EEPCM**2 - Z2MASS (JEMISS) )
c  |  Now we perform the Lorentz transformation back to the original
c  |  frame (lab frame)
c  |  First the emitted particle:
         ETAX  = ETACM * COSLBR (1)
         ETAY  = ETACM * COSLBR (2)
         ETAZ  = ETACM * COSLBR (3)
         PCMSX = PCMS * C (1)
         PCMSY = PCMS * C (2)
         PCMSZ = PCMS * C (3)
         ETAPCM= PCMSX * ETAX + PCMSY * ETAY + PCMSZ * ETAZ
         EPS   = GAMCM * EEPCM + ETAPCM - ZMASS (JEMISS)
         PHELP = ETAPCM / ( GAMCM + ONEONE ) + EEPCM
         PLBPX = PCMSX + ETAX * PHELP
         PLBPY = PCMSY + ETAY * PHELP
         PLBPZ = PCMSZ + ETAZ * PHELP
         PHELP = SQRT (PLBPX * PLBPX + PLBPY * PLBPY + PLBPZ * PLBPZ)
         COSLBP (1) = PLBPX / PHELP
         COSLBP (2) = PLBPY / PHELP
         COSLBP (3) = PLBPZ / PHELP
c  |  Then the residual nucleus ( for it c (i) --> - c (i) ):
         EREC  = GAMCM  * ERNCM - ETAPCM - RNMASS
         EKRES = EMVGEV * EREC
         PHELP = - ETAPCM / ( GAMCM + ONEONE ) + ERNCM
         PXRES = EMVGEV * ( - PCMSX + ETAX * PHELP )
         PYRES = EMVGEV * ( - PCMSY + ETAY * PHELP )
         PZRES = EMVGEV * ( - PCMSZ + ETAZ * PHELP )
         P2RES = PXRES * PXRES + PYRES * PYRES + PZRES * PZRES
         PTRES = SQRT (P2RES)
         COSLBR (1) = PXRES / PTRES
         COSLBR (2) = PYRES / PTRES
         COSLBR (3) = PZRES / PTRES
c  |  Score the emitted particle
         NPART (JEMISS) = NPART (JEMISS) + 1
         SMOM1 (JEMISS) = SMOM1 (JEMISS) + EPS
c        IF ( NPART(JEMISS) .LE. 0 ) CALL ERROR
         ITEMP  =NPART(JEMISS)
         EPART (ITEMP,JEMISS)   = EPS
         COSEVP(1,ITEMP,JEMISS) = COSLBP(1)
         COSEVP(2,ITEMP,JEMISS) = COSLBP(2)
         COSEVP(3,ITEMP,JEMISS) = COSLBP(3)
c  |  +----------------------------------------------------------------*
c  |  |  Check if the residual nucleus is one of the emitted particles
         IF ( JRESID .GT. 0 ) THEN
            J = JRESID
            GO TO 6102
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         JA = JA - IA (JEMISS)
         JZ = JZ - IZ (JEMISS)
c Umo is the invariant mass of the system!!
         UMO  = RNMASS
         UMO2 = UMO * UMO
         ELBTOT  = RNMASS + EREC
         GAMCM   = ELBTOT / RNMASS
         ETACM   = GEVMEV * PTRES / RNMASS
         GO TO 1000
      END IF
c  |
c  +-------------------------------------------------------------------*
c Come to 23 at the beginning and after the end of a "normal"
c evaporation cycle
   23 CONTINUE
      A      = DBLE (JA)
      Z      = DBLE (JZ)
      IF ( LCFRBK .AND. JA .LE. NXAFBK .AND. JA - JZ .LE. NXNFBK .AND.
     &     JZ .LE. NXZFBK ) GO TO 1000
      LCFRBK = LFRMBK
c No need for the following card!!! Break up 8-Be if and only if there
c is no other open channel for it!!!
c     IF (JA.EQ.8.AND.JZ.EQ.4) GO TO 1224
c-->-->-->-->--> go to 8-Be breakup:
c  +-------------------------------------------------------------------*
c  |  Loop on possible evaporation products to compute the reaction
c  |  Qs:
      DO 2 J = 1, NEVPRD
         IF( JA - FLA(J) .LE. JZ - FLZ(J) ) THEN
            Q(J)=99999.D+00
         ELSE IF ( JA .LT. 2 * IA (J) ) THEN
            Q(J)=99999.D+00
         ELSE IF ( JZ .LT. 2 * IZ (J) ) THEN
            Q(J)=99999.D+00
         ELSE
            Q (J) = DT_QNRG(A-FLA(J),Z-FLZ(J),A,Z) + EXMASS (J)
c           Q (J) = DT_ENERGY(A-FLA(J),Z-FLZ(J)) - DT_ENERGY(A,Z)
c    &            + EXMASS (J)
         END IF
    2 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      FLKCOU(1)=ZERZER
      FLKCOU(2)=DT_DOST(1,Z-FLZ(2))
      FLKCOU(3)=FLKCOU(2)+.06D+00
      FLKCOU(4)=FLKCOU(2)+.12D+00
      FLKCOU(6)=DT_DOST(2,Z-FLZ(6))
      FLKCOU(5)=FLKCOU(6)-.06D+00
      CCOUL (1)=ONEONE
      CCOU2    =DT_DOST(3,Z-FLZ(2))
      CCOUL(2)=CCOU2+ONEONE
      CCOUL(3)=CCOU2*1.5D0+THRTHR
      CCOUL(4)=CCOU2+THRTHR
      CCOUL(6)=DT_DOST(4,Z-FLZ(6))*TWOTWO+TWOTWO
      CCOUL(5)=TWOTWO*CCOUL(6)-ONEONE
      SIGMA   =ZERZER
c  Initialize the flag which checks for open particle decay with
c  zero excitation and pairing --> for particle unstable residual
c  nuclei
      LOPPAR = .FALSE.
      SES    = ZERZER
c  +-------------------------------------------------------------------*
c  |  Loop on possible evaporation products:
      DO 33 J = 1, NEVPRD
c  |  Final nucleus A:
         AA  = A  - FLA(J)
c  |  Final nucleus Z:
         ZZ  = Z  - FLZ(J)
         IAA = NINT (AA)
         IZZ = NINT (ZZ)
c  |  +----------------------------------------------------------------*
c  |  |  Avoid double counting of the same break-up configuration,
c  |  |  the evaporated fragment must be the lightest one:
c  |  |  (Is it really correct? Anyway it is no longer operational
c  |  |  with the Fermi break-up activated)
c  |  |  The last condition is really important! (added by A.Ferrari)
         IF ( JA .GE. 2 * IA (J) .AND. JZ .GE. 2 * IZ (J) .AND. JA .GT.
     &        JZ .AND. IAA .GE. IZZ ) THEN
c  |  |  Coulomb barrier:
            COUTHR     = 0.88235D+00 * FLKCOU (J) * FLZ (J)
     &                 * ZZ / ( RMASS (IAA) + RHO (J) )
c  |  |  Energy threshold for the emission of the jth-particle
            THRESH (J) = Q (J) + COUTHR
c  |  |  The residual nucleus excitation energy should range from 0
c  |  |  up to U - Q (J), but because of the Coulomb barrier for
c  |  |  charged particles which sets a minimum kinetic energy, it
c  |  |  actually goes from 0 to U - THRESH (J)
c  |  |  Maximum excitation energy of the residual nucleus:
            UMXRES = U - THRESH (J)
c  |  |  Flag for (possible) particle emission:
c  This card allows the 2nd trial (=no pairing) every time the
c  current residual nucleus ground state is particle unstable fully
c  accounting for the Coulomb barrier
c           LOPPAR = LOPPAR .OR. THRESH (J) .LT. ZERZER
c  This card allows the 2nd trial (=no pairing) every time the
c  emission channel is energetically open
c           LOPPAR = LOPPAR .OR. UMXRES .GT. ZERZER
c  This card allows the 2nd trial (=no pairing) every time the
c  current residual nucleus ground state is particle unstable
c  accounting for a possible Coulomb barrier penetration of 1.5 MeV
            LOPPAR = LOPPAR .OR. Q (J) + MAX ( COUTHR - 1.5D+00,
     &               ZERZER ) .LT. ZERZER
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Energy available for emission:
            IF ( UMXRES .GE. ZERZER ) THEN
               NN     = IAA - IZZ
               ILVMOD = IB0
c  |  |  |  This is the a lower case of the level density
               SMALLA (J) = DT_GETA( UMXRES, IZZ, NN, ILVMOD, ISDUM,
     &                             ASMMAX, ASMMIN )
c  **** Old coding ****
c              IF (IB0.NE.1) THEN
c                 APRIM = AA/B0
c              ELSE
c                 APRIM = APRIME(IAA)
c              END IF
c              SMALLA(J)=(1.D0+Y0*(AA-2.D0*ZZ)**2/AA**2)*APRIM
c  **** End old coding ****
c  |  |  |  Get the discrete levels and pairing energies:
               CALL DT_EEXLVL( IAA, IZZ, EEX1ST, EEX2ND, CORR )
c  |  |  |  Convert to MeV:
               EEX1ST = GEVMEV * EEX1ST
               EEX2ND = GEVMEV * EEX2ND
               CORR   = GEVMEV * MAX ( CORR, ZERZER )
c Old version:
c              CORR   = CAM4 (IZZ) + CAM5 (NN)
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  This patch just to avoid problems with 8-Be
               IF ( NN .EQ. 4 .AND. IZZ .EQ. 4 ) THEN
                  IF ( U - THRESH (J) - 6.1D+00 .GT. ZERZER ) THEN
                     CORR = SIXSIX
                  ELSE
                     CORR = MAX ( ZERZER, U-THRESH(J)-0.1D+00 )
                  END IF
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  Check the flag for switching off the backshift:
               IF ( IFKEY .EQ. 1 ) CORR = ZERZER
c  |  |  |  Save the backshift:
               CORRRR (J) = CORR
c  |  |  |  Standard calculation:
               ARG = U - THRESH (J) - CORR
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  No energy available for emission:
            ELSE
               ARG = -ONEONE
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  +-------------------------------------------------------------*
c  |  |  |  No chance to emit this particle:
            IF ( ARG .LE. ZERZER ) THEN
               R  (J) = ZERZER
               S  (J) = ZERZER
               SOS(J) = ZERZER
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            ELSE
               S   (J) = SQRT (SMALLA(J)*ARG) * TWOTWO
               SOS (J) = TENTEN * S(J)
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  A_res < 2 A(j), or Z_res < 2 Z(j), avoid double counting etc.
         ELSE
            R  (J) = ZERZER
            S  (J) = ZERZER
            SOS(J) = ZERZER
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         SES = MAX ( SES, S (J) )
   33 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c     N1=1
c     DO 4002 J=1,NEVPRD
c        IF(SOS(J)-1250.D0)4002,4444,4444
c4002 CONTINUE
c     N1=2
c     GO TO 4003
c4444 CONTINUE
c     SES = MAX (S(1),S(2),S(3),S(4),S(5),S(6))
c4003 CONTINUE
c     SES = MAX (S(1),S(2),S(3),S(4),S(5),S(6))
      N1  = 1
      DO 1131 J = 1, NEVPRD
         JS  = SOS(J) + ONEONE
         FJS = JS
         STRUN(J) = FJS - ONEONE
         IF ( S(J) .GT. ZERZER ) THEN
            MM  = JA-IA(J)
c*sr avoid floating point underflows
C           SAS = EXP (S(J)-SES)
            IF (ABS(S(J)-SES).LT.ANGLGB) THEN
               SAS = 1.0D0
            ELSEIF ((S(J)-SES).LT.EZRZRZ) THEN
               SAS = 0.0D0
            ELSE
               SAS = EXP (S(J)-SES)
            ENDIF
C           SUS = EXP (-S(J))
            IF (-S(J).LT.LOG(ANGLGB)) THEN
               SUS = 0.0D0
            ELSE
               SUS = EXP (-S(J))
            ENDIF
c*
            EYE1(J) = ( TWOTWO * S(J)**2 -SIXSIX * S(J)
     &              + SIXSIX + SUS * ( S(J)**2 - SIXSIX ) )
     &              / ( EIGEIG * SMALLA(J)**2 )
            IF ( J .EQ. 1 ) THEN
               EYE0(J) = ( S(J) - ONEONE + SUS ) / ( TWOTWO*SMALLA(J) )
c Standard calculation
               R   (J) = RMASS(MM)**2 * ALPH(MM) * ( EYE1(J) + BET(MM)
     &                 * EYE0(J) ) * SAS
            ELSE
               R   (J) = CCOUL(J) * RMASS(MM)**2 * EYE1(J) * SAS
            END IF
            R (J) = MAX ( ZERZER, R (J) )
            SIGMA = SIGMA + R (J)
         END IF
 1131 CONTINUE
c     DO 1131 J=1,NEVPRD
c        IF(S(J))1511,1131,1511
c1511    CONTINUE
c        JS=SOS(J)+1.D0
c        MM=JA-IA(J)
c        IF(N1-1)1751,1350,1751
c1751    CONTINUE
c        IF(JS-1000)1344,1351,1351
c1350    CONTINUE
c        SAS=EXP (S(J)-SES)
c        GO TO 1352
c1351    CONTINUE
c        SAS=EXP (S(J)-50.D0)
c1352    CONTINUE
c        EYE1(J)=(S(J)**2-3.D0*S(J)+3.D0)*SAS/(4.D0*SMALLA(J)**2)
c        FJS=JS
c        STRUN(J)=FJS-1.D0
c        GO TO 2323
c1344    CONTINUE
c        FJS=JS
c        STRUN(J)=FJS-1.D0
c        EYE1(J)=(P1(JS)+(P1(JS+1)-P1(JS))*(SOS(J)-STRUN(J)))/
c    &   SMALLA(J)**2
c2323    IF(J-1)6,6,7
c   7    CONTINUE
c        R(J)=CCOUL(J)*RMASS(MM)**2*EYE1(J)
c        GO TO 3
c   6    CONTINUE
c        IF(N1-1)7777,2345,7777
c7777    CONTINUE
c        IF(JS-1000)2344,2345,2345
c2345    CONTINUE
c        EYE0(J)=(S(J)-1.D0)*0.5D0*SAS/SMALLA(J)
c        GO TO 2346
c2344    CONTINUE
c        EYE0(J)=(P0(JS)+(P0(JS+1)-P0(JS))*(SOS(J)-STRUN(J)))
c    &   /SMALLA(J)
c2346    CONTINUE
c        R(J)=RMASS(MM)**2*ALPH(MM)*(EYE1(J)+BET(MM)*
c    &   EYE0(J))
c        IF(R(J))5111,3,3
c5111    CONTINUE
c        R(J)=0.D0
c   3    CONTINUE
c        SIGMA=SIGMA+R(J)
c1131 CONTINUE
      NCOUNT = 0
 6202 CONTINUE
c  +-------------------------------------------------------------------*
c  |  No open channel available:
      IF ( SIGMA .LE. ZERZER ) THEN
c  |  +----------------------------------------------------------------*
c  |  |  Check if the residual nucleus is one of the six originally
c  |  |  available particles for evaporation:
         DO 6100 J = 1, 6
c  |  |  The residual nucleus is a p/n/d/3-H/3-He/4-He one:
            IF ( JA .EQ. IA (J) .AND. JZ .EQ. IZ (J) ) GO TO 6102
 6100    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Non p/n/d/3-H/3-He/4-He residual nucleus:
c  |  Check for 8-Be:
         IF (JA.EQ.8.AND.JZ.EQ.4) GO TO 1224
c  |-->-->-->-->--> go to 8-Be breakup
         GO TO 72
c  |-->-->-->-->--> go to return
c  |
c  +-------------------------------------------------------------------*
c  |  Sigma non zero
      ELSE
         GO TO 10
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  The residual nucleus is a p/n/d/3-H/3-He/4-He one:
 6102 CONTINUE
         IF ( U .GT. ANGLGB ) GO TO 1000
         JEMISS = J
c  | **** Store,residual nucleus is of emitted particle type ***
c  | If we are here this means that the residual nucleus is equal to
c  | one of the six emitted particle (the j-th one). So give to it
c  | all the energy, score it and return with 0 recoil and excitation
c  | energy for the residual nucleus
         EPS = EREC
         NPART(JEMISS) = NPART(JEMISS)+1
         ITEMP=NPART(JEMISS)
         NRNEEP = NRNEEP + 1
         SMOM1(JEMISS) = SMOM1(JEMISS) + EPS
         ITEMP=NPART(JEMISS)
         EPART(ITEMP,JEMISS)=EPS
         COSEVP(1,ITEMP,JEMISS) = COSLBR(1)
         COSEVP(2,ITEMP,JEMISS) = COSLBR(2)
         COSEVP(3,ITEMP,JEMISS) = COSLBR(3)
      GO TO 8002
c  |-->-->-->-->--> go to return
c  +-------------------------------------------------------------------*
c Come here for a "normal" step
   10 CONTINUE
      LOPPAR = .FALSE.
      URAN   = DT_RNDM(URAN) * SIGMA
      SUM    = ZERZER
      DO 16 J=1,NEVPRD
         K   = J
         SUM = R(J)+SUM
         IF ( SUM - URAN .GT. ZERZER ) GO TO 17
   16 CONTINUE
      K = NEVPRD
   17 CONTINUE
      JEMISS=K
      NPART(JEMISS) = NPART (JEMISS) + 1
      JS = SOS (JEMISS) + ONEONE
      IF ( JS .GE. 1000 ) THEN
         RATIO2=(S(JEMISS)**3-6.D0*S(JEMISS)**2+15.D0*
     &   S(JEMISS)-15.D0)/((2.D0*S(JEMISS)**2-6.D0*S(JEMISS)+6.D0)
     &   *SMALLA(JEMISS))
      ELSE
         RATIO2=(P2(JS)+(P2(JS+1)-P2(JS))*
     &   (SOS(JEMISS)-STRUN(JEMISS)))/SMALLA(JEMISS)
      END IF
      EPSAV = RATIO2*TWOTWO
c  +-------------------------------------------------------------------*
c  |  Neutron channel selected:
      IF (JEMISS .EQ. 1) THEN
         MM   =JA-IA(J)
         EPSAV=(EPSAV+BET(MM))/(ONEONE+BET(MM)*EYE0(JEMISS)
     &        /EYE1(JEMISS))
c  |  +----------------------------------------------------------------*
c  |  |  Compute the fission width relative to the neutron one:
c  |  |  this part is taken from subroutine EMIT of LAHET
         IF ( IFISS .GT. 0 .AND. JZ .GE. IZFSMX .AND. .NOT. FISINH) THEN
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Compute the correction factor for the fission width:
            IF ( JZ .GT. 88 ) THEN
               AGOES = ONEONE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            ELSE
c*sr modified to get proper fission xsection
C              IF ( LAGOES ) THEN
C                 AGOES = MAX ( ONEONE, ( U-SEVSEV ) / ( EPSAV+SEVSEV) )
C              ELSE
C                 AGOES = ONEONE
C              END IF
               AGOES = MAX ( ONEONE,  U/EPSAV*2.0D0 )
c*
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  Finally this is the relative fission width:
c  |  |  This is : Probfs = 1 / ( 1 + G_n / G_f )
            PROBFS = DT_FPROB( Z, A, U ) / AGOES
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Check if it will be fission:
            IF ( DT_RNDM(AGOES) .LT. PROBFS ) THEN
               FISINH = .TRUE.
               KFISS  = 1
c  |  |  |  Undo the counting of the neutron evaporation
               NPART (JEMISS) = NPART (JEMISS) - 1
               GO TO 9260
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
      END IF
c  |
c  +-------------------------------------------------------------------*
c  A. Ferrari: exprnf eliminated
c   20 E1=EXPRNF(V)/2.D0
c      E2=EXPRNF(V)/2.D0
  20  CONTINUE
      E1=-HLFHLF*LOG(DT_RNDM(E1))
      E2=-HLFHLF*LOG(DT_RNDM(E2))
c Eps should be the total kinetic energy in the CMS frame
c Standard calculation:
      EPS=(E1+E2)*EPSAV+THRESH(JEMISS)-Q(JEMISS)
      AR = A - DBLE (IA(JEMISS))
      ZR = Z - DBLE (IZ(JEMISS))
c The CMS energy is updated
      IMASS = NINT (AR)
      IF ( IMASS .EQ. 8 .AND. NINT (ZR) .EQ. 4 ) THEN
         UNEW = U - EPS - Q(JEMISS)
         UMAX = U - THRESH(JEMISS)
         IF ( UNEW .GT. 6.D+00 ) THEN
            UMIN = 6.D+00
         ELSE IF ( UNEW .GT. 4.47D+00 .AND. UMAX .GT. 6.D+00 ) THEN
            UMIN = 4.47D+00
            UNEW = 6.D+00
         ELSE IF ( UNEW .GT. 1.47D+00 .AND. UMAX .GT. 2.94D+00 ) THEN
            UMIN = 1.47D+00
            UNEW = 2.94D+00
         ELSE
            UMIN = -0.1D+00
            UNEW = ANGLGB * 0.1D+00
         END IF
      ELSE IF ( IMASS .LE. 4 ) THEN
         IPRO = NINT ( ZR )
         INEU = IMASS - IPRO
         IF ( IMASS .EQ. 1 ) THEN
c  Be sure that residual neutrons or protons are not left excited
            UMIN = ZERZER
            UNEW = ZERZER
            EPS  = U - Q(JEMISS)
         ELSE IF ( IPRO .EQ. 0 .OR. INEU .EQ. 0 ) THEN
c  Ipro protons or ineu neutrons arrived here!
            UMIN = CORRRR(JEMISS)
            UNEW = U - EPS - Q(JEMISS)
         ELSE IF ( IMASS .LE. 2 ) THEN
c  Be sure that residual deuterons are not left excited!
            UMIN = ZERZER
            UNEW = ZERZER
            EPS  = U - Q(JEMISS)
         ELSE IF ( ABS ( INEU - IPRO ) .LE. 1 ) THEN
c  For the moment also residual 3-H, 3-He and 4-He are not left
c  excited !
            UMIN = ZERZER
            UNEW = ZERZER
            EPS  = U - Q(JEMISS)
         ELSE
            UMIN = CORRRR(JEMISS)
            UNEW = U - EPS - Q(JEMISS)
         END IF
      ELSE
         UMIN = CORRRR(JEMISS)
         UNEW = U - EPS - Q(JEMISS)
      END IF
c Standard calculation
c     IF (UNEW) 6200,6220,6220
c New calculation (it should be at least equal to delta to be consistent
c with )
      IF(UNEW-UMIN)6200,6220,6220
 6220 CONTINUE
c The following two cards have been slightly modified
c     BE     = ZR * EMHN + AR * EMNUM - DT_ENERGY(AR,ZR)
c     RNMASS = ZR * EMH  + ( AR - ZR ) * EMN - BE
cor   RNMASS = AR * AMUMEV + DT_ENERGY(AR,ZR)
      RNMASS = AR * AMUMEV + DT_ENERGY(AR,ZR) + UNEW
      UMIN2  = ( RNMASS + ZMASS (JEMISS) )**2
      IF ( UMIN2 .GE. UMO2 ) THEN
         GO TO 6200
      END IF
      U = UNEW
c C(i) are the direction cosines of the evaporated particle in the CMS
c frame, of course - C(i) are the ones of the residual nucleus
      CALL DT_RACO(C(1),C(2),C(3))
c Erncm, Eepcm are the total energies of the residual nucleus and
c of the evaporated particle in the CMS frame
      ERNCM = HLFHLF * ( UMO2 + RNMASS**2 - Z2MASS (JEMISS) ) / UMO
      EEPCM = UMO - ERNCM
      PCMS  = SQRT ( EEPCM**2 - Z2MASS (JEMISS) )
c Now we perform the Lorentz transformation back to the original
c frame (lab frame)
c First the evaporated particle:
      ETAX  = ETACM * COSLBR (1)
      ETAY  = ETACM * COSLBR (2)
      ETAZ  = ETACM * COSLBR (3)
      PCMSX = PCMS * C (1)
      PCMSY = PCMS * C (2)
      PCMSZ = PCMS * C (3)
      ETAPCM = PCMSX * ETAX + PCMSY * ETAY + PCMSZ * ETAZ
      EPS = GAMCM * EEPCM + ETAPCM - ZMASS (JEMISS)
      PHELP = ETAPCM / (GAMCM + ONEONE) + EEPCM
      PLBPX = PCMSX + ETAX * PHELP
      PLBPY = PCMSY + ETAY * PHELP
      PLBPZ = PCMSZ + ETAZ * PHELP
      PHELP = SQRT (PLBPX * PLBPX + PLBPY * PLBPY + PLBPZ * PLBPZ)
      COSLBP (1) = PLBPX / PHELP
      COSLBP (2) = PLBPY / PHELP
      COSLBP (3) = PLBPZ / PHELP
c Then the residual nucleus ( for it c (i) --> - c (i) ):
      EREC  = GAMCM * ERNCM - ETAPCM - RNMASS
      EKRES = EMVGEV * EREC
      PHELP = - ETAPCM / (GAMCM + ONEONE) + ERNCM
      PXRES = EMVGEV * ( - PCMSX + ETAX * PHELP )
      PYRES = EMVGEV * ( - PCMSY + ETAY * PHELP )
      PZRES = EMVGEV * ( - PCMSZ + ETAZ * PHELP )
      P2RES = PXRES * PXRES + PYRES * PYRES + PZRES * PZRES
      PTRES = SQRT (P2RES)
      COSLBR (1) = PXRES / PTRES
      COSLBR (2) = PYRES / PTRES
      COSLBR (3) = PZRES / PTRES
c Check energy and momentum conservation !!
      IF (EREC .LE. ZERZER) THEN
         PTRES = ZERZER
         EREC  = ZERZER
      END IF
c Umo is the invariant mass of the system!!
      UMO  = RNMASS
      UMO2 = UMO * UMO
      ELBTOT  = RNMASS + EREC
      GAMCM   = ELBTOT / RNMASS
      ETACM   = 1.D+03 * PTRES / RNMASS
      GO TO 76
 6200 CONTINUE
      NCOUNT = NCOUNT + 1
      IF ( NCOUNT .LE. 10 ) GO TO 20
      SIGMA = SIGMA - R(JEMISS)
c if we are here we have sampled for > 10 times a negative energy Unew
      NPART(JEMISS)=NPART(JEMISS)-1
      R(JEMISS) = ZERZER
      NCOUNT = 0
      GO TO 6202
   76 CONTINUE
      JAT=JA-IA(JEMISS)
      JZT=JZ-IZ(JEMISS)
      IF(JAT.LE.JZT)THEN
         SIGMA = ZERZER
         GO TO 6202
      END IF
      JA=JAT
      JZ=JZT
C*****STORE,END OF NORMAL CYCLE
      SMOM1(JEMISS)=SMOM1(JEMISS)+EPS
c     IF(NPART(JEMISS).LE.0)CALL ERROR
      ITEMP=NPART(JEMISS)
      EPART(ITEMP,JEMISS)=EPS


      COSEVP(1,ITEMP,JEMISS)=COSLBP(1)
      COSEVP(2,ITEMP,JEMISS)=COSLBP(2)
      COSEVP(3,ITEMP,JEMISS)=COSLBP(3)
c The following card switch to the rough splitting treatment
      IF (JA .LE. 2) GO TO 1000
      IF (JA .NE. 8 .OR. JZ .NE. 4) GO TO 23
c If we are here the residual nucleus is a 8-Be one, break it into
c two alphas with all the available energy (U plus the Q of the breakup)
c , score them and return with 0 recoil and excitation energy
 1224 CONTINUE
      LOPPAR = .FALSE.
      IF (U .LT. ZERZER ) THEN
         EPS = ZERZER
      ELSE
      END IF
      NBE8 = NBE8 + 1
c C(i) are the direction cosines of the first alpha in the CMS
c frame, of course - C(i) are the ones of the other
      CALL DT_RACO(C(1),C(2),C(3))
c Ecms is the total energy of the alphas in the CMS frame
      ECMS  = HLFHLF * UMO
      PCMS  = SQRT ( ( ECMS - ZMASS (6) ) * ( ECMS + ZMASS (6) ) )
c Now we perform the Lorentz transformation back to the original
c frame (lab frame)
c First alpha:
      ETAX  = ETACM * COSLBR (1)
      ETAY  = ETACM * COSLBR (2)
      ETAZ  = ETACM * COSLBR (3)
      PCMSX = PCMS * C (1)
      PCMSY = PCMS * C (2)
      PCMSZ = PCMS * C (3)
      ETAPCM = PCMSX * ETAX + PCMSY * ETAY + PCMSZ * ETAZ
      EPS   = GAMCM * ECMS + ETAPCM - ZMASS (6)
      PHELP = ETAPCM / (GAMCM + ONEONE) + ECMS
      PLBPX = PCMSX + ETAX * PHELP
      PLBPY = PCMSY + ETAY * PHELP
      PLBPZ = PCMSZ + ETAZ * PHELP
      PHELP = SQRT (PLBPX * PLBPX + PLBPY * PLBPY + PLBPZ * PLBPZ)
c Store the first alpha!!
      SMOM1(6) = SMOM1(6) + EPS
      NPART(6) = NPART(6) + 1
      ITEMP = NPART(6)
      EPART (ITEMP,6) = EPS
      COSEVP (1,ITEMP,6) = PLBPX / PHELP
      COSEVP (2,ITEMP,6) = PLBPY / PHELP
      COSEVP (3,ITEMP,6) = PLBPZ / PHELP
c Then the second alpha ( for it c (i) --> - c (i) ):
      EPS   = GAMCM * ECMS - ETAPCM - ZMASS (6)
      PHELP = - ETAPCM / (GAMCM + ONEONE) + ECMS
      PLBPX = - PCMSX + ETAX * PHELP
      PLBPY = - PCMSY + ETAY * PHELP
      PLBPZ = - PCMSZ + ETAZ * PHELP
      PHELP = SQRT (PLBPX * PLBPX + PLBPY * PLBPY + PLBPZ * PLBPZ)
c Store the second alpha !!
      SMOM1(6) = SMOM1(6) + EPS
      NPART(6) = NPART(6) + 1
      ITEMP = NPART(6)
      EPART (ITEMP,6) = EPS
      COSEVP (1,ITEMP,6) = PLBPX / PHELP
      COSEVP (2,ITEMP,6) = PLBPY / PHELP
      COSEVP (3,ITEMP,6) = PLBPZ / PHELP
 8002 CONTINUE
      LOPPAR = .FALSE.
      EREC   = ZERZER
      U      = ZERZER
      EKRES  = ZERZER
      PTRES  = ZERZER
   72 CONTINUE
      HEVSUM = SMOM1 (3) + SMOM1 (5) + SMOM1 (6) + SMOM1 (4)
      RETURN
c.......................................................................
c///// RAL FISSION ROUTINE /////
 9260 CONTINUE
c  +-------------------------------------------------------------------*
c  |  Record the direction cosines of the fissioning nucleus
      DO 9270 I=1,3
         COSLF0 (I) = COSLBR (I)
 9270 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      CALL DT_FISFRA( JA, JZ, U, EREC, UMO, GAMCM, ETACM )
c  +-------------------------------------------------------------------*
c  |  Check for fission failures!!
      IF ( .NOT. FISINH ) THEN
         PENBAR = .FALSE.
         GO TO 23
      END IF
c  |
c  +-------------------------------------------------------------------*
c  Do not pick up the fission fragments, rather go back to Evevap
      HEVSUM = SMOM1 (3) + SMOM1 (5) + SMOM1 (6) + SMOM1 (4)
c  Be sure that no 2nd step without pairing corrections will be tried
      LOPPAR = .FALSE.
      IFKEY  = 1
      RETURN
c=== Dres95 ===========================================================*
      END

c*sr 20.4.98 evap =====================================================*
c*sr 30.6.
c DBLPRC,DIMPAR,IOUNIT,FINUC,RESNUC,NUCGEO,NUCLEV,PARNUC,HIGFIS,
c PART,NCDNVP replaced
c*
c$ CREATE BDEVAP.FOR
cCOPY BDEVAP
c
c=== bdevap ===========================================================*
c
CDECK  ID>, DT_BDEVAP
      BLOCK DATA DT_BDEVAP

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Block Data for the EVAPoration routines:                         *
c                                                                      *
c     Created on    20 may 1990    by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Modified from the original version of J.M.Zazula                 *
c     and, for cookcm, from a LAHET block data kindly provided by      *
c     R.E.Prael-LANL                                                   *
c                                                                      *
c     Last change on  20-feb-95    by    Alfredo Ferrari               *
c                                                                      *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: COOKCM)
      PARAMETER ( ASMTOG = SIXSIX / PIPIPI**2 )
      LOGICAL LDEFOZ, LDEFON
      PARAMETER ( INCOOK = 150, IZCOOK = 98 )
      COMMON /FKCOOK/ ALPIGN, BETIGN, GAMIGN, POWIGN,
     &                SZCOOK (IZCOOK), SNCOOK (INCOOK), PZCOOK (IZCOOK),
     &                PNCOOK (INCOOK), LDEFOZ (IZCOOK), LDEFON (INCOOK)

c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: HETTP)
      COMMON /FKHETP/  NHSTP,NBERTP,IOSUB,INSRS

c (original name: HETC7)
      COMMON /FKHET7/ COSKS,SINKS, COSTH,SINTH, COSPHI,SINPHI

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

c
      DATA B0   / 8.D+00 /, Y0 / 1.5D+00 /
      DATA IANG / 1 /, IFISS / 1 /,  IB0 / 2 /, IGEOM / 0 /
      DATA ISTRAG /0/, KEYDK /0/
      DATA NBERTP /LUNBER/
      DATA COSTH /ONEONE/, SINTH /ZERZER/, COSPHI /ONEONE/,
     &     SINPHI/ZERZER/
c  /cookcm/
       DATA ( PZCOOK(I),I =  1, IZCOOK ) /
     & 0.000D+00, 5.440D+00, 0.000D+00, 2.760D+00, 0.000D+00, 3.340D+00,
     & 0.000D+00, 2.700D+00, 0.000D+00, 2.500D+00, 0.000D+00, 2.460D+00,
     & 0.000D+00, 2.090D+00, 0.000D+00, 1.620D+00, 0.000D+00, 1.620D+00,
     & 0.000D+00, 1.830D+00, 0.000D+00, 1.730D+00, 0.000D+00, 1.350D+00,
     & 0.000D+00, 1.540D+00, 0.000D+00, 1.280D+00, 2.600D-01, 8.800D-01,
     & 1.900D-01, 1.350D+00,-5.000D-02, 1.520D+00,-9.000D-02, 1.170D+00,
     & 4.000D-02, 1.240D+00, 2.900D-01, 1.090D+00, 2.600D-01, 1.170D+00,
     & 2.300D-01, 1.150D+00,-8.000D-02, 1.350D+00, 3.400D-01, 1.050D+00,
     & 2.800D-01, 1.270D+00, 0.000D+00, 1.050D+00, 0.000D+00, 1.000D+00,
     & 9.000D-02, 1.200D+00, 2.000D-01, 1.400D+00, 9.300D-01, 1.000D+00,
     &-2.000D-01, 1.190D+00, 9.000D-02, 9.700D-01, 0.000D+00, 9.200D-01,
     & 1.100D-01, 6.800D-01, 5.000D-02, 6.800D-01,-2.200D-01, 7.900D-01,
     & 9.000D-02, 6.900D-01, 1.000D-02, 7.200D-01, 0.000D+00, 4.000D-01,
     & 1.600D-01, 7.300D-01, 0.000D+00, 4.600D-01, 1.700D-01, 8.900D-01,
     & 0.000D+00, 7.900D-01, 0.000D+00, 8.900D-01, 0.000D+00, 8.100D-01,
     &-6.000D-02, 6.900D-01,-2.000D-01, 7.100D-01,-1.200D-01, 7.200D-01,
     & 0.000D+00, 7.700D-01/
       DATA ( PNCOOK(I),I =  1, 90 ) /
     & 0.000D+00, 5.980D+00, 0.000D+00, 2.770D+00, 0.000D+00, 3.160D+00,
     & 0.000D+00, 3.010D+00, 0.000D+00, 2.500D+00, 0.000D+00, 2.670D+00,
     & 0.000D+00, 1.800D+00, 0.000D+00, 1.670D+00, 0.000D+00, 1.860D+00,
     & 0.000D+00, 2.040D+00, 0.000D+00, 1.640D+00, 0.000D+00, 1.440D+00,
     & 0.000D+00, 1.540D+00, 0.000D+00, 1.300D+00, 0.000D+00, 1.270D+00,
     & 0.000D+00, 1.290D+00, 8.000D-02, 1.410D+00,-8.000D-02, 1.500D+00,
     &-5.000D-02, 2.240D+00,-4.700D-01, 1.430D+00,-1.500D-01, 1.440D+00,
     & 6.000D-02, 1.560D+00, 2.500D-01, 1.570D+00,-1.600D-01, 1.460D+00,
     & 0.000D+00, 9.300D-01, 1.000D-02, 6.200D-01,-5.000D-01, 1.420D+00,
     & 1.300D-01, 1.520D+00,-6.500D-01, 8.000D-01,-8.000D-02, 1.290D+00,
     &-4.700D-01, 1.250D+00,-4.400D-01, 9.700D-01, 8.000D-02, 1.650D+00,
     &-1.100D-01, 1.260D+00,-4.600D-01, 1.060D+00, 2.200D-01, 1.550D+00,
     &-7.000D-02, 1.370D+00, 1.000D-01, 1.200D+00,-2.700D-01, 9.200D-01,
     &-3.500D-01, 1.190D+00, 0.000D+00, 1.050D+00,-2.500D-01, 1.610D+00,
     &-2.100D-01, 9.000D-01,-2.100D-01, 7.400D-01,-3.800D-01, 7.200D-01/
       DATA ( PNCOOK(I),I = 91, INCOOK ) /
     &-3.400D-01, 9.200D-01,-2.600D-01, 9.400D-01, 1.000D-02, 6.500D-01,
     &-3.600D-01, 8.300D-01, 1.100D-01, 6.700D-01, 5.000D-02, 1.000D+00,
     & 5.100D-01, 1.040D+00, 3.300D-01, 6.800D-01,-2.700D-01, 8.100D-01,
     & 9.000D-02, 7.500D-01, 1.700D-01, 8.600D-01, 1.400D-01, 1.100D+00,
     &-2.200D-01, 8.400D-01,-4.700D-01, 4.800D-01, 2.000D-02, 8.800D-01,
     & 2.400D-01, 5.200D-01, 2.700D-01, 4.100D-01,-5.000D-02, 3.800D-01,
     & 1.500D-01, 6.700D-01, 0.000D+00, 6.100D-01, 0.000D+00, 7.800D-01,
     & 0.000D+00, 6.700D-01, 0.000D+00, 6.700D-01, 0.000D+00, 7.900D-01,
     & 0.000D+00, 6.000D-01, 4.000D-02, 6.400D-01,-6.000D-02, 4.500D-01,
     & 5.000D-02, 2.600D-01,-2.200D-01, 3.900D-01, 0.000D+00, 3.900D-01/
       DATA ( SZCOOK(I),I =  1, 98) /
     & 0.000D+00, 0.000D+00, 0.000D+00, 0.000D+00, 0.000D+00, 0.000D+00,
     & 0.000D+00, 0.000D+00,-1.100D-01,-8.100D-01,-2.910D+00,-4.170D+00,
     &-5.720D+00,-7.800D+00,-8.970D+00,-9.700D+00,-1.010D+01,-1.070D+01,
     &-1.138D+01,-1.207D+01,-1.255D+01,-1.324D+01,-1.393D+01,-1.471D+01,
     &-1.553D+01,-1.637D+01,-1.736D+01,-1.860D+01,-1.870D+01,-1.801D+01,
     &-1.787D+01,-1.708D+01,-1.660D+01,-1.675D+01,-1.650D+01,-1.635D+01,
     &-1.622D+01,-1.641D+01,-1.689D+01,-1.643D+01,-1.668D+01,-1.673D+01,
     &-1.745D+01,-1.729D+01,-1.744D+01,-1.782D+01,-1.862D+01,-1.827D+01,
     &-1.939D+01,-1.991D+01,-1.914D+01,-1.826D+01,-1.740D+01,-1.642D+01,
     &-1.577D+01,-1.437D+01,-1.391D+01,-1.310D+01,-1.311D+01,-1.143D+01,
     &-1.089D+01,-1.075D+01,-1.062D+01,-1.041D+01,-1.021D+01,-9.850D+00,
     &-9.470D+00,-9.030D+00,-8.610D+00,-8.130D+00,-7.460D+00,-7.480D+00,
     &-7.200D+00,-7.130D+00,-7.060D+00,-6.780D+00,-6.640D+00,-6.640D+00,
     &-7.680D+00,-7.890D+00,-8.410D+00,-8.490D+00,-7.880D+00,-6.300D+00,
     &-5.470D+00,-4.780D+00,-4.370D+00,-4.170D+00,-4.130D+00,-4.320D+00,
     &-4.550D+00,-5.040D+00,-5.280D+00,-6.060D+00,-6.280D+00,-6.870D+00,
     &-7.200D+00,-7.740D+00/
       DATA ( SNCOOK(I),I =  1, 90 ) /
     & 0.000D+00, 0.000D+00, 0.000D+00, 0.000D+00, 0.000D+00, 0.000D+00,
     & 0.000D+00, 0.000D+00, 1.030D+01, 5.660D+00, 6.800D+00, 7.530D+00,
     & 7.550D+00, 7.210D+00, 7.440D+00, 8.070D+00, 8.940D+00, 9.810D+00,
     & 1.060D+01, 1.139D+01, 1.254D+01, 1.368D+01, 1.434D+01, 1.419D+01,
     & 1.383D+01, 1.350D+01, 1.300D+01, 1.213D+01, 1.260D+01, 1.326D+01,
     & 1.413D+01, 1.492D+01, 1.552D+01, 1.638D+01, 1.716D+01, 1.755D+01,
     & 1.803D+01, 1.759D+01, 1.903D+01, 1.871D+01, 1.880D+01, 1.899D+01,
     & 1.846D+01, 1.825D+01, 1.776D+01, 1.738D+01, 1.672D+01, 1.562D+01,
     & 1.438D+01, 1.288D+01, 1.323D+01, 1.381D+01, 1.490D+01, 1.486D+01,
     & 1.576D+01, 1.620D+01, 1.762D+01, 1.773D+01, 1.816D+01, 1.867D+01,
     & 1.969D+01, 1.951D+01, 2.017D+01, 1.948D+01, 1.998D+01, 1.983D+01,
     & 2.020D+01, 1.972D+01, 1.987D+01, 1.924D+01, 1.844D+01, 1.761D+01,
     & 1.710D+01, 1.616D+01, 1.590D+01, 1.533D+01, 1.476D+01, 1.354D+01,
     & 1.263D+01, 1.065D+01, 1.010D+01, 8.890D+00, 1.025D+01, 9.790D+00,
     & 1.139D+01, 1.172D+01, 1.243D+01, 1.296D+01, 1.343D+01, 1.337D+01/
       DATA ( SNCOOK(I),I = 91, INCOOK ) /
     & 1.296D+01, 1.211D+01, 1.192D+01, 1.100D+01, 1.080D+01, 1.042D+01,
     & 1.039D+01, 9.690D+00, 9.270D+00, 8.930D+00, 8.570D+00, 8.020D+00,
     & 7.590D+00, 7.330D+00, 7.230D+00, 7.050D+00, 7.420D+00, 6.750D+00,
     & 6.600D+00, 6.380D+00, 6.360D+00, 6.490D+00, 6.250D+00, 5.850D+00,
     & 5.480D+00, 4.530D+00, 4.300D+00, 3.390D+00, 2.350D+00, 1.660D+00,
     & 8.100D-01, 4.600D-01,-9.600D-01,-1.690D+00,-2.530D+00,-3.160D+00,
     &-1.870D+00,-4.100D-01, 7.100D-01, 1.660D+00, 2.620D+00, 3.220D+00,
     & 3.760D+00, 4.100D+00, 4.460D+00, 4.830D+00, 5.090D+00, 5.180D+00,
     & 5.170D+00, 5.100D+00, 5.010D+00, 4.970D+00, 5.090D+00, 5.030D+00,
     & 4.930D+00, 5.280D+00, 5.490D+00, 5.500D+00, 5.370D+00, 5.300D+00/
      DATA LDEFOZ / 53*.FALSE.,25*.TRUE.,7*.FALSE.,13*.TRUE. /
      DATA LDEFON / 85*.FALSE.,37*.TRUE.,7*.FALSE.,21*.TRUE. /
c=== End of Block Data Bdevap =========================================*
      END

c$ CREATE BDNOPT.FOR
cCOPY BDNOPT
c
c=== bdnopt ===========================================================*
c==                                                                    *
CDECK  ID>, DT_BDNOPT
      BLOCK DATA DT_BDNOPT

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c   Created on  20 september 1989    by  Alfredo Ferrari - Infn Milan  *
c                                                                      *
c         Last change on 20-apr-95   by  Alfredo Ferrari               *
c                                                                      *
c----------------------------------------------------------------------*
c
C     INCLUDE '(BLNKCM)'
c$ CREATE BLNKCM.ADD
c*sr 17.5. commented since not used here
C     PARAMETER ( NBLNMX = 1100000 )
C     DIMENSION GMSTOR ( NBLNMX ), BRMBRR ( NBLNMX ), BRMEXP ( NBLNMX ),
C    &          BRMSIG ( NBLNMX ), SIGGTT ( KALGNM*NBLNMX ),
C    &          COMSCO ( NBLNMX ), LBSTOR ( KALGNM*NBLNMX )
C     REAL SIGGTT
C     LOGICAL LBSTOR
C     COMMON   NSTOR  ( KALGNM*NBLNMX )
c*
c*sr 18.5. commented since not used for evap.
C     COMMON / ADDRCM / MBLNMX, KBLNKL, KGMBGN, KGMLST, KCMBGN, KCMLST,
C    &                  KISBGN, KISLST, KDTBGN, KDTLST, KUBBGN, KUBLST,
C    &                  KUXBGN, KUXLST, KTCBGN, KTCLST, KRNBGN, KRNLST,
C    &                  KYLBGN, KYLLST, KXSBGN, KXSLST, KIHBGN, KIHLST,
C    &                  KINBGN, KINLST, KIEBGN, KIELST, KETBGN, KETLST,
C    &                  KRRBGN, KRRLST, KGLBGN, KGLLST, KNABGN, KNALST,
C    &                  KGDBGN, KGDLST, KDWBGN, KDWLST, KGCBGN, KGCLST,
C    &                  KWLBGN, KWLLST, KWHBGN, KWHLST, KWMBGN, KWMLST,
C    &                  KWSBGN, KWSLST, KNDBGN, KNDLST, KDPBGN, KDPLST,
C    &                  KRGBGN, KRGLST, KSGBGN, KSGLST, KBRBGN, KBRLST,
C    &                  KTMBGN
c*

C     EQUIVALENCE ( NSTOR (1), GMSTOR (1) )
C     EQUIVALENCE ( NSTOR (1), BRMBRR (1) )
C     EQUIVALENCE ( NSTOR (1), BRMEXP (1) )
C     EQUIVALENCE ( NSTOR (1), BRMSIG (1) )
C     EQUIVALENCE ( NSTOR (1), COMSCO (1) )
C     EQUIVALENCE ( NSTOR (1), SIGGTT (1) )
C     EQUIVALENCE ( NSTOR (1), LBSTOR (1) )
C     INCLUDE '(BLNTMP)'
c$ CREATE BLNTMP.ADD
c*sr 18.5. commented since not used for evap.
C     COMMON / BLNTMP / KIHBTM, KINBTM, KIEBTM, KRRBTM, KGLBTM, KNABTM,
C    &                  KGCBTM, KGDWTM, KBDWTM, KWLOTM, KWHITM, KWMUTM,
C    &                  KWSHTM, KEXTTM, KSTXTM, KSTNTM, KECTTM, KPCTTM,
C    &                  KLPBTM, NXXRGN
c*
C     INCLUDE '(CMMDNR)'
c$ CREATE CMMDNR.ADD
c*sr 18.5. commented since not used for evap.
C     LOGICAL LFLDNR
C     COMMON / CMMDNR / DDNEAR, LFLDNR
c*
C     INCLUDE '(CTITLE)'
c$ CREATE CTITLE.ADD
c*sr 18.5. commented since not used for evap.
C     CHARACTER RUNTIT*80, RUNTIM*32, RUNKEY*10
C     COMMON / CTITLE / RUNTIT, RUNTIM, RUNKEY
C     COMMON / CEXPCK / ITEXPI, ITEXMX
c*
C     INCLUDE '(DETECT)'
c$ CREATE DETECT.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER (NRGNMX = 10)
C     PARAMETER (NDTCMX = 10)
C     PARAMETER (NSCRMX = 10)
C     PARAMETER (NDTBIN = 1024)
C     CHARACTER*10 TITDET,TITSCO
C     LOGICAL LDTCTR
C     COMMON /DETCT/  EDTMIN(NDTCMX), EDTBIN(NDTCMX), EDTCUT(NDTCMX),
C    &                KDTREG(NRGNMX,NDTCMX), KDTDET(NDTCMX,NSCRMX),
C    &                NDTSCO, NDTDET, LDTCTR, IDTREG(MXXRGN),
C    &                KDTSCD(NSCRMX)
C     COMMON /DETCH/  TITDET(NDTCMX), TITSCO(NSCRMX)
c*
C     INCLUDE '(DETLOC)'
c$ CREATE DETLOC.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER (NDTCM2 = 10)
C     COMMON /DETLOC/ ACCUMP (NDTCM2), ACCUMN (NDTCM2),
C    &                ICOINC(NDTCM2), NCLAS
c*
C     INCLUDE '(EMGTRN)'
c$ CREATE EMGTRN.ADD
c*sr 18.5. commented since not used for evap.
C     LOGICAL LMCSMG
C     COMMON / EMGTRN / UMCSMG, VMCSMG, WMCSMG, LMCSMG
c*
C     INCLUDE '(EMSHO)'
c$ CREATE EMSHO.ADD
c*sr 18.5. commented since not used for evap.
C     LOGICAL EMFLO, EMFHLO, EMFELO, LIMPRE, LEXPTE
C     COMMON /EMSHO/ EMFETH, EMFPTH, EMFHET, EMFHPT, EMFBIA, EMFLO,
C    &               EMFHLO, EMFELO, LIMPRE, LEXPTE
c*
C     INCLUDE '(EPISOR)'
c$ CREATE EPISOR.ADD
c*sr 18.5. commented since not used for evap.
C     LOGICAL LUSSRC
C     COMMON/EPISOR/TKESUM,LUSSRC
c*
c (original name: FHEAVY,FHEAVC)
      PARAMETER ( MXHEAV = 100 )
      CHARACTER*8 ANHEAV
      COMMON /FKFHVY/ CXHEAV (MXHEAV), CYHEAV (MXHEAV),
     &                CZHEAV (MXHEAV), TKHEAV (MXHEAV),
     &                PHEAVY (MXHEAV), WHEAVY (MXHEAV),
     &                AMHEAV  ( 12 ) , AMNHEA  ( 12 ) ,
     &                KHEAVY (MXHEAV), ICHEAV  ( 12 ) ,
     &                IBHEAV  ( 12 ) , NPHEAV
      COMMON /FKFHVC/ ANHEAV  ( 12 )

c (original name: FINUC)
      PARAMETER (MXP=999)
      COMMON /FKFINU/ CXR    (MXP), CYR    (MXP), CZR    (MXP),
     &                CXRPOL (MXP), CYRPOL (MXP), CZRPOL (MXP),
     &                TKI    (MXP), PLR    (MXP), WEI    (MXP),
     &                TV, TVCMS, TVRECL, TVHEAV, TVBIND, NP0, NP,
     &                KPART  (MXP)

C     INCLUDE '(GENTHR)'
c$ CREATE GENTHR.ADD
c*sr 18.5. commented since not used for evap.
C     COMMON / GENTHR / PEANCT, PEAPIT, PLDNCT, PTHRSH (NALLWP),
C    &                  PTHDFF (NALLWP), IJNUCR (NALLWP)
c*
C     INCLUDE '(LOWNEU)'
c$ CREATE LOWNEU.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXGTHN =  15 )
C     PARAMETER ( MXGLWN = 200 )
C     PARAMETER ( MXSHPP =   5 )
C     LOGICAL LCOMPN, LIMPRN, LBIASN, LDOWNN, LRECPR, LLOWWW, LLOWET
C     CHARACTER*10 TITLOW
C     COMMON / LOWNEU / ATOLOW (MXXMDF), WSHPLN (MXGLWN,MXSHPP), EXTWWL,
C    &                  SHPIMP (MXGLWN), EXTETL (MXGLWN), WWAMFL,
C    &                  VLLNTH (MXGTHN,MXXMDF), ABLNTH (MXGTHN,MXXMDF),
C    &                  STLNTH (MXGTHN,MXXMDF), TMRTLN (MXXMDF),
C    &                  TMNMLN (MXXMDF), ICHCPT (MXXMDF),
C    &                  IGTMRT (MXXMDF), NEUMED (MXXMDF),
C    &                  ID1MED (MXXMDF), ID2MED (MXXMDF),
C    &                  ID3MED (MXXMDF), MGTMED (MXXMDF),
C    &                  LCOMPN (MXXMDF), LRECPR (MXXMDF), KPRLOW, NMGP,
C    &                  NMTG  , IGRTHN, LIMPRN, LBIASN, LDOWNN, LLOWWW,
C    &                  LLOWET, ICLMED, IKRBGN, INABGN, IDWBGN, IETBGN,
C    &                  I0XSEC, IDXSEC, ISENAV, ISVELN, ISPNAV, IWWLWB,
C    &                  IWWLWT, IPXBGN, NPXSEC
C     COMMON / CHLWNT / TITLOW (MXXMDF)
c*
C     INCLUDE '(LTCLCM)'
c$ CREATE LTCLCM.ADD
c*sr 18.5. commented since not used for evap.
C     COMMON / LTCLCM / MLATTC, NEWLAT, MLATLD, MLATM1, MLTSEN, MLTSM1
c*
C     INCLUDE '(MULBOU)'
c$ CREATE MULBOU.ADD
c*sr 18.5. commented since not used for evap.
C     LOGICAL LLDA  , LAGAIN, LSTNEW, LARTEF, LNORML, LSENSE, LMGNOR
C     COMMON / MULBOU / UOLD  , VOLD  , WOLD  , UMAG  , VMAG  , WMAG  ,
C    &                  UNORML, VNORML, WNORML, USENSE, VSENSE, WSENSE,
C    &                  TSENSE, DDSENS, DSMALL, NSSENS, LLDA  , LAGAIN,
C    &                  LSTNEW, LARTEF, LNORML, LSENSE, LMGNOR
c*
C     INCLUDE '(MULHD)'
c$ CREATE MULHD.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXXPT1 = 1 )
C     PARAMETER ( TIMESS = 2.00D+00 )
C     PARAMETER ( TMSRLX = 1.50D+00 )
C     PARAMETER ( EPSINS = 0.15D+00 )
C     PARAMETER ( EPSRLX = 0.50D+00 )
C     PARAMETER ( SQEPSN = 0.3872983346207417 D+00 )
C     PARAMETER ( SQEPSR = 0.7071067811865475 D+00 )
C     PARAMETER ( PARNSI = 1.732050807568877 D+00 * SQEPSN )
C     PARAMETER ( PRNSR0 = 1.732050807568877 D+00 * SQEPSR )
C     PARAMETER ( R0NCMS = 1.20 D+00 )
C     LOGICAL LTOPT, LSRCRH, LNSCRH
C     COMMON / MULHD / BLCC   ( MXXMDF ), BLCCRA ( MXXMDF ),
C    &                 XCC    ( MXXMDF ), ZTILDE ( MXXMDF, 0:MXXPT1 ),
C    &                 ALPZTL ( MXXMDF, 0:MXXPT1 ), RLDU   ( MXXMDF ),
C    &                 ALPZT2 ( MXXMDF, 0:MXXPT1 ), TEFF0  ( MXXMDF ),
C    &                 XR0    ( MXXMDF ), ECUTM  ( MXXMDF, 39, 2 ),
C    &                 ESTEPF ( MXXMDF ), HTHNSZ ( MXXMDF, 39 ),
C    &                 AE1O3  ( MXXMDF ), PARNSR ( MXXMDF ),
C    &                 HEESLI ( MXXMDF ), THMSPR, THMSSC, HMSAMP,
C    &                 HMREJE, LSRCRH ( MXXMDF ), LNSCRH ( MXXMDF ),
C    &                 LTOPT  ( MXXMDF ), NFSCAT
c*
c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c (original name: RESNUC)
      LOGICAL LRNFSS, LFRAGM
      COMMON /FKRESN/  AMNTAR, AMMTAR, AMNZM1, AMMZM1, AMNNM1, AMMNM1,
     &                   ANOW,   ZNOW, ANCOLL, ZNCOLL, AMMLFT, AMNLFT,
     &                   ERES,  EKRES, AMNRES, AMMRES,  PTRES,  PXRES,
     &                  PYRES,  PZRES, PTRES2,  KTARP,  KTARN, IGREYP,
     &                 IGREYN, IPREEH, IPRDEU, IPRTRI, IPR3HE, IPR4HE,
     &                  ICRES,  IBRES, ISTRES, IEVAPL, IEVAPH, IEVNEU,
     &                 IEVPRO, IEVDEU, IEVTRI, IEV3HE, IEV4HE, IDEEXG,
     &                  IBTAR, ICHTAR, IBLEFT, ICLEFT, IOTHER, LRNFSS,
     &                 LFRAGM

C     INCLUDE '(SCOHLP)'
c$ CREATE SCOHLP.ADD
c*sr 18.5. commented since not used for evap.
C     LOGICAL LSCZER
C     COMMON / SCOHLP / ISCRNG, JSCRNG, LSCZER
c*
C     INCLUDE '(TRACKR)'
c$ CREATE TRACKR.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXTRCK = 2500 )
C     LOGICAL LFSSSC
C     COMMON / TRACKR /  XTRACK ( 0:MXTRCK ), YTRACK ( 0:MXTRCK ),
C    &                   ZTRACK ( 0:MXTRCK ), TTRACK   ( MXTRCK ),
C    &                   DTRACK   ( MXTRCK ), ETRACK, PTRACK, WTRACK,
C    &                   ATRACK, CTRACK, AKSHRT, AKLONG, WSCRNG,
C    &                   NTRACK, MTRACK, JTRACK, KTRACK, MMTRCK,
C    &                   LT1TRK, LT2TRK, LTRACK, LLOUSE, LFSSSC
c*
C     INCLUDE '(USRBDX)'
c$ CREATE USRBDX.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXUSBX = 600 )
C     LOGICAL LUSBDX, LFUSBX, LWUSBX, LLNUSX
C     CHARACTER*10 TITUSX
C     COMMON /USRBX/  EBXLOW(MXUSBX), EBXHGH(MXUSBX), ABXLOW(MXUSBX),
C    &                ABXHGH(MXUSBX), DEBXBN(MXUSBX), DABXBN(MXUSBX),
C    &                AUSBDX(MXUSBX),
C    &                NEBXBN(MXUSBX), NABXBN(MXUSBX), NR1USX(MXUSBX),
C    &                NR2USX(MXUSBX), ITUSBX(MXUSBX), IDUSBX(MXUSBX),
C    &                KBUSBX(MXUSBX), IPUSBX(MXUSBX), IGMUSX(MXUSBX),
C    &                LFUSBX(MXUSBX), LWUSBX(MXUSBX), LLNUSX(MXUSBX),
C    &                NUSRBX, LUSBDX
C     COMMON /USXCH/  TITUSX(MXUSBX)
c*
C     INCLUDE '(USRBIN)'
c$ CREATE USRBIN.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXUSBN = 100 )
C     LOGICAL LUSBIN, LEVTBN, LNTZER, LUSEVT, LUSTKB, LTRKBN
C     CHARACTER*10 TITUSB
C     COMMON /USRBN/  XLOW  (MXUSBN), XHIGH (MXUSBN), YLOW  (MXUSBN),
C    &                YHIGH (MXUSBN), ZLOW  (MXUSBN), ZHIGH (MXUSBN),
C    &                DXUSBN(MXUSBN), DYUSBN(MXUSBN), DZUSBN(MXUSBN),
C    &                TCUSBN(MXUSBN), BKUSBN(MXUSBN), B2USBN(MXUSBN),
C    &                NXBIN (MXUSBN), NYBIN (MXUSBN), NZBIN (MXUSBN),
C    &                ITUSBN(MXUSBN), IDUSBN(MXUSBN), KBUSBN(MXUSBN),
C    &                IPUSBN(MXUSBN), LEVTBN(MXUSBN), LNTZER(MXUSBN),
C    &                LTRKBN(MXUSBN), NUSRBN, LUSBIN, LUSEVT, LUSTKB
C     COMMON /USRCH/  TITUSB(MXUSBN)
c*
C     INCLUDE '(USRSNC)'
c$ CREATE USRSNC.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXRSNC = 400 )
C     PARAMETER ( NMZMIN =  -5 )
C     LOGICAL LURSNC
C     CHARACTER*10 TIURSN
C     COMMON /USRSNC/  VURSNC(MXRSNC), IZRHGH(MXRSNC), IMRHGH(MXRSNC),
C    &                 NRURSN(MXRSNC), ITURSN(MXRSNC), KBURSN(MXRSNC),
C    &                 IPURSN(MXRSNC), NURSNC, LURSNC
C     COMMON /USRSCH/  TIURSN(MXRSNC)
C     INCLUDE '(USRTRC)'
c$ CREATE USRTRC.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXUSTC = 400 )
C     LOGICAL LUSRTC, LUSTRK, LUSCLL, LLNUTC
C     CHARACTER*10 TITUTC
C     COMMON /USRTC/  ETCLOW(MXUSTC), ETCHGH(MXUSTC), DETCBN(MXUSTC),
C    &                VUSRTC(MXUSTC),
C    &                IUSTRK(MXUSTC), IUSCLL(MXUSTC), NETCBN(MXUSTC),
C    &                NRUSTC(MXUSTC), ITUSTC(MXUSTC), IDUSTC(MXUSTC),
C    &                KBUSTC(MXUSTC), IPUSTC(MXUSTC), IGMUTC(MXUSTC),
C    &                LLNUTC(MXUSTC), NUSRTC, NUSTRK, NUSCLL, LUSRTC,
C    &                LUSTRK, LUSCLL
C     COMMON /USTCH/  TITUTC(MXUSTC)
c*
C     INCLUDE '(USRYLD)'
c$ CREATE USRYLD.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXUSYL = 500 )
C     LOGICAL LUSRYL, LLNUYL, LSCUYL
C     CHARACTER*10 TITUYL
C     COMMON /USRYL/  EYLLOW(MXUSYL), EYLHGH(MXUSYL), DEYLBN(MXUSYL),
C    &                USNRYL(MXUSYL), SGUSYL(MXUSYL), AYLLOW(MXUSYL),
C    &                AYLHGH(MXUSYL), PUSRYL, UUSRYL, VUSRYL, WUSRYL,
C    &                ETXUYL, ETYUYL, ETZUYL, GAMUYL, SQSUYL, UCMUYL,
C    &                VCMUYL, WCMUYL, IJUSYL, JTUSYL,
C    &                NEYLBN(MXUSYL), NR1UYL(MXUSYL), NR2UYL(MXUSYL),
C    &                IXUSYL(MXUSYL), ITUSYL(MXUSYL), IDUSYL(MXUSYL),
C    &                KBUSYL(MXUSYL), IPUSYL(MXUSYL), IGMUYL(MXUSYL),
C    &                IEUSYL(MXUSYL), IAUSYL(MXUSYL), LLNUYL(MXUSYL),
C    &                NUSRYL, LUSRYL, LSCUYL
C     COMMON /USYCH/  TITUYL(MXUSYL)
c*
C     INCLUDE '(WWINDW)'
c$ CREATE WWINDW.ADD
c*sr 18.5. commented since not used for evap.
C     PARAMETER ( MXWWSP = 3 )
C     PARAMETER ( WWSPMX = 50.D+00 )
C     LOGICAL LWWNDW, LWWPRM
C     COMMON / WWINDW / ETHWW1 (NALLWP), ETHWW2 (NALLWP),
C    &                  WWEXWD (NALLWP), EXTWWN (NALLWP),
C    &                  IWLBGN, IWHBGN, IWMBGN, LWWNDW, LWWPRM
c*

c /blnkcm/
c *** If blank common dimension has to be superseded substitute in the
c *** following two lines the new dimension in real*8 units to Nblnmx
c*sr 18.5. commented since not used for evap.
C     PARAMETER (MXDUMM = KALGNM * NBLNMX)
C     DATA KTMBGN / NBLNMX /
C     DATA MBLNMX / MXDUMM /
C     DATA KBLNKL, KGMBGN, KGMLST, KCMBGN, KCMLST, KISBGN, KISLST,
C    &     KDTBGN, KDTLST, KUBBGN, KUBLST, KUXBGN, KUXLST, KTCBGN,
C    &     KTCLST, KRNBGN, KRNLST, KYLBGN, KYLLST, KXSBGN, KXSLST,
C    &     KIHBGN, KIHLST, KINBGN, KINLST, KIEBGN, KIELST, KETBGN,
C    &     KETLST, KRRBGN, KRRLST, KGLBGN, KGLLST, KNABGN, KNALST,
C    &     KGDBGN, KGDLST, KDWBGN, KDWLST, KGCBGN, KGCLST, KWLBGN,
C    &     KWLLST, KWHBGN, KWHLST, KWMBGN, KWMLST, KWSBGN, KWSLST,
C    &     KDPBGN, KDPLST, KRGBGN, KRGLST, KSGBGN, KSGLST, KBRBGN,
C    &     KBRLST / 57*0 /

c /blntmp/
c*sr 18.5. commented since not used for evap.
C     DATA KIHBTM, KINBTM, KIEBTM, KRRBTM, KGLBTM, KNABTM, KGDWTM,
C    &     KBDWTM, KGCBTM, KWLOTM, KWHITM, KWMUTM, KWSHTM, KEXTTM,
C    &     KSTXTM, KSTNTM, KECTTM, KPCTTM, KLPBTM / 19*0 /

c /cmmdnr/
c*sr 18.5. commented since not used for evap.
C     DATA DDNEAR / 0.D+00 /, LFLDNR / .FALSE. /

c /ctitle/
c*sr 18.5. commented since not used for evap.
C     DATA RUNTIT (1:40) / '****************************************' /
C     DATA RUNTIT(41:80) / '****************************************' /
C     DATA ITEXPI, ITEXMX / 100000000, 150 /
c /detect/
c*sr 18.5. commented since not used for evap.
C     PARAMETER (NNN1 = NRGNMX*NDTCMX)
C     PARAMETER (NNN2 = NSCRMX*NDTCMX)
C     DATA LDTCTR /.FALSE./, NDTSCO /0/, NDTDET /0/
C     DATA EDTMIN/NDTCMX*0.D0/, EDTBIN/NDTCMX*0.D0/, EDTCUT/NDTCMX*0.D0/
C     DATA KDTREG/NNN1*0/, KDTDET/NNN2*0/, KDTSCD/NSCRMX*0/
C     DATA TITDET/NDTCMX*'          '/, TITSCO/NSCRMX*'          '/

c /detloc/
c*sr 18.5. commented since not used for evap.
C     DATA ACCUMP /NDTCM2*0.D0/, ACCUMN /NDTCM2*0.D0/, ICOINC /NDTCM2*0/
C     DATA NCLAS /0/

c /emgtrn/
c*sr 18.5. commented since not used for evap.
C     DATA LMCSMG / .FALSE. /

c /emsho/
c*sr 18.5. commented since not used for evap.
C     DATA LIMPRE, LEXPTE / 2 * .FALSE. /

c /episor/
c*sr 18.5. commented since not used for evap.
C     DATA TKESUM / 0.D+00 /, LUSSRC / .FALSE. /

c /fheavy/
      DATA AMHEAV / 12 * 0.D+00 /
      DATA ANHEAV / 'NEUTRON ', 'PROTON  ', 'DEUTERON', '3-H     ',
     &              '3-HE    ', '4-HE    ', 'H-FRAG-1', 'H-FRAG-2',
     &              'H-FRAG-3', 'H-FRAG-4', 'H-FRAG-5', 'H-FRAG-6'/
      DATA ICHEAV / 0, 1, 1, 1, 2, 2, 6*0 /,
     &     IBHEAV / 1, 1, 2, 3, 3, 4, 6*0 /
      DATA NPHEAV / 0 /

c /finuc/
      DATA NP / 0 /, TV / 0.D+00 /, TVCMS / 0.D+00 /, TVRECL / 0.D+00/,
     &     TVHEAV / 0.D+00 /, TVBIND / 0.D+00 /

c /genthr/
c Up to 20-apr-'95
c     DATA PEANCT, PEAPIT / 2*1.D+00 /
c     DATA PTHRSH / 16*5.D+00,2*2.5D+00,5.D+00,3*2.5D+00,8*5.D+00,
c    &              9*2.5D+00 /
c     DATA PTHDFF / 39*5.D+00 /
c    &              9*2.5D+00 /
c New values:
c*sr 18.5. commented since not used for evap.
C     DATA PEANCT, PEAPIT / 1.3D+00, 1.1D+00 /
C     DATA PTHRSH / 12*5.D+00, 2*3.5D+00, 2*5.D+00, 2*2.5D+00, 5.D+00,
C    &              3*2.5D+00, 3.5D+00, 2*5.D+00, 3.5D+00, 4*5.D+00,
C    &              9*2.5D+00 /
C     DATA PTHDFF / 12*5.D+00, 2*3.5D+00, 8*5.D+00, 3.5D+00, 2*5.D+00,
C    &              3.5D+00, 13*5.D+00 /
C     DATA PLDNCT / 0.26D+00 /
C     DATA IJNUCR / 16*1, 2*0, 1, 3*0, 8*1, 9*0 /

c /lowneu/
c*sr 18.5. commented since not used for evap.
C     DATA WWAMFL / 10.D+00 /, EXTWWL / 1.D+00 /
C     DATA IWWLWB, IWWLWT / 2 * 100000000 /
C     DATA ICLMED, INABGN, IDWBGN, IETBGN / 4*0 /
C     DATA IGRTHN / 1 /
C     DATA LIMPRN / .FALSE. /, LBIASN / .FALSE. /, LDOWNN / .FALSE. /,
C    &     LLOWWW / .FALSE. /, LLOWET / .FALSE. /

c /ltclcm/
c*sr 18.5. commented since not used for evap.
C     DATA MLATTC, NEWLAT, MLATLD, MLATM1, MLTSEN, MLTSM1 / 6*0 /

c /mulbou/
c*sr 18.5. commented since not used for evap.
C     DATA LLDA, LAGAIN, LSTNEW, LARTEF, LSENSE, LNORML, LMGNOR
C    &     / 7 * .FALSE. /
C     DATA TSENSE / AINFNT /, NSSENS / -1 /
C     DATA DSMALL / ANGLGB /

c /mulhd/
c*sr 18.5. commented since not used for evap.
C     DATA LTOPT  / MXXMDF * .FALSE. /, NFSCAT / 0 /
C     DATA ESTEPF / MXXMDF * 0.1D+00 /
C     DATA LSRCRH / MXXMDF * .FALSE. /, LNSCRH / MXXMDF * .FALSE. /
C     DATA THMSPR / 0.02D+00 /, THMSSC / 1.D+00 /

c /parevt/
      DATA DPOWER /-13.D+00 /, FSPRD0 / 0.6D+00 /, FSHPFN / 0.0D+00 /,
     &     RN1GSC /-1.0D+00 /, RN2GSC /-1.0D+00 /
      DATA LDIFFR /  .TRUE., .TRUE., 6 * .TRUE., .TRUE., 8 * .TRUE.,
     &               .TRUE., 4 * .TRUE., .TRUE., 3 * .TRUE.,
     &              4 * .FALSE., 9 * .TRUE./
c*sr 17.5.95
c default value for LEVPRT changed (reset sr 25.7.97)
c default value for LHEAVY changed 25.7.97
C     DATA LPOWER / .TRUE.  /, LINCTV / .TRUE.  /, LEVPRT / .TRUE.  /,
C    &     LHEAVY / .FALSE. /, LDEEXG / .TRUE.  /, LGDHPR / .TRUE.  /,
C    &     LPREEX / .TRUE.  /, LHLFIX / .FALSE. /, LPRFIX / .FALSE. /,
C    &     LPARWV / .TRUE.  /, LSNGCH / .TRUE.  /, LSCHDF / .TRUE.  /
      DATA LPOWER / .TRUE.  /, LINCTV / .TRUE.  /, LEVPRT / .TRUE.  /,
     &     LHEAVY / .TRUE.  /, LDEEXG / .TRUE.  /, LGDHPR / .TRUE.  /,
     &     LPREEX / .TRUE.  /, LHLFIX / .FALSE. /, LPRFIX / .FALSE. /,
     &     LPARWV / .TRUE.  /, LSNGCH / .TRUE.  /, LSCHDF / .TRUE.  /
c*
c*sr 27.5.97
c default value for ILVMOD changed
C     DATA ILVMOD / 0 /, JLVMOD / 1 /, LLVMOD / .TRUE. /
      DATA ILVMOD / 1 /, JLVMOD / 1 /, LLVMOD / .TRUE. /
c*

c /resnuc/
      DATA IPREEH / 0 /, IPRTRI / 0 /, IPRDEU / 0 /, IPR3HE / 0 /,
     &     IPR4HE / 0 /
      DATA IEVAPL / 0 /, IEVAPH / 0 /, IEVNEU / 0 /, IEVPRO / 0 /,
     &     IEVTRI / 0 /, IEVDEU / 0 /, IEV3HE / 0 /, IEV4HE / 0 /,
     &     IDEEXG / 0 /
      DATA LRNFSS / .FALSE. /

c /scohlp/
c*sr 18.5. commented since not used for evap.
C     DATA ISCRNG, JSCRNG / 2*0 /, LSCZER / .FALSE. /

c /trackr/
c*sr 18.5. commented since not used for evap.
C     DATA ETRACK /0.D+00/, WTRACK /0.D+00/, ATRACK /0.D+00/,
C    &     CTRACK /0.D+00/, NTRACK /0/, MTRACK /0/, JTRACK /0/

c /usrbin/
c*sr 18.5. commented since not used for evap.
C     DATA LUSBIN, LUSEVT, LUSTKB /3*.FALSE./, NUSRBN /0/

c /usrbdx/
c*sr 18.5. commented since not used for evap.
C     DATA LUSBDX /.FALSE./, NUSRBX /0/

c /usrsnc/
c*sr 18.5. commented since not used for evap.
C     DATA LURSNC /.FALSE./, NURSNC /0/

c /usrtrc/
c*sr 18.5. commented since not used for evap.
C     DATA LUSRTC, LUSTRK, LUSCLL / 3*.FALSE. /
C     DATA NUSRTC, NUSTRK, NUSCLL / 3*0 /

c /usryld/
c*sr 18.5. commented since not used for evap.
C     DATA LUSRYL / .FALSE./, LSCUYL / .FALSE. /, NUSRYL /0/,
C    &     IJUSYL /0/, JTUSYL /0/
C     DATA PUSRYL, UUSRYL, VUSRYL, WUSRYL / 4*ZERZER /

c /wwindw/
c*sr 18.5. commented since not used for evap.
C     DATA IWLBGN, IWHBGN, IWMBGN / 3*0 /
C     DATA LWWPRM / .TRUE. /

c=                                               end*block.bdnopt      *
      END

c$ CREATE BDPREE.FOR
cCOPY BDPREE
c
c=== bdpree ===========================================================*
c
CDECK  ID>, DT_BDPREE
      BLOCK DATA DT_BDPREE

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created on 16 september 1991 by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 03-feb-94     by    Alfredo Ferrari               *
c                                                                      *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: CMPISG,CHPISG)
      PARAMETER ( TPPPI0 = 0.279656044337515D+00 )
      PARAMETER ( TNNPI0 = 0.279642680857450D+00 )
      PARAMETER ( TPPPIP = 0.292295207182790D+00 )
      PARAMETER ( TPPDEP = 0.287514778898469D+00 )
      PARAMETER ( TNNPIM = 0.286723140900975D+00 )
      PARAMETER ( TNNDEM = 0.281949292916434D+00 )
      PARAMETER ( TPNPI0 = 0.279456888147740D+00 )
      PARAMETER ( TPNDE0 = 0.274693916135245D+00 )
      PARAMETER ( TPNPIP = 0.292086756473890D+00 )
      PARAMETER ( TNPPI0 = 0.279842093144975D+00 )
      PARAMETER ( TNPDE0 = 0.275072555824202D+00 )
      PARAMETER ( TNPPIP = 0.292489370554958D+00 )
      PARAMETER ( PIRSMX = 1.2D+00 )
      PARAMETER ( NPIREA = 10 )
      PARAMETER ( NPIRTA = 68 )
      PARAMETER ( NPIRLN = 21 )
      PARAMETER ( NPIRLG = NPIRTA - NPIRLN )
      PARAMETER ( NPISIS = NPIRLN + 20 )
      PARAMETER ( NPISEX = NPIRLN + 21 )
      PARAMETER ( NPIIMN = 14 )
      PARAMETER ( NPIIRC =  6 )
      PARAMETER ( DELWLL = 0.035D+00 )
      CHARACTER CHPIRE*8
      LOGICAL LDLRES
      COMMON /FKCMPI/ PMNPIS, PMMPIS, PISPIS, PEXPIS, PMXPIS, DPPISG,
     &                RTPISG, AMNPIS, AMMPIS, AISPIS, AEXPIS, AMXPIS,
     &                ARPISG, BPISLO (NPIRLN:NPIRTA,NPIREA),
     &                CPISLO (NPIRLN:NPIRTA,NPIREA), PPITHR (NPIREA),
     &                SPISLO (NPIRLN:NPIRTA,NPIREA), APITHR (NPIREA),
     &                SGPIIN (NPIIMN:NPIRTA,NPIIRC), RHPICR (1:5)   ,
     &                SGPICU (0:20,NPIRTA,NPIREA)  , SGRTRS (NPIREA),
     &                SGPIDF (0:20,NPIRTA,NPIREA)  , BRREIN (NPIREA),
     &                SGPIIS (NPIRTA,NPIREA)       , BRREOU (NPIREA),
     &                BRD3OU (2,2,-1:2), BRDEOU (2,-1:2),
     &                SGABSR (2,2,4)   , PRRSDL,
     &                IPIREA (2,2,3:5) , IPIINE (2,3:5)    , NPIRVR ,
     &                KPIIRE (2,NPIREA), KPIORE (2,NPIREA) ,
     &                JSTOKP (5), KPTOJS (23), ITTRRS (3:5), LDLRES
      COMMON /FKCHPI/ CHPIRE (NPIREA)
      DIMENSION SG2BRS (2,2), SGABSW (2,2), SG3BRS (2,2,2)
      EQUIVALENCE ( SG2BRS   (1,1), SGABSR (1,1,1) )
      EQUIVALENCE ( SGABSW   (1,1), SGABSR (1,1,2) )
      EQUIVALENCE ( SG3BRS (1,1,1), SGABSR (1,1,3) )

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: NUCGID,NUCGEO,NUCGE2,NUCPWI,NUCGII)
      PARAMETER ( PI     = PIPIPI )
      PARAMETER ( PISQ   = PIPISQ )
      PARAMETER ( SKTOHL = 0.5456645846610345D+00 )
      PARAMETER ( RZNUCL = 1.12        D+00 )
      PARAMETER ( RMSPRO = 0.8         D+00 )
      PARAMETER ( R0PROT = RMSPRO / SQRT12  )
      PARAMETER ( ARHPRO = 1.D+00 / 8.D+00 / PI / R0PROT / R0PROT
     &          / R0PROT )
      PARAMETER ( RLLE04 = RZNUCL )
      PARAMETER ( RLLE16 = RZNUCL )
      PARAMETER ( RLGT16 = RZNUCL )
      PARAMETER ( RCLE04 = 0.75D+00 / PI / RLLE04 / RLLE04 / RLLE04 )
      PARAMETER ( RCLE16 = 0.75D+00 / PI / RLLE16 / RLLE16 / RLLE16 )
      PARAMETER ( RCGT16 = 0.75D+00 / PI / RLGT16 / RLGT16 / RLGT16 )
      PARAMETER ( SKLE04 = 1.4D+00 )
      PARAMETER ( SKLE16 = 1.9D+00 )
      PARAMETER ( SKGT16 = 2.4D+00 )
      PARAMETER ( HLLE04 = SKTOHL * SKLE04 )
      PARAMETER ( HLLE16 = SKTOHL * SKLE16 )
      PARAMETER ( HLGT16 = SKTOHL * SKGT16 )
      PARAMETER ( ALPHA0 = 0.1D+00 )
      PARAMETER ( OMALH0 = 1.D+00 - ALPHA0 )
      PARAMETER ( GAMSK0 = 0.9D+00 )
      PARAMETER ( OMGAS0 = 1.D+00 - GAMSK0 )
      PARAMETER ( POTME0 = 0.6666666666666667D+00 )
      PARAMETER ( POTBA0 = 1.D+00 )
      PARAMETER ( PNFRAT = 1.533D+00 )
      PARAMETER ( RADPIM = 0.035D+00 )
      PARAMETER ( RDPMHL = 14.D+00   )
      PARAMETER ( APMRST = 4.D+00 / 44.D+00 )
      PARAMETER ( APMPRO = 1.D+00 / 6.D+00 )
      PARAMETER ( APPPRO = 5.D+00 / 6.D+00 )
      PARAMETER ( AP0PFS = 0.5D+00 )
      PARAMETER ( AP0PFP = 1.D+00 / 3.D+00 )
      PARAMETER ( AP0NFP = 2.D+00 / 3.D+00 )
      PARAMETER ( XPAUCO = 1.88495407241652 D+00 )
      PARAMETER ( MXSCIN = 50     )
      LOGICAL LABRST, LELSTC, LINELS, LCHEXC, LABSRP, LABSTH, LNCDCY,
     &        LNUSCT, LPREEQ, LNPHTC, LNWRAD, LPNRHO, LFTCMP, LFTCAC
      COMMON /FKNGID/ RHOTAB (2:260), RHATAB (2:260), ALPTAB (2:260),
     &                RADTAB (2:260), SKITAB (2:260), HALTAB (2:260),
     &                SK3TAB (2:260), SK4TAB (2:260), HABTAB (2:260),
     &                CWSTAB (2:260), EKATAB (2:260), PFATAB (2:260),
     &                PFRTAB (2:260)
      COMMON /FKNGEO/ RADTOT, RADIU1, RADIU0, RAD1O2, SKINDP, HALODP,
     &                ALPHAL, OMALHL, RADSKN, SKNEFF, CPARWS, RADPRO,
     &                RADCOR, RADCO2, RADMAX, BIMPTR, RIMPTR, XIMPTR,
     &                YIMPTR, ZIMPTR, RHOIMT, EKFPRO, PFRPRO, RHOCEN,
     &                RHOCOR, RHOSKN, EKFCEN (2), PFRCEN (2), EKFBIM,
     &                PFRBIM, RHOIMP, EKFIMP, PFRIMP, RHOIM2, EKFIM2,
     &                PFRIM2, RHOIM3, EKFIM3, PFRIM3, VPRWLL, RIMPCT,
     &                BIMPCT, XIMPCT, YIMPCT, ZIMPCT, RIMPC2, XIMPC2,
     &                YIMPC2, ZIMPC2, RIMPC3, XIMPC3, YIMPC3, ZIMPC3,
     &                XBIMPC, YBIMPC, ZBIMPC, CXIMPC, CYIMPC, CZIMPC,
     &                SQRIMP, SIGMAP, SIGMAN, SIGMAA, RHORED, R0TRAJ,
     &                R1TRAJ, SBUSED, SBTOT , SBRES , RHOAVE, EKFAVE,
     &                PFRAVE, AVEBIN, ACOLL , ZCOLL , RADSIG, OPACTY,
     &                EKECON, PNUCCO, EKEWLL, PPRWLL, PXPROJ, PYPROJ,
     &                PZPROJ, EKFERM, PNFRMI, PXFERM, PYFERM, PZFERM,
     &                EKFER2, PNFRM2, PXFER2, PYFER2, PZFER2, EKFER3,
     &                PNFRM3, PXFER3, PYFER3, PZFER3, RHOMEM, EKFMEM,
     &                BIMMEM, WLLRED, VPRBIM, POTINC, POTOUT, EEXMIN
      COMMON /FKNGE2/ RDTTNC (2), RHONCP (2), RHONC2 (2), RHONC3 (2),
     &                RHONCT (2), AMOTHR, EKOTHR, AMCREA, EKNCLN,
     &                EEXDEL, EEXANY, CLMBBR, RDCLMB, BFCLMB, BFCEFF,
     &                BNPROJ, BNDNUC, DEBRLM, SK4PAR, UBIMPC, VBIMPC,
     &                WBIMPC, BNDPOT, SIGMAT, SIGABP, SIGABN, WLLRES,
     &                POTBAR, POTMES, AGEPRI, OPNOPA, ETHRND,
     &                BNENRG (3), DEFNUC (2), SIGMPR (4), SIGMNU (4),
     &                SIGPAB (3), SIGNAB (3), HHLP   (2), FORTOT (2),
     &                FPNBLC, DPNBLC, FFTFLG, IFTFLG,
     &                IPWELL, ITNCMX, KPRIN , NTARGT, KNUCIM, KNUCI2,
     &                KNUCI3, IEVPRE, ISFCOL, ISFTAR, ISFTA2, ISFTA3,
     &                NPOTHR, ICOTHR, IBOTHR, NPUMFN, ISTNCL, ITAUCM,
     &                IABCOU, IADFLG, IGSFLG, IALFLG, ICBFLG, LPREEQ,
     &                LNPHTC, LPNRHO, LNWRAD, LFTCMP, LFTCAC
      COMMON /FKNPWI/ ALMBAR, BIMMAX, SIGGEO, LLLMAX, LLLACT
      COMMON /FKNGII/ HOLEXP (2*MXSCIN), XEXPIN (3,0:MXSCIN),
     &                YEXPIN (3,0:MXSCIN), ZEXPIN (3,0:MXSCIN),
     &                AGEXIN (0:MXSCIN), RHOEXP (2), EKFEXP, EHLFIX,
     &                NHLEXP, NHLFIX, IPRTYP, NNCEXI (0:MXSCIN),
     &                NCEXPI (3,0:MXSCIN), ISEXIN (3,0:MXSCIN),
     &                ISCTYP (0:MXSCIN), NUSCIN, NEXPEM,
     &                LABRST, LELSTC, LINELS, LCHEXC, LABSRP, LABSTH,
     &                LNCDCY, LNUSCT
      DIMENSION AWSTAB (2:260), SIGMAB (3)
      EQUIVALENCE ( DEFPRO, DEFNUC (1) )
      EQUIVALENCE ( DEFNEU, DEFNUC (2) )
      EQUIVALENCE ( RHOIPP, RHONCP (1) )
      EQUIVALENCE ( RHOINP, RHONCP (2) )
      EQUIVALENCE ( RHOIP2, RHONC2 (1) )
      EQUIVALENCE ( RHOIN2, RHONC2 (2) )
      EQUIVALENCE ( RHOIP3, RHONC3 (1) )
      EQUIVALENCE ( RHOIN3, RHONC3 (2) )
      EQUIVALENCE ( RHOIPT, RHONCT (1) )
      EQUIVALENCE ( RHOINT, RHONCT (2) )
      EQUIVALENCE ( OMALHL, SK3PAR )
      EQUIVALENCE ( ALPHAL, HABPAR )
      EQUIVALENCE ( ALPTAB (2), AWSTAB (2) )
      EQUIVALENCE ( SIGMPE, SIGMPR (1) )
      EQUIVALENCE ( SIGMPC, SIGMPR (2) )
      EQUIVALENCE ( SIGMPI, SIGMPR (3) )
      EQUIVALENCE ( SIGMPA, SIGMPR (4) )
      EQUIVALENCE ( SIGMNE, SIGMNU (1) )
      EQUIVALENCE ( SIGMNC, SIGMNU (2) )
      EQUIVALENCE ( SIGMNI, SIGMNU (3) )
      EQUIVALENCE ( SIGMNA, SIGMNU (4) )
      EQUIVALENCE ( SIGMA2, SIGPAB (1) )
      EQUIVALENCE ( SIGMA3, SIGPAB (2) )
      EQUIVALENCE ( SIGMAS, SIGPAB (3) )
      EQUIVALENCE ( SIGPAB (1), SIGMAB (1) )

c (original name: NUCLEV)
      LOGICAL LCLVSL, LFLVSL, LRLVSL, LEQSBL
      COMMON /FKNLEV/ PAENUC (200,2), SHENUC (200,2), DEFRMI (2),
     &                DEFMAG (2), ENNCLV (160,2), RANCLV (160,2),
     &                CUMRAD (0:160,2), RUSNUC (2),
     &                ENPLVL (114), ENNLVL(164), JUSNUC (160,2),
     &                NTANUC (2), NAVNUC (2), NLSNUC (2), NCONUC (2),
     &                NSKNUC (2), NHANUC (2), NUSNUC (2), NACNUC (2),
     &                JMXNUC (2), IPRNUC (3), JPRNUC (3), MAGNUM (8),
     &                MAGNUC (2), MGSNUC (8,2), MGSSNC (25,2),
     &                NSBSHL (2), NMNSBS (2), NPRNUC, INUCLV, LCLVSL,
     &                LFLVSL, LRLVSL, LEQSBL
      DIMENSION JUSPRO (160), JUSNEU (160), MGSPRO (8), MGSNEU (8),
     &          MGSSPR (19) , MGSSNE (25)
      EQUIVALENCE ( RUSNUC (1), RUSPRO )
      EQUIVALENCE ( RUSNUC (2), RUSNEU )
      EQUIVALENCE ( JUSNUC (1,1), JUSPRO (1) )
      EQUIVALENCE ( JUSNUC (1,2), JUSNEU (1) )
      EQUIVALENCE ( MGSNUC (1,1), MGSPRO (1) )
      EQUIVALENCE ( MGSNUC (1,2), MGSNEU (1) )
      EQUIVALENCE ( MGSSNC (1,1), MGSSPR (1) )
      EQUIVALENCE ( MGSSNC (1,2), MGSSNE (1) )
      EQUIVALENCE ( NTANUC (1), NTAPRO )
      EQUIVALENCE ( NTANUC (2), NTANEU )
      EQUIVALENCE ( NAVNUC (1), NAVPRO )
      EQUIVALENCE ( NAVNUC (2), NAVNEU )
      EQUIVALENCE ( NLSNUC (1), NLSPRO )
      EQUIVALENCE ( NLSNUC (2), NLSNEU )
      EQUIVALENCE ( NCONUC (1), NCOPRO )
      EQUIVALENCE ( NCONUC (2), NCONEU )
      EQUIVALENCE ( NSKNUC (1), NSKPRO )
      EQUIVALENCE ( NSKNUC (2), NSKNEU )
      EQUIVALENCE ( NHANUC (1), NHAPRO )
      EQUIVALENCE ( NHANUC (2), NHANEU )
      EQUIVALENCE ( NUSNUC (1), NUSPRO )
      EQUIVALENCE ( NUSNUC (2), NUSNEU )
      EQUIVALENCE ( NACNUC (1), NACPRO )
      EQUIVALENCE ( NACNUC (2), NACNEU )
      EQUIVALENCE ( JMXNUC (1), JMXPRO )
      EQUIVALENCE ( JMXNUC (2), JMXNEU )
      EQUIVALENCE ( MAGNUC (1), MAGPRO )
      EQUIVALENCE ( MAGNUC (2), MAGNEU )

c (original name: PARNUC)
      PARAMETER ( PIGRK  = PIPIPI )
      PARAMETER ( ALEVEL = 8.D-03 )
      PARAMETER ( RCNUCL = 1.12D+00 )
      PARAMETER ( R0SIG  = 1.3D+00 )
      PARAMETER ( R0SIGK = 1.5D+00 )
      PARAMETER ( RCOULB = 1.5D+00 )
      PARAMETER ( COULBH = 0.88235D-03 )
      PARAMETER ( RHONU0 = 0.75D+00 / PIGRK / RCNUCL / RCNUCL / RCNUCL )
      PARAMETER ( TAUFO0 = 10.0D+00 )
      PARAMETER ( EKEEXP = 0.03D+00 )
      PARAMETER ( EKREXP = 0.05D+00 )
      PARAMETER ( EKEMNM = 0.01D+00 )
      PARAMETER ( NCPMX = 120 )
      COMMON /FKPARN/ EKORI , PXORI , PYORI , PZORI , PTORI , TAUFOR,
     &                ENNUC  (NCPMX), PNUCL  (NCPMX), EKFNUC (NCPMX),
     &                XSTNUC (NCPMX), YSTNUC (NCPMX), ZSTNUC (NCPMX),
     &                PXNUCL (NCPMX), PYNUCL (NCPMX), PZNUCL (NCPMX),
     &                RSTNUC (NCPMX), FREEPA (NCPMX), CRRPAN (NCPMX),
     &                CRRPAP (NCPMX), BSTNUC (NCPMX), AGENUC (NCPMX),
     &                TAUFPA (NCPMX), RHNUCL(NCPMX,2), BNDGAV, DEFMIN,
     &                KPNUCL (NCPMX), KRFNUC (NCPMX), ILINUC (NCPMX),
     &                INUCTS (NCPMX), ISFNUC (NCPMX), KPORI , IBORI ,
     &                IBNUCL, NPNUC , NNUCTS

c
      DATA LABRST, LELSTC, LINELS, LCHEXC, LABSRP, LABSTH / 6*.FALSE. /
      DATA POTBAR / POTBA0 /, POTMES / POTME0 /, WLLRES / 0.D+00 /
      DATA JUSNUC / 320 * 0 /, INUCLV / 1 /, IEVPRE / 0 /
      DATA MAGNUM / 2, 8, 20, 28, 50, 82, 126, 160 /
      DATA LPREEQ / .FALSE. /
c /cmpisg/
      DATA JSTOKP / 1, 8, 13, 14, 23 /
      DATA KPTOJS / 1, 6*0, 2, 4*0, 3, 4, 8*0, 5 /
      DATA CHPIRE / 'PI+PPI+P','PI-PPI-P','PI-PPI0N','PI0PPI0P',
     &              'PI0PPI+N','PI-NPI-N','PI+NPI+N','PI+NPI0P',
     &              'PI0NPI0N','PI0NPI-P' /
      DATA KPIIRE / 13, 1, 14, 1, 14, 1, 23, 1, 23, 1, 14, 8,
     &              13, 8, 13, 8, 23, 8, 23, 8 /
      DATA KPIORE / 13, 1, 14, 1, 23, 8, 23, 1, 13, 8, 14, 8,
     &              13, 8, 23, 1, 23, 8, 14, 1 /
      DATA IPIREA / 1, 0, 7, 8, 2, 3, 6, 0, 4, 5, 9, 10 /
      DATA IPIINE / 1, 2, 3, 4, 5, 6 /
c /frbkcm/
      DATA LFRMBK / .FALSE. /
      DATA NBUFBK /   500  /
      DATA EXMXFB / 80.0 D+00 /
      DATA R0FRBK / 1.18 D+00 /
      DATA R0CFBK / 2.173D+00 /
      DATA C1CFBK / 6.103D-03 /
      DATA C2CFBK / 9.443D-03 /
c /parnuc/
      DATA TAUFOR / TAUFO0 /
c=== End of Block Data Bdpree =========================================*
      END

c*sr 17.5. BLKDT1 removed since commons  never used

c*sr 17.5. BLKDT2 removed since commons  never used

c*sr 17.5. BLKDT3 removed since /REAC/  never used

c*sr 17.5. BLKDT4 removed since commons never used

c*sr 17.5. BLKDT5 removed since /ADDHP/, /ADDHN/ never used

c*sr 17.5. BLKDT6 removed since commons either never used or
c          replaced (/PART/)

c*sr 17.5. BLKDT7 removed since /DECAYC/ never unsed

c$ CREATE DT_DOST.FOR
cCOPY DT_DOST
c                                                                      *
c=== dost==============================================================*
c                                                                      *
CDECK  ID>, DT_DOST
      DOUBLE PRECISION FUNCTION DT_DOST(I,Z)

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
C--------------------------------------------------------------------
C SUBNAME = DT_DOST
C--------------------------------------------------------------------
c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

C--------------------------------------------------------------------
      IF(Z-70.D0)1,2,2
    2 DT_DOST=T(I,7)
    3 RETURN
    1 IF(Z-10.D0)5,5,6
    5 DT_DOST=T(I,1)
      GOTO3
    6 N=.1D0*Z+1.D0
      X=10*N
      X=(X-Z)*.1D0
      DT_DOST=X*T(I,N-1)+(1.D0-X)*T(I,N)
      GOTO3
      END

c$ CREATE ECMSEX.FOR
cCOPY ECMSEX
c
c=== ecmsex ===========================================================*
c
CDECK  ID>, DT_ECMSEX
      SUBROUTINE DT_ECMSEX( NPEXPL, ETOTEX, DETCMS, AMEXPL, ETEXPL,
     &                    PXEXPL, PYEXPL, PZEXPL )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     ECMSEX: makes an expansion of the total energy of a system of    *
c             Npexpl particles of masses Amexpl from Etotex to Etotex  *
c             + Detcms in their CMS reference system.                  *
c             The original total energies and momenta are stored into  *
c             etexpl and px,y,zexpl. The "expansion" is supposed to    *
c             occur without direction change for the momenta and with  *
c             an unique (scalar) expansion factor for the momenta of   *
c             all particles (--> px,y,z_tot=0 is assured "a priori")   *
c             The resulting total energies and momenta are stored      *
c             again into etexpl and px,y,zexpl.                        *
c                                                                      *
c     Created on 08 february 1995  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 13-feb-95     by    Alfredo Ferrari               *
c                                                                      *
c     Input variables:                                                 *
c                                                                      *
c                 Npexpl = number of particles                         *
c                 Etotex = original invariant mass of npexpl particle  *
c                          system                                      *
c                 Detcms = requested variation in the system invariant *
c                          mass                                        *
c              Amexpl(i) = mass of the ith particle, i=1,npexpl        *
c              Etexpl(i) = (total) energy of the ith particle in the   *
c                          CMS of the npexpl particle system           *
c          Px,y,zexpl(i) = momentum components of the ith particle in  *
c                          the CMS of the npexpl particle system       *
c                                                                      *
c     Output variables:                                                *
c                                                                      *
c              Etexpl(i) = (total) energy of the ith particle in the   *
c                          CMS of the npexpl particle system           *
c          Px,y,zexpl(i) = momentum components of the ith particle in  *
c                          the CMS of the npexpl particle system       *
c                                                                      *
c     The unit of energy and momentum is immaterial provided Etotex    *
c     Detcms, Amexpl, Etexpl, and Px,y,zexpl are given in the same     *
c     units.                                                           *
c                                                                      *
c     Limitations: Detcms must be such to represent a small variation  *
c                  on the TOTAL energy of EACH particle. Moreover for  *
c                  negative Detcms it must be assured that there is a  *
c                  physical solution.                                  *
c                                                                      *
c----------------------------------------------------------------------*
c
      DIMENSION PXEXPL (NPEXPL), PYEXPL (NPEXPL), PZEXPL (NPEXPL),
     &          ETEXPL (NPEXPL), AMEXPL (NPEXPL)
c
      ETOTNW = ETOTEX + DETCMS
c  +-------------------------------------------------------------------*
c  |  Just two particles: no need for approximate treatment
      IF ( NPEXPL .EQ. 2 ) THEN
         PHEXPL = SQRT ( PXEXPL (1)**2 + PYEXPL (1)**2 + PZEXPL (1)**2 )
         IF ( PHEXPL .GT. ANGLGB ) THEN
            CXCMS = PXEXPL (1) / PHEXPL
            CYCMS = PYEXPL (1) / PHEXPL
            CZCMS = PZEXPL (1) / PHEXPL
         ELSE
            CALL DT_RACO( CXCMS, CYCMS, CZCMS )
         END IF
         ETEXPL (1) = HLFHLF * ( ETOTNW + ( AMEXPL (1) - AMEXPL (2) )
     &              * ( AMEXPL (1) + AMEXPL (2) ) / ETOTNW )
         PTCMS  = SQRT ( ( ETEXPL (1) - AMEXPL (1) )
     &                 * ( ETEXPL (1) + AMEXPL (1) ) )
         PXEXPL (1) = PTCMS * CXCMS
         PYEXPL (1) = PTCMS * CYCMS
         PZEXPL (1) = PTCMS * CZCMS
c  |  Now the 2nd particle
         ETEXPL (2) = ETOTNW - ETEXPL (1)
         PXEXPL (2) =-PXEXPL (1)
         PYEXPL (2) =-PYEXPL (1)
         PZEXPL (2) =-PZEXPL (1)
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
c  Preliminary checks:
      AMTOT  = ZERZER
      ACOFF  = ZERZER
      BCOFF  = ZERZER
      EKENOW = ZERZER
c  +-------------------------------------------------------------------*
c  |  Make a check on the available energy:
      DO 100 I = 1, NPEXPL
         AMTOT = AMTOT + AMEXPL (I)
c  |  Setting up the equation coefficients
         AMSQEX = AMEXPL (I)**2
         PSQEXP = PXEXPL (I)**2 + PYEXPL (I)**2 + PZEXPL (I)**2
         XSQEXP = PSQEXP / AMSQEX
c  |  +----------------------------------------------------------------*
c  |  |  Still a relative error of 1E-12 can occur!
         IF ( XSQEXP .LT. 2.D-04 ) THEN
            EKEEXP = HLFHLF * AMEXPL (I) * XSQEXP * ( ONEONE - 0.25D+00
     &             * XSQEXP * ( ONEONE - HLFHLF * XSQEXP ) )
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Normal computation
         ELSE
            EKEEXP = ETEXPL (I) - AMEXPL (I)
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         EKENOW = EKENOW + EKEEXP
         OVSQRX = AMSQEX / ETEXPL (I)
         CONTR  = XSQEXP * OVSQRX
         BCOFF  = BCOFF + CONTR
         ACOFF  = ACOFF + CONTR**2 * OVSQRX / AMSQEX
  100 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Print an error message and stop:
      IF ( AMTOT .GE. ETOTEX .OR. AMTOT .GE. ETOTNW ) THEN
         WRITE (ErrorOut,*)' *** Ecmsex: total energy < mass!!',
     &                         ETOTEX, ETOTNW, AMTOT
         STOP 'STOP:ECMSEX-AMTOT-ETOTEX'
      END IF
c  |
c  +-------------------------------------------------------------------*
      EKGOAL = EKENOW +DETCMS
c     ECMEPS = MAX  ( ANGLGB * ETOTNW , 1.D-12 * ( ETOTNW - AMTOT ) )
      ECMEPS = SQRT ( ANGLGB * ETOTNW * 1.D-12 * ( ETOTNW - AMTOT ) )
      DENOW  = DETCMS
      ICYCL  = 0
c  +-------------------------------------------------------------------*
c  |  Main approximation loop:
 1000 CONTINUE
         ICYCL  = ICYCL + 1
         ALPHAP = FOUFOU * DENOW / ( BCOFF + SQRT ( BCOFF**2 - TWOTWO
     &          * ACOFF  * DENOW ) )
         IF ( ICYCL .GT. 3 ) WRITE (ErrorOut,*)
     &' *** ECMSEX:DENOW,DETCMS,ICYCL,ALPHAP,ETOTEX,NPEXPL,EKEXPL',
     &             DENOW,DETCMS,ICYCL,ALPHAP,ETOTEX,NPEXPL,
     &            (ETEXPL(J)-AMEXPL(J),J=1,NPEXPL)
         EXPANS = SQRT ( ONEONE + ALPHAP )
         ACOFF  = ZERZER
         BCOFF  = ZERZER
         EKENOW = ZERZER
c  |  +----------------------------------------------------------------*
c  |  |  Setting up the equation coefficients
         DO 3000 I = 1, NPEXPL
            PXEXPL (I) = PXEXPL (I) * EXPANS
            PYEXPL (I) = PYEXPL (I) * EXPANS
            PZEXPL (I) = PZEXPL (I) * EXPANS
            AMSQEX = AMEXPL (I)**2
            PSQEXP = PXEXPL (I)**2 + PYEXPL (I)**2 + PZEXPL (I)**2
            ETEXPL (I) = SQRT ( AMSQEX + PSQEXP )
            XSQEXP = PSQEXP / AMSQEX
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Still a relative error of 1E-12 can occur!
            IF ( XSQEXP .LT. 2.D-04 ) THEN
               EKEEXP = HLFHLF * AMEXPL (I) * XSQEXP * ( ONEONE
     &                - 0.25D+00 * XSQEXP * ( ONEONE - HLFHLF * XSQEXP))
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Normal computation
            ELSE
               EKEEXP = ETEXPL (I) - AMEXPL (I)
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            EKENOW = EKENOW + EKEEXP
            OVSQRX = AMSQEX / ETEXPL (I)
            CONTR  = XSQEXP * OVSQRX
            BCOFF  = BCOFF + CONTR
            ACOFF  = ACOFF + CONTR**2 * OVSQRX / AMSQEX
 3000    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         DENOW  = EKGOAL - EKENOW
      IF ( ABS (DENOW) .GT. ECMEPS ) GO TO 1000
c  |
c  +-------------------------------------------------------------------*
      ETEPS  = CSNNRM * ETOTNW
      ECHCK  = ETOTNW
      PXCHCK = ZERZER
      PYCHCK = ZERZER
      PZCHCK = ZERZER
c  +-------------------------------------------------------------------*
c  |  Compute energy and momentum conservation:
      DO 7000 K = 1, NPEXPL
         ECHCK  = ECHCK  - ETEXPL (K)
         PXCHCK = PXCHCK - PXEXPL (K)
         PYCHCK = PYCHCK - PYEXPL (K)
         PZCHCK = PZCHCK - PZEXPL (K)
 7000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Check energy and momentum conservation:
      IF ( ABS (ECHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &    .GT. ETEPS  ) THEN
         WRITE (ErrorOut,*)
     &         ' *** ECMSEX:ENERGY OR MOMENTUM CONSERVATION FAILURE:'
         WRITE (ErrorOut,*)
     &         ' NPEXPL,ETOTNW,ECHCK,PXCHCK,PYCHCK,PZCHCK',
     &           NPEXPL,ETOTNW,ECHCK,PXCHCK,PYCHCK,PZCHCK
      END IF
c  |
c  +-------------------------------------------------------------------*
c=== End of subroutine ECMSEX =========================================*
      RETURN
      END

c*sr 30.6. routine replaced completely
c$ CREATE EEXLVL.FOR
cCOPY EEXLVL
c
c=== eexlvl ===========================================================*
c
CDECK  ID>, DT_EEXLVL
      SUBROUTINE DT_EEXLVL( JA, JZ, EEX1ST, EEX2ND, EEXCON )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created on 06 december 1991  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 05-feb-96     by    Alfredo Ferrari               *
c                                                                      *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: FHEAVY,FHEAVC)
      PARAMETER ( MXHEAV = 100 )
      CHARACTER*8 ANHEAV
      COMMON /FKFHVY/ CXHEAV (MXHEAV), CYHEAV (MXHEAV),
     &                CZHEAV (MXHEAV), TKHEAV (MXHEAV),
     &                PHEAVY (MXHEAV), WHEAVY (MXHEAV),
     &                AMHEAV  ( 12 ) , AMNHEA  ( 12 ) ,
     &                KHEAVY (MXHEAV), ICHEAV  ( 12 ) ,
     &                IBHEAV  ( 12 ) , NPHEAV
      COMMON /FKFHVC/ ANHEAV  ( 12 )

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c
      LOGICAL LHOLE
c//////// KK
c      SAVE SQATAR, JAOLD
c//////////
      DATA JAOLD / 0 /
      LHOLE = .FALSE.
      GO TO 10
      ENTRY DT_EEXLVH ( JA, JZ, EEX1ST, EEX2ND, EEXFOR, EEXCON, NHOLE,
     &               IPHOL )
      LHOLE  = NHOLE .LE. 1
      EEXFOR = ZERZER
   10 CONTINUE
c
c  +-------------------------------------------------------------------*
c  |  Just one proton or neutron be sure no excited level is left:
      IF ( JA .LE. 1 ) THEN
         EEX1ST = AXCSSV
         EEX2ND = AXCSSV
         EEXCON = AXCSSV
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  Actually it is a batch of protons or neutrons
      ELSE IF ( JA .LE. 0 .OR. JZ .LE. 0 ) THEN
         EEX1ST = ZERZER
         EEX2ND = ZERZER
         EEXCON = ZERZER
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
      GO TO (  200,  300,  400 ), JA - 1
      GO TO (  500,  600,  700,  800,  900, 1000, 1100, 1200, 1300,
     &        1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100 ), JA -  4
      GO TO ( 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900 ), JA - 21
      GO TO ( 3600, 3700, 3800, 3900, 4000 ), JA - 35
      GO TO ( 4600, 4700, 4800, 4900, 5000, 5100 ), JA - 45
      GO TO ( 7400, 7500, 7600, 7700, 7800, 7900 ), JA - 73
      GO TO ( 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400),
     &    JA - 85
      GO TO ( 10400, 10500, 10600, 10700, 10800, 10900 ), JA - 103
      GO TO ( 19400, 19500, 19600, 19700, 19800, 19900, 20000, 20100,
     &        20200, 20300, 20400, 20500, 20600, 20700, 20800, 20900 ),
     &    JA - 193
      GO TO 90000
c  +-------------------------------------------------------------------*
c  |  Deuteron (no other possibility, see above)
  200 CONTINUE
         EEX1ST = MAX ( AMHEAV (1) + AMHEAV (2) - AMHEAV (3),
     &                  AMNHEA (1) + AMNHEA (2) - AMNHEA (3) )
     &                + GAMMIN
         EEX2ND = EEX1ST
         EEXCON = EEX1ST
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
  300 CONTINUE
c  |  +----------------------------------------------------------------*
c  |  |  Triton:
         IF ( JZ .EQ. 1 ) THEN
            EEX1ST = MAX ( AMHEAV (1) + AMHEAV (3) - AMHEAV (4),
     &                     AMNHEA (1) + AMNHEA (3) - AMNHEA (4) )
     &                   + GAMMIN
            EEX2ND = EEX1ST
            EEXCON = EEX1ST
            RETURN
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  3-He (no other chance, see above):
         ELSE
            EEX1ST = MAX ( AMHEAV (2) + AMHEAV (3) - AMHEAV (5),
     &                     AMNHEA (2) + AMNHEA (3) - AMNHEA (5) )
     &                   + GAMMIN
            EEX2ND = EEX1ST
            EEXCON = EEX1ST
            RETURN
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |
c  +-------------------------------------------------------------------*
c  |
  400 CONTINUE
c  |  +----------------------------------------------------------------*
c  |  |  4-He:
         IF ( JZ .EQ. 2 ) THEN
            EEX1ST = MAX ( AMHEAV (2) + AMHEAV (4) - AMHEAV (6),
     &                     AMNHEA (2) + AMNHEA (4) - AMNHEA (6) )
     &                   + GAMMIN
            EEX2ND = EEX1ST
            EEXCON = EEX1ST
            RETURN
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  All other A=4 are particle unstable:
         ELSE
            EEX1ST = ZERZER
            EEX2ND = ZERZER
            EEXCON = ZERZER
            RETURN
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |
c  +-------------------------------------------------------------------*
c  |
  500 CONTINUE
      GO TO 90000
c  |
c  +-------------------------------------------------------------------*
c  |
  600 CONTINUE
         IF ( JZ .EQ. 3 ) THEN
            EEXCON = ZERZER
            EEX1ST = 2.185D-03
            EEX2ND = 3.562D-03
         ELSE IF ( JZ .EQ. 2 ) THEN
            EEXCON = 1.80D-03
            EEX1ST = 1.80D-03
            EEX2ND = 1.80D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
  700 CONTINUE
         IF ( JZ .EQ. 4 ) THEN
            EEXCON = 4.57  D-03
c           EEXCON = 0.4292D-03
            EEX1ST = 0.4292D-03
            EEX2ND = 4.57  D-03
c           EEX2ND = 0.4292D-03
         ELSE IF ( JZ .EQ. 3 ) THEN
            EEXCON = 4.63   D-03
c           EEXCON = 0.47761D-03
            EEX1ST = 0.47761D-03
            EEX2ND = 4.63   D-03
c           EEX2ND = 0.47761D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
  800 CONTINUE
         IF ( JZ .EQ. 5 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.78D-03
            EEX2ND = 2.32D-03
c           EEX2ND = 0.78D-03
         ELSE IF ( JZ .EQ. 4 ) THEN
            EEXCON = 6.D-03
            EEX1ST = 2.94D-03
            EEX2ND = 6.D-03
         ELSE IF ( JZ .EQ. 3 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.9808D-03
            EEX2ND = 2.261D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
  900 CONTINUE
         IF ( JZ .EQ. 4 ) THEN
            EEXCON = 1.68D-03
            EEX1ST = 1.68D-03
            EEX2ND = 2.429D-03
         ELSE IF ( JZ .EQ. 3 ) THEN
            EEXCON = 2.691D-03
            EEX1ST = 2.691D-03
            EEX2ND = 4.31 D-03
c           EEX2ND = 2.691D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1000 CONTINUE
         IF ( JZ .EQ. 6 ) THEN
            EEXCON = 5.22D-03
            EEX1ST = 3.353D-03
            EEX2ND = 5.22D-03
         ELSE IF ( JZ .EQ. 5 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.7183D-03
            EEX2ND = 1.7402D-03
         ELSE IF ( JZ .EQ. 4 ) THEN
            EEXCON = 5.9583D-03
            EEX1ST = 3.3680D-03
            EEX2ND = 5.9583D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1100 CONTINUE
         IF ( JZ .EQ. 6 ) THEN
            EEXCON = 4.319D-03
            EEX1ST = 2.0000D-03
            EEX2ND = 4.319D-03
         ELSE IF ( JZ .EQ. 5 ) THEN
            EEXCON = 4.4451D-03
            EEX1ST = 2.1247D-03
            EEX2ND = 4.4451D-03
         ELSE IF ( JZ .EQ. 4 ) THEN
            EEXCON = 1.79D-03
            EEX1ST = 0.3198D-03
            EEX2ND = 1.79D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1200 CONTINUE
         IF ( JZ .EQ. 7 ) THEN
            EEXCON = 0.96D-03
            EEX1ST = 0.96D-03
            EEX2ND = 1.19D-03
         ELSE IF ( JZ .EQ. 6 ) THEN
            EEXCON = 7.6540D-03
            EEX1ST = 4.4391D-03
c  |  |  Available only for Nhole >= 2, forbidden zone otherwise
            EEX2ND = 7.6540D-03
            EEX3RD = 12.71 D-03
            IF ( LHOLE ) THEN
               EEXFOR = EEX2ND
               EEX2ND = EEX3RD
               EEXCON = 10.0D-03
            END IF
         ELSE IF ( JZ .EQ. 5 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.9531D-03
            EEX2ND = 1.6736D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1300 CONTINUE
         IF ( JZ .EQ. 7 ) THEN
            EEXCON = 2.365D-03
            EEX1ST = 2.365D-03
            EEX2ND = 3.511D-03
         ELSE IF ( JZ .EQ. 6 ) THEN
            EEXCON = 3.0884D-03
            EEX1ST = 3.0884D-03
            EEX2ND = 3.6844D-03
         ELSE IF ( JZ .EQ. 5 ) THEN
            EEXCON = 3.483D-03
            EEX1ST = 3.483D-03
            EEX2ND = 3.535D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1400 CONTINUE
         IF ( JZ .EQ. 8 ) THEN
            EEXCON = 5.17D-03
            EEX1ST = 5.17D-03
            EEX2ND = 5.92D-03
         ELSE IF ( JZ .EQ. 7 ) THEN
            EEXCON = 3.9478D-03
            EEX1ST = 2.3129D-03
            EEX2ND = 3.9478D-03
          ELSE IF ( JZ .EQ. 6 ) THEN
            EEXCON = 6.094D-03
            EEX1ST = 6.094D-03
            EEX2ND = 6.590D-03
         ELSE IF ( JZ .EQ. 5 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.74D-03
            EEX2ND = 1.38D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1500 CONTINUE
         IF ( JZ .EQ. 6 ) THEN
            EEXCON = 3.105D-03
            EEX1ST = 0.740D-03
            EEX2ND = 3.105D-03
         ELSE IF ( JZ .EQ. 7 ) THEN
            EEXCON = 5.2704D-03
            EEX1ST = 5.2704D-03
            EEX2ND = 5.2989D-03
         ELSE IF ( JZ .EQ. 8 ) THEN
            EEXCON = 5.183D-03
            EEX1ST = 5.183D-03
            EEX2ND = 5.2409D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1600 CONTINUE
         IF ( JZ .EQ. 7 ) THEN
            EEXCON = ZERZER
c  |  Metastable: T1/2 5.3 us
            EEX1ST = 0.1201D-03
            EEX2ND = 0.397D-03
         ELSE IF ( JZ .EQ. 8 ) THEN
            EEXCON = 6.049 D-03
c  |  Not available for Nhole = 1: forbidden zone
            EEX1ST = 6.049 D-03
            EEX2ND = 6.1304D-03
c  |  For Nhole = 1:
            IF ( LHOLE ) THEN
               EEXFOR = EEX1ST
               EEX1ST = 6.1304D-03
               EEX2ND = 7.117 D-03
               EEXCON = EEX1ST
            END IF
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1700 CONTINUE
         IF ( JZ .EQ. 7 ) THEN
            EEXCON = 1.3739D-03
            EEX1ST = 1.3739D-03
            EEX2ND = 1.8496D-03
         ELSE IF ( JZ .EQ. 8 ) THEN
            EEXCON = 3.841 D-03
            EEX1ST = 0.8708D-03
            EEX2ND = 3.0552D-03
         ELSE IF ( JZ .EQ. 9 ) THEN
            EEXCON = 3.857 D-03
            EEX1ST = 0.4953D-03
            EEX2ND = 3.104 D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1800 CONTINUE
         IF ( JZ .EQ. 8 ) THEN
            EEXCON = 3.5551D-03
            EEX1ST = 1.9822D-03
            EEX2ND = 3.5551D-03
         ELSE IF ( JZ .EQ. 9 ) THEN
            EEXCON = 0.9371D-03
            EEX1ST = 0.9371D-03
            EEX2ND = 1.0410D-03
         ELSE IF ( JZ .EQ. 10 ) THEN
            EEXCON = 3.3762D-03
            EEX1ST = 1.8873D-03
            EEX2ND = 3.3762D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 1900 CONTINUE
         IF ( JZ .EQ. 8 ) THEN
            EEXCON = 2.371 D-03
            EEX1ST = 0.0960D-03
            EEX2ND = 1.4717D-03
         ELSE IF ( JZ .EQ. 9 ) THEN
c  |  |  Very risky: the level scheme is very complex and unusual
            EEXCON = 3.907   D-03
            EEX1ST = 0.109893D-03
            EEX2ND = 0.19715 D-03
         ELSE IF ( JZ .EQ. 10 ) THEN
c  |  |  Very risky: the level scheme is very complex and unusual
c  |  |  (and parallel to 19-F)
            EEXCON = 3.84  D-03
            EEX1ST = 0.2383D-03
            EEX2ND = 0.2752D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2000 CONTINUE
         IF ( JZ .EQ. 8 ) THEN
            EEXCON = 3.568 D-03
            EEX1ST = 1.6737D-03
            EEX2ND = 3.568 D-03
         ELSE IF ( JZ .EQ. 9 ) THEN
            EEXCON = 0.6560D-03
            EEX1ST = 0.6560D-03
            EEX2ND = 0.8229D-03
         ELSE IF ( JZ .EQ. 10 ) THEN
            EEXCON = 4.247 D-03
            EEX1ST = 1.6338D-03
            EEX2ND = 4.247 D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2100 CONTINUE
         IF ( JZ .EQ. 9 ) THEN
c  |  |  Risky: unusual level scheme
            EEXCON = 1.730 D-03
            EEX1ST = 0.2799D-03
            EEX2ND = 1.101 D-03
         ELSE IF ( JZ .EQ. 10 ) THEN
c  |  |  Risky: unusual level scheme
            EEXCON = 2.7885D-03
            EEX1ST = 0.3505D-03
            EEX2ND = 1.7456D-03
         ELSE IF ( JZ .EQ. 11 ) THEN
c  |  |  Risky: unusual level scheme (like 21-Ne)
            EEXCON = 2.432 D-03
            EEX1ST = 0.3318D-03
            EEX2ND = 1.723 D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2200 CONTINUE
         IF ( JZ .EQ. 9 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.66D-03
            EEX2ND = 1.36D-03
         ELSE IF ( JZ .EQ. 10 ) THEN
            EEXCON = 1.27D-03
            EEX1ST = 1.27D-03
            EEX2ND = 3.36D-03
         ELSE IF ( JZ .EQ. 11 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.583D-03
            EEX2ND = 0.657D-03
         ELSE IF ( JZ .EQ. 12 ) THEN
            EEXCON = 3.308D-03
            EEX1ST = 1.247D-03
            EEX2ND = 3.308D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2300 CONTINUE
         IF ( JZ .EQ. 10 ) THEN
            EEXCON = 1.017D-03
            EEX1ST = 1.017D-03
            EEX2ND = 1.702D-03
         ELSE IF ( JZ .EQ. 11 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.440D-03
            EEX2ND = 2.076D-03
         ELSE IF ( JZ .EQ. 12 ) THEN
            EEXCON = 2.051D-03
            EEX1ST = 0.4507D-03
            EEX2ND = 2.051D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2400 CONTINUE
         IF ( JZ .EQ. 10 ) THEN
            EEXCON = 3.867D-03
            EEX1ST = 1.981D-03
            EEX2ND = 3.867D-03
         ELSE IF ( JZ .EQ. 11 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.4723D-03
            EEX2ND = 0.5633D-03
         ELSE IF ( JZ .EQ. 12 ) THEN
            EEXCON = 4.1228D-03
            EEX1ST = 1.36859D-03
            EEX2ND = 4.1228D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2500 CONTINUE
         IF ( JZ .EQ. 11 ) THEN
            EEXCON = 2.202D-03
            EEX1ST = 0.0895D-03
            EEX2ND = 1.0693D-03
         ELSE IF ( JZ .EQ. 12 ) THEN
            EEXCON = 0.5851D-03
            EEX1ST = 0.5851D-03
            EEX2ND = 0.9748D-03
         ELSE IF ( JZ .EQ. 13 ) THEN
            EEXCON = 0.4515D-03
            EEX1ST = 0.4515D-03
            EEX2ND = 0.9448D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2600 CONTINUE
         IF ( JZ .EQ. 12 ) THEN
            EEXCON = 2.9384D-03
            EEX1ST = 1.8087D-03
            EEX2ND = 2.9384D-03
         ELSE IF ( JZ .EQ. 13 ) THEN
            EEXCON = ZERZER
c  |  |  Metastable T1/2 6.36 s:
            EEX1ST = 0.2282D-03
            EEX2ND = 0.4169D-03
         ELSE IF ( JZ .EQ. 14 ) THEN
            EEXCON = 2.7835D-03
            EEX1ST = 1.7959D-03
            EEX2ND = 2.7835D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2700 CONTINUE
         IF ( JZ .EQ. 12 ) THEN
            EEXCON = 0.9846D-03
            EEX1ST = 0.9846D-03
            EEX2ND = 1.6983D-03
         ELSE IF ( JZ .EQ. 13 ) THEN
            EEXCON = 0.84376D-03
            EEX1ST = 0.84376D-03
            EEX2ND = 1.01446D-03
         ELSE IF ( JZ .EQ. 14 ) THEN
            EEXCON = 0.7803D-03
            EEX1ST = 0.7803D-03
            EEX2ND = 0.9568D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2800 CONTINUE
         IF ( JZ .EQ. 12 ) THEN
            EEXCON = 3.863D-03
            EEX1ST = 1.4735D-03
            EEX2ND = 3.863D-03
         ELSE IF ( JZ .EQ. 13 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.030642D-03
            EEX2ND = 0.9722D-03
         ELSE IF ( JZ .EQ. 14 ) THEN
            EEXCON = 4.6178D-03
            EEX1ST = 1.7789D-03
c  |  |  Not available for nhole = 1: zone forbidden
            EEX2ND = 4.6178D-03
            EEX3RD = 6.2765D-03
            IF ( LHOLE ) THEN
               EEXFOR = EEX2ND
               EEX2ND = EEX3RD
               EEXCON = EEX3RD
            END IF
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 2900 CONTINUE
         IF ( JZ .EQ. 13 ) THEN
            EEXCON = 1.3977D-03
            EEX1ST = 1.3977D-03
            EEX2ND = 1.7537D-03
         ELSE IF ( JZ .EQ. 14 ) THEN
            EEXCON = 1.2733D-03
            EEX1ST = 1.2733D-03
            EEX2ND = 2.0282D-03
         ELSE IF ( JZ .EQ. 15 ) THEN
            EEXCON = 1.3836D-03
            EEX1ST = 1.3836D-03
            EEX2ND = 1.9533D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 3600 CONTINUE
         IF ( JZ .EQ. 17 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.78842D-03
            EEX2ND = 1.16475D-03
         ELSE IF ( JZ .EQ. 18 ) THEN
            EEXCON = 4.1783D-03
            EEX1ST = 1.97039D-03
            EEX2ND = 4.1783D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 3700 CONTINUE
         IF ( JZ .EQ. 17 ) THEN
            EEXCON = 1.7266D-03
            EEX1ST = 1.7266D-03
            EEX2ND = 3.087D-03
         ELSE IF ( JZ .EQ. 18 ) THEN
            EEXCON = 1.4098D-03
            EEX1ST = 1.4098D-03
            EEX2ND = 1.6113D-03
         ELSE IF ( JZ .EQ. 19 ) THEN
            EEXCON = 1.369D-03
            EEX1ST = 1.369D-03
            EEX2ND = 1.379D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 3800 CONTINUE
         IF ( JZ .EQ. 17 ) THEN
            EEXCON = 0.6713D-03
            EEX1ST = 0.6713D-03
            EEX2ND = 0.7553D-03
         ELSE IF ( JZ .EQ. 18 ) THEN
            EEXCON = 3.3774D-03
            EEX1ST = 2.16760D-03
            EEX2ND = 3.3774D-03
         ELSE IF ( JZ .EQ. 19 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.4587D-03
            EEX2ND = 0.1302D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 3900 CONTINUE
         IF ( JZ .EQ. 17 ) THEN
            EEXCON = 1.3015D-03
            EEX1ST = 0.3964D-03
            EEX2ND = 1.3015D-03
         ELSE IF ( JZ .EQ. 18 ) THEN
            EEXCON = 1.26720D-03
            EEX1ST = 1.26720D-03
            EEX2ND = 1.5174D-03
         ELSE IF ( JZ .EQ. 19 ) THEN
            EEXCON = 2.5226D-03
            EEX1ST = 2.5226D-03
            EEX2ND = 2.8138D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 4000 CONTINUE
         IF ( JZ .EQ. 18 ) THEN
            EEXCON = 2.1208D-03
            EEX1ST = 1.46081D-03
            EEX2ND = 2.1208D-03
         ELSE IF ( JZ .EQ. 19 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.0296D-03
            EEX2ND = 0.8001D-03
         ELSE IF ( JZ .EQ. 20 ) THEN
            EEXCON = 3.3521D-03
            EEX1ST = 3.3521D-03
            EEX2ND = 3.7364D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 4600 CONTINUE
         IF ( JZ .EQ. 19 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.5873D-03
            EEX2ND = 0.691D-03
         ELSE IF ( JZ .EQ. 20 ) THEN
            EEXCON = 3.613D-03
            EEX1ST = 1.347D-03
            EEX2ND = 2.4234D-03
         ELSE IF ( JZ .EQ. 21 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.052012D-03
            EEX2ND = 0.142528D-03
         ELSE IF ( JZ .EQ. 22 ) THEN
            EEXCON = 2.661D-03
            EEX1ST = 0.88925D-03
            EEX2ND = 2.00977D-03
         ELSE IF ( JZ .EQ. 23 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.8014D-03
            EEX2ND = 0.9149D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 4700 CONTINUE
         IF ( JZ .EQ. 20 ) THEN
            EEXCON = 2.5778D-03
            EEX1ST = 2.0131D-03
            EEX2ND = 2.5778D-03
         ELSE IF ( JZ .EQ. 21 ) THEN
            EEXCON = 1.12D-03
            EEX1ST = 0.8079D-03
            EEX2ND = 0.7668D-03
         ELSE IF ( JZ .EQ. 22 ) THEN
            EEXCON = 1.253D-03
            EEX1ST = 0.15938D-03
            EEX2ND = 1.253D-03
         ELSE IF ( JZ .EQ. 23 ) THEN
            EEXCON = 1.1384D-03
            EEX1ST = 0.0876D-03
            EEX2ND = 0.1459D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 4800 CONTINUE
         IF ( JZ .EQ. 20 ) THEN
            EEXCON = 4.284D-03
            EEX1ST = 3.8317D-03
            EEX2ND = 4.284D-03
         ELSE IF ( JZ .EQ. 21 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1309D-03
            EEX2ND = 0.252D-03
         ELSE IF ( JZ .EQ. 22 ) THEN
            EEXCON = 3.2235D-03
            EEX1ST = 0.983512D-03
            EEX2ND = 2.295618D-03
         ELSE IF ( JZ .EQ. 23 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.3082D-03
            EEX2ND = 0.4206D-03
         ELSE IF ( JZ .EQ. 24 ) THEN
            EEXCON = 3.42D-03
            EEX1ST = 0.7524D-03
            EEX2ND = 1.859D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 4900 CONTINUE
         IF ( JZ .EQ. 20 ) THEN
            EEXCON = 3.351D-03
            EEX1ST = 2.022D-03
            EEX2ND = 3.351D-03
         ELSE IF ( JZ .EQ. 21 ) THEN
            EEXCON = 2.2286D-03
            EEX1ST = 2.2286D-03
            EEX2ND = 2.3718D-03
         ELSE IF ( JZ .EQ. 22 ) THEN
            EEXCON = 1.3815D-03
            EEX1ST = 1.3815D-03
            EEX2ND = 1.542D-03
         ELSE IF ( JZ .EQ. 23 ) THEN
            EEXCON = 1.0214D-03
            EEX1ST = 0.9065D-03
            EEX2ND = 0.15294D-03
         ELSE IF ( JZ .EQ. 24 ) THEN
            EEXCON = 1.563D-03
            EEX1ST = 0.272D-03
            EEX2ND = 1.085D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 5000 CONTINUE
         IF ( JZ .EQ. 20 ) THEN
            EEXCON = 3.00D-03
            EEX1ST = 1.03D-03
            EEX2ND = 3.00D-03
         ELSE IF ( JZ .EQ. 21 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.2569D-03
            EEX2ND = 0.3285D-03
         ELSE IF ( JZ .EQ. 22 ) THEN
            EEXCON = 2.6747D-03
            EEX1ST = 1.5537D-03
            EEX2ND = 2.6747D-03
         ELSE IF ( JZ .EQ. 23 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.2262D-03
            EEX2ND = 0.3201D-03
         ELSE IF ( JZ .EQ. 24 ) THEN
            EEXCON = 2.9245D-03
            EEX1ST = 0.7833D-03
            EEX2ND = 1.8813D-03
         ELSE IF ( JZ .EQ. 25 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.23D-03
            EEX2ND = 0.6510D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 5100 CONTINUE
         IF ( JZ .EQ. 22 ) THEN
            EEXCON = 1.1666D-03
            EEX1ST = 1.1666D-03
            EEX2ND = 1.4373D-03
         ELSE IF ( JZ .EQ. 23 ) THEN
            EEXCON = 2.4157D-03
            EEX1ST = 0.3193D-03
            EEX2ND = 0.9283D-03
         ELSE IF ( JZ .EQ. 24 ) THEN
            EEXCON = 1.1645D-03
            EEX1ST = 0.7491D-03
            EEX2ND = 0.7772D-03
         ELSE IF ( JZ .EQ. 25 ) THEN
            EEXCON = 1.1395D-03
            EEX1ST = 0.2374D-03
            EEX2ND = 1.1395D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 7400 CONTINUE
         IF ( JZ .EQ. 32 ) THEN
            EEXCON = 1.2041D-03
            EEX1ST = 0.5958D-03
            EEX2ND = 1.2041D-03
         ELSE IF ( JZ .EQ. 33 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1731D-03
            EEX2ND = 0.1830D-03
         ELSE IF ( JZ .EQ. 34 ) THEN
            EEXCON = 0.8538D-03
            EEX1ST = 0.6348D-03
            EEX2ND = 0.8538D-03
         ELSE IF ( JZ .EQ. 35 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.00985D-03
            EEX2ND = 0.0726D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 7500 CONTINUE
         IF ( JZ .EQ. 32 ) THEN
            EEXCON = 0.13968D-03
c  |  Metastable T1/2 48 s:
            EEX1ST = 0.13968D-03
            EEX2ND = 0.13968D-03
         ELSE IF ( JZ .EQ. 33 ) THEN
            EEXCON = 0.19860D-03
            EEX1ST = 0.19860D-03
            EEX2ND = 0.26465D-03
         ELSE IF ( JZ .EQ. 34 ) THEN
            EEXCON = 0.1121D-03
            EEX1ST = 0.1121D-03
            EEX2ND = 0.1328D-03
         ELSE IF ( JZ .EQ. 35 ) THEN
            EEXCON = 0.1196D-03
            EEX1ST = 0.1196D-03
            EEX2ND = 0.1325D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 7600 CONTINUE
         IF ( JZ .EQ. 32 ) THEN
            EEXCON = 1.1084D-03
            EEX1ST = 0.56293D-03
            EEX2ND = 1.1084D-03
         ELSE IF ( JZ .EQ. 33 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.04604D-03
            EEX2ND = 0.08681D-03
         ELSE IF ( JZ .EQ. 34 ) THEN
            EEXCON = 1.1223D-03
            EEX1ST = 0.5591D-03
            EEX2ND = 1.1223D-03
         ELSE IF ( JZ .EQ. 35 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.0455D-03
            EEX2ND = 0.1505D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 7700 CONTINUE
         IF ( JZ .EQ. 32 ) THEN
            EEXCON = 0.495D-03
            EEX1ST = 0.1595D-03
            EEX2ND = 0.223D-03
         ELSE IF ( JZ .EQ. 33 ) THEN
            EEXCON = 0.1949D-03
            EEX1ST = 0.1949D-03
            EEX2ND = 0.21551D-03
         ELSE IF ( JZ .EQ. 34 ) THEN
            EEXCON = 0.1618D-03
c  |  Metastable: T1/2 17.4 s
            EEX1ST = 0.1618D-03
            EEX2ND = 0.1750D-03
         ELSE IF ( JZ .EQ. 35 ) THEN
            EEXCON = 0.1060D-03
c  |  Metastable: T1/2 4.3 m
            EEX1ST = 0.1060D-03
            EEX2ND = 0.1297D-03
         ELSE IF ( JZ .EQ. 36 ) THEN
            EEXCON = ZERZER
c  |  Metastable: T1/2 0.17 us
            EEX1ST = 0.0665D-03
            EEX2ND = 0.1500D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 7800 CONTINUE
         IF ( JZ .EQ. 34 ) THEN
            EEXCON = 1.3088D-03
            EEX1ST = 0.6138D-03
            EEX2ND = 1.3088D-03
         ELSE IF ( JZ .EQ. 35 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.0323D-03
            EEX2ND = 0.0551D-03
         ELSE IF ( JZ .EQ. 36 ) THEN
            EEXCON = 1.0174D-03
            EEX1ST = 0.4550D-03
            EEX2ND = 1.0174D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 7900 CONTINUE
         IF ( JZ .EQ. 34 ) THEN
            EEXCON = ZERZER
c  |  Metastable: T1/2 3.91 m
            EEX1ST = 0.09573D-03
            EEX2ND = 0.3645D-03
         ELSE IF ( JZ .EQ. 35 ) THEN
            EEXCON = 0.2072D-03
c  |  Metastable: T1/2 4.864 s
            EEX1ST = 0.2072D-03
            EEX2ND = 0.2170D-03
         ELSE IF ( JZ .EQ. 36 ) THEN
            EEXCON = 0.13001D-03
c  |  Metastable: T1/2 50 s
            EEX1ST = 0.13001D-03
            EEX2ND = 0.14723D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 8600 CONTINUE
         IF ( JZ .EQ. 36 ) THEN
            EEXCON = 2.2499D-03
            EEX1ST = 1.565D-03
            EEX2ND = 2.2499D-03
         ELSE IF ( JZ .EQ. 37 ) THEN
            EEXCON = 0.4879D-03
            EEX1ST = 0.4879D-03
            EEX2ND = 0.5560D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = 1.8542D-03
            EEX1ST = 1.0766D-03
            EEX2ND = 1.8542D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.2080D-03
            EEX2ND = 0.2182D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 8700 CONTINUE
         IF ( JZ .EQ. 36 ) THEN
            EEXCON = 0.5319D-03
            EEX1ST = 0.5319D-03
            EEX2ND = 1.4198D-03
         ELSE IF ( JZ .EQ. 37 ) THEN
            EEXCON = 0.40258D-03
            EEX1ST = 0.40258D-03
            EEX2ND = 0.8454D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = 0.3883D-03
            EEX1ST = 0.3883D-03
            EEX2ND = 0.8730D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = 0.3811D-03
            EEX1ST = 0.3811D-03
            EEX2ND = 0.793D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 0.2010D-03
            EEX1ST = 0.2010D-03
            EEX2ND = 0.3362D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 8800 CONTINUE
         IF ( JZ .EQ. 36 ) THEN
            EEXCON = 1.5775D-03
            EEX1ST = 0.7753D-03
            EEX2ND = 1.5775D-03
         ELSE IF ( JZ .EQ. 37 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.02751D-03
            EEX2ND = 0.19632D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = 2.7340D-03
            EEX1ST = 1.8360D-03
            EEX2ND = 2.7340D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = 0.2320D-03
            EEX1ST = 0.2320D-03
            EEX2ND = 0.3929D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 1.8177D-03
            EEX1ST = 1.0569D-03
            EEX2ND = 1.8177D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 8900 CONTINUE
         IF ( JZ .EQ. 37 ) THEN
            EEXCON = 0.2209D-03
            EEX1ST = 0.2209D-03
            EEX2ND = 0.4975D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = 1.0319D-03
            EEX1ST = 1.0319D-03
            EEX2ND = 1.4733D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = 0.9092D-03
c  |  Metastable: T1/2 16.6 s
            EEX1ST = 0.9092D-03
            EEX2ND = 1.5070D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 0.5878D-03
c  |  Metastable: T1/2 4.18 m
            EEX1ST = 0.5878D-03
            EEX2ND = 1.0955D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 9000 CONTINUE
         IF ( JZ .EQ. 37 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1069D-03
            EEX2ND = 0.12181D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = 1.6559D-03
            EEX1ST = 0.83169D-03
            EEX2ND = 1.6559D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = 0.68204D-03
            EEX1ST = 0.2020D-03
c  |  Metastable: T1/2 3.19 h
            EEX2ND = 0.68204D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 2.1863D-03
c  |  |  Available only for Nhole >= 2, forbidden zone otherwise??
            EEX1ST = 1.7607D-03
            EEX2ND = 2.1863D-03
            IF ( LHOLE ) THEN
               EEXFOR = EEX1ST
               EEX1ST = EEX2ND
            END IF
         ELSE IF ( JZ .EQ. 41 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1224D-03
c  |  Metastable: T1/2 18.8 S
            EEX2ND = 0.1248D-03
         ELSE IF ( JZ .EQ. 42 ) THEN
            EEXCON = 1.896D-03
            EEX1ST = 0.9479D-03
            EEX2ND = 1.896D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 9100 CONTINUE
         IF ( JZ .EQ. 37 ) THEN
            EEXCON = 0.5020D-03
            EEX1ST = 0.10878D-03
            EEX2ND = 0.5020D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.09364D-03
            EEX2ND = 0.4391D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = 0.5555D-03
c  |  Metastable: T1/2 49.7 m
            EEX1ST = 0.5555D-03
            EEX2ND = 0.6529D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 1.205D-03
            EEX1ST = 1.205D-03
            EEX2ND = 1.467D-03
         ELSE IF ( JZ .EQ. 41 ) THEN
            EEXCON = 1.1867D-03
c  |  Metastable: T1/2 62 d
            EEX1ST = 0.1045D-03
            EEX2ND = 1.1867D-03
         ELSE IF ( JZ .EQ. 42 ) THEN
            EEXCON = 1.1558D-03
c  |  Metastable: T1/2 65 s , 50% DECAY BETA+
            EEX1ST = 0.6529D-03
            EEX2ND = 1.1558D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 9200 CONTINUE
         IF ( JZ .EQ. 37 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1424D-03
            EEX2ND = 0.3168D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = 1.3846D-03
            EEX1ST = 0.8147D-03
            EEX2ND = 1.3846D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = 0.24152D-03
            EEX1ST = 0.24152D-03
            EEX2ND = 0.31D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 0.9345D-03
            EEX1ST = 0.9345D-03
            EEX2ND = 1.3830D-03
         ELSE IF ( JZ .EQ. 41 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1351D-03
            EEX2ND = 0.2253D-03
         ELSE IF ( JZ .EQ. 42 ) THEN
            EEXCON = 2.2826D-03
            EEX1ST = 1.50947D-03
            EEX2ND = 2.2826D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 9300 CONTINUE
         IF ( JZ .EQ. 37 ) THEN
            EEXCON = 0.2536D-03
            EEX1ST = 0.2536D-03
            EEX2ND = 0.2668D-03
         ELSE IF ( JZ .EQ. 38 ) THEN
            EEXCON = 0.2134D-03
            EEX1ST = 0.2134D-03
            EEX2ND = 0.4326D-03
         ELSE IF ( JZ .EQ. 39 ) THEN
            EEXCON = 0.5902D-03
            EEX1ST = 0.5902D-03
c  |  Metastable: T1/2 .82 s
            EEX2ND = 0.7586D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 0.9471D-03
            EEX1ST = 0.2669D-03
            EEX2ND = 0.9471D-03
         ELSE IF ( JZ .EQ. 41 ) THEN
            EEXCON = 0.6868D-03
c  |  Metastable: T1/2 13.6 y           !!
            EEX1ST = 0.0304D-03
            EEX2ND = 0.6868D-03
         ELSE IF ( JZ .EQ. 42 ) THEN
            EEXCON = 1.36302D-03
            EEX1ST = 0.9433D-03
            EEX2ND = 1.36302D-03
         ELSE IF ( JZ .EQ. 43 ) THEN
            EEXCON = 0.3926D-03
c  |  Metastable: T1/2 43 m
            EEX1ST = 0.3926D-03
            EEX2ND = 0.6807D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
 9400 CONTINUE
         IF ( JZ .EQ. 39 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.2D-03
            EEX2ND = 0.434D-03
         ELSE IF ( JZ .EQ. 40 ) THEN
            EEXCON = 1.300D-03
            EEX1ST = 0.9183D-03
            EEX2ND = 1.300D-03
         ELSE IF ( JZ .EQ. 41 ) THEN
            EEXCON = 0.04096D-03
            EEX1ST = 0.04096D-03
            EEX2ND = 0.05872D-03
         ELSE IF ( JZ .EQ. 42 ) THEN
            EEXCON = 1.5737D-03
            EEX1ST = 0.8710D-03
            EEX2ND = 1.5737D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
10400 CONTINUE
         IF ( JZ .EQ. 44 ) THEN
            EEXCON = 0.8885D-03
            EEX1ST = 0.35790D-03
            EEX2ND = 0.8885D-03
         ELSE IF ( JZ .EQ. 45 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.051422D-03
            EEX2ND = 0.097114D-03
         ELSE IF ( JZ .EQ. 46 ) THEN
            EEXCON = 1.3236D-03
            EEX1ST = 0.55581D-03
            EEX2ND = 1.3236D-03
         ELSE IF ( JZ .EQ. 47 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1126D-03
            EEX2ND = 0.2121D-03
         ELSE IF ( JZ .EQ. 48 ) THEN
            EEXCON = 1.4907D-03
            EEX1ST = 0.6581D-03
            EEX2ND = 1.4907D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
10500 CONTINUE
         IF ( JZ .EQ. 44 ) THEN
            EEXCON = ZERZER
c  |  Metastable: T1/2 0.34 us
            EEX1ST = 0.02055D-03
            EEX2ND = 0.1080D-03
         ELSE IF ( JZ .EQ. 45 ) THEN
            EEXCON = 0.1296D-03
c  |  Metastable: T1/2 45 s
            EEX1ST = 0.1296D-03
            EEX2ND = 0.1491D-03
         ELSE IF ( JZ .EQ. 46 ) THEN
            EEXCON = 0.28051D-03
            EEX1ST = 0.28051D-03
            EEX2ND = 0.30625D-03
         ELSE IF ( JZ .EQ. 47 ) THEN
            EEXCON = 0.34687D-03
c  |  Metastable: T1/2 7.2 m
            EEX1ST = 0.02547D-03
            EEX2ND = 0.05314D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
10600 CONTINUE
         IF ( JZ .EQ. 44 ) THEN
            EEXCON = 0.714D-03
            EEX1ST = 0.2703D-03
            EEX2ND = 0.714D-03
         ELSE IF ( JZ .EQ. 45 ) THEN
            GO TO 90000
         ELSE IF ( JZ .EQ. 46 ) THEN
            EEXCON = 1.12802D-03
            EEX1ST = 0.51186D-03
            EEX2ND = 1.12802D-03
         ELSE IF ( JZ .EQ. 47 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.0879D-03
            EEX2ND = 0.1106D-03
         ELSE IF ( JZ .EQ. 48 ) THEN
            EEXCON = 1.4937D-03
            EEX1ST = 0.6327D-03
            EEX2ND = 1.4937D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
10700 CONTINUE
         IF ( JZ .EQ. 45 ) THEN
            EEXCON = 0.4625D-03
            EEX1ST = 0.1941D-03
            EEX2ND = 0.4625D-03
         ELSE IF ( JZ .EQ. 46 ) THEN
            EEXCON = 0.1157D-03
c  |  Metastable: T1/2 0.9 us
            EEX1ST = 0.1157D-03
c  |  Metastable: T1/2 21.3 s
            EEX2ND = 0.2149D-03
         ELSE IF ( JZ .EQ. 47 ) THEN
            EEXCON = 0.09312D-03
c  |  Metastable: T1/2 44.3 s
            EEX1ST = 0.09312D-03
            EEX2ND = 0.12559D-03
         ELSE IF ( JZ .EQ. 48 ) THEN
            EEXCON = 0.20495D-03
            EEX1ST = 0.20495D-03
            EEX2ND = 0.32094D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
10800 CONTINUE
         IF ( JZ .EQ. 46 ) THEN
            EEXCON = 0.9312D-03
            EEX1ST = 0.43393D-03
            EEX2ND = 0.9312D-03
         ELSE IF ( JZ .EQ. 47 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.0455D-03
            EEX2ND = 0.07914D-03
         ELSE IF ( JZ .EQ. 48 ) THEN
            EEXCON = 1.0174D-03
            EEX1ST = 0.63298D-03
            EEX2ND = 1.0174D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
10900 CONTINUE
         IF ( JZ .EQ. 46 ) THEN
            EEXCON = 0.1140D-03
            EEX1ST = 0.1140D-03
c  |  Metastable: T1/2 4.69 m
            EEX2ND = 0.1889D-03
         ELSE IF ( JZ .EQ. 47 ) THEN
            EEXCON = 0.3114D-03
c  |  Metastable: T1/2 39.8 s
            EEX1ST = 0.088032D-03
            EEX2ND = 0.1328D-03
         ELSE IF ( JZ .EQ. 48 ) THEN
            EEXCON = 0.2035D-03
c  |  Metastable: T1/2 12 us
            EEX1ST = 0.0599D-03
            EEX2ND = 0.2035D-03
         ELSE IF ( JZ .EQ. 49 ) THEN
            EEXCON = 0.9813D-03
c  |  Metastable: T1/2 1.34 m
            EEX1ST = 0.6498D-03
            EEX2ND = 0.9813D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
19400 CONTINUE
         IF ( JZ .EQ. 78 ) THEN
            EEXCON = 1.2296 D-03
            EEX1ST = 0.32845D-03
            EEX2ND = 0.62202D-03
         ELSE IF ( JZ .EQ. 79 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.0352D-03
            EEX2ND = 0.0805D-03
         ELSE IF ( JZ .EQ. 80 ) THEN
            EEXCON = 1.7995D-03
            EEX1ST = 0.4282D-03
            EEX2ND = 1.0645D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.5392D-03
            EEX1ST = 0.9650D-03
            EEX2ND = 1.5392D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
19500 CONTINUE
         IF ( JZ .EQ. 78 ) THEN
            EEXCON = 0.09886D-03
            EEX1ST = 0.09886D-03
            EEX2ND = 0.12973D-03
         ELSE IF ( JZ .EQ. 79 ) THEN
            EEXCON = 0.2415 D-03
            EEX1ST = 0.06146D-03
            EEX2ND = 0.2415 D-03
         ELSE IF ( JZ .EQ. 80 ) THEN
            EEXCON = 0.5956 D-03
            EEX1ST = 0.03709D-03
            EEX2ND = 0.05330D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.3837D-03
            EEX2ND = 0.4828D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 0.970D-03
            EEX1ST = 0.970D-03
            EEX2ND = 1.551D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
19600 CONTINUE
         IF ( JZ .EQ. 78 ) THEN
            EEXCON = 0.6887D-03
            EEX1ST = 0.3557D-03
            EEX2ND = 0.6887D-03
         ELSE IF ( JZ .EQ. 79 ) THEN
            EEXCON = 0.0846D-03
c  |  Metastable (T1/2 8.2 s)
            EEX1ST = 0.0846D-03
            EEX2ND = 0.23239D-03
         ELSE IF ( JZ .EQ. 80 ) THEN
            EEXCON = 1.7568D-03
            EEX1ST = 0.4261D-03
            EEX2ND = 1.037 D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1918D-03
            EEX2ND = 0.2403D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.7375D-03
            EEX1ST = 1.0486D-03
            EEX2ND = 1.7375D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
19700 CONTINUE
         IF ( JZ .EQ. 78 ) THEN
c  |  Metastable (T1/2 94 m)
            EEXCON = 0.3995 D-03
            EEX1ST = 0.05295D-03
            EEX2ND = 0.1882 D-03
         ELSE IF ( JZ .EQ. 79 ) THEN
            EEXCON = 0.8555 D-03
            EEX1ST = 0.07734D-03
            EEX2ND = 0.26875D-03
         ELSE IF ( JZ .EQ. 80 ) THEN
            EEXCON = 0.5779D-03
            EEX1ST = 0.1339D-03
            EEX2ND = 0.1522D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = 0.7609D-03
            EEX1ST = 0.3856D-03
            EEX2ND = 0.6080D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.324 D-03
            EEX1ST = 0.0849D-03
            EEX2ND = 0.3193D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
19800 CONTINUE
         IF ( JZ .EQ. 79 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.055151D-03
            EEX2ND = 0.090952D-03
         ELSE IF ( JZ .EQ. 80 ) THEN
            EEXCON = 1.0485D-03
            EEX1ST = 0.4118044D-03
            EEX2ND = 1.0485D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.1734D-03
            EEX2ND = 0.2595D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.6258D-03
            EEX1ST = 1.0634D-03
            EEX2ND = 1.6258D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
19900 CONTINUE
         IF ( JZ .EQ. 79 ) THEN
            EEXCON = 0.316878D-03
            EEX1ST = 0.077157D-03
            EEX2ND = 0.31687 8D-03
         ELSE IF ( JZ .EQ. 80 ) THEN
            EEXCON = 0.4034 D-03
            EEX1ST = 0.15837D-03
            EEX2ND = 0.20820D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = 0.3669D-03
            EEX1ST = 0.3669D-03
            EEX2ND = 0.720 D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.402 D-03
            EEX1ST = 0.4248D-03
            EEX2ND = 1.402 D-03
         ELSE IF ( JZ .EQ. 83 ) THEN
            EEXCON = 0.9984D-03
c  |  Roughly, metastable (uncertain), alpha unstable (T1/2 24.7 m)
            EEX1ST = 0.61  D-03
            EEX2ND = 0.9984D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20000 CONTINUE
         IF ( JZ .EQ. 79 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.0600 D-03
            EEX2ND = 0.07621D-03
         ELSE IF ( JZ .EQ. 80 ) THEN
            EEXCON = 0.94724D-03
            EEX1ST = 0.36794D-03
            EEX2ND = 0.94724D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.14763D-03
            EEX2ND = 0.25718D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.4884D-03
            EEX1ST = 1.0262D-03
            EEX2ND = 1.4884D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20100 CONTINUE
         IF ( JZ .EQ. 80 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.00158D-03
            EEX2ND = 0.03219D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = 1.0984D-03
            EEX1ST = 0.33115D-03
            EEX2ND = 0.6924D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 0.6282D-03
            EEX1ST = 0.6282D-03
            EEX2ND = 0.6282D-03
         ELSE IF ( JZ .EQ. 83 ) THEN
            EEXCON = 0.848D-03
            EEX1ST = 0.848D-03
            EEX2ND = 0.848D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20200 CONTINUE
         IF ( JZ .EQ. 80 ) THEN
            EEXCON = 0.9600D-03
            EEX1ST = 0.4395D-03
            EEX2ND = 0.9600D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.4905D-03
            EEX2ND = 0.9502D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.3828D-03
            EEX1ST = 0.96067D-03
            EEX2ND = 1.3828D-03
         ELSE IF ( JZ .EQ. 84 ) THEN
            EEXCON = 1.248D-03
            EEX1ST = 0.677D-03
            EEX2ND = 1.248D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20300 CONTINUE
         IF ( JZ .EQ. 81 ) THEN
            EEXCON = 1.0445D-03
            EEX1ST = 0.2792D-03
            EEX2ND = 0.6805D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 0.8202D-03
            EEX1ST = 0.1264D-03
            EEX2ND = 0.1864D-03
         ELSE IF ( JZ .EQ. 83 ) THEN
            EEXCON = 0.8935D-03
            EEX1ST = 0.8935D-03
            EEX2ND = 0.8935D-03
         ELSE IF ( JZ .EQ. 84 ) THEN
            EEXCON = ZERZER
            EEX1ST = 0.059D-03
            EEX2ND = 0.133D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20400 CONTINUE
         IF ( JZ .EQ. 80 ) THEN
            EEXCON = 1.1285D-03
            EEX1ST = 0.4366D-03
            EEX2ND = 1.1285D-03
         ELSE IF ( JZ .EQ. 81 ) THEN
            EEXCON = 0.300D-03
            EEX1ST = 0.141D-03
            EEX2ND = 0.300D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.5628D-03
            EEX1ST = 0.8992D-03
            EEX2ND = 1.5628D-03
         ELSE IF ( JZ .EQ. 84 ) THEN
            EEXCON = 1.1985D-03
            EEX1ST = 0.6833D-03
            EEX2ND = 1.1985D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20500 CONTINUE
         IF ( JZ .EQ. 81 ) THEN
            EEXCON = 0.6194D-03
            EEX1ST = 0.2037D-03
            EEX2ND = 0.6194D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 0.5763D-03
            EEX1ST = 0.00233D-03
            EEX2ND = 0.2628D-03
         ELSE IF ( JZ .EQ. 83 ) THEN
            EEXCON = 0.8498D-03
            EEX1ST = 0.8498D-03
            EEX2ND = 0.8498D-03
         ELSE IF ( JZ .EQ. 84 ) THEN
            EEXCON = 0.386D-03
            EEX1ST = 0.144D-03
            EEX2ND = 0.386D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20600 CONTINUE
         IF ( JZ .EQ. 81 ) THEN
            EEXCON = 0.2656D-03
            EEX1ST = 0.2656D-03
            EEX2ND = 0.2656D-03
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.167D-03
c  |  |  Probably only neutron levels:
            EEX1ST = 0.8031D-03
            EEX2ND = 1.167D-03
         ELSE IF ( JZ .EQ. 84 ) THEN
            EEXCON = 1.17776D-03
            EEX1ST = 0.70066D-03
            EEX2ND = 1.17776D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20700 CONTINUE
         IF ( JZ .EQ. 81 ) THEN
            EEXCON = 2.69D-03
c  |  |  Only proton levels:
            EEX1ST = 0.35D-03
            EEX2ND = 1.34D-03
c  |  |  From here neutron levels:
            EEXNEU = 2.69D-03
            IF ( LHOLE ) THEN
               IF ( IPHOL .EQ. 2 ) THEN
                  EEXFOR = EEX2ND
                  EEX1ST = EEXNEU
                  EEX2ND = EEXNEU
                  EEXCON = EEXNEU
               END IF
            END IF
         ELSE IF ( JZ .EQ. 82 ) THEN
            EEXCON = 2.340D-03
c  |  |  Only neutron levels:
            EEX1ST = 0.56965D-03
            EEX2ND = 0.8978D-03
c  |  |  Proton levels from
            EEXPRO = 2.340D-03
            IF ( LHOLE ) THEN
               IF ( IPHOL .EQ. 1 ) THEN
                  EEXFOR = EEX2ND
                  EEX1ST = EEXPRO
                  EEX2ND = EEXPRO
                  EEXCON = EEXPRO
               END IF
            END IF
         ELSE IF ( JZ .EQ. 83 ) THEN
            EEXCON = 0.6695D-03
            EEX1ST = 0.6695D-03
            EEX2ND = 0.6695D-03
         ELSE IF ( JZ .EQ. 85 ) THEN
            EEXCON = 0.6735D-03
            EEX1ST = 0.3445D-03
            EEX2ND = 0.6735D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20800 CONTINUE
         IF ( JZ .EQ. 82 ) THEN
            EEXCON = 2.6146D-03
c  |  |  Not available for nhole =< 1: zone forbidden
            EEX1ST = 2.6146D-03
            EEX2ND = 3.1977D-03
            IF ( LHOLE ) THEN
               EEXFOR = EEX1ST
c  |  |  For nhole =< 1
               EEX1ST = 3.1977D-03
               EEX2ND = 3.475 D-03
               EEXCON = EEX2ND
            END IF
         ELSE IF ( JZ .EQ. 83 ) THEN
            EEXCON = 0.5102D-03
            EEX1ST = 0.0635D-03
            EEX2ND = 0.5102D-03
         ELSE IF ( JZ .EQ. 84 ) THEN
            EEXCON = 1.3465D-03
            EEX1ST = 0.6865D-03
            EEX2ND = 1.3465D-03
         ELSE
            GO TO 90000
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
c  |
20900 CONTINUE
         IF ( JZ .EQ. 82 ) THEN
            EEXCON = 1.423D-03
c  |  |  Only neutron levels !!!
            EEX1ST = 0.779D-03
            EEX2ND = 1.423D-03
            EEX3RD = 1.567D-03
c  |  |  Proton levels from this
            EEXPRO = 2.15 D-03
            IF ( LHOLE ) THEN
               IF ( IPHOL .EQ. 1 ) THEN
                  EEXFOR = EEX3RD
                  EEX1ST = EEXPRO
                  EEX2ND = EEX1ST
                  EEXCON = EEX2ND
               END IF
            END IF
         ELSE IF ( JZ .EQ. 83 ) THEN
            EEXCON = 2.43D-03
c  |  |  Only proton levels !!!
            EEX1ST = 0.8966D-03
            EEX2ND = 1.6085D-03
            IF ( LHOLE ) THEN
               IF ( IPHOL .EQ. 2 ) THEN
                  EEXFOR = EEX2ND
                  EEX1ST = EEXCON
                  EEX2ND = EEX1ST
                  EEXCON = EEX2ND
               END IF
            END IF
         ELSE IF ( JZ .EQ. 84 ) THEN
            EEXCON = 0.8544D-03
            EEX1ST = 0.5450D-03
            EEX2ND = 0.8544D-03
         ELSE
            GO TO 90000
         END IF
c Final checks:
         IF ( LHOLE ) THEN
            IZODD  = 1 - MOD ( JZ, 2 )
            INODD  = 1 - MOD ( JA-JZ, 2 )
            IODD   = IZODD + INODD
            IF ( IODD .EQ. 1 .AND. EEXFOR .LT. ANGLGB ) THEN
               IF ( ( IZODD .GT. 0 .AND. IPHOL .EQ. 1 )
     &             .OR. ( INODD .GT. 0 .AND. IPHOL .EQ. 2 ) ) THEN
                  IF ( JA .NE. JAOLD ) THEN
                     JAOLD  = JA
                     SQATAR = SQRT ( DBLE (JA) )
                  END IF
                  EEX2ND = 12.0D-03 / SQATAR
                  EEXFOR = MAX ( EEX1ST, HLFHLF * EEX2ND )
                  EEX1ST = EEX2ND
                  EEXCON = EEX2ND
               END IF
            END IF
         END IF
      RETURN
c  |
c  +-------------------------------------------------------------------*
90000 CONTINUE
      IF ( JA .EQ. JZ ) THEN
         EEXCON = ZERZER
         EEX1ST = ZERZER
         EEX2ND = ZERZER
         RETURN
      END IF
      IF ( JZ .EQ. 0 .OR. JA .EQ. JZ ) THEN
         EEXCON = ZERZER
      ELSE
         EEXCON = EMVGEV * ( CAM4 (JZ) + CAM5 (JA-JZ) )
      END IF
c  **** Very tentative selection of Eex1st, Eex2nd, based on pairing
c       energies according to delta = 12 MeV / A^1/2 ****
      IZODD  = 1 - MOD ( JZ, 2 )
      INODD  = 1 - MOD ( JA-JZ, 2 )
      IODD   = IZODD + INODD
c  +-------------------------------------------------------------------*
c  |  Even-even nucleus
      IF ( IODD .GE. 2 ) THEN
c  |  +----------------------------------------------------------------*
c  |  |
         IF ( JA .NE. JAOLD ) THEN
            JAOLD  = JA
            SQATAR = SQRT ( DBLE (JA) )
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         EEX1ST = 12.0D-03 / SQATAR
         EEX2ND = TWOTWO * EEX1ST
c  |
c  +-------------------------------------------------------------------*
c  |  even-odd nucleus
      ELSE IF ( IODD .GT. 0 ) THEN
c  |  +----------------------------------------------------------------*
c  |  |
         IF ( JA .NE. JAOLD ) THEN
            JAOLD  = JA
            SQATAR = SQRT ( DBLE (JA) )
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Only "Odd" specie level:
         EEX1ST = ZERZER
         EEX2ND = 12.0D-03 / SQATAR
         IF ( LHOLE ) THEN
            IF ( IZODD .GT. 0 .AND. IPHOL .EQ. 1 ) THEN
               EEXFOR = HLFHLF * EEX2ND
               EEX1ST = EEX2ND
               EEXCON = EEX2ND
            ELSE IF ( INODD .GT. 0 .AND. IPHOL .EQ. 2 ) THEN
               EEXFOR = HLFHLF * EEX2ND
               EEX1ST = EEX2ND
               EEXCON = EEX2ND
            END IF
         END IF
c  |
c  +-------------------------------------------------------------------*
c  |  odd-odd nucleus
      ELSE
         EEX2ND = ZERZER
         EEX1ST = ZERZER
      END IF
c  |
c  +-------------------------------------------------------------------*
      RETURN
c=== End of subroutine eexlvl =========================================*
      END
c*

c*sr 30.6. routine replaced completely
c$ CREATE ERUP.FOR
cCOPY ERUP
c                                                                      *
c=== erup =============================================================*
c                                                                      *
CDECK  ID>, DT_ERUP
      SUBROUTINE DT_ERUP(JFISS)

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created  on   15 may 1990     by     Alfredo & Paola Sala        *
c                                              INFN - Milan            *
c     Last change  on   15-sep-95   by     Alfredo Ferrari, INFN-Milan *
c                                                                      *
c     Derived from the ERUP routine of EVAP-V, HERMES, KFA-Julich      *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: EVA1)
c*sr
C     COMMON /FKEVA1/ NPART(6),EPART(100,6),COSEVP(3,100,6),HEVSUM
      COMMON /FKEVA1/ NPART(6),EPART(200,6),COSEVP(3,200,6),HEVSUM
c*

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

c (original name: HETC5)
      COMMON /FKHET5/ APR,ZPR,EX,UU,EREC

c (original name: HETC7)
      COMMON /FKHET7/ COSKS,SINKS, COSTH,SINTH, COSPHI,SINPHI

c (original name: HETTP)
      COMMON /FKHETP/  NHSTP,NBERTP,IOSUB,INSRS

c (original name: HIGFIS)
      PARAMETER ( IZFSMX = 61 )
      LOGICAL FISINH, LFRGMN, LAGOES
      COMMON /FKHIGF/ AFIS  (10), ZFIS  (10), UFIS  (10), EKFIS  (10),
     &                AMFIS (10), PPFIS (10), COSLFF(3,0:10),
     &                ATFIS (10), ZTFIS (10), UTFIS (10), RECFIS (10),
     &                AMTFIS(10), PPTFIS(10), EBFISS, AMDIFF,
     &                APR0, ZPR0, EREC0, UU0, HEVFIS (0:10),
     &                ISTFIS(10), NPARTF (6,0:10), NFISS, FISINH,
     &                LFRGMN, LAGOES
      DIMENSION COSLF0 (3)
      EQUIVALENCE ( COSLF0 (1), COSLFF (1,0) )

c (original name: RESNUC)
      LOGICAL LRNFSS, LFRAGM
      COMMON /FKRESN/  AMNTAR, AMMTAR, AMNZM1, AMMZM1, AMNNM1, AMMNM1,
     &                   ANOW,   ZNOW, ANCOLL, ZNCOLL, AMMLFT, AMNLFT,
     &                   ERES,  EKRES, AMNRES, AMMRES,  PTRES,  PXRES,
     &                  PYRES,  PZRES, PTRES2,  KTARP,  KTARN, IGREYP,
     &                 IGREYN, IPREEH, IPRDEU, IPRTRI, IPR3HE, IPR4HE,
     &                  ICRES,  IBRES, ISTRES, IEVAPL, IEVAPH, IEVNEU,
     &                 IEVPRO, IEVDEU, IEVTRI, IEV3HE, IEV4HE, IDEEXG,
     &                  IBTAR, ICHTAR, IBLEFT, ICLEFT, IOTHER, LRNFSS,
     &                 LFRAGM

c
      LOGICAL LOPPAR
      DIMENSION  FPART (6)
C     -------------------------------------- CHECK PARAMETER
      FISINH=.FALSE.
      LFRGMN=.FALSE.
      IFKEY = 0
c  +-------------------------------------------------------------------*
c  |  Check the excitation energy
      IF ( EX .LE. ZERZER ) THEN
c  |  No excitation energy:
         IF ( JFISS .LE. 0 ) THEN
            DO 201 I=1,6
               NPART(I)=0
  201       CONTINUE
            HEVSUM = ZERZER
         END IF
c        UU = ZERZER
         UU = EX
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  Positive excitation energy:
      ELSE
c  |  Try evaporation
         M2 = NINT (APR)
         M3 = NINT (ZPR)
 8801    CONTINUE
         CALL DT_DRES(M2,M3,EX,UU,EREC,LOPPAR,JFISS,IFKEY)
         FPARTT = ZERZER
c  |  +----------------------------------------------------------------*
c  |  |  No previous evaporation for this event
         IF ( JFISS .LE. 0 ) THEN
            DO 801 I=1,6
               FPART(I) = DBLE (NPART(I))
               FPARTT   = FPARTT + FPART (I)
  801       CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Other evaporation trials already performed for this event
         ELSE
            DO 802 I=1,6
               FPART(I) = DBLE (NPART(I)-NPARTF(I,JFISS-1))
               FPARTT   = FPARTT + FPART (I)
  802       CONTINUE
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  +----------------------------------------------------------------*
c  |  |  No particle evaporated and pairing corrections accounted for
c  |  |  and no fission, no fragmentation
         IF ( FPARTT + IFKEY .LT. ANGLGB .AND. .NOT. FISINH .AND.
     &        .NOT. LFRGMN .AND. ISTRES .LE. 0 ) THEN
c  |  |  Try again evaporation without accounting for pairing energies
c  |  |  This card swithes off the second trial: A. Ferrari 18-09-91
c           IF ( IFKEY .LE. 0 ) GO TO 8802
c  |  |  This card allows the 2nd trial only if the residual nucleus is
c  |  |  particle unstable even in the ground level
            IF ( .NOT. LOPPAR ) GO TO 8802
            IFKEY = 1
            GO TO 8801
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
 8802    CONTINUE
         IFKEY = 0
c  |  +----------------------------------------------------------------*
c  |  |  Fragments on their own stack:
         IF ( LFRGMN .OR. FISINH ) THEN
            ZPR = ZERZER
            APR = ZERZER
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |
         ELSE
            ZPR  = ZPR - FPART(2) - FPART(3) - TWOTWO * ( FPART(5)
     &           + FPART(6)) - FPART(4)
            APR  = APR - FPART(1) - FPART(2) - TWOTWO * FPART(3)
     &           - THRTHR * ( FPART(4) + FPART(5) ) - FOUFOU * FPART(6)
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
      END IF
c  |
c  +-------------------------------------------------------------------*
      RETURN
c=== End of subroutine Erup ===========================================*
      END
c*

c*sr 30.6. routine replaced completely
c$ CREATE EVDEEX.FOR
cCOPY EVDEEX
c
c=== evdeex ===========================================================*
c
CDECK  ID>, DT_EVDEEX
      SUBROUTINE DT_EVDEEX( WEE )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c  Evdeex :  created on 5-10-1990 by A. Ferrari & P. Sala, INFN Milan  *
c                                                                      *
c    Last change  on  19-feb-96   by   Alfredo Ferrari, INFN-Milan     *
c                                                                      *
c    This routine provides a simple model for sampling nuclear deexci- *
c    tation gammas following the evaporation step                      *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: BALANC)
      LOGICAL LRESMP, LEVDIF, LPRDIF, LSCHAI
      COMMON /FKBALA/  ETTOT,  PTTOT, PXTTOT, PYTTOT, PZTTOT,
     &                 EINCP,  EINCN, TVGREY, TVGRE0,  TVEUZ,
     &                   EUZ,    PUX,    PUY,    PUZ,  ENUCR, PXNUCR,
     &                PYNUCR, PZNUCR,  EINTR, PXINTR, PYINTR, PZINTR,
     &                  EFRM,  PXFRM,  PYFRM,  PZFRM,   PSEA,
     &                NGREYP, NGREYN,    ICU,    IBU, ICNUCR, IBNUCR,
     &                ICINTR, IBINTR, LRESMP, LEVDIF, LPRDIF, LSCHAI

c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: FINUC)
      PARAMETER (MXP=999)
      COMMON /FKFINU/ CXR    (MXP), CYR    (MXP), CZR    (MXP),
     &                CXRPOL (MXP), CYRPOL (MXP), CZRPOL (MXP),
     &                TKI    (MXP), PLR    (MXP), WEI    (MXP),
     &                TV, TVCMS, TVRECL, TVHEAV, TVBIND, NP0, NP,
     &                KPART  (MXP)

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c (original name: RESNUC)
      LOGICAL LRNFSS, LFRAGM
      COMMON /FKRESN/  AMNTAR, AMMTAR, AMNZM1, AMMZM1, AMNNM1, AMMNM1,
     &                   ANOW,   ZNOW, ANCOLL, ZNCOLL, AMMLFT, AMNLFT,
     &                   ERES,  EKRES, AMNRES, AMMRES,  PTRES,  PXRES,
     &                  PYRES,  PZRES, PTRES2,  KTARP,  KTARN, IGREYP,
     &                 IGREYN, IPREEH, IPRDEU, IPRTRI, IPR3HE, IPR4HE,
     &                  ICRES,  IBRES, ISTRES, IEVAPL, IEVAPH, IEVNEU,
     &                 IEVPRO, IEVDEU, IEVTRI, IEV3HE, IEV4HE, IDEEXG,
     &                  IBTAR, ICHTAR, IBLEFT, ICLEFT, IOTHER, LRNFSS,
     &                 LFRAGM

c
c----------------------------------------------------------------------*
c  Entering the routine we have:                                       *
c            Ammres is the atomic  mass of the residual nucleus        *
c            Amnres is the nuclear mass of the residual nucleus        *
c            Ibres (Anow) its mass number                              *
c            Icres (Znow) its atomic number                            *
c            Eres         its total energy                             *
c            Ptres        its momentum                                 *
c            Pxres        x-component of the momentum                  *
c            Pyres        y-component of the momentum                  *
c            Pzres        z-component of the momentum                  *
c            Tvrecl       kinetic energy                               *
c            Tvcms        excitation energy                            *
c----------------------------------------------------------------------*
c
      PARAMETER ( C0M1E1 = 0.306 D+00 )
      PARAMETER ( C0E2E1 = 7.1   D-01 )
c      PARAMETER ( HNDFE1 = 5.0   D-04 )
c      PARAMETER ( HNDFM1 = 5.0   D-02 )
c      PARAMETER ( HNDFE2 = 1.0   D+01 )
c      PARAMETER ( HNDFE1 = 5.0   D-05 )
c      PARAMETER ( HNDFM1 = 3.0   D-02 )
c      PARAMETER ( HNDFE2 = 1.5   D+01 )
      PARAMETER ( FRDSCR = 1.1   D+00 )
c
      LOGICAL LG3000, L1STEX
      DIMENSION COSGAM (3)
c**  Added 14-feb-1996 : A- dependence of hindrance f.
      DIMENSION HNE1(5), HNM1(5), HNE2(5), IBRNG(5)
c/////////// KK
ccc      SAVE HNE1, HNM1, HNE2, IBRNG
c//////
      DATA IBRNG /20, 44, 90, 150, 300/
      DATA HNE1 /3.0 D-03, 2.0 D-04, 1.0 D-04, 4.0 D-05, 2.0 D-05/
      DATA HNM1 /3.0 D-01, 9.0 D-02, 6.0 D-02, 2.0 D-02, 1.0 D-02/
      DATA HNE2 /1.0 D+01, 1.0 D+01, 8.0 D+00, 1.3 D+01, 1.6 D+01/
c**  *********
      IDEEXG = 0
      LG3000 = .FALSE.
c  +-------------------------------------------------------------------*
c  |   Ckeck if we are below threshold for gamma production
      IF ( IBRES .LE. 0 .OR. TVCMS .LE. GAMMIN ) THEN
         TVCMS = ZERZER
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Nuclear masses:
      IF ( LNCMSS ) THEN
         AMRESI = AMNRES
c  |
c  +-------------------------------------------------------------------*
c  |  Atomic masses:
      ELSE
         AMRESI = AMMRES
      END IF
c  |
c  +-------------------------------------------------------------------*
      ECHCK  = ERES - AMRESI
      ECHCK0 = ECHCK
c   First compute the pairing energy
      IBHELP = IBRES / 2
c  +-------------------------------------------------------------------*
c  |     Even - odd nuclei
      IF ( IBHELP * 2 .LT. IBRES ) THEN
c  |  Now this part has been substituted by a call to eexlvl
c        DELTA = 12.D-03 / SQRT ( ANOW )
         CALL DT_EEXLVL( IBRES, ICRES, EEX1ST, EEX2ND, EEXDUM )
         DELTA = EEX2ND
c  |  No discrete level input in Eexlvl
         IF ( EEX1ST .LT. ANGLGB ) EEX2ND = ZERZER
         IPAR  = 1
         JPAR  = 1
c  |
c  +-------------------------------------------------------------------*
c  |
      ELSE
         ICHELP = ICRES / 2
         JPAR   = 0
c  |  +----------------------------------------------------------------*
c  |  |   Odd - odd nuclei
         IF ( ICHELP * 2 .LT. ICRES ) THEN
c  |  |  Now this part has been substituted by a call to eexlvl
c           DELTA = ZERZER
            CALL DT_EEXLVL( IBRES, ICRES, EEX1ST, EEX2ND, EEXDUM )
            DELTA = EEX1ST
            IPAR  = 1
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |   Even - even nuclei
         ELSE
c  |  |  Now this part has been substituted by a call to eexlvl
c           DELTA = 24.D-03 / SQRT ( ANOW )
            CALL DT_EEXLVL( IBRES, ICRES, EEX1ST, EEX2ND, EEXDUM )
            DELTA = EEX2ND
c  |  |  No discrete level input in Eexlvl: set anyway the first level
c  |  |  at one pairing energy
            IF ( ABS ( HLFHLF * EEX2ND - EEX1ST ) .LT. ANGLGB )
     &         EEX2ND = EEX1ST
            IPAR  = 2
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
      END IF
c  |
c  +-------------------------------------------------------------------*
c  Be sure the 2nd excited level is consistent with the 1st one:
      EEX2ND = MAX ( EEX1ST, EEX2ND )
c  Get rid of rounding problems!
      IF ( ABS (DELTA -TVCMS) .LT. GAMMIN ) DELTA  = TVCMS
      IF ( ABS (EEXDUM-TVCMS) .LT. GAMMIN ) EEXDUM = TVCMS
c   Pairing "delta" to be used when evaluating the nuclear temperature
c     DELPAI = MIN ( EEXDUM, DELTA )
c   From 5-feb-'96
      DELPAI = EEXDUM
c   Compute the momentum of inertia of the nucleus
      RNUCL  = R0NUCL * RMASS (IBRES)
c   The following is the momentum of inertia in GeV fm^2, assuming
c   0.4 times the one of a rigid sphere with constant density
      AINERM = 0.24D+00 * AMRESI * RNUCL * RNUCL
      ROTEN0 = HLFHLF * PLABRC * PLABRC / AINERM
      ENMIN  = MAX ( DELTA, TWOTWO * ROTEN0 )
      RNMASS = AMRESI + TVCMS
      UMO    = RNMASS
      GAMCM  = ERES  / RNMASS
      ETAX   = PXRES / RNMASS
      ETAY   = PYRES / RNMASS
      ETAZ   = PZRES / RNMASS
      IF ( TVCMS .LE. FRDSCR * EEX2ND ) GO TO 3000
c   Check if we have enough energy to enter the loop
      IF ( TVCMS .LE. ENMIN .OR. IBRES .LE. 4 ) GO TO 3000
c   Now we enter the loop for gamma production
      AHELP  = RMASS (IBRES) * RMASS (IBRES)
c**  ADDED 14-FEB-1996 : A- DEPENDENCE OF HINDRANCE F.
      IF (IBRES. LE. IBRNG(1)) THEN
         HNDFE1 = HNE1(1)
         HNDFM1 = HNM1(1)
         HNDFE2 = HNE2(1)
      ELSE IF (IBRES. LE. IBRNG(2)) THEN
         HNDFE1 = HNE1(2)
         HNDFM1 = HNM1(2)
         HNDFE2 = HNE2(2)
      ELSE IF (IBRES. LE. IBRNG(3)) THEN
         HNDFE1 = HNE1(3)
         HNDFM1 = HNM1(3)
         HNDFE2 = HNE2(3)
      ELSE IF (IBRES. LE. IBRNG(4)) THEN
         HNDFE1 = HNE1(4)
         HNDFM1 = HNM1(4)
         HNDFE2 = HNE2(4)
      ELSE
         HNDFE1 = HNE1(5)
         HNDFM1 = HNM1(5)
         HNDFE2 = HNE2(5)
      END IF
c***********************************
      CFM1E1 = C0M1E1 * HNDFM1 / HNDFE1 / AHELP
      CFE2E1 = C0E2E1 * HNDFE2 / HNDFE1 * AHELP
c  +-------------------------------------------------------------------*
c  |               Gamma production from a statistical approach based
c  |               on level density
 1000 CONTINUE
         IF ( TVCMS .LE. FRDSCR * DELPAI ) GO TO 3000
c  |   Compute the nuclear T from aT^2 = Eex - Epairing, with
c  |   "a" = level density parameter
         UMEV   = GEVMEV * ( TVCMS - DELPAI )
         ASMALL = DT_GETA( UMEV  , ICRES , IBRES-ICRES, ILVMOD, ISDUM,
     &                   AOGMAX, AOGMIN )
         TEMPSQ = EMVGEV * ( TVCMS - DELPAI ) / ASMALL
         TEMPER = SQRT ( TEMPSQ )
         HHH    = TVCMS / TEMPER
         HHHSQ  = HHH * HHH
c*sr avoid floating point underflows
C        AHELP  = EXP ( - HHH )
         IF (-HHH.LT.LOG(ANGLGB)) THEN
            AHELP = ANGLGB
         ELSE
            AHELP = EXP ( - HHH )
         ENDIF
c*
         BRE1M1 = 6.D+00 - AHELP * ( HHHSQ * HHH + 3.D+00 * HHHSQ
     &          + 6.D+00 * HHH + 6.D+00 )
         BRE2   = 20.D+00 * BRE1M1 - AHELP * ( HHHSQ * HHHSQ * HHH
     &          + 5.D+00 * HHHSQ * HHHSQ )
         BRE1M1 = BRE1M1 * ( ONEONE + CFM1E1 )
         BRE2   = BRE2 * TEMPSQ * CFE2E1
c  |  +----------------------------------------------------------------*
c  |  |           Check the multipolarity of the emission
         IF ( DT_RNDM(HHH) .LT. BRE1M1 / ( BRE1M1 + BRE2 ) ) THEN
c  |  |           electric or magnetic dipole
            LMULT = 1
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |           electric quadrupole
         ELSE
            LMULT = 2
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         LEXPN  = 2 * LMULT + 1
         XDISMX = MIN ( DBLE ( LEXPN ), HHH )
         DISMX  = XDISMX ** LEXPN * EXP ( - XDISMX )
c  |  +----------------------------------------------------------------*
c  |  |        Rejection loop to sample from:
c  |  |                        X^(2xL+1) exp (-X),  X = E/T
 2000    CONTINUE
            XTENT = DT_RNDM(HHH) * HHH
            FREJE = XTENT ** LEXPN * EXP ( - XTENT ) / DISMX
         IF ( DT_RNDM(HHH) .GE. FREJE ) GO TO 2000
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Total emission energy in the CMS (photon+recoil)
         ENERG0 = XTENT * TEMPER
         TVCMS0 = TVCMS
         TVCMS  = TVCMS - ENERG0
c  |  +----------------------------------------------------------------*
c  |  |  Force the residual nucleus on discrete levels:
         IF ( TVCMS .LE. FRDSCR * EEX2ND ) THEN
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Go on the ground state:
            IF ( TVCMS .LT. HLFHLF * EEX1ST .OR. TVCMS0 .LT.
     &           HLFHLF * ( EEX1ST + EEX2ND ) ) THEN
               TVCMS = ZERZER
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Go on the 1st excited level:
            ELSE IF ( TVCMS .LT. HLFHLF * ( EEX1ST + EEX2ND )
     &         .OR. TVCMS0 .LT. FRDSCR * EEX2ND ) THEN
               TVCMS = EEX1ST
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Go on the 2nd excited level:
            ELSE
               TVCMS = EEX2ND
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         RNMASS = AMRESI + TVCMS
c  |  Cosgam(i) are the direction cosines of the emitted gamma in
c  |  the CMS frame, of course - C(i) are the ones of the residual
c  |  nucleus
         CALL DT_RACO( COSGAM (1), COSGAM (2), COSGAM (3) )
c  |  Erncm, Eegcm are the total energies of the residual nucleus
c  |  and of the emitted gamma in the CMS frame
         ERNCM  = HLFHLF * ( UMO * UMO + RNMASS * RNMASS ) / UMO
         EEGCM  = UMO - ERNCM
         PCMS   = EEGCM
c  |  Now we perform the Lorentz transformation back to the original
c  |  frame (lab frame)
c  |  First the emitted gamma:
         PCMSX  = PCMS * COSGAM (1)
         PCMSY  = PCMS * COSGAM (2)
         PCMSZ  = PCMS * COSGAM (3)
         ETAPCM = PCMSX * ETAX + PCMSY * ETAY + PCMSZ * ETAZ
         ENERG  = GAMCM * EEGCM + ETAPCM
         PHELP  = ETAPCM / ( GAMCM + ONEONE ) + EEGCM
         PLBGX  = PCMSX + ETAX * PHELP
         PLBGY  = PCMSY + ETAY * PHELP
         PLBGZ  = PCMSZ + ETAZ * PHELP
c  |  Then the residual nucleus (for it cosgam(i) --> - cosgam(i) ):
         ERES   = GAMCM * ERNCM - ETAPCM
         EKRES  = ERES  - RNMASS
         PHELP  = - ETAPCM / ( GAMCM + ONEONE ) + ERNCM
         PXRES  = - PCMSX + ETAX * PHELP
         PYRES  = - PCMSY + ETAY * PHELP
         PZRES  = - PCMSZ + ETAZ * PHELP
c  |  Update conservation counters
         ECHCK  = ECHCK  - ENERG
c  |  Stack the emitted gamma
         IDEEXG = IDEEXG + 1
         NP     = NP + 1
         WEI   (NP) = WEE
         KPART (NP) = 7
         TKI   (NP) = ENERG
         PLR   (NP) = ENERG
         CXR   (NP) = PLBGX / ENERG
         CYR   (NP) = PLBGY / ENERG
         CZR   (NP) = PLBGZ / ENERG
c  |  Update kinematical parameters
         GAMCM  = ERES  / RNMASS
         ETAX   = PXRES / RNMASS
         ETAY   = PYRES / RNMASS
         ETAZ   = PZRES / RNMASS
         UMO    = RNMASS
      IF ( TVCMS .GT. ENMIN ) GO TO 1000
c  |--<--<--<--<--<  loop to emit another gamma
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |
      IF ( NP .GE. MXP ) THEN
         WRITE ( ErrorOut, * )' **** Finuc overflow in Evdeex,',
     &                      ' PROGRAM STOPPED ****'
         WRITE ( ErrorOut, * )' **** Finuc overflow in Evdeex,',
     &                      ' PROGRAM STOPPED ****'
         STOP
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |               Gamma production from rotational levels
 3000 CONTINUE
      IF ( TVCMS .LE. ANGLGB ) GO TO 3500
c  |  +----------------------------------------------------------------*
c  |  |            ( 6 + 2 x jpar ) x roten0 corresponds to the tran-
c  |  |            sition from the level with I = 2 to the level
c  |  |            with I = 0 for even-even and odd-odd nuclei (jpar=0)
c  |  |            and from I = 5/2 to I = 1/2 for odd-even nuclei
c  |  |            If we are below consider the I = 0 (I=1/2) as the
c  |  |            ground state and go down ( no transition with
c  |  |            DI = 2 is possible )
c  |  |            Check also for excitations in the region of
c  |  |            known discrete levels:
         IF ( LG3000 .OR. TVCMS .LE. DBLE ( 6 + 2 * JPAR ) * ROTEN0 .OR.
     &        TVCMS .LE. ONEPLS * HLFHLF * ( EEX1ST + EEX2ND ) ) THEN
            ENERG0 = TVCMS
            TVCMS  = ZERZER
c  |  |  Cosgam(i) are the direction cosines of the emitted gamma in
c  |  |  the CMS frame, of course - C(i) are the ones of the residual
c  |  |   nucleus
            CALL DT_RACO( COSGAM (1), COSGAM (2), COSGAM (3) )
c  |  |  Erncm, Eegcm are the total energies of the residual nucleus
c  |  |  and of the emitted gamma in the CMS frame
            ERNCM  = HLFHLF * ( UMO * UMO + AMRESI * AMRESI ) / UMO
            EEGCM  = UMO - ERNCM
            PCMS   = EEGCM
c  |  |  Now we perform the Lorentz transformation back to the original
c  |  |  frame (lab frame)
c  |  |  First the emitted gamma:
            PCMSX  = PCMS * COSGAM (1)
            PCMSY  = PCMS * COSGAM (2)
            PCMSZ  = PCMS * COSGAM (3)
            ETAPCM = PCMSX * ETAX + PCMSY * ETAY + PCMSZ * ETAZ
            ENERG  = GAMCM * EEGCM + ETAPCM
            PHELP  = ETAPCM / ( GAMCM + ONEONE ) + EEGCM
            PLBGX  = PCMSX + ETAX * PHELP
            PLBGY  = PCMSY + ETAY * PHELP
            PLBGZ  = PCMSZ + ETAZ * PHELP
c  |  |  Then the residual nucleus (for it cosgam(i) --> - cosgam(i) ):
            ERES   = GAMCM * ERNCM - ETAPCM
            EKRES  = ERES - AMRESI
            PHELP  = - ETAPCM / ( GAMCM + ONEONE ) + ERNCM
            PXRES  = - PCMSX + ETAX * PHELP
            PYRES  = - PCMSY + ETAY * PHELP
            PZRES  = - PCMSZ + ETAZ * PHELP
c  |  |  Update conservation counters
            ECHCK  = ECHCK - ENERG
c  |  |  Stack the emitted gamma
            IDEEXG = IDEEXG + 1
            NP     = NP + 1
            WEI   (NP) = WEE
            KPART (NP) = 7
            TKI   (NP) = ENERG
            PLR   (NP) = ENERG
            CXR   (NP) = PLBGX / ENERG
            CYR   (NP) = PLBGY / ENERG
            CZR   (NP) = PLBGZ / ENERG
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |               Compute the rotational level just below the
c  |  |               present level:
c  |  |                   Iamin = I of that level for odd-odd and
c  |  |                           even-even nuclei (for odd-odd it is
c  |  |                           forced to be odd), I of that level
c  |  |                           - 1/2 for even-odd nuclei (for these
c  |  |                           nuclei the ground state is at least
c  |  |                           the I=1/2 one with E=Roten0*3/4, so
c  |  |                           we must add this quantity to Tvcms
c  |  |                           to compute the nearest level)
         ELSE
            AIAMOM = SQRT ( 0.25D+00 + TVCMS / ROTEN0
     &             + 0.75D+00 * DBLE (JPAR) ) - 0.5D+00
c  |  |  +-------------------------------------------------------------*
c  |  |  |            Ipar = 1, odd - odd or even - odd nuclei
            IF ( IPAR .EQ. 1 ) THEN
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |         Even - odd nuclei: Jamin is twice the I value of
c  |  |  |  |         the rotational state just below the present one
c  |  |  |  |         ( I = Iamin + 1/2 )
               IF ( JPAR .EQ. 1 ) THEN
                  JAMIN = 2 * INT ( AIAMOM ) + 1
                  IAMIN = JAMIN / 2
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |      Check if the ground state will be a I = 1/2, or
c  |  |  |  |  |      a I = 3/2 one
                  IF ( MOD ( IAMIN, 2 ) .GT. 0 ) THEN
                     EGROUN = 3.75D+00 * ROTEN0
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |      I = 1/2 for the ground state
                  ELSE
                     EGROUN = 0.75D+00 * ROTEN0
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |         Odd - odd nuclei: Jamin is twice the I value of
c  |  |  |  |         the rotational state just below the present one,
c  |  |  |  |         ( I = Iamin )
               ELSE
                  IAMIN = INT ( AIAMOM )
                  JAMIN = 2 * IAMIN
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |      Check if the ground state will be a I = 1 or a
c  |  |  |  |  |      I = 0 one
                  IF ( MOD ( IAMIN, 2 ) .GT. 0 ) THEN
                     EGROUN = TWOTWO * ROTEN0
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |      I = 0 for the ground state
                  ELSE
                     EGROUN = ZERZER
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |                  even - even nuclei: the rotational band
c  |  |  |                  will end on the I = 0 level
            ELSE
               IAMIN  = INT ( AIAMOM ) / IPAR
c  |  |  |  In this way we are considering only even values for the
c  |  |  |  angular momentum quantum number for even - even nuclei
               IAMIN  = IAMIN * IPAR
               JAMIN  = 2 * IAMIN
               EGROUN = ZERZER
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            DELTAE = TVCMS + EGROUN - 0.25D+00 * ROTEN0 * DBLE ( JAMIN *
     &             ( JAMIN + 2 ) )
            L1STEX = .FALSE.
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Now emit all gammas corresponding to DI = 2 transitions,
c  |  |  |  Jamom is the 2xI value of the starting state, the minimum
c  |  |  |  level can be I0=0,1/2,1,3/2 --> J0 = 2xI0 = 0,1,2,3 and
c  |  |  |  the previous level (DJ=4), Jl = 4,5,6,7, so a minimum
c  |  |  |  value of 4 for Jl is ok for all possible J0
            DO 4000 JAMOM = JAMIN, 4, -4
               ENERG0 = ROTEN0 * DBLE ( 2 * JAMOM - 2 ) + DELTAE
               DELTAE = ZERZER
               TVCMS0 = TVCMS
               TVCMS  = TVCMS - ENERG0
 3800          CONTINUE
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Go on the 1st excited level:
               IF ( L1STEX ) THEN
                  TVCMS  = EEX1ST
                  ENERG0 = TVCMS0 - TVCMS
                  LG3000 = .TRUE.
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Force the residual nucleus on discrete levels:
               ELSE IF ( TVCMS .LT. FRDSCR * EEX2ND ) THEN
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  Go on the ground state:
                  IF ( TVCMS .LT. HLFHLF * EEX1ST .OR. TVCMS0 .LT.
     &                 HLFHLF * ( EEX1ST + EEX2ND ) ) THEN
                     TVCMS  = ZERZER
                     ENERG0 = TVCMS0
                     LG3000 = .TRUE.
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  Go on the 1st excited level:
                  ELSE IF ( TVCMS .LT. HLFHLF * ( EEX1ST + EEX2ND )
     &               .OR. TVCMS0 .LT. FRDSCR * EEX2ND ) THEN
                     TVCMS  = EEX1ST
                     ENERG0 = TVCMS0 - TVCMS
                     LG3000 = .TRUE.
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  Go on the 2nd excited level:
                  ELSE
                     TVCMS  = EEX2ND
                     ENERG0 = TVCMS0 - TVCMS
c  |  |  |  |  |  Even-even nuclei: go on with the cascade, the next one
c  |  |  |  |  |  will be the first level
c  |  |  |  |  |  Odd-odd or Even-odd 50% thru the 1st level, 50%
c  |  |  |  |  |  directly to the ground state
                     RNFLIP = DT_RNDM(HHH)
                     LG3000 = ( IPAR .NE. 2 .AND. RNFLIP .LT. HLFHLF )
     &                        .OR. EEX1ST .GE. ONEMNS * EEX2ND
                     L1STEX = .NOT. LG3000
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Normal sequence:
               ELSE
                  LG3000 = .FALSE.
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
               RNMASS = AMRESI + TVCMS
c  |  |  | Cosgam(i) are the direction cosines of the emitted gamma in
c  |  |  | the CMS frame, of course - C(i) are the ones of the residual
c  |  |  | nucleus
               CALL DT_RACO( COSGAM (1), COSGAM (2), COSGAM (3) )
c  |  |  | Erncm, Eegcm are the total energies of the residual nucleus
c  |  |  | and of the emitted gamma in the CMS frame
               ERNCM  = HLFHLF * ( UMO * UMO + RNMASS * RNMASS ) / UMO
               EEGCM  = UMO - ERNCM
               PCMS   = EEGCM
c  |  |  | Now we perform the Lorentz transformation back to the
c  |  |  | original frame (lab frame)
c  |  |  | First the emitted gamma:
               PCMSX  = PCMS * COSGAM (1)
               PCMSY  = PCMS * COSGAM (2)
               PCMSZ  = PCMS * COSGAM (3)
               ETAPCM = PCMSX * ETAX + PCMSY * ETAY + PCMSZ * ETAZ
               ENERG  = GAMCM * EEGCM + ETAPCM
               PHELP  = ETAPCM / ( GAMCM + ONEONE ) + EEGCM
               PLBGX  = PCMSX + ETAX * PHELP
               PLBGY  = PCMSY + ETAY * PHELP
               PLBGZ  = PCMSZ + ETAZ * PHELP
c  |  |  | Then the residual nucleus (for it cosgam(i) --> -cosgam(i)):
               ERES   = GAMCM * ERNCM - ETAPCM
               EKRES  = ERES - RNMASS
               PHELP  = - ETAPCM / ( GAMCM + ONEONE ) + ERNCM
               PXRES  = - PCMSX + ETAX * PHELP
               PYRES  = - PCMSY + ETAY * PHELP
               PZRES  = - PCMSZ + ETAZ * PHELP
c  |  |  | Update conservation counters
               ECHCK  = ECHCK  - ENERG
c  |  |  | Stack the emitted gamma
               IDEEXG = IDEEXG + 1
               NP     = NP + 1
               WEI   (NP) = WEE
               KPART (NP) = 7
               TKI   (NP) = ENERG
               PLR   (NP) = ENERG

               CXR   (NP) = PLBGX / ENERG
               CYR   (NP) = PLBGY / ENERG
               CZR   (NP) = PLBGZ / ENERG
c  |  |  | Update kinematical parameters
               GAMCM  = ERES  / RNMASS
               ETAX   = PXRES / RNMASS
               ETAY   = PYRES / RNMASS
               ETAZ   = PZRES / RNMASS
               UMO    = RNMASS
               IF ( LG3000 ) GO TO 3000
c  |  |  |--<--<--<--<--< go back to deexcite directly on the ground
c  |  |  |                state when we are in the known discrete level
c  |  |  |                range
               IF ( L1STEX ) GO TO 3800
c  |  |  |--<--<--<--<--< go back to deexcite thru the 1st excuted level
 4000       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |
c  +-------------------------------------------------------------------*
 3500 CONTINUE
c  Update conservation counters
      ECHCK  = ECHCK - EKRES
c  +-------------------------------------------------------------------*
c  |
      IF ( ABS ( ECHCK ) .GT. 1.D-7 * ECHCK0 ) THEN
         WRITE ( ErrorOut,
     *  * )' **** No energy conservation in Evdeex',
     &                      ' ****', ECHCK, IDEEXG
         WRITE ( ErrorOut,
     *  * )' **** No energy conservation in Evdeex',
     &                      ' ****', ECHCK, IDEEXG
      END IF
c  |
c  +-------------------------------------------------------------------*
      TVCMS = ZERZER
c  +-------------------------------------------------------------------*
c  |
      IF ( NP .GT. MXP ) THEN
         WRITE ( ErrorOut, * )' **** Finuc overflow in Evdeex,',
     &                      ' PROGRAM STOPPED ****'
         WRITE ( ErrorOut, * )' **** Finuc overflow in Evdeex,',
     &                      ' PROGRAM STOPPED ****'
         STOP
      END IF
c  |
c  +-------------------------------------------------------------------*
      TVRECL = EKRES
      P2RES  = PXRES * PXRES + PYRES * PYRES + PZRES * PZRES
      PTRES  = SQRT (P2RES)
c=== End of subroutine Evdeex =========================================*
      RETURN
      END
c*

c$ CREATE EVEVAP.FOR
cCOPY EVEVAP
c
c=== evevap ===========================================================*
c
CDECK  ID>, DT_EVEVAP
      SUBROUTINE DT_EVEVAP( WEE )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c  EVent EVAPoration: this routine is used to steer both the evapora-  *
c  tion, the high energy fission, possibly a future fragmentation      *
c  and the gamma deexcitation routines                                 *
c                                                                      *
c  Created  on  15  may  1991   by   Alfredo Ferrari & Paola Sala      *
c                                             INFN - Milan             *
c                                                                      *
c  Last change  on 02-may-95    By   Alfredo Ferrari, INFN - Milan     *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: BALANC)
      LOGICAL LRESMP, LEVDIF, LPRDIF, LSCHAI
      COMMON /FKBALA/  ETTOT,  PTTOT, PXTTOT, PYTTOT, PZTTOT,
     &                 EINCP,  EINCN, TVGREY, TVGRE0,  TVEUZ,
     &                   EUZ,    PUX,    PUY,    PUZ,  ENUCR, PXNUCR,
     &                PYNUCR, PZNUCR,  EINTR, PXINTR, PYINTR, PZINTR,
     &                  EFRM,  PXFRM,  PYFRM,  PZFRM,   PSEA,
     &                NGREYP, NGREYN,    ICU,    IBU, ICNUCR, IBNUCR,
     &                ICINTR, IBINTR, LRESMP, LEVDIF, LPRDIF, LSCHAI

c (original name: EVA1)
c*sr
C     COMMON /FKEVA1/ NPART(6),EPART(100,6),COSEVP(3,100,6),HEVSUM
      COMMON /FKEVA1/ NPART(6),EPART(200,6),COSEVP(3,200,6),HEVSUM
c*

c (original name: FHEAVY,FHEAVC)
      PARAMETER ( MXHEAV = 100 )
      CHARACTER*8 ANHEAV
      COMMON /FKFHVY/ CXHEAV (MXHEAV), CYHEAV (MXHEAV),
     &                CZHEAV (MXHEAV), TKHEAV (MXHEAV),
     &                PHEAVY (MXHEAV), WHEAVY (MXHEAV),
     &                AMHEAV  ( 12 ) , AMNHEA  ( 12 ) ,
     &                KHEAVY (MXHEAV), ICHEAV  ( 12 ) ,
     &                IBHEAV  ( 12 ) , NPHEAV
      COMMON /FKFHVC/ ANHEAV  ( 12 )

c (original name: FINUC)
      PARAMETER (MXP=999)
      COMMON /FKFINU/ CXR    (MXP), CYR    (MXP), CZR    (MXP),
     &                CXRPOL (MXP), CYRPOL (MXP), CZRPOL (MXP),
     &                TKI    (MXP), PLR    (MXP), WEI    (MXP),
     &                TV, TVCMS, TVRECL, TVHEAV, TVBIND, NP0, NP,
     &                KPART  (MXP)

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: HETC5)
      COMMON /FKHET5/ APR,ZPR,EX,UU,EREC

c (original name: HETC7)
      COMMON /FKHET7/ COSKS,SINKS, COSTH,SINTH, COSPHI,SINPHI

c (original name: HETTP)
      COMMON /FKHETP/  NHSTP,NBERTP,IOSUB,INSRS

c (original name: HIGFIS)
      PARAMETER ( IZFSMX = 61 )
      LOGICAL FISINH, LFRGMN, LAGOES
      COMMON /FKHIGF/ AFIS  (10), ZFIS  (10), UFIS  (10), EKFIS  (10),
     &                AMFIS (10), PPFIS (10), COSLFF(3,0:10),
     &                ATFIS (10), ZTFIS (10), UTFIS (10), RECFIS (10),
     &                AMTFIS(10), PPTFIS(10), EBFISS, AMDIFF,
     &                APR0, ZPR0, EREC0, UU0, HEVFIS (0:10),
     &                ISTFIS(10), NPARTF (6,0:10), NFISS, FISINH,
     &                LFRGMN, LAGOES
      DIMENSION COSLF0 (3)
      EQUIVALENCE ( COSLF0 (1), COSLFF (1,0) )

c (original name: LABCOS)
      COMMON /FKLABC/ COSLBP(3),COSLBR(3)

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

C     INCLUDE '(PART)'
c$ CREATE PART.ADD
c*sr 19.5. commented
C     COMMON / PART /  AM     (-6:IDMAXP), GA     (-6:IDMAXP),
C    &                 TAU    (-6:IDMAXP), AMDISC (-6:IDMAXP),
C    &                 ZMNABS (-6:IDMAXP), ATNMNA (-6:IDMAXP),
C    &                 ICH    (-6:IDMAXP), IBAR   (-6:IDMAXP),
C    &                 K1     (-6:IDMAXP), K2     (-6:IDMAXP),
C    &                 KPTOIP (-6:IDMAXP), IPTOKP (-6:NALLWP),
C    &                 IDCFLG (-6:NALLWP), IPTYPE (-6:NALLWP)
c*sr 2.3.99 commented
C     CHARACTER*8  ANAME
C     COMMON /FKCHPA / ANAME (-6:IDMAXP)
c*
c (original name: RESNUC)
      LOGICAL LRNFSS, LFRAGM
      COMMON /FKRESN/  AMNTAR, AMMTAR, AMNZM1, AMMZM1, AMNNM1, AMMNM1,
     &                   ANOW,   ZNOW, ANCOLL, ZNCOLL, AMMLFT, AMNLFT,
     &                   ERES,  EKRES, AMNRES, AMMRES,  PTRES,  PXRES,
     &                  PYRES,  PZRES, PTRES2,  KTARP,  KTARN, IGREYP,
     &                 IGREYN, IPREEH, IPRDEU, IPRTRI, IPR3HE, IPR4HE,
     &                  ICRES,  IBRES, ISTRES, IEVAPL, IEVAPH, IEVNEU,
     &                 IEVPRO, IEVDEU, IEVTRI, IEV3HE, IEV4HE, IDEEXG,
     &                  IBTAR, ICHTAR, IBLEFT, ICLEFT, IOTHER, LRNFSS,
     &                 LFRAGM

c
      PARAMETER ( AMUMEV = GEVMEV * AMUGEV )
c
c*sr 30.6.
C     COMMON /EVNTTP/ LNUCRI, LHADRI
C     LOGICAL LNUCRI, LHADRI
c*
c  The initial excitation energy, mass and charge of the nucleus are
c  put into Ex, Apr, Zpr (common Hetc5)
      EX  = MAX ( GEVMEV * TVCMS, ANGLGB )
      APR = ANOW
      ZPR = ZNOW
c  Reset the fission/fragmentation counter:
      NFISS  = 0
c  Reset the stability index:
      ISTRES = 0
c*sr 30.6.
c  Set the Lagoes flag, physics (and Peanut since it is sound physics)
c  would require Lagoes = .false. ...
c**sr 30.6. LPEANU not available in this routine (even not in the new
c          version), assume LPEANU=.false. according to new BDNOPT
C     LAGOES = .NOT. LPEANU
      LAGOES = .TRUE.
c**
c*
c  Ammres is the atomic mass of the residual nucleus
c  Reset accumulators for the energy conservation check (they are only
c  local)
      EOTEST = AMMRES + TVCMS + TVRECL
c  +-------------------------------------------------------------------*
c  |  Check the possibility to end up with a "compound elastic" event
c  |  and flag it for the Fermi break-up algorithm:
      IF ( IBTAR - ICHTAR .LE. MXNFBK .AND. ICHTAR .LE. MXZFBK .AND.
     &     NP .EQ. NP0 ) THEN
         IFBFRB = IPSIND (IBTAR-ICHTAR,ICHTAR,1)
         IF ( IFBFRB .GT. 0 ) THEN
            IF ( IFBKST (IFBFRB) .NE. 0 ) IFBFRB = 0
         END IF
      END IF
c  |
c  +-------------------------------------------------------------------*
      ETEVAP = ZERZER
c  +-------------------------------------------------------------------*
c  |  Set the variables recording the recoil direction of the residual
c  |  nucleus:
      IF ( PTRES .GT. ZERZER ) THEN
         COSLBR (1) = PXRES / PTRES
         COSLBR (2) = PYRES / PTRES
         COSLBR (3) = PZRES / PTRES
c  |
c  +-------------------------------------------------------------------*
c  |  It can happen for pion capture for example that ptres=0
c  |  ( it is always 0 if no "direct" particle is emitted )
      ELSE
         COSLBR (1) = ZERZER
         COSLBR (2) = ZERZER
         COSLBR (3) = ONEONE
      END IF
c  |
c  +-------------------------------------------------------------------*
c  The call to getrig is useless, since we actually need no rotation
c     CALL GETRIG ( ZERZER, ZERZER, ONEONE )
      EREC   = GEVMEV * TVRECL
      LFRGMN = .FALSE.
c*sr 19.5.95
c*   the following variables have to be reset here, otherwise the
c*   fission/fragment. loop further down is always entered (even if
c*   "normal" evap. is handled only)
      LFRAGM = .FALSE.
      LRNFSS = .FALSE.
c*
      CALL DT_ERUP(0)
c  +-------------------------------------------------------------------*
c  |  Check for fission/fragmentation: if it occurred loop back on the
c  |  fission fragments to possibly evaporate further particles:
      IF ( FISINH .OR. LFRGMN ) THEN
         LRNFSS = FISINH
         LFRAGM = LFRGMN
         JFISS  = 0
c  |  +----------------------------------------------------------------*
c  |  |  Update the partial counters of evaporated particles
         DO 40 J = 1,6
            NPARTF (J,JFISS) = NPART (J)
            HEVFIS (JFISS)   = HEVSUM
   40    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
c  |  +----------------------------------------------------------------*
c  |  |  The following "do" is not structured as a do since Nfiss can
c  |  |  be incremented during evaporation/fragmentation of the
c  |  |  previously generated fragments
   50    CONTINUE
            FISINH = .FALSE.
            LFRGMN = .FALSE.
            JFISS  = JFISS + 1
            PTRES  = EMVGEV * PPFIS (JFISS)
            EREC   = EKFIS (JFISS)
            APR    = AFIS  (JFISS)
            ZPR    = ZFIS  (JFISS)
            AMMRES = EMVGEV * AMFIS (JFISS)
c*sr 30.6.
            AMNRES = AMMRES - ZPR * AMELCT + ELBNDE ( NINT (ZPR) )
c*
            EX     = MAX ( UFIS (JFISS), ANGLGB )
            COSLBR (1) = COSLFF (1,JFISS)
            COSLBR (2) = COSLFF (2,JFISS)
            COSLBR (3) = COSLFF (3,JFISS)
            ISTRES = ISTFIS (JFISS)
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Possible particle unstable state:
            IF ( ISTRES .LT. 0 ) THEN
               PXRES = COSLBR (1) * PTRES
               PYRES = COSLBR (2) * PTRES
               PZRES = COSLBR (3) * PTRES
c  |  |  |  The call to getrig is useless, since we need no rotation
c              CALL GETRIG ( ZERZER, ZERZER, ONEONE )
               CALL DT_ERUP(JFISS)
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            ELSE
               UU = EX
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            ANOW  = APR
            ZNOW  = ZPR
            ICHLP = NINT (ZNOW)
            IBHLP = NINT (ANOW)
c  |  |  +-------------------------------------------------------------*
c  |  |  |  If we enter this branch the present fragment has been
c  |  |  |  completely evaporated without further fragmentation and
c  |  |  |  it is ready for the final gamma deexcitation and for
c  |  |  |  residual nuclei scoring
            IF ( .NOT. FISINH .AND. .NOT. LFRGMN .AND. IBHLP .GT. 0 )
     &           THEN
               AMTFIS (JFISS) = ANOW * AMUMEV +  DT_ENERGY( ANOW, ZNOW )
               UTFIS  (JFISS) = UU
               RECFIS (JFISS) = EREC
               PPTFIS (JFISS) = SQRT ( EREC * ( EREC + TWOTWO
     &                        * ( AMTFIS (JFISS) + UTFIS (JFISS) ) ) )
               ATFIS  (JFISS) = ANOW
               ZTFIS  (JFISS) = ZNOW
               ISTFIS (JFISS) = ISTRES
               COSLFF (1,JFISS) = COSLBR (1)
               COSLFF (2,JFISS) = COSLBR (2)
               COSLFF (3,JFISS) = COSLBR (3)
               ETEVAP = ETEVAP + EMVGEV * ( EREC + AMTFIS (JFISS)
     &                + UTFIS (JFISS) )
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Fragment furtherly fragmented or completely evaporated into
c  |  |  |  p,n,d,t,3-He and alphas
            ELSE
               LRNFSS = LRNFSS .OR. FISINH
               LFRAGM = LFRAGM .OR. LFRGMN
               FISINH = .FALSE.
               LFRGMN = .FALSE.
               ATFIS  (JFISS) = ZERZER
               ZTFIS  (JFISS) = ZERZER
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Update the partial counters of evaporated particles
            DO 60 J = 1,6
               NPARTF (J,JFISS) = NPART (J)
               HEVFIS (JFISS)   = HEVSUM
   60       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
         IF ( JFISS .LT. NFISS ) GO TO 50
c  |  |
c  |  +----------------------------------------------------------------*
         FISINH = .FALSE.
         LFRGMN = .FALSE.
      END IF
c  |
c  +-------------------------------------------------------------------*
      IEVNEU = NPART (1)
      IEVPRO = NPART (2)
      IEVDEU = NPART (3)
      IEVTRI = NPART (4)
      IEV3HE = NPART (5)
      IEV4HE = NPART (6)
      IEVAPL = IEVNEU + IEVPRO
      IEVAPH = IEVDEU + IEVTRI + IEV3HE + IEV4HE
c  +-------------------------------------------------------------------*
c  |              Add to the secondary stack the evaporated neutrons
      DO 100 IP = 1, NPART (1)
c/////////////////////KK in rare case; g<1 and k.e becomes <0 
c//////////////////// Energy becomes NaN.  such one gets EPART<0
c/////////// so we dont store it 
         if(EPART(IP,1) .gt. 0.)  then
            NP = NP + 1
            KPART (NP) = 8
            TKI   (NP) = EMVGEV * EPART ( IP, 1 )
            WEI   (NP) = WEE
            CXR   (NP) = COSEVP ( 1, IP, 1 )
            CYR   (NP) = COSEVP ( 2, IP, 1 )
            CZR   (NP) = COSEVP ( 3, IP, 1 )
c*sr 17.5.95
C        PLR   (NP) = SQRT ( TKI (NP) * ( TKI (NP) + TWOTWO * AM (8) ) )
            PLR   (NP) = SQRT ( ABS( TKI (NP) *
     &                     ( TKI (NP) + TWOTWO * AMHEAV (1) ) ) )
            ETEVAP = ETEVAP + TKI (NP) + AMHEAV (1)
         endif
  100 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |              Add to the secondary stack the evaporated protons
      DO 200 IP = 1, NPART (2)
c/////////////////////KK in rare case; g<1 and k.e becomes <0 
c//////////////////// Energy becomes NaN.  such one gets EPART<0
c/////////// so we dont store it 
         if( EPART(IP,2) .gt. 0.) then
            NP = NP + 1
            KPART (NP) = 1
            TKI   (NP) = EMVGEV * EPART ( IP, 2 )
            WEI   (NP) = WEE
            CXR   (NP) = COSEVP ( 1, IP, 2 )
            CYR   (NP) = COSEVP ( 2, IP, 2 )
            CZR   (NP) = COSEVP ( 3, IP, 2 )
c*sr 17.5.95
C        PLR   (NP) = SQRT ( TKI (NP) * ( TKI (NP) + TWOTWO * AM (1) ) )
            PLR   (NP) = SQRT ( TKI (NP) *
     &                     ( TKI (NP) + TWOTWO * AMHEAV (2) ) )
            ETEVAP = ETEVAP + TKI (NP) + AMHEAV (2)
         endif
  200 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |         Add to the heavy stack the other evaporated (if requested)
      IF ( LHEAVY ) THEN
         NPHEAV = 0
c  |  +----------------------------------------------------------------*
c  |  |  Loop over the particle types:
         DO 400 JP = 3, 6
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            DO 300 IP = 1, NPART (JP)
c/////////////////////KK  same as loop 200
               if( EPART(IP, JP) .gt. 0.) then
                  NPHEAV = NPHEAV + 1
                  KHEAVY (NPHEAV) = JP
                  TKHEAV (NPHEAV) = EMVGEV * EPART ( IP, JP )
                  WHEAVY (NPHEAV) = WEE
                  CXHEAV (NPHEAV) = COSEVP ( 1, IP, JP )
                  CYHEAV (NPHEAV) = COSEVP ( 2, IP, JP )
                  CZHEAV (NPHEAV) = COSEVP ( 3, IP, JP )
                  PHEAVY (NPHEAV) = SQRT ( ( TKHEAV (NPHEAV) + TWOTWO
     &                         * AMHEAV (JP) ) * TKHEAV (NPHEAV) )
                  ETEVAP = ETEVAP + TKHEAV (NPHEAV) + AMHEAV (JP)
               endif
  300       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
  400    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
c  |
c  +-------------------------------------------------------------------*
c  |
      ELSE
         NPHEAV = 0
         ETEVAP = ETEVAP + EMVGEV * HEVSUM + DBLE (IEVDEU) * AMHEAV (3)
     &          + DBLE (IEVTRI) * AMHEAV (4)
     &          + DBLE (IEV3HE) * AMHEAV (5)
     &          + DBLE (IEV4HE) * AMHEAV (6)
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Fission and/or fragmentation occurred:
      IF ( LRNFSS .OR. LFRAGM ) THEN
         TVHEAV = EMVGEV * HEVSUM
         IF ( ABS ( ETEVAP - EOTEST )/ EOTEST .GT. 1.D-07 ) THEN
            WRITE ( ErrorOut, * )
     &            ' EVEVAP_FIS: FAILURE IN ENERGY CONSERVATION!!',
     &                        ETEVAP, EOTEST
            WRITE ( ErrorOut, * )
     &            ' EVEVAP_FIS: FAILURE IN ENERGY CONSERVATION!!',
     &                        ETEVAP, EOTEST
         END IF
         TVCHLP = ZERZER
         IDEHLP = 0
c  |  +----------------------------------------------------------------*
c  |  |  Loop on fission/fragmentation fragments
         DO 5000 JFISS = 1, NFISS
            ANOW  = ATFIS (JFISS)
            ZNOW  = ZTFIS (JFISS)
            IBRES = NINT ( ANOW )
            ICRES = NINT ( ZNOW )
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Check the residual nucleus:
            IF ( IBRES .EQ. 0 ) THEN
               AMMRES = ZERZER
c*sr 30.6.
               AMNRES = ZERZER
c*
               TVCMS  = ZERZER
               TVRECL = ZERZER
               PTRES  = ZERZER
               PXRES  = ZERZER
               PYRES  = ZERZER
               PZRES  = ZERZER
               EKRES  = ZERZER
               ERES   = ZERZER
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  real fragment:
            ELSE
               AMMRES = EMVGEV * AMTFIS (JFISS)
               TVCMS  = EMVGEV * UTFIS  (JFISS)
               TVRECL = EMVGEV * RECFIS (JFISS)
               PTRES  = EMVGEV * PPTFIS (JFISS)
               PXRES  = PTRES  * COSLFF (1,JFISS)
               PYRES  = PTRES  * COSLFF (2,JFISS)
               PZRES  = PTRES  * COSLFF (3,JFISS)
               ERES   = AMMRES + TVCMS + TVRECL
               EKRES  = TVRECL
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Check if the deexcitation module have to be called
            IF ( LDEEXG ) THEN
               IDEEXG = 0
               CALL DT_EVDEEX( WEE )
               IDEHLP = IDEHLP + IDEEXG
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            ELSE
               TVCHLP = TVCHLP + TVCMS
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Check if fission fragments have to be put on stack
            IF ( LHEAVY .AND. IBRES .GT. 0 ) THEN
               NPHEAV = NPHEAV + 1
               TKHEAV (NPHEAV) = EKRES
               PHEAVY (NPHEAV) = PTRES
               CXHEAV (NPHEAV) = PXRES / PTRES
               CYHEAV (NPHEAV) = PYRES / PTRES
               CZHEAV (NPHEAV) = PZRES / PTRES
               WHEAVY (NPHEAV) = WEE
               KHEAVY (NPHEAV) = 6 + JFISS
               AMHEAV (KHEAVY(NPHEAV)) = AMMRES
               AMNHEA (KHEAVY(NPHEAV)) = AMMRES - ICRES * AMELCT
     &                                 + ELBNDE (ICRES)
               IBHEAV (KHEAVY(NPHEAV)) = IBRES
               ICHEAV (KHEAVY(NPHEAV)) = ICRES
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            TVHEAV = TVHEAV + TVRECL
 5000    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         IDEEXG = IDEHLP
         TVCMS  = TVCHLP
         ANOW   = ZERZER
         ZNOW   = ZERZER
         IBRES  = 0
         ICRES  = 0
         AMMRES = ZERZER
         TVRECL = ZERZER
         PTRES  = ZERZER
         PXRES  = ZERZER
         PYRES  = ZERZER
         PZRES  = ZERZER
c*sr 30.6.
         EKRES  = ZERZER
c*
         ERES   = ZERZER
c  |
c  +-------------------------------------------------------------------*
c  |  Normal evaporation:
      ELSE
         ANOW  = APR
         ZNOW  = ZPR
         IBRES = NINT ( ANOW )
         ICRES = NINT ( ZNOW )
c  |  Ammres is the atomic mass of the residual nucleus
c  |  +----------------------------------------------------------------*
c  |  |  Check the residual nucleus:
         IF ( IBRES .EQ. 0 ) THEN
            AMMRES = ZERZER
c*sr 30.6.
            AMNRES = ZERZER
c*
            TVCMS  = ZERZER
            TVRECL = ZERZER
            PTRES  = ZERZER
            PXRES  = ZERZER
            PYRES  = ZERZER
            PZRES  = ZERZER
c*sr 30.6.
            EKRES  = ZERZER
c*
            ERES   = ZERZER
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |
         ELSE
            AMMRES = ANOW   * AMUGEV + EMVGEV * DT_ENERGY( ANOW, ZNOW )
c*sr 30.6.
            AMNRES = AMMRES - ZNOW * AMELCT + ELBNDE ( ICRES )
c*
            TVCMS  = EMVGEV * UU
            TVRECL = EMVGEV * EREC
            PTRES  = SQRT ( TVRECL * ( TVRECL + TWOTWO * ( AMMRES +
     &                      TVCMS ) ) )
            PXRES  = PTRES * COSLBR (1)
            PYRES  = PTRES * COSLBR (2)
            PZRES  = PTRES * COSLBR (3)
            ERES   = AMMRES + TVCMS + TVRECL
            EKRES  = TVRECL
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         TVHEAV = EMVGEV * HEVSUM
         ETEVAP = ETEVAP + ERES
         IF ( ABS ( ETEVAP - EOTEST )/ EOTEST .GT. 1.D-07 ) THEN
            WRITE ( ErrorOut, * )
     &            ' EVEVAP: FAILURE IN ENERGY CONSERVATION!!',
     &                        ETEVAP, EOTEST
            WRITE ( ErrorOut, * )
     &            ' NFISS,IBRES,ICRES,(NPART(I),I=1,6)',
     &              NFISS,IBRES,ICRES,(NPART(I),I=1,6)
c////////////////////
            call cpdpmjetinp
c////////////////////
         END IF
c  |   Check if the deexcitation module have to be called
         IF ( LDEEXG ) CALL DT_EVDEEX( WEE )
      END IF
c  |
c  +-------------------------------------------------------------------*
      RETURN
c=== End of subroutine Evevap =========================================*
      END

c*sr 30.6. routine replaced completely
c$ CREATE EXPLOD.FOR
cCOPY EXPLOD
c
c=== explod ===========================================================*
c
CDECK  ID>, DT_EXPLOD
      SUBROUTINE DT_EXPLOD( NPEXPL, AMEXPL, ETOTEX, ETEXPL, PXEXPL,
     &                    PYEXPL, PZEXPL )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     EXPLOD: makes a phase space like explosion out of Npexpl parti-  *
c             cles of masses Amexpl and total energy Etotex. The       *
c             resulting total energies and momenta are stored into     *
c             etexpl and px,y,zexpl. The "explosion" is supposed to    *
c             occur in the CMS of the particles                        *
c                                                                      *
c     Created on 08 february 1995  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 27-may-96     by    Alfredo Ferrari               *
c                                                                      *
c     Input variables:                                                 *
c                                                                      *
c                 Npexpl = number of particles                         *
c              Amexpl(i) = mass of the ith particle, i=1,npexpl        *
c                 Etotex = invariant mass of npexpl particle system    *
c                                                                      *
c     Output variables:                                                *
c                                                                      *
c              Etexpl(i) = (total) energy of the ith particle in the   *
c                          CMS of the npexpl particle system           *
c          Px,y,zexpl(i) = momentum components of the ith particle in  *
c                          the CMS of the npexpl particle system       *
c                                                                      *
c     The unit of energy and momentum is immaterial provided Etotex    *
c     and Amexpl are given in the same units. Of course momenta come   *
c     out in the same unit too                                         *
c                                                                      *
c     Limitations: the number of particles must not exceed Ncycmx+2    *
c                  The efficiency becomes smaller the larger the par-  *
c                  ticle number and the larger the system energy with  *
c                  respect to the total particle mass                  *
c                                                                      *
c----------------------------------------------------------------------*
c
      PARAMETER ( NCYCMX = 10 )
      PARAMETER ( MCYCMX = NCYCMX + 1 )
      DIMENSION PXEXPL (NPEXPL), PYEXPL (NPEXPL), PZEXPL (NPEXPL),
     &          ETEXPL (NPEXPL), AMEXPL (NPEXPL), AMCYCL (MCYCMX),
     &          AMCYMX (MCYCMX), XR2ZMX (NCYCMX),
     &          AMCUMU (0:NCYCMX), RNEXPL (0:NCYCMX)
      LOGICAL LLRNTR
c
c  Statement functions:
      ZXR2MX (U) = ( ( ONEONE - U ) * ( ONEONE + U ) )**2
     &           / ( TWOTWO + TWOTWO * U**2 + SQRT ( ONEONE + U**2
     &           * ( 14.D+00 + U**2 ) ) )
c     XR2FUN (Z,U) = SQRT ( Z * ( ( ( ONEONE - U ) * ( ONEONE + U ) )**2
c    &             + Z * ( Z - TWOTWO - TWOTWO *  U**2 ) ) )
      XR2FUN (Z,U) = SQRT ( MAX ( ZERZER, Z * ( ( ( ONEONE - U )
     &             * ( ONEONE + U ) )**2 + Z * ( Z - TWOTWO - TWOTWO
     &             *  U**2 ) ) ) )
c
c  Preliminary checks:
      AMTOT  = ZERZER
c  +-------------------------------------------------------------------*
c  |  Make a check on the available energy:
      DO 100 I = 1, NPEXPL
         AMTOT = AMTOT + AMEXPL (I)
  100 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Print an error message and stop:
      IF ( AMTOT .GE. ETOTEX ) THEN
         WRITE (ErrorOut,*)' *** Explod: total energy < mass!!',
     &                         ETOTEX, AMTOT, NPEXPL,
     &                        (AMEXPL (I), I=1,NPEXPL)
         WRITE (ErrorOut,*)' *** Explod: total energy < mass!!',
     &                         ETOTEX, AMTOT, NPEXPL,
     &                        (AMEXPL (I), I=1,NPEXPL)
         STOP 'STOP:EXPLOD-AMTOT-ETOTEX'
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Print an error message and stop:
      IF ( NPEXPL .GT. NCYCMX + 2 ) THEN
         WRITE (ErrorOut,*)' *** Explod: too many particles!!',
     &                         NPEXPL, NCYCMX + 2
         STOP 'STOP:EXPLOD-NPEXPL-NCYCMX'
      END IF
c  |
c  +-------------------------------------------------------------------*
c  Total available kinetic energy:
      EKAVAI = ETOTEX - AMTOT
c  Minimum (kinetic) energy requested for each two body combination:
      EKNCMN = MIN ( CSNNRM * AMTOT, 0.05D+00 * EKAVAI / DBLE (NPEXPL) )
      LLRNTR = .FALSE.
      ETAX   = ZERZER
      ETAY   = ZERZER
      ETAZ   = ZERZER
      GAMMA  = ONEONE
      NCURR  = NPEXPL
c  Energy of the current batch of particles in their own CMS
      ECMCUR = ETOTEX
      IF ( NCURR .LE. 2 ) GO TO 6000
c-->-->-->-->--> go directly to make a 2-body decay
      NCYCLE = NPEXPL - 2
c  Preliminary operations:
      AMCYMX (1) = EKAVAI + AMEXPL (1) + AMEXPL (2)
      AMCUMU (0) = AMEXPL (1)
c  +-------------------------------------------------------------------*
c  |  Set up the mass cumulative array:
      DO 1600 I = 1, NCYCLE
         J = I + 1
c  |  This is Sum m_k, k=1,j
         AMCUMU (I)   = AMCUMU (I-1) + AMEXPL (J)
         AMCYMX (I+1) = AMCYMX (I)   + AMEXPL (J+1)
         UMU    = AMEXPL (J+1) / AMCYMX (I+1)
         ZILOW  = ( AMCUMU (I) / AMCYMX (I+1) )**2
         ZIHGH  = ( ONEONE - UMU )**2
         ZIMAX  = ZXR2MX (UMU)
c  |  +----------------------------------------------------------------*
c  |  |  The allowed interval is beyond the (local) maximum
         IF ( ZILOW .GT. ZIMAX ) THEN
            XR2ZMX (I) = XR2FUN (ZILOW,UMU)
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  The allowed interval is before the function (local) maximum
         ELSE IF ( ZIHGH .LT. ZIMAX ) THEN
            XR2ZMX (I) = XR2FUN (ZIHGH,UMU)
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  The function (local) maximum is inside the allowed interval
         ELSE
            XR2ZMX (I) = XR2FUN (ZIMAX,UMU)
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
 1600 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      AMCYCL (NCYCLE+1) = ETOTEX
c  Should be already there but for rounding...:
      AMCYMX (NCYCLE+1) = ETOTEX
      UMUNM1 = AMEXPL (NPEXPL) / AMCYCL (NCYCLE+1)
      ZNM1LW = ( AMCUMU (NCYCLE) / AMCYCL (NCYCLE+1) )**2
      ZNM1HG = ( ONEONE - UMUNM1 )**2
      ZNM1MX = ZXR2MX (UMUNM1)
c  +-------------------------------------------------------------------*
c  |  The allowed interval is beyond the maximum
      IF ( ZNM1LW .GT. ZNM1MX ) THEN
         XR2ZMX (NCYCLE) = XR2FUN (ZNM1LW,UMUNM1)
c  |
c  +-------------------------------------------------------------------*
c  |  The allowed interval is before the function (local) maximum
      ELSE IF ( ZNM1HG .LT. ZNM1MX ) THEN
         XR2ZMX (NCYCLE) = XR2FUN (ZNM1HG,UMUNM1)
c  |
c  +-------------------------------------------------------------------*
c  |  The function (local) maximum is inside the allowed interval
      ELSE
         XR2ZMX (NCYCLE) = XR2FUN (ZNM1MX,UMUNM1)
      END IF
c  |
c  +-------------------------------------------------------------------*
      XR2M12 = SQRT ( ONEONE + ( ( AMEXPL (1) + AMEXPL (2) )
     &       * ( AMEXPL (1) - AMEXPL (2) ) / AMCYMX (1)**2 )**2
     &       - TWOTWO * ( AMEXPL (1)**2 + AMEXPL (2)**2 )
     &       / AMCYMX (1)**2 )
c  +-------------------------------------------------------------------*
c  |  (Possible) rejection loop:
 2000 CONTINUE
c*sr 18.5. replaced by usual random-number generator
C        CALL RM48 ( RNEXPL (0), NCYCLE + 1 )
c  |  +----------------------------------------------------------------*
c  |  |  Equivalent loop:
         DO 2300 I = 0, NCYCLE
            RNEXPL (I) = DT_RNDM(ECMCUR)
 2300    CONTINUE
c*
c  |  |
c  |  +----------------------------------------------------------------*
         RNREJE = RNEXPL (0)
c  |  +----------------------------------------------------------------*
c  |  |  Ordering loop:
         DO 2500 I = 1, NCYCLE - 1
            DO 2400 J = I + 1, NCYCLE
               IF ( RNEXPL (J) .LT. RNEXPL (I) ) THEN
                  RNEXPL (0) = RNEXPL (I)
                  RNEXPL (I) = RNEXPL (J)
                  RNEXPL (J) = RNEXPL (0)
               END IF
 2400       CONTINUE
 2500    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         EKNCYC = RNEXPL (NCYCLE) * EKAVAI
c  |  The following card is just for rounding, to reject from the very
c  |  beginning configurations very close to the mass limit for which
c  |  phase space factors will anyway come out practically 0, but
c  |  with good chances to go into rounding.
         IF ( EKNCYC .LT. EKNCMN ) GO TO 2000
c  |  This is M_n-1
         AMCYCL (NCYCLE) = EKNCYC + AMCUMU (NCYCLE)
         ZREJE  = ( AMCYCL (NCYCLE) / AMCYCL (NCYCLE+1) )**2
c  |  Compute the M_j R2(M_j+1,M_j,m_j+1) factor for the selected M_j,
c  |  for j=n-1
         XR2NOW = XR2FUN (ZREJE,UMUNM1)
         FREJE  = XR2NOW / XR2ZMX (NCYCLE)
         IF ( RNREJE .GE. FREJE ) GO TO 2000
         RNREJE = RNREJE / FREJE
c  |  +----------------------------------------------------------------*
c  |  |  Create the Ncycle invariant masses for the intermediate mass
c  |  |  states
         DO 2600 I = NCYCLE - 1, 1, -1
            J = I + 1
c  |  |  Check the ordering loop:
            IF ( RNEXPL (I) .GT. RNEXPL (I+1) ) STOP 'STOP:EXPLOD-ORDER'
            EKNCYC = RNEXPL (I) * EKAVAI
c  |  |  The following card is just for rounding, to reject from the
c  |  |  very beginning configurations very close to the mass limit for
c  |  |  which phase space factors will anyway come out practically 0,
c  |  |  but with good chances to go into rounding.
            IF ( EKNCYC .LT. EKNCMN ) GO TO 2000
c  |  |  This is M_j
            AMCYCL (I) = EKNCYC + AMCUMU (I)
            UMU    = AMEXPL (J+1) / AMCYCL (I+1)
            ZREJE  = ( AMCYCL (I) / AMCYCL (I+1) )**2
c  |  |  Compute the M_j R2(M_j+1,M_j,m_j+1) factor for M_j
            XR2NOW = XR2FUN (ZREJE,UMU)
            FREJE  = XR2NOW / XR2ZMX (I)
c  |  |  Take into account the factor M_j+1:
            FREJE  = FREJE * AMCYCL (I+1) / AMCYMX (I+1)
            IF ( RNREJE .GE. FREJE ) GO TO 2000
            RNREJE = RNREJE / FREJE
 2600    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         XR2NOW = SQRT ( ONEONE + ( ( AMEXPL (1) + AMEXPL (2) )
     &          * ( AMEXPL (1) - AMEXPL (2) ) / AMCYCL (1)**2 )**2
     &          - TWOTWO * ( AMEXPL (1)**2 + AMEXPL (2)**2 )
     &          / AMCYCL (1)**2 )
         FREJE  = XR2NOW / XR2M12
      IF ( RNREJE .GE. FREJE ) GO TO 2000
c  |                                        end of the rejection loop:
c  +-------------------------------------------------------------------*
      ICYCLE = NCYCLE
      NCURR  = NPEXPL
c  Energy of the current batch of particles in their own CMS
      ECMCUR = ETOTEX
c  +-------------------------------------------------------------------*
c  |  Main loop: at each cycle the number of particles to be
c  |  considered is diminished by one, till it reaches two
c  |  Icycle = cycle index, 0 < Icycle =< n-2
c  |  J = Icycle + 1, 1 < J =< n-1
c  |  At each cycle particle j+1 is "ejected" in a two body decay with
c  |  the second particle being M_j, made up of the particles from 1 toj
 3000 CONTINUE
c  |  +----------------------------------------------------------------*
c  |  |  It should never occur, however with many cycles rounding
c  |  |  could create problems:
         IF ( ECMCUR .LE. AMCYCL (ICYCLE) + AMEXPL (ICYCLE+2) ) THEN
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Problems:
            IF ( ECMCUR .LE. ONEMNS * ( AMCYCL (ICYCLE)
     &         + AMEXPL (ICYCLE+2) ) ) THEN
               WRITE (ErrorOut,*)
     &      ' *** PROBABLE ROUNDING PROBLEM IN EXPLOD ***'
               WRITE (ErrorOut,*)
     &      ' ECMCUR,NCURR,AMCYCL(ICYCLE),AMEXPL(ICYCLE+2),NPEXPL',
     &        ECMCUR,NCURR,AMCYCL(ICYCLE),AMEXPL(ICYCLE+2),NPEXPL,
     &      ' EKAVAI,EKNCMN,ICYCLE,AMEXPL(K)',
     &        EKAVAI,EKNCMN,ICYCLE,(AMEXPL(K),K=1,NPEXPL)
               WRITE (ErrorOut,*)
     &            ' *** PROBABLE ROUNDING PROBLEM IN EXPLOD ***'
               WRITE (ErrorOut,*)
     &      ' ECMCUR,NCURR,AMCYCL(ICYCLE),AMEXPL(ICYCLE+2),NPEXPL',
     &        ECMCUR,NCURR,AMCYCL(ICYCLE),AMEXPL(ICYCLE+2),NPEXPL,
     &      ' EKAVAI,EKNCMN,ICYCLE,AMEXPL(K)',
     &        EKAVAI,EKNCMN,ICYCLE,(AMEXPL(K),K=1,NPEXPL)
               GO TO 2000
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            J      = ICYCLE + 1
c  |  |  Please note that J1 is identically equal to Ncurr....
            J1     = J + 1
c  |  |  Two body decay m_j+1 - M_j:
            ECMSJ1 = AMEXPL (J1)
            ECMSJ  = AMCYCL (ICYCLE)
            PCMS   = ZERZER
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Normal situation:
         ELSE
            J      = ICYCLE + 1
c  |  |  Please note that J1 is identically equal to Ncurr....
            J1     = J + 1
c  |  |  Two body decay m_j+1 - M_j:
            ECMSJ1 = HLFHLF * ( ECMCUR + ( AMEXPL (J1) - AMCYCL (ICYCLE)
     &             ) * ( AMEXPL (J1) + AMCYCL (ICYCLE) ) / ECMCUR )
            ECMSJ  = ECMCUR - ECMSJ1
            PCMS   = SQRT ( ( ECMSJ1 - AMEXPL (J1) )
     &                    * ( ECMSJ1 + AMEXPL (J1) ) )
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         CALL DT_RACO( PXCMS, PYCMS, PZCMS )
         PXCMS  = PXCMS * PCMS
         PYCMS  = PYCMS * PCMS
         PZCMS  = PZCMS * PCMS
c  |  +----------------------------------------------------------------*
c  |  |  Transform back to the original system if required:
         IF ( LLRNTR ) THEN
            ETAPCM      = ETAX   * PXCMS  + ETAY * PYCMS + ETAZ * PZCMS
            ETEXPL (J1) = GAMMA  * ECMSJ1 + ETAPCM
            PHELP       = ECMSJ1 + ETAPCM / ( GAMMA + ONEONE )
            PXEXPL (J1) = PXCMS  + ETAX * PHELP
            PYEXPL (J1) = PYCMS  + ETAY * PHELP
            PZEXPL (J1) = PZCMS  + ETAZ * PHELP
            ETAPCM      =-ETAPCM
            ETCURR      = GAMMA  * ECMSJ  + ETAPCM
            PHELP       = ECMSJ  + ETAPCM / ( GAMMA + ONEONE )
            PXCURR      =-PXCMS  + ETAX * PHELP
            PYCURR      =-PYCMS  + ETAY * PHELP
            PZCURR      =-PZCMS  + ETAZ * PHELP
            PTCURR      = SQRT ( PXCURR**2 + PYCURR**2 + PZCURR**2 )
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  No transformation required:
         ELSE
            ETEXPL (J1) = ECMSJ1
            PXEXPL (J1) = PXCMS
            PYEXPL (J1) = PYCMS
            PZEXPL (J1) = PZCMS
            ETCURR      = ECMSJ
            PXCURR      =-PXCMS
            PYCURR      =-PYCMS
            PZCURR      =-PZCMS
            PTCURR      = PCMS
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  In principle it is useless, it must give amcycl(icycle), but
c  |  for safety against rounding (in principle it would be better
c  |  the opposite operation, that is, leave Ecmcur=Amcycl and get rid
c  |  of rounding on momenta computing the momentum modulus from
c  |  Amcycl and Etcurr. However for non relativistic situations
c  |  a lot of rounding would come out in the calculation of the
c  |  momentum):
         ECMCUR = SQRT ( ( ETCURR - PTCURR ) * ( ETCURR + PTCURR ) )
         GAMMA  = ETCURR / ECMCUR
         ETAX   = PXCURR / ECMCUR
         ETAY   = PYCURR / ECMCUR
         ETAZ   = PZCURR / ECMCUR
         LLRNTR = .TRUE.
         ICYCLE = ICYCLE - 1
         NCURR  = NCURR  - 1
      IF ( NCURR .GT. 2 ) GO TO 3000
c  |
c  +-------------------------------------------------------------------*
c === Two body decay m_1 - m_2: === *
 6000 CONTINUE
      ECMS1  = HLFHLF * ( ECMCUR + ( AMEXPL (1) - AMEXPL (2) )
     &       * ( AMEXPL (1) + AMEXPL (2) ) / ECMCUR )
      ECMS2  = ECMCUR - ECMS1
      PCMS   = SQRT ( ( ECMS2 - AMEXPL (2) ) * ( ECMS2 + AMEXPL (2) ) )
      CALL DT_RACO( PXCMS, PYCMS, PZCMS )
      PXCMS  = PXCMS * PCMS
      PYCMS  = PYCMS * PCMS
      PZCMS  = PZCMS * PCMS
c  +-------------------------------------------------------------------*
c  |  Transform back to the original system if required:
      IF ( LLRNTR ) THEN
         ETAPCM     = ETAX * PXCMS + ETAY * PYCMS + ETAZ * PZCMS
         ETEXPL (1) = GAMMA * ECMS1  + ETAPCM
         PHELP      = ECMS1 + ETAPCM / ( GAMMA + ONEONE )
         PXEXPL (1) = PXCMS + ETAX * PHELP
         PYEXPL (1) = PYCMS + ETAY * PHELP
         PZEXPL (1) = PZCMS + ETAZ * PHELP
         ETAPCM     =-ETAPCM
         ETEXPL (2) = GAMMA * ECMS2  + ETAPCM
         PHELP      = ECMS2 + ETAPCM / ( GAMMA + ONEONE )
         PXEXPL (2) =-PXCMS + ETAX * PHELP
         PYEXPL (2) =-PYCMS + ETAY * PHELP
         PZEXPL (2) =-PZCMS + ETAZ * PHELP
c  |
c  +-------------------------------------------------------------------*
c  |  No transformation required:
      ELSE
         ETEXPL (1) = ECMS1
         PXEXPL (1) = PXCMS
         PYEXPL (1) = PYCMS
         PZEXPL (1) = PZCMS
         ETEXPL (2) = ECMS2
         PXEXPL (2) =-PXCMS
         PYEXPL (2) =-PYCMS
         PZEXPL (2) =-PZCMS
      END IF
c  |
c  +-------------------------------------------------------------------*
      ETEPS  = TENTEN * CSNNRM * ETOTEX
      ECHCK  = ETOTEX
      PXCHCK = ZERZER
      PYCHCK = ZERZER
      PZCHCK = ZERZER
c  +-------------------------------------------------------------------*
c  |  Compute energy and momentum conservation:
      DO 7000 K = 1, NPEXPL
         ECHCK  = ECHCK  - ETEXPL (K)
         PXCHCK = PXCHCK - PXEXPL (K)
         PYCHCK = PYCHCK - PYEXPL (K)
         PZCHCK = PZCHCK - PZEXPL (K)
 7000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Check energy and momentum conservation:
      IF ( ABS (ECHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &    .GT. ETEPS  ) THEN
         WRITE (ErrorOut,*)
     &         ' *** EXPLOD:ENERGY OR MOMENTUM CONSERVATION FAILURE:'
         WRITE (ErrorOut,*)
     &         ' NPEXPL,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK',
     &           NPEXPL,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK
      END IF
c  |
c  +-------------------------------------------------------------------*
c=== End of subroutine Explod =========================================*
      RETURN
      END
c*

c$ CREATE FISFRA.FOR
cCOPY FISFRA
c
c=== fisfra ===========================================================*
c
CDECK  ID>, DT_FISFRA
      SUBROUTINE DT_FISFRA( JA, JZ, U, EREC, UMO, GAMCM, ETACM )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c  FISsion FRAgments emission:                                         *
c                                                                      *
c                                                                      *
c      Subroutine to pick post fission parameters for nucleus          *
c      JZ,JA excited to U and recoiling with Erec.                     *
c                                                                      *
c  Created  on  08 april 1993  by  A.Ferrari & P.Sala, INFN - Milan    *
c                                                                      *
c  Last change  on  16-feb-95  by  Alfredo Ferrari, INFN - Milan       *
c                                                                      *
c  This routine is just the equivalent of the routines FISSED and      *
c  FISDIS of LAHET, taken thanks to R.E.Prael                          *
c                                                                      *
c  Input variables:                                                    *
c     JA = Mass number of the fissioning nucleus                       *
c     JZ = Atomic number of the fissioning nucleus                     *
c     U  = Excitation energy (MeV) of the fissioning nucleus           *
c     Erec = Recoil kinetic energy (MeV) of the residual nucleus       *
c            The recoil direction is given by Coslf0 (i)               *
c     Umo  = invariant mass of the fissioning system (mass+excitation) *
c     Gamcm= CMS Lorentz boost "gamma"                                 *
c     Etacm= CMS Lorentz boost "eta"                                   *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: HIGFIS)
      PARAMETER ( IZFSMX = 61 )
      LOGICAL FISINH, LFRGMN, LAGOES
      COMMON /FKHIGF/ AFIS  (10), ZFIS  (10), UFIS  (10), EKFIS  (10),
     &                AMFIS (10), PPFIS (10), COSLFF(3,0:10),
     &                ATFIS (10), ZTFIS (10), UTFIS (10), RECFIS (10),
     &                AMTFIS(10), PPTFIS(10), EBFISS, AMDIFF,
     &                APR0, ZPR0, EREC0, UU0, HEVFIS (0:10),
     &                ISTFIS(10), NPARTF (6,0:10), NFISS, FISINH,
     &                LFRGMN, LAGOES
      DIMENSION COSLF0 (3)
      EQUIVALENCE ( COSLF0 (1), COSLFF (1,0) )

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c
      PARAMETER ( AMUMEV = 1.D+03 * AMUAMU )
      DIMENSION C (3), EVODBA (4)
c//////////////// K.K
c      SAVE EVODBA, SIGMAA, AAMEAN
c///////////
c  Asym gauss width, 1/level density parameter and high mass mean.
      DATA SIGMAA, AAMEAN /6.5D+00,140.D+00/
c  Mass diff from 1 amu for neutron,diff p & n masses and n mass
c     DATA AFACT, ZFACT, ENMASS /8.3674D+00,0.7826D+0,939.5124D+00/
c  +-------------------------------------------------------------------*
c  |  Check for the logical flag for HE fission:
      IF ( .NOT. FISINH ) THEN
         WRITE (ErrorOut,60) JA,JZ,U,EREC
         WRITE (ErrorOut,60) JA,JZ,U,EREC
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
      Z = JZ
      A = JA
      NFISS1 = NFISS + 1
      NFISS2 = NFISS + 2
      NCK2   = 0
c  Loop here from any rejection: ten trials at maximum are allowed
   10 CONTINUE
      NCK2 = NCK2 + 1
c  +-------------------------------------------------------------------*
c  |  Check for fission failure:
      IF ( NCK2 .GT. 10 ) THEN
         WRITE (ErrorOut,
     * 50) JA,JZ,U,EREC,ZFIS(NFISS1),AFIS(NFISS1),
     &                     ZFIS(NFISS2),AFIS(NFISS2)
         FISINH = .FALSE.
         RETURN
      END IF
c  |
c  +-------------------------------------------------------------------*
c  Temp = fissility
      TEMP = Z * Z / A
c  +-------------------------------------------------------------------*
c  |  Fissility =< 35
      IF ( TEMP .LE. 35.D+00 ) THEN
         IF ( JZ .LE. 88 ) GO TO 20
c  |
c  +-------------------------------------------------------------------*
c  |  Excitation energy =< 62 MeV: assymmetric vs symmetric fission
c  |  competition is allowed
      ELSE IF ( U .LE. 62.D+00 ) THEN
c  |  High Z fission mass distribution. competition for sym vs assym
c  |  simple symmetric to assymmetric data fit
         ARG = -0.36D+00 * U
         ARG = +4.87D+03 * EXP(ARG)
c  |  Asymm probability
         PROBA = ARG / ( ONEONE + ARG )
c  |  +----------------------------------------------------------------*
c  |  |  Assymmetric fission:
         IF ( DT_RNDM(ARG) .LT. PROBA ) THEN
            CALL DT_NORRAN(A1)
c  |  |  1st fragment mass: gaussian distributed around Aamean with
c  |  |                     variance Sigmaa
            A1 = AAMEAN + SIGMAA * A1
            GO TO 30
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
      END IF
c  |
c  +-------------------------------------------------------------------*
c  Find assymetric barrier for width computation
c  assymetric barrier from Seaborg and Vandenbosch
c  Phys.Rev. 88,507 (1952) Phys.Rev. 110,507 (1958)
c  find if EE EO OE or OO nucleus
c  Na=1 odd-odd,2 even-odd,3 odd-even,4 even-even
      IN = JA - JZ
      NA = 1
      JZODD = MOD ( JZ, 2 )
      IF ( JZODD .EQ. 0 ) NA = NA + 1
      INODD = MOD ( IN, 2 )
      IF ( INODD .EQ. 0 ) NA = NA + 2
      TEMP   = Z * Z / A
c  Fission barrier:
      EBFISS = EVODBA (NA) - 0.36D+00 * TEMP
c  Come here with the fission barrier already computed by fprob
c  for "low" fissility and low Z nuclei
   20 CONTINUE
      UPR = MIN ( U-EBFISS, 1.D+02 )
      SIGMAS = 0.425D+00 * ( UPR * ( ONEONE - 0.005D+00*UPR) + 9.35D+00)
c  Sigmas is symmetric fission mass width taken from systematic of
c  Neuzil & Fairhall Phys.Rev. 129,2705,(1963)
c
c  *** Low Z fission is always symmetric
c
c  *** High Z fission is sometimes.loop back here from 1 loop if
c  *** symmetric fission predicted.
c
      ASMEAN = HLFHLF * A
      CALL DT_NORRAN(A1)
c  1st fragment mass: gaussian distributed around A/2 with
c                     variance Sigmas
      A1 = ASMEAN + A1 * SIGMAS
c  Come here for high Z/fissility for U =< 62 MeV and assymmetric
c  fission selected:
   30 CONTINUE
c  1 loop for assymmetric fission returns to here.
      IHLP = NINT (A1)
      AFIS (NFISS1) = DBLE (IHLP)
c  Check for low final a
      IF ( AFIS (NFISS1) .LT. FIVFIV ) AFIS (NFISS1) = FIVFIV
      IF ( A-AFIS(NFISS1).LT. FIVFIV ) AFIS (NFISS1) = A - FIVFIV
      AFIS (NFISS2) = A - AFIS (NFISS1)
c  Pick the charge
      Z1 = 65.5D+00 * AFIS(NFISS1) / ( 131.D+00 + AFIS(NFISS1)**TWOTHI )
      Z2 = 65.5D+00 * AFIS(NFISS2) / ( 131.D+00 + AFIS(NFISS2)**TWOTHI )
c  This card actually "averages" the above choiches for Z1 and Z2
      Z1 = Z1 + HLFHLF * ( Z - Z1 - Z2 )
c  We use constant charge density with a 2 unit gaussian smearing
      CALL DT_NORRAN(ZHLP)
c  Gaussian choiche centered on Z1 with variance of 2 units
      Z1   = Z1 + TWOTWO * ZHLP
      IHLP = NINT (Z1)
      ZFIS (NFISS1) = DBLE (IHLP)
      ZFIS (NFISS2) = Z - ZFIS (NFISS1)
c  Check for reasonable Z/A combinations:
      IF ( ZFIS (NFISS1) .GE. AFIS (NFISS1) ) GO TO 10
      IF ( ZFIS (NFISS2) .GE. AFIS (NFISS2) ) GO TO 10
      IF ( ZFIS (NFISS1) .LT. ONEMNS ) GO TO 10
      IF ( ZFIS (NFISS2) .LT. ONEMNS ) GO TO 10
c  Compute actual masses of fragments
      AMFIS (NFISS1) = AFIS (NFISS1) * AMUMEV +DT_ENERGY(AFIS(NFISS1),
     &                 ZFIS (NFISS1) )
      AMFIS (NFISS2) = AFIS (NFISS2) * AMUMEV +DT_ENERGY(AFIS(NFISS2),
     &                 ZFIS (NFISS2) )
c  Total "available" energy in the CMS:
      ETAVAI = UMO - AMFIS (NFISS1) - AMFIS (NFISS2)
c  Pick recoil kinetic energy.use systematic of ...........
c  Unik et.al. Proc.3rd IAEA Symp.on phy.& chem. fission,Rochester.vo
      TOTKM  = 0.13323D+00 * Z * Z / A**ONETHI - 11.4D+00
c  Use a width of 15% value at half height.
      SIGMAK = 0.084D+00 * TOTKM
c  Check event is energetically possible
      NCK = 0
c  +-------------------------------------------------------------------*
c  |  Loop here to select the total kinetic energy
   40 CONTINUE
         CALL DT_NORRAN(TOTKE)
         TOTKE = TOTKM + TOTKE * SIGMAK
         IF ( NCK .GT. 10 ) GO TO 10
         NCK = NCK + 1
      IF ( TOTKE .GT. ETAVAI ) GO TO 40
c  |
c  +-------------------------------------------------------------------*
c  Pick excitation from equidistribution of original plus energy balance
      TEMP = ( ETAVAI - TOTKE ) / A
      UFIS (NFISS1) = AFIS (NFISS1) * TEMP
      UFIS (NFISS2) = AFIS (NFISS2) * TEMP
c  Find total masses, including excitation energies, at evap time
      AMCMS1 = AMFIS (NFISS1) + UFIS (NFISS1)
      AMCMS2 = AMFIS (NFISS2) + UFIS (NFISS2)
      AMDIFF = UMO - AMCMS1 - AMCMS2
c  Amdiff= Totke should be satisfied
      IF ( AMDIFF .LT. ZERZER ) GO TO 40
      UMO2 = UMO * UMO
c 1st fragment total energy in the CMS
      ECMS1 = HLFHLF * ( UMO2 + AMCMS1**2 - AMCMS2**2 ) / UMO
c 2nd fragment total energy in the CMS
      ECMS2 = HLFHLF * ( UMO2 - AMCMS1**2 + AMCMS2**2 ) / UMO
c  C(i) are the direction cosines of the 1st fragment
c  in the CMS frame, of course - C(i)
c  are the ones of the 2nd fragment
      CALL DT_RACO(C(1),C(2),C(3))
      PCMS  = SQRT ( ( ECMS1 - AMCMS1 ) * ( ECMS1 + AMCMS1 ) )
c  Now we perform the Lorentz transformation back to the original
c  frame (lab frame)
c  First the 1st fragment:
      ETAX = ETACM * COSLF0 (1)
      ETAY = ETACM * COSLF0 (2)
      ETAZ = ETACM * COSLF0 (3)
      PCMSX = PCMS * C (1)
      PCMSY = PCMS * C (2)
      PCMSZ = PCMS * C (3)
      ETAPCM = PCMSX * ETAX + PCMSY * ETAY + PCMSZ * ETAZ
      EKFIS (NFISS1) = GAMCM * ECMS1 + ETAPCM - AMCMS1
      PHELP = ETAPCM / ( GAMCM + ONEONE ) + ECMS1
      PLBPX = PCMSX + ETAX * PHELP
      PLBPY = PCMSY + ETAY * PHELP
      PLBPZ = PCMSZ + ETAZ * PHELP
      PHELP = SQRT (PLBPX * PLBPX + PLBPY * PLBPY + PLBPZ * PLBPZ)
      COSLFF (1,NFISS1) = PLBPX / PHELP
      COSLFF (2,NFISS1) = PLBPY / PHELP
      COSLFF (3,NFISS1) = PLBPZ / PHELP
      PPFIS (NFISS1) = PHELP
c  Then the residual nucleus ( for it c (i) --> - c (i) ):
      EKFIS (NFISS2) = GAMCM * ECMS2 - ETAPCM - AMCMS2
      PHELP = - ETAPCM / ( GAMCM + ONEONE ) + ECMS2
      PLBPX = - PCMSX + ETAX * PHELP
      PLBPY = - PCMSY + ETAY * PHELP
      PLBPZ = - PCMSZ + ETAZ * PHELP
      PHELP = SQRT (PLBPX * PLBPX + PLBPY * PLBPY + PLBPZ * PLBPZ)
      COSLFF (1,NFISS2) = PLBPX / PHELP
      COSLFF (2,NFISS2) = PLBPY / PHELP
      COSLFF (3,NFISS2) = PLBPZ / PHELP
      PPFIS (NFISS2) = PHELP
c  +-------------------------------------------------------------------*
c  |  Set up a few variables in the common Higfis:
      IF ( NFISS .EQ. 0 ) THEN
         APR0   = A
         ZPR0   = Z
         EREC0  = EREC
         UU0    = U
      END IF
c  |
c  +-------------------------------------------------------------------*
c  Set up a flag these fission fragments are not
c  "particle stable states"
      ISTFIS (NFISS1) = -1
      ISTFIS (NFISS2) = -1
c  Update the fission fragment counter:
      NFISS = NFISS2
      RETURN
c=== Fisfra ===========================================================*
   50 FORMAT (' --> FISSION FAILED: JA=',I5,'  JZ=',I5/'-       U=',1PE1
     1 0.3,'      EREC=',E10.3/'    ZFIS1=',E10.3,'     AFIS1=',E10.3/'
     2   ZFIS2=',E10.3,'     AFIS2=',E10.3)
   60 FORMAT (//'  LOGIC ERROR IN FISFRA.CALLED WITH FISINH FLAG',' UNSE
     1T.',2I10,2F10.5)
      END

c$ CREATE DT_FPROB.FOR
cCOPY DT_FPROB
c
c=== fprob ============================================================*
c
CDECK  ID>, DT_FPROB
      DOUBLE PRECISION FUNCTION DT_FPROB(Z,A,U)

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c  Fission PROBability:                                                *
c                                                                      *
c  Created  on  8 april 1993   by     Alfredo Ferrari & Paola Sala     *
c                                                INFN - Milan          *
c                                                                      *
c  Last change  on  26-jul-94  by  Alfredo Ferrari, INFN - Milan       *
c                                                                      *
c  This function is just a translation into Fluka of the same function *
c  of LAHET kindly provided by R.E. Prael                              *
c                                                                      *
c     Input variables:                                                 *
c                       Z = present nucleus atomic number              *
c                       A =    "       "     mass    '  &&  KK '       *
c                       U =    "       "    excitation energy (MeV)    *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: HIGFIS)
      PARAMETER ( IZFSMX = 61 )
      LOGICAL FISINH, LFRGMN, LAGOES
      COMMON /FKHIGF/ AFIS  (10), ZFIS  (10), UFIS  (10), EKFIS  (10),
     &                AMFIS (10), PPFIS (10), COSLFF(3,0:10),
     &                ATFIS (10), ZTFIS (10), UTFIS (10), RECFIS (10),
     &                AMTFIS(10), PPTFIS(10), EBFISS, AMDIFF,
     &                APR0, ZPR0, EREC0, UU0, HEVFIS (0:10),
     &                ISTFIS(10), NPARTF (6,0:10), NFISS, FISINH,
     &                LFRGMN, LAGOES
      DIMENSION COSLF0 (3)
      EQUIVALENCE ( COSLF0 (1), COSLFF (1,0) )

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

C
C   FUNCTION TO COMPUTE THE FISSION PROBABILITY.
C     FOR Z<90 USES ..........
C    USES STATISTICAL MODEL FITS.
C
      PARAMETER (LNFIS=18)
      DIMENSION SLOPE(LNFIS), ANORT(LNFIS)
cc/////////////KK
ccc      SAVE A1, A2, A3, CONST, SLOPE, ANORT
Ccc     SAVE C1, C2, C3
c///////
      DATA A1, A2, A3, CONST /0.2185024D0,16.70314D0,321.175D0,
     & 0.3518099D0/
C     DATA C1, C2, C3 /1.089257D0,0.01097896D0,31.08551D0/
C     FORZ> 89 AND <100 ........
C     USE THE SYSTEMATICS OF VANDENBOSCH & HUIZENGA WITH A BALL PARK
C     OBSERVATION THAT FISSION PROBABILITY DROPS FOR MOST NUCLEI
C     AT 6 MeV
      DATA SLOPE /0.23D0,0.233D0,0.12225D0,0.14727D0,0.13559D0,0.15735D0
     1 ,0.16597D0,0.17589D0,0.18018D0,0.19568D0,0.16313D0,0.17123D0,
     2 6*0.17D0/
C     DATA ANORT /221.6,226.9,229.75,234.04,238.88,241.34,243.04,245.52,
C    1 246.84,250.18,254.0,257.8/
      DATA ANORT /219.4D0,226.9D0,229.75D0,234.04D0,238.88D0,241.34D0,
     1 243.04D0,245.52D0,246.84D0,250.18D0,254.0D0,257.8D0,261.3D0,
     2 264.8D0,268.3D0,271.8D0,275.3D0,278.8D0/
c
      DT_FPROB = ZERZER
      JZ    = NINT (Z)
      JA    = NINT (A)
c  +-------------------------------------------------------------------*
c  |  High Z fission probability: a simple expression of the kind
c  |  Gamma_neutron / Gamma_fission = 10^( s(z) x ( A - Af(z) ) is
c  |  used provided U >= 6 MeV. Please note that no explicit excitation
c  |  energy dependence is used!!!!
      IF ( JZ .GT. 88 ) THEN
         JZ = JZ - 88
         IF ( JZ .GT. LNFIS .OR. U .LT. SIXSIX ) GO TO 20
c  |  Gamnf = Gamma_neutron / Gamma_fission
         GAMNF = SLOPE (JZ) * ( DBLE (JA) - ANORT (JZ) )
         GAMNF = TENTEN**GAMNF
         GO TO 10
      END IF
c  |
c  +-------------------------------------------------------------------*
      JN = JA - JZ
c This statement should compute the reaction Q for neutron emission
c less terms of the Cameron mass formula which should be understood
      SE = DT_ENERGY(A-ONEONE,Z)-DT_ENERGY(A,Z)+EXMASS(1)
     &     -CAM2(JZ)-CAM3(JN-1)
c odd-odd: twice the pairing of the residual nucleus is subtracted
c          from the reaction Q (the residual nucleus will be even-odd)
c odd-even: the residual nucleus pairing is subtracted (the residual
c           nucleus will be even-even or odd-odd)
c     IF ((2*(JZ/2).NE.JZ).OR.(2*(JN/2).NE.JN)) SE=SE-CAM4(JZ)-CAM5(JN-1
c    1 )
c     IF ((2*(JZ/2).NE.JZ).AND.(2*(JN/2).NE.JN)) SE=SE-CAM4(JZ)-CAM5(JN-
c    1 1)
      JZODD = MOD ( JZ, 2 )
      JNODD = MOD ( JN, 2 )
      SE = SE - ( JZODD + JNODD ) * ( CAM4 (JZ) + CAM5 (JN-1) )
c X = fissility
      X  = Z*Z / A
c The following card should compute a sort of fission barrier, please
c note that SE is larger the higher the energy required for neutron
c evaporation
      EBFISS = X * ( A1 * X - A2 ) + A3 + SE
c Not enough energy to overcome the barrier
      IF ( EBFISS .GT. U ) GO TO 20
c The following should be the level density constant asmall for
c the neutron emission, A-1 / 8
c     AN  = 0.125D+00 * ( A - ONEONE )
c ** The following coding to compute the "sophisticated" level density
c ** (provided it is meaningfil in this context)
      QE = DT_ENERGY(A-ONEONE,Z) - DT_ENERGY(A,Z) + EXMASS (1)
      UMXRES = U - QE
      JN     = JA - JZ - 1
      ILVMOD = IB0
c  This is the a lower case of the level density
      AN  = DT_GETA( UMXRES, JZ, JN, ILVMOD, ISDUM, ASMMAX, ASMMIN )
c ** end "sophisticated" level density **
      AN1 = HLFHLF / AN
      AN2 = 0.25D+00 * AN1 / AN
c The following cards should compute some level density constant
c for fission
c "Normal" Atchinson:
c     AF = X - C3
c     AF = AN * ( C1 + C2 * AF * AF )
c 1st trial:
c     AF = MIN ( X - 31.D+00, ZERZER )
c     BF = MAX ( X - 31.D+00, ZERZER )
c     CHELP = 0.01D+00
c     AF = AN * C1 * ( ONEONE + CHELP * AF * AF )
c    &   / ( ONEONE + CHELP * BF * BF )
c     AF = MAX ( AF, ONEONE )
c  1st trial:
c     AF = MIN ( X - 32.2D+00, ZERZER )
c     BF = MIN ( X - 30.2D+00, ZERZER )
c     CHELP  = 0.025D+00
c     DHELP  = 0.025D+00 / 1.15D+00
c     AF     = AN * 1.075D+00 * SQRT ( ( CHELP * AF * AF + ONEONE )
c    &       / ( DHELP * BF * BF + ONEONE ) )
c  2nd trial:
c     AF = MIN ( X - 32.3D+00, ZERZER )
c     BF = MIN ( X - 30.3D+00, ZERZER )
c     CHELP  = 0.022D+00
c     DHELP  = 0.022D+00 / 1.15D+00
c     AF     = AN * 1.078D+00 * SQRT ( ( CHELP * AF * AF + ONEONE )
c    &       / ( DHELP * BF * BF + ONEONE ) )
c  3rd trial:
c     AF = MIN ( X - 32.3D+00, ZERZER )
c     BF = MIN ( X - 30.4D+00, ZERZER )
c     CHELP  = 0.021D+00
c     DHELP  = 0.021D+00 / 1.12D+00
c     AF     = AN * 1.080D+00 * SQRT ( ( CHELP * AF * AF + ONEONE )
c    &       / ( DHELP * BF * BF + ONEONE ) )
c  4th trial:
      AF = MIN ( X - 32.3D+00, ZERZER )
      BF = MIN ( X - 30.7D+00, ZERZER )
      CHELP  = 0.021D+00
      DHELP  = 0.021D+00 / 1.06D+00
      AF     = AN * 1.080D+00 * SQRT ( ( CHELP * AF * AF + ONEONE )
     &       / ( DHELP * BF * BF + ONEONE ) )
c*sr 30.6.
c  Corrective factor for large excitation energies (if energy
c  dependent level densities are used maybe it is required):
c     AF = AN + ( AF - AN ) * EXP ( - ( U - EBFISS )
c    &                            / ( 500.D+00 * EBFISS ) )
c  Go smoothly down per Z=Izfsmx
      IF ( JZ .LT. IZFSMX - 5 ) AF = AF + ( AF - AN )
     &                             * ( JZ - IZFSMX) / FIVFIV
c*
      A1THRD = A**ONETHI
c Standard level density expression for neutron emission,
c S = 2 sqrt [ a ( U - Thresh ) ]
      S = TWOTWO * SQRT (AN*(U-SE))
c  +-------------------------------------------------------------------*
c  |  "Large" S:
      IF ( S .GT. TENTEN ) THEN
        DOUI0 = AN1 * (S-ONEONE)
        DOUI1 = S   * AN2 * ( ( S + S - SIXSIX ) + SIXSIX )
        GAMNF = CONST * ( ( ( 0.76D+00*DOUI1 - 5.D-02*DOUI0 ) * A1THRD
     &        + 1.93D+00*DOUI1 ) * A1THRD + 1.66D+00*DOUI0 )
c  |  Apparently standard level density expression with a_fission,
c  |  S = 2 sqrt [ a ( U - Thresh ) ]
        S2   = TWOTWO * SQRT (AF*(U-EBFISS))
        IF ( S - S2 .GT. -150.D+00 ) THEN
           EXPS = EXP (S-S2)
        ELSE
           EXPS = ZERZER
        END IF
        E2I = EXP (-S2)
c  |  Gamnf = Gamma_neutron / Gamma_fission
        GAMNF = GAMNF * EXPS * AF / ( S2 - ONEONE + ONEONE * E2I )
c  |
c  +-------------------------------------------------------------------*
c  |  "Small" S:
      ELSE
        E1 = EXP (S)
        DOUI0 = ( ( S - ONEONE ) * E1 + ONEONE ) * AN1
        DOUI1 = ( ( SIXSIX + S * ( S + S - SIXSIX ) ) * E1 + S * S
     &        - SIXSIX ) * AN2
        GAMNF = CONST * ( ( ( 0.76D+00*DOUI1 - 5.D-02*DOUI0 ) * A1THRD
     &        + 1.93D+00*DOUI1 ) * A1THRD + 1.66D+00*DOUI0 )
c  |  Apparently standard level density expression with a_fission,
c  |  S2 = 2 sqrt [ a ( U - Thresh ) ]
        S2 = TWOTWO * SQRT (AF*(U-EBFISS))
        E2 = ( ( S2 - ONEONE ) * EXP (S2) + ONEONE ) / AF
c  |  Gamnf = Gamma_neutron / Gamma_fission
        GAMNF = GAMNF / E2
      END IF
c  |
c  +-------------------------------------------------------------------*
   10 CONTINUE
      DT_FPROB = ONEONE / ( ONEONE + GAMNF )
   20 CONTINUE
      RETURN
c=== End of function Fprob ============================================*
      END

c$ CREATE FRBKIN.FOR
cCOPY FRBKIN
c
c=== frbkin ===========================================================*
c
CDECK  ID>, DT_FRBKIN
      SUBROUTINE DT_FRBKIN(LNCHLP,LPRINT)

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created on 08 february 1995  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 10-mar-95     by    Alfredo Ferrari               *
c                                                                      *
c     Input variables:                                                 *
c                                                                      *
c                  Lnchlp = auxiliary flag for nuclear (.true.) or     *
c                           atomic (.false.) masses                    *
c                  Lprint = printout flag                              *
c                                                                      *
c     Output variables:                                                *
c                  none                                                *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: NCDNVP)
      PARAMETER ( R0PRCH = 1.128 D+00 )
      PARAMETER ( R0DRPM = 1.18  D+00 )
      PARAMETER ( CKDRPM = 240.   D+00 )
      PARAMETER ( CJDRPM = 36.8   D+00 )
      PARAMETER ( CLDRPM = 100.   D+00 )
      PARAMETER ( CMDRPM = 0.     D+00 )
      PARAMETER ( CQDRPM = 17.    D+00 )
      PARAMETER ( CA1DRP = 15.96  D+00 )
      PARAMETER ( CA2DRP = 20.69  D+00 )
      PARAMETER ( CA3DRP = 0.     D+00 )
      PARAMETER ( CC1DRP = THRTHR / FIVFIV * COUGFM / R0DRPM * GEVMEV )
      PARAMETER ( CC2DRP = CC1DRP / 336.D+00 * ( ONEONE / CJDRPM
     &                   + 18.D+00 / CKDRPM ) )
      PARAMETER ( HC3DRP = CC1DRP * HLFHLF * FIVFIV / R0DRPM / R0DRPM )
      PARAMETER ( HC4DRP = 0.610887057710857 D+00 )
      PARAMETER ( CC4DRP = FIVFIV / FOUFOU * HC4DRP * CC1DRP )
      PARAMETER ( CC5DRP = CC1DRP * CC1DRP / CQDRPM / 64.D+00 )
      PARAMETER ( R3TOVL = FOUFOU * PIPIPI / THRTHR )
      PARAMETER ( R0SSHM = HLFHLF / PIPIPI / ERFA00 )
      PARAMETER ( R0PSHM = ONETHI / PIPIPI / ERFA00 )
      LOGICAL LSHMDU, LUNFRU
      COMMON /FKNCDN/ RHCPSF (2,8), RHAPSF (2,8), RH0PSF (2,8),
     &                RHCESF (2,8), RHRDSF (2,8), RHFRSF (2,8),
     &                RRMSSF (2,8), RREQSF (2,8), VPCPSF (2,2),
     &                VPAPSF (2,2), VP0PSF (2,2), VPDPSF (2,2),
     &                VPEDSF (2,2), VPRDSF (2,2), VRMSSF (2,2),
     &                VREQSF (2,2), VPBPSF (2,2), RCVPSF (2,2),
     &                PCVPSF  (2) , VBARNN  (2) , VPEXSF  (2),
     &                SSHLNC  (2) , PSHLNC  (2) , AKVPPP, AKVPPN,
     &                BKVPPP, BKVPPN,
     &                JRHDNF  (2) , JNRHVP, JBOUVP, JRHODN, JRHOFL,
     &                LSHMDU, LUNFRU

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c
      LOGICAL LNCHLP, LPRINT
      PARAMETER ( MXGAMM = 3*MXFFBK - 1 )
c  Required if 3100,3300 are not activated
c     PARAMETER ( MXHELP = 18000 )
      PARAMETER ( MXHELP =  6000 )
      DIMENSION QBRHLP (MXHELP), FATTOR (0:MXFFBK), FGAMMA (MXGAMM),
     &          AT1O3  (NXAFBK), AT1O3C (NXAFBK)  , IF1HLP (MXHELP),
     &          IF2HLP (MXHELP), MULHLP (MXHELP),
     &          IDHELP (MXFFBK,MXHELP), ICHELP (MXHELP)
      DIMENSION SAVHLP (2,MXHELP)
      EQUIVALENCE ( IDHELP (1,1), SAVHLP (1,1) )
c
      LNCMSS = LNCHLP
c  +-------------------------------------------------------------------*
c  |  Nuclear masses have to be used
      IF ( LNCMSS ) THEN
         AMUFBK = AMUC12 * GEVMEV
c  |
c  +-------------------------------------------------------------------*
c  |  Atomic masses have to be used
      ELSE
         AMUFBK = AMUGEV * GEVMEV
      END IF
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Array initialization:
      DO 200 IZ = 0, MXZFBK
         DO 100 IN = 0, MXNFBK
            IPSIND (IN,IZ,1) =  0
            IPSIND (IN,IZ,2) = -1
  100    CONTINUE
  200 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Array initialization:
      DO 300 IA = 0, MXAFBK
         JPSIND (IA) =  0
  300 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Array initialization:
      DO 600 IZ = 0, NXZFBK
         DO 500 IN = 0, NXNFBK
            IFBIND (IN,IZ,1) =  0
            IFBIND (IN,IZ,2) = -1
  500    CONTINUE
  600 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Array initialization:
      DO 700 IA = 0, NXAFBK
         JFBIND (IA) =  0
         IF ( IA .GE. 1 ) THEN
            AT1O3  (IA) = IA
            AT1O3  (IA) = AT1O3  (IA)**ONETHI
c  |  Roughly "a la Evap"
c           AT1O3C (IA) = DBLE   (IA*(IA-1)) / ( DBLE ( IA + 6 ) )
c           AT1O3C (IA) = AT1O3C (IA)**ONETHI
            AT1O3C (IA) = AT1O3  (IA)
         END IF
  700 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  This is 0!
      FATTOR (0) = ONEONE
c  +-------------------------------------------------------------------*
c  |  Array initialization:
      DO 800 N = 1, MXFFBK
c  |  This is just n!
         FATTOR (N) = FATTOR (N-1) * DBLE (N)
  800 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  This is Gamma(1/2)
      FGAMMA (1) = SQRT (PIPIPI)
c  This is Gamma(1)
      FGAMMA (2) = ONEONE
c  +-------------------------------------------------------------------*
c  |  Gamma[n/2] initialization.
      DO 900 N = 3, MXGAMM
         ZETA = HLFHLF * DBLE ( N - 2 )
c  |  Gamma(z+1)=zGamma(z)
         FGAMMA (N) = FGAMMA (N-2) * ZETA
  900 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      JPOSST = 0
c  +-------------------------------------------------------------------*
c  |  Loop over the possible (final) states:
      DO 1000 I = 1, IPOSST
         IN    = IFRBKN (I)
         IZ    = IFRBKZ (I)
         JSPIN = IFBKSP (I)
         IPAR  = IFBKPR (I)
         ISTAB = IFBKST (I)
         ELEV  = EEXFBK (I)
         IA    = IN + IZ
         ATAR  = IA
         ZTAR  = IZ
c  |  The following card prevents the use of particle unstable states
c  |  with two or more decay modes available
         IF ( IFBSTF .LE. 2 .AND. ISTAB .LT. -900 ) GO TO 1000
c  |  The following card prevents the use of particle unstable states
c  |  flagged as non long-lived (but maybe with still one decay
c  |  channel only open)
         IF ( IFBSTF .LE. 1 .AND. ISTAB .LT. 0 ) GO TO 1000
c  |  The following card prevents the use of any particle unstable state
         IF ( IFBSTF .LE. 0 .AND. ISTAB .GT. 0 ) GO TO 1000
         JPOSST = JPOSST + 1
         IF ( I .NE. JPOSST ) STOP 'STOP:FRBKIN-JPOSST-I'
         IF ( JPSIND (IA) .GT. 0 .AND. JPSIND (IA) .NE. JPOSST - 1 )
     &        STOP 'STOP:JPOSST-IA'
         JPSIND (IA) = JPOSST
         IF ( IPSIND (IN,IZ,1) .LE. 0 ) THEN
            IPSIND (IN,IZ,1) = JPOSST
            IPSIND (IN,IZ,2) = JPOSST
         ELSE
            IF ( IPSIND (IN,IZ,2) .NE. JPOSST - 1 ) STOP 'STOP:JPOSST'
            IPSIND (IN,IZ,2) = JPOSST
         END IF
c  |  ATOMIC mass:
         AMFRBK (I) = ATAR * AMUGEV * GEVMEV + DT_ENERGY(ATAR,ZTAR)
     &              + EEXFBK (I)
c  |  +----------------------------------------------------------------*
c  |  |  NUCLEAR masses are to be used:
         IF ( LNCMSS ) THEN
            AMFRBK (I) = AMFRBK (I) - ZTAR * AMELCT * GEVMEV
     &                 + GEVMEV * ELBNDE (IZ)
c  |  |  This is the total NUCLEAR excess mass of the current level:
            EEXFBK (I) = EEXFBK (I) + DT_ENERGY(ATAR,ZTAR)
     &                 + ATAR * GEVMEV * ( AMUGEV - AMUC12 )
     &                 - ZTAR * GEVMEV * AMELCT + GEVMEV * ELBNDE (IZ)
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  ATOMIC masses are to be used:
         ELSE
c  |  |  This is the total ATOMIC excess mass of the current level:
            EEXFBK (I) = EEXFBK (I) + DT_ENERGY(ATAR,ZTAR)
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         EEXCHK = AMFRBK (I) - ATAR * AMUFBK
         IF ( LPRINT ) WRITE (ErrorOut,
     * *)' Jposst:',JPOSST,' Z:',IZ,
     &      ' A:',IA,' E_EX',SNGL(ELEV),' ISTAB',ISTAB
         IF ( ABS (EEXCHK-EEXFBK(I)) .GT. CSNNRM * AMFRBK (I) )
     &      STOP 'STOP:FRBKIN-INVALID-EXCESS-MASS'
 1000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c === Set up the A=1 case: === *
c  N = 1, Z = 0
      IN     = 1
      IZ     = 0
c  "Break up" into 1 neutron (iposfb=1):
      IPOSFB = 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = 1
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = 0
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 1
c  Spin/degeneracy/mass factor (dummy in this case):
      SDMFBK (IPOSFB)   = ONEONE
c  Coulomb barrier:
      COUFBK (IPOSFB)   = ZERZER
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB) = EEXFBK (1)
c  N = 0, Z = 1
      IN     = 0
      IZ     = 1
c  "Break up" into 1 proton (iposfb=2):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = 2
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = 0
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 1
c  Spin/degeneracy/mass factor (dummy in this case):
      SDMFBK (IPOSFB)   = ONEONE
c  Coulomb barrier:
      COUFBK (IPOSFB)   = ZERZER
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (2)
      JFBIND (1) = IPOSFB
c === Set up the A=2 case: === *
      VOLFBK = R3TOVL * TWOTWO * R0FRBK**3
      VOLUM0 = R3TOVL * TWOTWO * R0DRPM**3
      FCVOLU = VOLFBK / ( TWOPIP * PLABRC * GEVMEV )**3
c  Botvina's expression for the r0 to be used for barrier calculations
      RCFRBK = R0CFBK * ( ONEONE + C1CFBK ) / ( ONEONE + C2CFBK )
      FCCOU0 = 0.6D+00 * COUGFM * GEVMEV / RCFRBK
     &       / ( ONEONE + VOLFBK / VOLUM0 )**ONETHI
      NGAMMA = 3
      E32NM1 = HLFHLF * DBLE (NGAMMA)
c  N = 2, Z = 0
      IN     = 2
      IZ     = 0
c  Break up into 2 neutrons (iposfb=3):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = 1
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = 1
c  Mass factors:
      FCMASS = AMFRBK (IFBCHA(3,IPOSFB)) * AMFRBK (IFBCHA(4,IPOSFB))
      TOTMAS = AMFRBK (IFBCHA(3,IPOSFB)) + AMFRBK (IFBCHA(4,IPOSFB))
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 2
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO**2 / FATTOR (2) * FCVOLU
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM1 / FGAMMA (NGAMMA)
c  Coulomb barrier:
      COUFBK (IPOSFB)   = ZERZER
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (1) + EEXFBK (1)
c  N = 1, Z = 1
      IN     = 1
      IZ     = 1
c  Break up into 1 neutron and 1 proton (iposfb=4):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = 1
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = 2
c  Mass factors:
      FCMASS = AMFRBK (IFBCHA(3,IPOSFB)) * AMFRBK (IFBCHA(4,IPOSFB))
      TOTMAS = AMFRBK (IFBCHA(3,IPOSFB)) + AMFRBK (IFBCHA(4,IPOSFB))
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 2
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO**2 / FATTOR (1) * FCVOLU
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM1 / FGAMMA (NGAMMA)
c  Coulomb barrier:
      COUFBK (IPOSFB)   = ZERZER
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (1) + EEXFBK (2)
c  N = 0, Z = 2
      IN     = 0
      IZ     = 2
      FCCOUL = FOUFOU / AT1O3 (2)
c  Break up into 2 protons (iposfb=5):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = 2
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = 2
c  Mass factors:
      FCMASS = AMFRBK (IFBCHA(3,IPOSFB)) * AMFRBK (IFBCHA(4,IPOSFB))
      TOTMAS = AMFRBK (IFBCHA(3,IPOSFB)) + AMFRBK (IFBCHA(4,IPOSFB))
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 2
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO**2 / FATTOR (2) * FCVOLU
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM1 / FGAMMA (NGAMMA)
c  Coulomb barrier:
      FCCOUL = FCCOUL - TWOTWO / AT1O3 (1)
      IF ( FCCOUL .LT. ZERZER ) STOP 'STOP:FRBKIN-FCCOUL-P-P'
      COUFBK (IPOSFB)   = FCCOU0 * FCCOUL
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (2) + EEXFBK (2)
      JFBIND (2) = IPOSFB
c === Set up the A=3 case: === *
      VOLFBK = R3TOVL * THRTHR * R0FRBK**3
      VOLUM0 = R3TOVL * THRTHR * R0DRPM**3
      FCVOL2 = VOLFBK / ( TWOPIP * PLABRC * GEVMEV )**3
      FCVOL3 = ( VOLFBK / ( TWOPIP * PLABRC * GEVMEV )**3 )**2
      NGAMM2 = 3
      NGAMM3 = 6
      E32NM2 = HLFHLF * DBLE (NGAMM2)
      E32NM3 = HLFHLF * DBLE (NGAMM3)
c  N = 3, Z = 0
      IN     = 3
      IZ     = 0
c  Break up into 3 neutrons (iposfb=6):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = +1
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = -3
c  Mass factors:
      FCMASS = AMFRBK (1)**3
      TOTMAS = THRTHR * AMFRBK (1)
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 3
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO**3 / FATTOR (3) * FCVOL3
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM3 / FGAMMA (NGAMM3)
c  Coulomb barrier:
      COUFBK (IPOSFB)   = ZERZER
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (1) + EXFRBK (3)
c  N = 2, Z = 1
      IN     = 2
      IZ     = 1
c  Break up into 1 neutron and 1 deuteron (iposfb=7):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = 1
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = 3
c  Mass factors:
      FCMASS = AMFRBK (IFBCHA(3,IPOSFB)) * AMFRBK (IFBCHA(4,IPOSFB))
      TOTMAS = AMFRBK (IFBCHA(3,IPOSFB)) + AMFRBK (IFBCHA(4,IPOSFB))
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 2
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO / FATTOR (1) * FCVOL2
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM2 / FGAMMA (NGAMM2)
c  Coulomb barrier:
      COUFBK (IPOSFB)   = ZERZER
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (1) + EEXFBK (3)
c  Break up into 2 neutrons and 1 proton (iposfb=8):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = +1
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = -4
c  Mass factors:
      FCMASS = AMFRBK (1)**2 * AMFRBK (2)
      TOTMAS = TWOTWO * AMFRBK (1) + AMFRBK (2)
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 3
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO**3 / FATTOR (2) * FCVOL3
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM3 / FGAMMA (NGAMM3)
c  Coulomb barrier:
      COUFBK (IPOSFB)   = ZERZER
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (1) + EXFRBK (4)
c  N = 1, Z = 2
      IN     = 1
      IZ     = 2
c  Botvina's expression for the r0 to be used for barrier calculations
      RCFRBK = R0CFBK * ( ONEONE + C1CFBK ) / ( ONEONE + C2CFBK )
      FCCOU0 = 0.6D+00 * COUGFM * GEVMEV / RCFRBK
     &       / ( ONEONE + VOLFBK / VOLUM0 )**ONETHI
c  Break up into 1 proton and 1 deuteron (iposfb=9):
      FCCOUL = FOUFOU / AT1O3 (3)
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = 2
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = 3
c  Mass factors:
      FCMASS = AMFRBK (IFBCHA(3,IPOSFB)) * AMFRBK (IFBCHA(4,IPOSFB))
      TOTMAS = AMFRBK (IFBCHA(3,IPOSFB)) + AMFRBK (IFBCHA(4,IPOSFB))
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 2
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO / FATTOR (1) * FCVOL2
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM2 / FGAMMA (NGAMM2)
c  Coulomb barrier:
      FCCOUL = FCCOUL - ONEONE / AT1O3 (1) - ONEONE / AT1O3 (2)
      IF ( FCCOUL .LT. ZERZER ) STOP 'STOP:FRBKIN-FCCOUL-P-D'
      COUFBK (IPOSFB)   = FCCOU0 * FCCOUL
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (2) + EEXFBK (3)
c  Break up into 1 neutron and 2 protons (iposfb=10):
      FCCOUL = FOUFOU / AT1O3 (3)
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = +1
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = -5
c  Mass factors:
      FCMASS = AMFRBK (1) * AMFRBK (2)**2
      TOTMAS = AMFRBK (1) + TWOTWO * AMFRBK (2)
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 3
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO**3 / FATTOR (2) * FCVOL3
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM3 / FGAMMA (NGAMM3)
c  Coulomb barrier:
      FCCOUL = FCCOUL - TWOTWO / AT1O3 (1)
      IF ( FCCOUL .LT. ZERZER ) STOP 'STOP:FRBKIN-FCCOUL-N-P-P'
      COUFBK (IPOSFB)   = FCCOU0 * FCCOUL
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (1) + EXFRBK (5)
c  N = 0, Z = 3
      IN     = 0
      IZ     = 3
c  Botvina's expression for the r0 to be used for barrier calculations
c  (with some approximation for Zfj Zj)
      RCFRBK = R0CFBK * ( ONEONE + C1CFBK * TWOTWO )
     &       / ( ONEONE + C2CFBK * TWOTWO )
      FCCOU0 = 0.6D+00 * COUGFM * GEVMEV / RCFRBK
     &       / ( ONEONE + VOLFBK / VOLUM0 )**ONETHI
      FCCOUL = ANINEN / AT1O3 (3)
c  Break up into 3 protons (iposfb=11):
      IPOSFB = IPOSFB + 1
      IFBIND (IN,IZ,1)  = IPOSFB
      IFBIND (IN,IZ,2)  = IPOSFB
c  N:
      IFBCHA (1,IPOSFB) = IN
c  Z:
      IFBCHA (2,IPOSFB) = IZ
c  First fragment id:
      IFBCHA (3,IPOSFB) = +2
c  Second (possibly composite) fragment id:
      IFBCHA (4,IPOSFB) = -5
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 3
c  Mass factors:
      FCMASS = AMFRBK (2)**3
      TOTMAS = THRTHR * AMFRBK (2)
c  Multiplicity:
      IFBCHA (5,IPOSFB) = 3
c  Spin/degeneracy/mass factor:
      SDMFBK (IPOSFB)   = TWOTWO**3 / FATTOR (3) * FCVOL3
     &                  * ( FCMASS / TOTMAS )**1.5D+00
     &                  * TWOPIP**E32NM3 / FGAMMA (NGAMM3)
c  Coulomb barrier:
      FCCOUL = FCCOUL - THRTHR / AT1O3 (1)
      IF ( FCCOUL .LT. ZERZER ) STOP 'STOP:FRBKIN-FCCOUL-P-P-P'
      COUFBK (IPOSFB)   = FCCOU0 * FCCOUL
c  Total mass excess (atomic or nuclear depending on the option):
      EXFRBK (IPOSFB)   = EEXFBK (2) + EXFRBK (5)
      JFBIND (3) = IPOSFB
      IF ( IPOSFB .NE. 11 ) STOP 'STOP:FRBKIN-IPOSFB-A=3'
c  +-------------------------------------------------------------------*
c  |  Loop over all possible A values:
      DO 8000 IA = 4, NXAFBK
         IA2   = IA / 2
         ATAR  = IA
c  |  +----------------------------------------------------------------*
c  |  |  Loop over all possible Z values:
         DO 7000 IZ = MAX ( 0, IA - NXNFBK ), MIN ( IA, NXZFBK )
            NBREAK = 0
            IN     = IA - IZ
            ZTAR   = IZ
            VOLFBK = R3TOVL * ATAR * R0FRBK**3
            VOLUM0 = R3TOVL * ATAR * R0DRPM**3
c  |  |  Botvina's expression for the r0 to be used for barrier
c  |  |  calculations (with some approximation for Zfj Zj)
            RCFRBK = R0CFBK * ( ONEONE + C1CFBK * ( ZTAR - ONEONE ) )
     &             / ( ONEONE + C2CFBK * ( ZTAR - ONEONE ) )
            FCCOU0 = 0.6D+00 * COUGFM * GEVMEV / RCFRBK
     &             / ( ONEONE + VOLFBK / VOLUM0 )**ONETHI
            FCCOU2 = COUGFM * GEVMEV
            A1O3SU = ZERZER
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Emit one "stable" particle and look for all possible
c  |  |  |  combinations for the remnant:
c  |  |  |  JA, JZ, JN identify the "stable" emitted particle
c  |  |  |  KA, KZ, KN identify the "stable" or "composite" remnant
            DO 5000 JA = 1, IA2
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Loop over all possible Z:
               DO 4000 JZ = MAX ( 0, JA - IN ), MIN ( JA, IZ, MXZFBK )
                  JN   = JA - JZ
c  |  |  |  |  No "stable" level exists for this N-Z
                  IF ( JN .GT. MXNFBK .OR. JZ .GT. MXZFBK ) GO TO 4000
                  JPS1 = IPSIND (JN,JZ,1)
                  JPS2 = IPSIND (JN,JZ,2)
                  IF ( JPS2 .LT. JPS1 ) GO TO 4000
                  KA   = IA - JA
                  KN   = IN - JN
                  KZ   = IZ - JZ
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  No "stable" remnant exists for this JN-JZ
                  IF ( KN .GT. MXNFBK .OR. KZ .GT. MXZFBK ) THEN
                     KPS1 = +0
                     KPS2 = -1
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |
                  ELSE
                     KPS1 = IPSIND (KN,KZ,1)
                     KPS2 = IPSIND (KN,KZ,2)
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
                  KFB1 = IFBIND (KN,KZ,1)
                  KFB2 = IFBIND (KN,KZ,2)
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  Loop over all possible "stable" emitted fragments:
                  DO 3800 JP = JPS1, JPS2
c  |  |  |  |  |  +----------------------------------------------------*
c  |  |  |  |  |  |  Loop over all possible "stable" remnants:
                     DO 3200 KP = KPS1, KPS2
                        NBREAK = NBREAK + 1
                        MULHLP (NBREAK) = 2
                        IF1HLP (NBREAK) = JP
                        IF2HLP (NBREAK) = KP
                        QBRHLP (NBREAK) = EEXFBK (JP) + EEXFBK (KP)
                        QBREPS = CSNNRM * ABS (QBRHLP(NBREAK))
c  |  |  |  |  |  |  +-------------------------------------------------*
c  |  |  |  |  |  |  |  This way of eliminating equivalent break up
c  |  |  |  |  |  |  |  combinations is a bit dangerous, since it relies
c  |  |  |  |  |  |  |  on the assumption that identical Qs <==>
c  |  |  |  |  |  |  |  identical fragments:
                        DO 3100 IB = NBREAK - 1, 1, -1
                           IF ( ABS (QBRHLP(NBREAK)-QBRHLP(IB)) .LE.
     &                          QBREPS .AND. MULHLP (NBREAK) .EQ.
     &                          MULHLP (IB) ) THEN
                              NBREAK = NBREAK - 1
                              GO TO 3200
                           END IF
 3100                   CONTINUE
c  |  |  |  |  |  |  |
c  |  |  |  |  |  |  +-------------------------------------------------*
 3200                CONTINUE
c  |  |  |  |  |  |
c  |  |  |  |  |  +----------------------------------------------------*
                     IF ( KA .LE. 1 ) STOP 'STOP:FRBKIN-KA=1'
c  |  |  |  |  |  +----------------------------------------------------*
c  |  |  |  |  |  |  Loop over all possible "composite" remnants:
                     DO 3400 KP = KFB1, KFB2
                        IF ( IFBCHA (5,KP) + 1 .GT. MXFFBK ) GO TO 3400
c  |  |  |  |  |  |-->-->-->-->--> too many fragments
                        NBREAK = NBREAK + 1
                        MULHLP (NBREAK) = 1 + IFBCHA (5,KP)
                        IF1HLP (NBREAK) = JP
                        IF2HLP (NBREAK) = -KP
                        QBRHLP (NBREAK) = EEXFBK (JP) + EXFRBK (KP)
                        QBREPS = CSNNRM * ABS (QBRHLP(NBREAK))
c  |  |  |  |  |  |  +-------------------------------------------------*
c  |  |  |  |  |  |  |  This way of eliminating equivalent break up
c  |  |  |  |  |  |  |  combinations is a bit dangerous, since it relies
c  |  |  |  |  |  |  |  on the assumption that identical Qs <==>
c  |  |  |  |  |  |  |  identical fragments:
                        DO 3300 IB = NBREAK - 1, 1, -1
                           IF ( ABS (QBRHLP(NBREAK)-QBRHLP(IB)) .LE.
     &                          QBREPS .AND. MULHLP (NBREAK) .EQ.
     &                          MULHLP (IB) ) THEN
                              NBREAK = NBREAK - 1
                              GO TO 3400
                           END IF
 3300                   CONTINUE
c  |  |  |  |  |  |  |
c  |  |  |  |  |  |  +-------------------------------------------------*
 3400                CONTINUE
c  |  |  |  |  |  |
c  |  |  |  |  |  +----------------------------------------------------*
 3800             CONTINUE
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
 4000          CONTINUE
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
 5000       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            IF ( NBREAK .LE. 0 ) GO TO 7000
c  |  |  If we are there some possible break-up combination for IZ-IN
c  |  |  has been found: first of all deconvolute the break-up into the
c  |  |  very elementary components and get rid of duplicate
c  |  |  combinations (if any). If the loops 3100,3300 are activated it
c  |  |  is very likely that no duplicate combination survived up to
c  |  |  this point. It also takes care to delete too large excess mass
c  |  |  combinations if the break up channels are too many
            NACTUA = NBREAK
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Loop over the recorded combinations:
            DO 6000 IB = 1, NBREAK
               INCK   = 0
               IZCK   = 0
               IDHELP (1,IB) = IF1HLP (IB)
               INCK   = INCK + IFRBKN (IDHELP(1,IB))
               IZCK   = IZCK + IFRBKZ (IDHELP(1,IB))
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Just two "stable" particles:
               IF ( IF2HLP (IB) .GT. 0 ) THEN
                  IDHELP (2,IB) = IF2HLP (IB)
                  INCK = INCK + IFRBKN (IDHELP(2,IB))
                  IZCK = IZCK + IFRBKZ (IDHELP(2,IB))
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  The second one is a "composite" particle:
               ELSE
                  KP = IF2HLP (IB)
                  JB = 1
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  Loop until only "stable" particles are left:
 5200             CONTINUE
                     KP = -KP
                     JB = JB + 1
                     IDHELP (JB,IB) = IFBCHA (3,KP)
                     INCK = INCK + IFRBKN (IDHELP(JB,IB))
                     IZCK = IZCK + IFRBKZ (IDHELP(JB,IB))
                     IF ( IDHELP (JB,IB) .LE. 0 )
     &                  STOP 'STOP:FRBKIN-IDHELP-1'
                     KP = IFBCHA (4,KP)
                  IF ( KP .LT. 0 ) GO TO 5200
c  |  |  |  |  |  Still a composite particle:
c  |  |  |  |  +-------------------------------------------------------*
                  JB   = JB + 1
                  IDHELP (JB,IB) = KP
                  INCK = INCK + IFRBKN (IDHELP(JB,IB))
                  IZCK = IZCK + IFRBKZ (IDHELP(JB,IB))
                  IF ( IDHELP (JB,IB) .LE. 0 )
     &                  STOP 'STOP:FRBKIN-IDHELP-2'
                  IF ( JB .NE. MULHLP (IB) ) STOP 'STOP:FRBKIN-MULHLP'
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
               IF ( INCK .NE. IN .OR. IZCK .NE. IZ )
     &              STOP 'STOP:FRBKIN-INCK-IZCK'
               CALL DT_IORDIN( IDHELP (1,IB), ICHELP, MULHLP (IB) )
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Loop on previously considered break up combinations:
               DO 5400 LB = IB - 1, 1, -1
                  IF ( MULHLP (LB) .NE. MULHLP (IB) ) GO TO 5400
                  DO 5300 JB = 1, MULHLP (IB)
                     IF ( IDHELP (JB,LB) .NE. IDHELP (JB,IB)) GO TO 5400
 5300             CONTINUE
c  |  |  |  |  LBth and IBth break up's are identical:
                  IF ( ABS (QBRHLP(IB) - QBRHLP(LB)) .GT.
     &                 1.D-12 * ABS (QBRHLP(IB)) )
     &                STOP 'STOP:FRBKIN-QBRHLP-IB-LB'
c  |  |  |  |  Discard the current combination:
                  IF1HLP (IB) = 0
                  IF2HLP (IB) = 0
                  MULHLP (IB) = 0
                  QBRHLP (IB) = -AINFNT
                  NACTUA = NACTUA - 1
                  GO TO 6000
 5400          CONTINUE
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Too many combinations: discard the largest excess mass
c  |  |  |  |  ones:
               IF ( NBREAK .GT. NBUFBK .AND. QBRHLP (IB) .GT. EXMXFB )
     &            THEN
c  |  |  |  |  Discard the current combination:
                  IF1HLP (IB) = 0
                  IF2HLP (IB) = 0
                  MULHLP (IB) = 0
                  QBRHLP (IB) = -AINFNT
                  NACTUA = NACTUA - 1
                  GO TO 6000
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  Only "real" combinations survive up to this point:
               IPOSFB = IPOSFB + 1
               IF ( IB .EQ. 1 ) IFBIND (IN,IZ,1) = IPOSFB
               IFBIND (IN,IZ,2)  = IPOSFB
               FCVOLU = ( TWOPIP * PLABRC * GEVMEV )**3 / VOLFBK
               FCSPIN = ONEONE
               FCMASS = ONEONE
               TOTMAS = ONEONE
               FCIDEN = ONEONE
               FCCOUL = ZTAR * ZTAR / AT1O3 (IA)
               FCCOU2 = COUGFM * GEVMEV
               A1O3SU = ZERZER
               NIDENT = +0
               IDCURR = -1
               NCHRGD = 0
               EEXCHK = ZERZER
               IZCHCK = IZ
               INCHCK = IN
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Compute the various factors and make some checks:
               DO 5500 JB = 1, MULHLP (IB)
                  KP = IDHELP (JB,IB)
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  Check if it is still an identical particle (remind
c  |  |  |  |  |  that fragments are ordered by indeces, so possible
c  |  |  |  |  |  identical states are contigous:
                  IF ( KP .NE. IDCURR ) THEN
                     FCIDEN = FCIDEN * FATTOR (NIDENT)
                     NIDENT = 1
                     IDCURR = KP
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |
                  ELSE
                     NIDENT = NIDENT + 1
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |  Unknown spin for this level:
                  IF ( IFBKSP (KP) .LT. 0 ) THEN
                     IPSHLP = MOD ( IFRBKZ (KP) + IFRBKN (KP), 2 )
                     FCSPIN = FCSPIN * ( DBLE (IPSHLP) + ONEONE )
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
c  |  |  |  |  |
                  ELSE
                     FCSPIN = FCSPIN * ( DBLE (IFBKSP(KP)) + ONEONE )
                  END IF
c  |  |  |  |  |
c  |  |  |  |  +-------------------------------------------------------*
                  FCVOLU = FCVOLU * VOLFBK
     &                   / ( TWOPIP * PLABRC * GEVMEV )**3
                  TOTMAS = TOTMAS + AMFRBK (KP)
                  FCMASS = FCMASS * AMFRBK (KP)
                  FCCOUL = FCCOUL - IFRBKZ (KP)**2
     &                   / AT1O3 (IFRBKZ(KP)+IFRBKN(KP))
                  IF ( IFRBKZ (KP) .GT. 0 ) THEN
                     NCHRGD = NCHRGD + 1
                     ZCUR   = IFRBKZ (KP)
                     RCFCUR = R0CFBK * ( ONEONE + C1CFBK * ZCUR
     &                      * ( ZTAR - ZCUR ) )
     &                      / ( ONEONE + C2CFBK * ZCUR * ( ZTAR - ZCUR))
                     FCCOU2 = FCCOU2 * ZCUR
                     A1O3SU = A1O3SU + AT1O3C (IFRBKZ(KP)+IFRBKN(KP))
                  END IF
                  EEXCHK = EEXCHK + EEXFBK (KP)
                  IZCHCK = IZCHCK - IFRBKZ (KP)
                  INCHCK = INCHCK - IFRBKN (KP)
 5500          CONTINUE
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
               FCIDEN = FCIDEN * FATTOR (NIDENT)
               IF ( NCHRGD .LE. 1 ) FCCOUL = ZERZER
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Two body Coulomb barrier
               IF ( NCHRGD .EQ. 2 .AND. MULHLP (IB) .EQ. 2 ) THEN
c  |  |  |  |  Real two body barrier:
                  FCCOUL = FCCOU2 / RCFCUR / A1O3SU
c  |  |  |  |  Set up in this way to easy life after
                  FCCOUL = FCCOUL / FCCOU0
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
               IF ( ABS (EEXCHK-QBRHLP (IB)) .GT. 1.D-12*ABS(QBRHLP(IB))
     &            ) STOP 'STOP:FRBKIN-EEXCHK-QBRHLP'
               IF ( IZCHCK .NE. 0 .OR. INCHCK .NE. 0 )
     &              STOP 'STOP:FRBKIN-IZCHCK-INCHCK'
               IF ( FCCOUL .LT. ANGLGB .AND. NCHRGD .GT. 1 )
     &              STOP 'STOP:FRBKIN-FCCOUL=0'
               IF ( FCCOUL .LT. ZERZER ) STOP 'STOP:FRBKIN-FCCOUL<0'
c  |  |  |  Index for the gamma function: please note it is
c  |  |  |  tabulated as Fgamma(i)=Gamma(i/2)
               NGAMMA = 3 * ( MULHLP (IB) - 1 )
               E32NM1 = HLFHLF * DBLE   (NGAMMA)
c  |  |  |  N:
               IFBCHA (1,IPOSFB) = IN
c  |  |  |  Z:
               IFBCHA (2,IPOSFB) = IZ
c  |  |  |  First fragment id:
               IFBCHA (3,IPOSFB) = IF1HLP (IB)
c  |  |  |  Second (possibly composite) fragment id:
               IFBCHA (4,IPOSFB) = IF2HLP (IB)
c  |  |  |  Multiplicity:
               IFBCHA (5,IPOSFB) = MULHLP (IB)
c  |  |  |  Spin/degeneracy/mass factor:
               SDMFBK (IPOSFB)   = FCSPIN / FCIDEN * FCVOLU
     &                           * ( FCMASS / TOTMAS )**1.5D+00
     &                           * TWOPIP**E32NM1 / FGAMMA (NGAMMA)
c  |  |  |  Coulomb barrier:
               COUFBK (IPOSFB)   = FCCOU0 * FCCOUL
c  |  |  |  Total mass excess (atomic or nuclear depending on option):
               EXFRBK (IPOSFB)   = QBRHLP (IB)
 6000       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            IF ( NACTUA .GT. 0 .AND. ( NACTUA .NE. IFBIND(IN,IZ,2)
     &         - IFBIND (IN,IZ,1) + 1 ) ) STOP 'STOP:FRBKIN-NACTUA'
            IF ( LPRINT ) WRITE (ErrorOut,*)
     &   '   ',NACTUA,' BREAK-UP COMBINATIONS FOUND FOR A:',IA,' Z:',IZ
            IF ( LPRINT ) WRITE (ErrorOut,*)
     &   '   ( EXCESS MASS:',SNGL (DT_ENERGY(ATAR,ZTAR)),' MEV )'
            IF ( NACTUA .LE. 0 ) GO TO 7000
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Try to order in increasing Q (with the Coulomb barrier
c  |  |  |  included/excluded):
            DO 6200 IB = 1, NACTUA
               JPOSFB        = IB + IFBIND (IN,IZ,1) - 1
c  |  |  |  Coulomb barrier included:
c              QBRHLP (IB)   = EXFRBK (JPOSFB) + COUFBK (JPOSFB)
c  |  |  |  Coulomb barrier excluded:
               QBRHLP (IB)   = EXFRBK (JPOSFB)
               SAVHLP (1,IB) = COUFBK (JPOSFB)
               SAVHLP (2,IB) = SDMFBK (JPOSFB)
c  |  |  |  Multiplicity:
               MULHLP (IB)   = IFBCHA (5,JPOSFB)
c  |  |  |  First fragment id:
               IF1HLP (IB)   = IFBCHA (3,JPOSFB)
c  |  |  |  Second (possibly composite) fragment id:
               IF2HLP (IB)   = IFBCHA (4,JPOSFB)
 6200       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  Make the ordering:
            CALL DT_RORDIN( QBRHLP, ICHELP, NACTUA )
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Complete the reordering:
            DO 6400 IB = 1, NACTUA
               IF ( IB .GT. 1 ) THEN
                  IF ( QBRHLP (IB) .LT. QBRHLP (IB-1) )
     &               STOP 'STOP:FRBKIN-QBRHLP-ORDER'
               END IF
               IBOLD             = ICHELP (IB)
               JPOSFB            = IB    + IFBIND (IN,IZ,1) - 1
               JPOSLD            = IBOLD + IFBIND (IN,IZ,1) - 1
c  |  |  |  N:
               IFBCHA (1,JPOSFB) = IN
c  |  |  |  Z:
               IFBCHA (2,JPOSFB) = IZ
c  |  |  |  First fragment id:
               IFBCHA (3,JPOSFB) = IF1HLP (IBOLD)
c  |  |  |  Second (possibly composite) fragment id:
               IFBCHA (4,JPOSFB) = IF2HLP (IBOLD)
c  |  |  |  Multiplicity:
               IFBCHA (5,JPOSFB) = MULHLP (IBOLD)
               COUFBK (JPOSFB)   = SAVHLP (1,IBOLD)
               SDMFBK (JPOSFB)   = SAVHLP (2,IBOLD)
c  |  |  |  Please note Qbrhlp is already ordered (--> Ib not Ibold)
c  |  |  |  Coulomb barrier included:
c              EXFRBK (JPOSFB)   = QBRHLP (IB) - COUFBK (JPOSFB)
c  |  |  |  Coulomb barrier excluded:
               EXFRBK (JPOSFB)   = QBRHLP (IB)
 6400       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            IF ( LPRINT ) WRITE (ErrorOut,*)
     &   '   (LAST Q VALUES:',(SNGL(EXFRBK(IFBIND (IN,IZ,1)+JJ)),
     &        JJ=MAX(0,NACTUA-3),NACTUA-1),' MEV)'
 7000    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         JFBIND (IA) = IPOSFB
 8000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      IF ( LPRINT ) WRITE (ErrorOut,*)' Iposfb:',IPOSFB
c=== End of subroutine Frbkin =========================================*
      RETURN
      END

c$ CREATE FRMBRK.FOR
cCOPY FRMBRK
c
c=== frmbrk ===========================================================*
c
CDECK  ID>, DT_FRMBRK
      SUBROUTINE DT_FRMBRK(IARES,IZRES,AMRESD,EXCRES,EKRES ,PXRES ,
     &                   PYRES,PZRES,PTRES ,SMOM1 ,ISTRES,LOKFBK )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created on 08 february 1995  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 02-may-95     by    Alfredo Ferrari               *
c                                                                      *
c     Input variables:                                                 *
c                                                                      *
c                  Iares = Mass number of the compound nucleus to be   *
c                          exploded                                    *
c                  Izres = Atomic number of the compound nucleus to be *
c                          exploded                                    *
c                 Amresd = Total atomic/nuclear mass of the compound   *
c                          nucleus to be exploded without excitation   *
c                          energy                                      *
c                 Excres = Excitation energy of the compound nucleus   *
c                          to be exploded                              *
c                  Ekres = kinetic (traslational) energy of the comp-  *
c                          ound nucleus to be exploded                 *
c              Px,y,zres = momentum components of the compound nucleus *
c                          to be exploded                              *
c                  Ptres = momentum of the compound nucleus to be      *
c                          exploded                                    *
c                                                                      *
c     Output variables:                                                *
c                                                                      *
c                 Istres = index identifying the residual nucleus in   *
c                          the particle stable states list if >0:      *
c                         -1: particle unstable                        *
c                          0: not in the particle stable state list    *
c                          but no longer particle unstable             *
c                 Lokfbk = .true. if break up is successful, .false.   *
c                          if no channel is available or other         *
c                          possible conditions                         *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: EVA1)
c*sr
C     COMMON /FKEVA1/ NPART(6),EPART(100,6),COSEVP(3,100,6),HEVSUM
      COMMON /FKEVA1/ NPART(6),EPART(200,6),COSEVP(3,200,6),HEVSUM
c*

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: HIGFIS)
      PARAMETER ( IZFSMX = 61 )
      LOGICAL FISINH, LFRGMN, LAGOES
      COMMON /FKHIGF/ AFIS  (10), ZFIS  (10), UFIS  (10), EKFIS  (10),
     &                AMFIS (10), PPFIS (10), COSLFF(3,0:10),
     &                ATFIS (10), ZTFIS (10), UTFIS (10), RECFIS (10),
     &                AMTFIS(10), PPTFIS(10), EBFISS, AMDIFF,
     &                APR0, ZPR0, EREC0, UU0, HEVFIS (0:10),
     &                ISTFIS(10), NPARTF (6,0:10), NFISS, FISINH,
     &                LFRGMN, LAGOES
      DIMENSION COSLF0 (3)
      EQUIVALENCE ( COSLF0 (1), COSLFF (1,0) )

c (original name: LABCOS)
      COMMON /FKLABC/ COSLBP(3),COSLBR(3)

c (original name: NUCDAT)
      PARAMETER ( AMUAMU = AMUGEV )
      PARAMETER ( AMPROT = AMPRTN )
      PARAMETER ( AMNEUT = AMNTRN )
      PARAMETER ( AMELEC = AMELCT )
      PARAMETER ( R0NUCL = 1.12        D+00 )
      PARAMETER ( RCCOUL = 1.7         D+00 )
      PARAMETER ( FERTHO = 14.33       D-09 )
      PARAMETER ( EXPEBN = 2.39        D+00 )
      PARAMETER ( BEXC12 = FERTHO * 72.40715579499394D+00 )
      PARAMETER ( AMUC12 = AMUGEV - HLFHLF * AMELCT + BEXC12 / 12.D+00 )
      PARAMETER ( AMHYDR = AMPRTN + AMELCT  )
      PARAMETER ( AMHTON = AMHYDR - AMNTRN  )
      PARAMETER ( AMNTOU = AMNTRN - AMUC12  )
      PARAMETER ( AMUCSQ = AMUC12 * AMUC12 )
      PARAMETER ( EBNDAV = HLFHLF * (AMPRTN + AMNTRN) - AMUC12 )
      PARAMETER ( GAMMIN = 1.0D-06 )
      PARAMETER ( GAMNSQ = 2.0D+00 * GAMMIN * GAMMIN )
      PARAMETER ( TVEPSI = GAMMIN / 100.D+00 )

      COMMON /FKNDAT/ AV0WEL,     APFRMX,     AEFRMX,     AEFRMA,
     &                RDSNUC,     V0WELL (2), PFRMMX (2), EFRMMX (2),
     &                EFRMAV (2), AMNUCL (2), AMNUSQ (2), EBNDNG (2),
     &                VEFFNU (2), ESLOPE (2), PKMNNU (2), EKMNNU (2),
     &                PKMXNU (2), EKMXNU (2), EKMNAV (2), EKINAV (2),
     &                EXMNAV (2), EKUPNU (2), EXMNNU (2), EXUPNU (2),
     &                ERCLAV (2), ESWELL (2), FINCUP (2), AMRCAV    ,
     &                AMRCSQ    , ATO1O3    , ZTO1O3    , ELBNDE (0:100)

c
c  The following parameters control the minimum energy per nucleon (MeV)
c  to allow for a full N body (N>2) decay (50 keV/nucleon):
      PARAMETER ( ENCMNA = 1.D-02 )
      PARAMETER ( ENCMNB = 5.D-02 )
c  The following parameter control the minimum probability for a
c  "possible" break up channel. It is a dimensional number!
      PARAMETER ( PRCHMN = 2.D-02 )
c  The following parameter control the Coulomb barrier penetrability
c  A zero value implies a sharp Barrier. The following value, 1 MeV, is
c  consistent with Botvina's fit:
      PARAMETER ( EKBRMN = ONEONE )
c  The following parameter must be >= of the maximum number of break-up
c  channels among all nuclei for which they are tabulated:
      PARAMETER ( MXBRCH = 6000 )
c  The following parameter must be =< NCYCMX+2 where NCYCMX is the
c  parameter defined in EXPLOD, and of course must be >= MXFFBK
c  Actually it must be >= mxffbk+2 because of (possibly) two 8-Be
c  fragments to be decayed or other unstable particle decays
      PARAMETER ( MXFBFR = MXFFBK + 6 )
      DIMENSION PXEXPL (MXFBFR), PYEXPL (MXFBFR), PZEXPL (MXFBFR),
     &          ETEXPL (MXFBFR), AMEXPL (MXFBFR), KPEXPL (MXFBFR),
     &          KPHELP (MXFBFR)
      DIMENSION PXCHRG (MXFFBK), PYCHRG (MXFFBK), PZCHRG (MXFFBK),
     &          ETCHRG (MXFFBK), AMCHRG (MXFFBK)
      DIMENSION PRFBCH (0:MXBRCH), KP8BEF (2), SMOM1 (6)
      LOGICAL LOKFBK, LGDCHN
c
      LFRGMN = .FALSE.
      INRES  = IARES - IZRES
c  +-------------------------------------------------------------------*
c  |  Check if it is a meaningful residual nucleus:
      IF ( INRES .LT. 0 .OR. IZRES .LT. 0 .OR. IARES .LE. 0 ) THEN
         WRITE (ErrorOut,*)
     &   ' *** FRMBRK CALLED WITH A NONSENSE RESIDUAL NUCLEUS ',
     &         IARES, IZRES,' ***'
         STOP 'STOP:FRMBRK-IARES-IZRES-INRES'
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Just a bag of protons/neutrons:
      IF ( INRES .EQ. 0 .OR. IZRES .EQ. 0 ) THEN
c  |  +----------------------------------------------------------------*
c  |  |  The number of nucleons exceeds the usual max. n. of fragments
         IF ( IARES .GT. MXFFBK ) THEN
c  |  |  +-------------------------------------------------------------*
c  |  |  |  We can still try to "explod" the bag:
            IF ( IARES .LE. MIN ( MXFBFR, MXFFBK + 2 ) ) THEN
               WRITE (ErrorOut,*)
     &         ' *** FRMBRK: WE ARE DEALING WITH A BAG OF ', IARES,
     &         ' IDENTICAL NUCLEONS, GO ON FOLKS! ***'
               WRITE (ErrorOut,*)
     &         ' *** FRMBRK: WE ARE DEALING WITH A BAG OF ', IARES,
     &         ' IDENTICAL NUCLEONS, GO ON FOLKS! ***'
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  No chance "explod" the bag:
            ELSE
               WRITE (ErrorOut,*)
     &         ' *** FRMBRK: A BAG OF ', IARES,
     &         ' IDENTICAL NUCLEONS, CANNOT BE MANAGED ***'
               WRITE (ErrorOut,*)
     &         ' *** FRMBRK: A BAG OF ', IARES,
     &         ' IDENTICAL NUCLEONS, CANNOT BE MANAGED ***'
               LOKFBK = .FALSE.
               RETURN
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         LOKFBK = .TRUE.
         ETOTCM = AMRESD + EXCRES
         GAMCMS = ( ETOTCM + EKRES ) / ETOTCM
         ETAX   = PXRES / ETOTCM
         ETAY   = PYRES / ETOTCM
         ETAZ   = PZRES / ETOTCM
         NPEXPL = IARES
c  |  +----------------------------------------------------------------*
c  |  |  Proton "bag"
         IF ( IZRES .GT. 0 ) THEN
            KP0 = 2
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Neutron "bag"
         ELSE
            KP0 = 1
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         AMTOT  = ZERZER
c  |  +----------------------------------------------------------------*
c  |  |
         DO 200 KP = 1, IARES
            KPEXPL (KP) = KP0
            AMEXPL (KP) = AMFRBK (KPEXPL(KP))
            AMTOT  = AMTOT + AMEXPL (KP)
  200    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         ETOTEX = ETOTCM
c  |  +----------------------------------------------------------------*
c  |  |  Print an error message and stop:
         IF ( AMTOT .GT. ONEPLS * ETOTEX ) THEN
            WRITE (ErrorOut,*)
     &      ' *** FRMBRK: NEUTRON/PROTON BAG, TOTAL ENERGY < MASS!!',
     &            ETOTEX, AMTOT, IARES, IZRES, NPEXPL,
     &            (AMEXPL (I), I=1,NPEXPL)
            WRITE (ErrorOut,*)
     &      ' *** FRMBRK: NEUTRON/PROTON BAG, TOTAL ENERGY < MASS!!',
     &            ETOTEX, AMTOT, IARES, IZRES, NPEXPL,
     &            (AMEXPL (I), I=1,NPEXPL)
            STOP 'STOP:FRMBRK-AMTOT-ETOTEX-BAG'
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Practically no energy available:
         ELSE IF ( AMTOT .GE. ONEMNS * ETOTEX ) THEN
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Split just into Npexpl neutrons/protons at rest:
            DO 300 KP = 1, NPEXPL
               ETEXPL (KP) = AMEXPL (KP)
               PXEXPL (KP) = ZERZER
               PYEXPL (KP) = ZERZER
               PZEXPL (KP) = ZERZER
  300       CONTINUE
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Make the explosion:
         ELSE
            CALL DT_EXPLOD( NPEXPL, AMEXPL, ETOTEX, ETEXPL, PXEXPL,
     &                    PYEXPL, PZEXPL )
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         GO TO 8000
c  |
c  +-------------------------------------------------------------------*
c  |  No chance to explod this residual nucleus, because of too many
c  |  neutrons/protons:
      ELSE IF ( INRES .GT. NXNFBK .OR. IZRES .GT. NXZFBK ) THEN
         LOKFBK = .FALSE.
         RETURN
c  |
c  +-------------------------------------------------------------------*
c  |  Possible break-up:
      ELSE
c  |  Compute the indeces pointing to the break-up channels for this
c  |  residual nucleus
         IFB1   = IFBIND (INRES,IZRES,1)
         IFB2   = IFBIND (INRES,IZRES,2)
c  |  +----------------------------------------------------------------*
c  |  |  No break up channel available for this Z-A combination:
         IF ( IFB2 .LT. IFB1 ) THEN
            LOKFBK = .FALSE.
            RETURN
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         LOKFBK = .TRUE.
      END IF
c  |
c  +-------------------------------------------------------------------*
      ARES   = IARES
      ZRES   = IZRES
      ETOTCM = AMRESD + EXCRES
      GAMCMS = ( ETOTCM + EKRES ) / ETOTCM
      ETAX   = PXRES / ETOTCM
      ETAY   = PYRES / ETOTCM
      ETAZ   = PZRES / ETOTCM
c  Total (atomic/nuclear) mass excess:
      EEXRES = ETOTCM - ARES * AMUFBK
      PRFBCH (0) = ZERZER
      LGDCHN = .FALSE.
      NFBCH  = 0
      IZRCH  = 0
      IZRMX  = MAX ( 8, ( IFB2 - IFB1 ) / 10 )
c  +-------------------------------------------------------------------*
c  |  Loop over all possible break-up channels
      DO 2000 IFB = IFB1, IFB2
         EKQREA = EEXRES - EXFRBK (IFB)
c  |  +----------------------------------------------------------------*
c  |  |  Energetically impossible
         IF ( EKQREA .LE. ANGLGB ) THEN
c  |  |  Probability for the given channel:
            WFBCH  = ZERZER
c  |  |  If Coulomb barrier is included in the ordering procedure
c  |  |  in Frbkin:
c           IZRCH  = IZRCH + 1
c           IF ( IZRCH .GT. IZRMX ) GO TO 2200
c           NFBCH  = NFBCH + 1
c  |  |  If Coulomb barrier is excluded in the ordering procedure
c  |  |  in Frbkin:
            GO TO 2200
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Energetically possible:
         ELSE
c  |  |  +-------------------------------------------------------------*
c  |  |  |  No barrier:
            IF ( COUFBK (IFB) .LE. ANGLGB ) THEN
               EKAVAI = EKQREA
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  With barrier
            ELSE
               EKAVAI = EKQREA - COUFBK (IFB)
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  Sub-barrier region (starts at ekbrmn MeV above the
c  |  |  |  |  nominal barrier):
               IF ( EKAVAI .LT. EKBRMN ) THEN
                  EKAVAI = EKAVAI - EKBRMN
                  ALPHAB = 0.869D+00 + 9.91D+00 / ( ZRES - ONEONE )
                  EKAVAI = MIN ( EKQREA, EKBRMN ) * EXP ( ALPHAB*EKAVAI)
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            NFBCH  = NFBCH + 1
c  |  |  Break up channel multiplicity:
            MFBCH  = IFBCHA (5,IFB)
            EFBCH  = 1.5D+00 * DBLE (MFBCH) - 2.5D+00
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Check for a possible "compound elastic":
            IF ( MFBCH .EQ. 2 .AND. IFBCHA (4,IFB) .EQ. IFBFRB ) THEN
               EKAVAI = ZERZER
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |
            ELSE
               EKAVAI = EKAVAI**EFBCH
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  +-------------------------------------------------------------*
c*sr 30.6.
C*  |  |  |  Probability for the given channel:
C            IF ( EKAVAI .GT. PRCHMN ) THEN
c  |  |  |  Probability for the given channel: 8-C is a problem, be sure
c  |  |  |  to fragment it!
            IF ( EKAVAI .GT. PRCHMN .OR. IARES .LE. 4 .OR. ( IARES .EQ.
     &           8 .AND. IZRES .EQ. 6 ) ) THEN
c*
               WFBCH  = SDMFBK (IFB) * EKAVAI
               LGDCHN = .TRUE.
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Too small probability (avoid to select situations well below
c  |  |  |  barriers with no actual probability). Please note that
c  |  |  |  PRCHMN is dependent on the unit used for energy, the present
c  |  |  |  one is consistent for MeV.
            ELSE
               WFBCH  = ZERZER
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         PRFBCH (NFBCH) = PRFBCH (NFBCH-1) + WFBCH
 2000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
 2200 CONTINUE
c  +-------------------------------------------------------------------*
c  |  Apparently no channel is open:
      IF ( .NOT. LGDCHN ) THEN
c  |  +----------------------------------------------------------------*
c  |  |  Check if this residual nucleus is in the "particle stable" list
         IF ( INRES .LE. MXNFBK .AND. IZRES .LE. MXZFBK ) THEN
            IPS1 = IPSIND (INRES,IZRES,1)
            IPS2 = IPSIND (INRES,IZRES,2)
c  |  |  +-------------------------------------------------------------*
c  |  |  |  No particle stable state available for this A-Z
            IF ( IPS1 .GT. IPS2 ) THEN
               ISTRES = -1
c  |  |  |  +----------------------------------------------------------*
c  |  |  |  |  For A=17 the indeces are there but of course no stable
c  |  |  |  |  state is actually recorded! Trust the code and set them
c  |  |  |  |  as particle stable (no break up channel appears to be
c  |  |  |  |  open)
               IF ( IARES .GT. MXAFBK ) THEN
                  ISTRES = 0
               END IF
c  |  |  |  |
c  |  |  |  +----------------------------------------------------------*
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Check the particle stability of the lowest energy state
c  |  |  |  of A-Z
            ELSE
               ISTRES = IFBKST (IPS1)
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  +-------------------------------------------------------------*
c  |  |  |  No particle stable state available for this A-Z: why it was
c  |  |  |  impossible to select a break up combination? A very good
c  |  |  |  answer is because of barrier effects, in such a case
c  |  |  |  consider the nucleus on the ground state (even though it is
c  |  |  |  not exactly on it) and go to particle unstable nuclei decay:
            IF ( ISTRES .GE. 2 .AND. ISTRES .LT. 900 ) THEN
               NPEXPL = 1
               KPEXPL (1) = IPS1
               AMEXPL (1) = ETOTCM
               ETEXPL (1) = ETOTCM
               PXEXPL (1) = ZERZER
               PYEXPL (1) = ZERZER
               PZEXPL (1) = ZERZER
               N8BEFR = 0
               GO TO 5100
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  No particle stable state available for this A-Z: why it was
c  |  |  |  impossible to select a break up combination? If there
c  |  |  |  barrier effects are not the right answer
            ELSE IF ( ISTRES .NE. 0 ) THEN
               WRITE (ErrorOut,*)
     &         ' *** FRMBRK: UNABLE TO BREAK UP AN UNSTABLE NUCLEUS!',
     &           IARES, IZRES, SNGL (EXCRES),' ***'
               WRITE (ErrorOut,*)
     &         ' *** FRMBRK: UNABLE TO BREAK UP AN UNSTABLE NUCLEUS!',
     &           IARES, IZRES, SNGL (EXCRES),' ***'
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |
         ELSE
            ISTRES = -1
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  At this point the "final" nucleus is the original one: just check
c  |  whether it is a 8-Be nucleus and return (please note that 8-Be
c  |  even though in an excited state is always split into two alphas):
         IF ( IARES .NE. 8 .OR. IZRES .NE. 4 ) RETURN
c*sr 30.6.
         N8BEFR = 1
         NCHRGD = 2
c*
         NPEXPL = 2
         KPEXPL (1) = 6
         KPEXPL (2) = 6
         AMEXPL (1) = AMFRBK (KPEXPL(1))
         AMEXPL (2) = AMFRBK (KPEXPL(2))
         ETOTEX = ETOTCM
c  |  Make the 8-Be nucleus decay:
         CALL DT_EXPLOD( NPEXPL, AMEXPL, ETOTEX, ETEXPL, PXEXPL,
     &                 PYEXPL, PZEXPL )
c*sr 30.6. (decrease accuracy to avoid error messages on DEC-ultrix)
         ETEPS  = 1.0D3*TENTEN * CSNNRM * ETOTEX
c*
         GO TO 8000
      END IF
c  |
c  +-------------------------------------------------------------------*
      RNBRKP = DT_RNDM(RNBRKP) * PRFBCH (NFBCH)
c  +-------------------------------------------------------------------*
c  |  Loop over the possible break up channels:
      DO 3000 KFB = 1, NFBCH
c  |  +----------------------------------------------------------------*
c  |  |  The KBth of the available channels has been selected:
         IF ( RNBRKP .LT. PRFBCH (KFB) ) THEN
c  |  |  Compute the break up index:
            IFB = KFB + IFB1 - 1
            GO TO 3200
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
 3000 CONTINUE
      STOP 'STOP:FRMBRK-NO-SELECTED-CHANNEL'
 3200 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      NPEXPL = IFBCHA (5,IFB)
      KPCURR = IFBCHA (4,IFB)
      KPEXPL (1) = IFBCHA (3,IFB)
      INCK   = IFRBKN (KPEXPL(1))
      IZCK   = IFRBKZ (KPEXPL(1))
c  +-------------------------------------------------------------------*
c  |  Just two "stable" particles:
      IF ( KPCURR .GT. 0 ) THEN
         KPEXPL (2) = KPCURR
         INCK = INCK + IFRBKN (KPEXPL(2))
         IZCK = IZCK + IFRBKZ (KPEXPL(2))
c  |
c  +-------------------------------------------------------------------*
c  |  The second one is a "composite" particle:
      ELSE
         JB = 1
c  |  +----------------------------------------------------------------*
c  |  |  Loop until only "stable" particles are left:
 3400    CONTINUE
            KPCURR = -KPCURR
            JB     = JB + 1
            KPEXPL (JB) = IFBCHA (3,KPCURR)
            INCK   = INCK + IFRBKN (KPEXPL(JB))
            IZCK   = IZCK + IFRBKZ (KPEXPL(JB))
            KPCURR = IFBCHA (4,KPCURR)
         IF ( KPCURR .LT. 0 ) GO TO 3400
c  |  |  Still a composite particle:
c  |  +----------------------------------------------------------------*
         JB     = JB + 1
         KPEXPL (JB) = KPCURR
         INCK   = INCK + IFRBKN (KPEXPL(JB))
         IZCK   = IZCK + IFRBKZ (KPEXPL(JB))
         IF ( JB .NE. NPEXPL ) STOP 'STOP:FRMBRK-NPEXPL-JB'
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Check charge and baryon number conservation:
      IF ( INCK .NE. INRES .OR. IZCK .NE. IZRES ) THEN
         WRITE (ErrorOut,*)' *** Frmbrk:Inres,Inck,Izres,Izck',
     &                                INRES,INCK,IZRES,IZCK
         WRITE (ErrorOut,
     * *)' *** Frmbrk:Npexpl,(Kpexpl(jb),jb=1,npexpl)',
     &                                NPEXPL,(KPEXPL(JB),JB=1,NPEXPL)
         STOP 'STOP:FRMBRK-INCK-IZCK'
      END IF
c  |
c  +-------------------------------------------------------------------*
      CALL DT_IORDIN( KPEXPL, KPHELP, NPEXPL )
      NCHRGD = 0
      N8BEFR = 0
      AMTOT  = ZERZER
c  +-------------------------------------------------------------------*
c  |  Select masses and look for charged particles (and possibly
c  |  for 8-Be):
      DO 4000 KP = 1, NPEXPL
         AMEXPL (KP) = AMFRBK (KPEXPL(KP))
         KPHELP (KP) = IFRBKZ (KPEXPL(KP))
c  |  +----------------------------------------------------------------*
c  |  |  Look for charged particles and 8-Be:
         IF ( KPHELP (KP) .GT. 0 ) THEN
            NCHRGD = NCHRGD + 1
            IF ( KPHELP (KP) .EQ. 4 .AND. IFRBKN (KPEXPL(KP)) .EQ. 4 )
     &         THEN
               N8BEFR = N8BEFR + 1
               KP8BEF (N8BEFR) = KP
            END IF
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         AMTOT  = AMTOT + AMEXPL (KP)
 4000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      EKQREA = EEXRES - EXFRBK (IFB)
c  +-------------------------------------------------------------------*
c  |  There are two or more charged particles and anyway there are not
c  |  just two charged particles (in which case plain two body decay
c  |  is perfect):
      IF ( NCHRGD .GT. 1 .AND. NPEXPL .GT. 2 ) THEN
         EKAVAI = EKQREA - COUFBK (IFB)
c  |  +----------------------------------------------------------------*
c  |  |  Sub-barrier region (starts at ekbrmn MeV above the
c  |  |  nominal barrier):
         IF ( EKAVAI .LT. EKBRMN ) THEN
            EKAVAI = EKAVAI - EKBRMN
            ALPHAB = 0.869D+00 + 9.91D+00 / ( ZRES - ONEONE )
            EKAVAI = MIN ( EKQREA, EKBRMN ) * EXP ( ALPHAB * EKAVAI )
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
        EKCOUL = EKQREA - EKAVAI
        ETOTEX = ETOTCM - EKCOUL
c  |
c  +-------------------------------------------------------------------*
c  |
      ELSE
         EKAVAI = EKQREA
         IF ( COUFBK (IFB) .GT. ANGLGB .AND. NCHRGD .LE. 0 )
     &        STOP 'STOP:FRMBRK-COUFBK'
         ETOTEX = ETOTCM
         EKCOUL = ZERZER
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Print an error message and stop:
      IF ( AMTOT .GT. ETOTEX ) THEN
         WRITE (ErrorOut,*)
     &   ' *** FRMBRK: NORMAL EXPLOSION, TOTAL ENERGY < MASS!!',
     &         ETOTEX, AMTOT, EKQREA, IARES, IZRES, NPEXPL,
     &         (AMEXPL (I), I=1,NPEXPL)
         WRITE (ErrorOut,*)
     &   ' *** FRMBRK: NORMAL EXPLOSION, TOTAL ENERGY < MASS!!',
     &         ETOTEX, AMTOT, EKQREA, IARES, IZRES, NPEXPL,
     &         (AMEXPL (I), I=1,NPEXPL)
c  |  +----------------------------------------------------------------*
c  |  |  Print a further error message:
         IF ( EKCOUL .GT. ANGLGB ) THEN
            WRITE (ErrorOut,*)
     &      ' *** EKCOUL, EKAVAI, EKBRMN', EKCOUL, EKAVAI, EKBRMN
            WRITE (ErrorOut,*)
     &      ' *** EKCOUL, EKAVAI, EKBRMN', EKCOUL, EKAVAI, EKBRMN
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         STOP 'STOP:FRMBRK-AMTOT-ETOTEX'
      END IF
c  |
c  +-------------------------------------------------------------------*
      EPERNC = EKAVAI / DBLE (IARES)
c  Omit for the moment:
c     EXPHLP = NPEXPL - 2
      EXPHLP = ONEONE
c  +-------------------------------------------------------------------*
c  |  Energy per nucleon above minimum or 2 particle decay:
      IF ( EPERNC .GE. ENCMNB * EXPHLP .OR. NPEXPL .LE. 2 ) THEN
         ENUCMN = ZERZER
         EXPHLP = ONEONE
c  |
c  +-------------------------------------------------------------------*
c  |  Energy per nucleon below any reasonable minimum
      ELSE IF ( EPERNC .LE. ENCMNA * EXPHLP ) THEN
         ENUCMN = ENCMNA * EXPHLP
c  |
c  +-------------------------------------------------------------------*
c  |
      ELSE
         PRNCMN = ( EPERNC / EXPHLP - ENCMNA ) / ( ENCMNB - ENCMNA )
         IF ( DT_RNDM(PRNCMN) .LT. PRNCMN ) THEN
            ENUCMN = ENCMNA
         ELSE
            ENUCMN = ENCMNB
         END IF
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  If the energy per nucleon is very small, set the largest mass
c  |  fragment at rest, and explod the others:
      IF ( EPERNC / EXPHLP .LT. ENUCMN .AND. NPEXPL .GT. 2 ) THEN
         MPEXPL = NPEXPL
         ETOTHL = ETOTEX
         IAHLP  = IARES
         KCHRGD = NCHRGD
 4100    CONTINUE
            IF ( KPHELP (MPEXPL) .GT. 0 ) KCHRGD = KCHRGD - 1
            ETEXPL (MPEXPL) = AMEXPL (MPEXPL)
            PXEXPL (MPEXPL) = ZERZER
            PYEXPL (MPEXPL) = ZERZER
            PZEXPL (MPEXPL) = ZERZER
            IAHLP  = IAHLP  - IFRBKN (KPEXPL(MPEXPL))
     &             - IFRBKZ (KPEXPL(MPEXPL))
            ETOTHL = ETOTHL - AMEXPL (MPEXPL)
            MPEXPL = MPEXPL - 1
c  |  Omit for the moment:
c           EXPHLP = MAX ( 1, MPEXPL - 2 )
            EXPHLP = ONEONE
            EPERNC = EKAVAI / DBLE (IAHLP)
         IF ( MPEXPL .GT. 2 .AND. EPERNC / EXPHLP .LT. ENUCMN
     &        .AND. ( KCHRGD .GT. 2 .OR. NCHRGD .LE. 1 ) )
     &      GO TO 4100
c  |  Make the explosion:
         CALL DT_EXPLOD( MPEXPL, AMEXPL, ETOTHL, ETEXPL, PXEXPL, PYEXPL,
     &                 PZEXPL )
c  |
c  +-------------------------------------------------------------------*
c  |  Make the explosion:
      ELSE
         CALL DT_EXPLOD( NPEXPL, AMEXPL, ETOTEX, ETEXPL, PXEXPL, PYEXPL,
     &                 PZEXPL )
      END IF
c  |
c  +-------------------------------------------------------------------*
c*sr 19.5.95 decrease accuracy to avoid error messages on DEC-ultrix
C     ETEPS  = TENTEN * CSNNRM * ETOTEX
      ETEPS  = 1.0D3*TENTEN * CSNNRM * ETOTEX
c*
c  +-------------------------------------------------------------------*
c  |  There are two or more charged particles:
      IF ( NCHRGD .GT. 1 .AND. EKCOUL .GT. ANGLGB ) THEN
         ECHRGD = ZERZER
         PXTCHR = ZERZER
         PYTCHR = ZERZER
         PZTCHR = ZERZER
         ICHRGD = 0
c  |  +----------------------------------------------------------------*
c  |  |  Select masses and look for charged particles
         DO 4200 KP = 1, NPEXPL
            AMEXPL (KP) = AMFRBK (KPEXPL(KP))
            KPHELP (KP) = IFRBKZ (KPEXPL(KP))
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Record charged particles:
            IF ( KPHELP (KP) .GT. 0 ) THEN
               ICHRGD = ICHRGD + 1
               ECHRGD = ECHRGD + ETEXPL (KP)
               PXTCHR = PXTCHR + PXEXPL (KP)
               PYTCHR = PYTCHR + PYEXPL (KP)
               PZTCHR = PZTCHR + PZEXPL (KP)
               ETCHRG (ICHRGD) = ETEXPL (KP)
               AMCHRG (ICHRGD) = AMEXPL (KP)
               PXCHRG (ICHRGD) = PXEXPL (KP)
               PYCHRG (ICHRGD) = PYEXPL (KP)
               PZCHRG (ICHRGD) = PZEXPL (KP)
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
 4200    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         PTCHRG = SQRT ( PXTCHR**2 + PYTCHR**2 + PZTCHR**2 )
         UMCHRG = ( ECHRGD - PTCHRG ) * ( ECHRGD + PTCHRG )
         UMCHRG = SQRT (UMCHRG)
         GAMCHR = ECHRGD / UMCHRG
         ETACHX = PXTCHR / UMCHRG
         ETACHY = PYTCHR / UMCHRG
         ETACHZ = PZTCHR / UMCHRG
         ECHCK  = UMCHRG
         PXCHCK = ZERZER
         PYCHCK = ZERZER
         PZCHCK = ZERZER
c  |  +----------------------------------------------------------------*
c  |  |  Make the transformation to the charged particle CMS:
         DO 4400 I = 1, NCHRGD
            ETAPCM     = ETACHX * PXCHRG (I) + ETACHY * PYCHRG (I)
     &                 + ETACHZ * PZCHRG (I)
            PHELP      = ETCHRG (I) - ETAPCM / ( GAMCHR + ONEONE )
            ETCHRG (I) = GAMCHR * ETCHRG (I) - ETAPCM
            PXCHRG (I) = PXCHRG (I) - ETACHX * PHELP
            PYCHRG (I) = PYCHRG (I) - ETACHY * PHELP
            PZCHRG (I) = PZCHRG (I) - ETACHZ * PHELP
            ECHCK  = ECHCK  - ETCHRG (I)
            PXCHCK = PXCHCK - PXCHRG (I)
            PYCHCK = PYCHCK - PYCHRG (I)
            PZCHCK = PZCHCK - PZCHRG (I)
 4400    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
c  |  +----------------------------------------------------------------*
c  |  |  Check energy and momentum conservation:
         IF ( ABS (ECHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &        .GT. ETEPS  ) THEN
            WRITE (ErrorOut,*)
     &      ' *** FRMBRK_CMS1:ENERGY OR MOMENTUM CONSERVATION FAILURE:'
            WRITE (ErrorOut,*)
     &            ' NCHRGD,UMCHRG,ECHCK,PXCHCK,PYCHCK,PZCHCK',
     &              NCHRGD,UMCHRG,ECHCK,PXCHCK,PYCHCK,PZCHCK
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Now "expand" the energy of the charged particles in their own CMS
c  |  from Umchrg to Umnchr:
         ECHRGD = ECHRGD + EKCOUL
         UMNCHR = ( ECHRGD - PTCHRG ) * ( ECHRGD + PTCHRG )
         UMNCHR = SQRT (UMNCHR)
         DETCMS = UMNCHR - UMCHRG
         CALL DT_ECMSEX( NCHRGD, UMCHRG, DETCMS, AMCHRG, ETCHRG, PXCHRG,
     &                 PYCHRG, PZCHRG )
         GAMCHR = ECHRGD / UMNCHR
         ETACHX = PXTCHR / UMNCHR
         ETACHY = PYTCHR / UMNCHR
         ETACHZ = PZTCHR / UMNCHR
         ECHCK  = ECHRGD
         PXCHCK = PXTCHR
         PYCHCK = PYTCHR
         PZCHCK = PZTCHR
c  |  +----------------------------------------------------------------*
c  |  |  Make the transformation back to the original residual nucleus
c  |  |  CMS:
         DO 4600 I = 1, NCHRGD
            ETAPCM     = ETACHX * PXCHRG (I) + ETACHY * PYCHRG (I)
     &                 + ETACHZ * PZCHRG (I)
            PHELP      = ETCHRG (I) + ETAPCM / ( GAMCHR + ONEONE )
            ETCHRG (I) = GAMCHR * ETCHRG (I) + ETAPCM
            PXCHRG (I) = PXCHRG (I) + ETACHX * PHELP
            PYCHRG (I) = PYCHRG (I) + ETACHY * PHELP
            PZCHRG (I) = PZCHRG (I) + ETACHZ * PHELP
            ECHCK  = ECHCK  - ETCHRG (I)
            PXCHCK = PXCHCK - PXCHRG (I)
            PYCHCK = PYCHCK - PYCHRG (I)
            PZCHCK = PZCHCK - PZCHRG (I)
 4600    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
c  |  +----------------------------------------------------------------*
c  |  |  Check energy and momentum conservation:
         IF ( ABS (ECHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &        .GT. ETEPS  ) THEN
            WRITE (ErrorOut,*)
     &      ' *** FRMBRK_CMS2:ENERGY OR MOMENTUM CONSERVATION FAILURE:'
            WRITE (ErrorOut,*)
     &            ' NCHRGD,ECHRGD,ECHCK,PXCHCK,PYCHCK,PZCHCK',
     &              NCHRGD,ECHRGD,ECHCK,PXCHCK,PYCHCK,PZCHCK
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         ECHCK  = ETOTCM
         PXCHCK = ZERZER
         PYCHCK = ZERZER
         PZCHCK = ZERZER
         ICHRGD = 0
c  |  +----------------------------------------------------------------*
c  |  |  Put back on stack the transformed charged particles and check
c  |  |  energy and momentum conservation:
         DO 4800 I = 1, NPEXPL
            IF ( KPHELP (I) .GT. 0 ) THEN
               ICHRGD = ICHRGD + 1
               ETEXPL (I) = ETCHRG (ICHRGD)
               PXEXPL (I) = PXCHRG (ICHRGD)
               PYEXPL (I) = PYCHRG (ICHRGD)
               PZEXPL (I) = PZCHRG (ICHRGD)
            END IF
            ECHCK  = ECHCK  - ETEXPL (I)
            PXCHCK = PXCHCK - PXEXPL (I)
            PYCHCK = PYCHCK - PYEXPL (I)
            PZCHCK = PZCHCK - PZEXPL (I)
 4800    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         IF ( ICHRGD .NE. NCHRGD ) STOP 'STOP:FRMBRK-ICHRGD-NCHRGD'
c  |  +----------------------------------------------------------------*
c  |  |  Check energy and momentum conservation:
         IF ( ABS (ECHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &        .GT. ETEPS  ) THEN
            WRITE (ErrorOut,*)
     &      ' *** FRMBRK_CH1:ENERGY OR MOMENTUM CONSERVATION FAILURE:'
            WRITE (ErrorOut,*)
     &            ' NPEXPL,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK',
     &              NPEXPL,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Let possible 8-Be fragments decay (even though excited):
      DO 5000 IB = 1, N8BEFR
         KP     = KP8BEF (IB)
c        PTCHRG = SQRT ( PXEXPL (KP)**2 + PYEXPL (KP)**2
c    &          + PZEXPL (KP)**2 )
c        UMCHRG = ( ETEXPL (KP) - PTCHRG ) * ( ETEXPL (KP) + PTCHRG )
c        UMCHRG = SQRT (UMCHRG)
         UMCHRG = AMEXPL (KP)
         GAMCHR = ETEXPL (KP) / UMCHRG
         ETACHX = PXEXPL (KP) / UMCHRG
         ETACHY = PYEXPL (KP) / UMCHRG
         ETACHZ = PZEXPL (KP) / UMCHRG
c  |  Transform the 8-Be nucleus into the first alpha:
         KPEXPL (KP) = 6
         AMEXPL (KP) = AMFRBK (KPEXPL(KP))
         ETCMS  = HLFHLF * UMCHRG
         PTCMS  = SQRT ( ( ETCMS - AMEXPL (KP) )
     &                 * ( ETCMS + AMEXPL (KP) ) )
         CALL DT_RACO( PXCMS, PYCMS, PZCMS )
         PXCMS  = PTCMS * PXCMS
         PYCMS  = PTCMS * PYCMS
         PZCMS  = PTCMS * PZCMS
         ETAPCM = ETACHX * PXCMS + ETACHY * PYCMS + ETACHZ * PZCMS
         PHELP  = ETCMS  + ETAPCM / ( GAMCHR + ONEONE )
         ETEXPL (KP) = GAMCHR * ETCMS + ETAPCM
         PXEXPL (KP) = PXCMS + ETACHX * PHELP
         PYEXPL (KP) = PYCMS + ETACHY * PHELP
         PZEXPL (KP) = PZCMS + ETACHZ * PHELP
c  |  New Alpha:
         NPEXPL = NPEXPL + 1
         KP     = NPEXPL
         KPEXPL (KP) = 6
         AMEXPL (KP) = AMFRBK (KPEXPL(KP))
         ETAPCM = - ETAPCM
         PHELP  = ETCMS  + ETAPCM / ( GAMCHR + ONEONE )
         ETEXPL (KP) = GAMCHR * ETCMS + ETAPCM
         PXEXPL (KP) =-PXCMS + ETACHX * PHELP
         PYEXPL (KP) =-PYCMS + ETACHY * PHELP
         PZEXPL (KP) =-PZCMS + ETACHZ * PHELP
 5000 CONTINUE
c  |
c  +-------------------------------------------------------------------*
 5100 CONTINUE
      NUNSTB = 0
      KP     = 1
c  +-------------------------------------------------------------------*
c  |  Now look for (possible) particle unstable states:
 5500 CONTINUE
c  |  +----------------------------------------------------------------*
c  |  |  Look for possible 8-Be created by particle unstable state
c  |  |  decays:
         IF ( IFRBKZ (KPEXPL(KP)) .EQ. 4 .AND. IFRBKN (KPEXPL(KP))
     &        .EQ. 4 ) THEN
            KPDECY = 6
            KPREMN = 6
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Particle stable state:
         ELSE IF ( IFBKST (KPEXPL(KP)) .EQ. 0 ) THEN
            GO TO 7000
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Particle unstable state:
         ELSE
            IF ( IFBKST (KPEXPL(KP)) .LT. -900 )
     &         STOP 'STOP:FRMBRK-UNSTABLE'
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Three body decay
            IF ( IFBKST (KPEXPL(KP)) .GT. 10 ) THEN
               KPDECY = MOD (IFBKST(KPEXPL(KP)),10)
               KPDCY2 = ( IFBKST (KPEXPL(KP)) - KPDECY ) / 10
c  |  |  |  Now determine the identity of the "heavy" remnant: it
c  |  |  |  should be chosen among the accessible levels of the given
c  |  |  |  Z,A according to the standard phase space and barrier consi-
c  |  |  |  deration, however for the moment the ground state is always
c  |  |  |  selected
               INREMN = IFRBKN (KPEXPL(KP)) - IFRBKN (KPDECY)
     &                - IFRBKN (KPDCY2)
               IZREMN = IFRBKZ (KPEXPL(KP)) - IFRBKZ (KPDECY)
     &                - IFRBKZ (KPDCY2)
c  |  |  |
c  |  |  +-------------------------------------------------------------*
c  |  |  |  Two body:
c  |  |  |  This should be the identity of the lightest decay product:
            ELSE
               KPDECY = ABS (IFBKST(KPEXPL(KP)))
               KPDCY2 = 0
c  |  |  |  Now determine the identity of the "heavy" remnant: it
c  |  |  |  should be chosen among the accessible levels of the given
c  |  |  |  Z,A according to the standard phase space and barrier consi-
c  |  |  |  deration, however for the moment the ground state is always
c  |  |  |  selected
               INREMN = IFRBKN (KPEXPL(KP)) - IFRBKN (KPDECY)
               IZREMN = IFRBKZ (KPEXPL(KP)) - IFRBKZ (KPDECY)
            END IF
c  |  |  |
c  |  |  +-------------------------------------------------------------*
            IPS1   = IPSIND (INREMN,IZREMN,1)
            IPS2   = IPSIND (INREMN,IZREMN,2)
c  |  |  No particle stable state available for this A-Z
            IF ( IPS1 .GT. IPS2 ) STOP 'STOP:FRMBRK-ABSURD-DECAY'
c  |  |  Take the ground state: of course this procedure is not very
c  |  |  correct, one should decide according to phase space etc.
c  |  |  considerations among the accessible excited states, but
c  |  |  spin/parity selection rules should be taken into account, so...
            KPREMN = IPS1
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         NUNSTB = NUNSTB + 1
         UMCHRG = AMEXPL (KP)
         GAMCHR = ETEXPL (KP) / UMCHRG
         ETACHX = PXEXPL (KP) / UMCHRG
         ETACHY = PYEXPL (KP) / UMCHRG
         ETACHZ = PZEXPL (KP) / UMCHRG
c  |  +----------------------------------------------------------------*
c  |  |  Two body:
         IF ( KPDCY2 .EQ. 0 ) THEN
c  |  |  Transform the unstable nucleus into the light decay fragment:
            KPEXPL (KP) = KPDECY
            AMEXPL (KP) = AMFRBK (KPEXPL(KP))
c  |  |  Heavy fragment:
            NPEXPL = NPEXPL + 1
            LP     = NPEXPL
            KPEXPL (LP) = KPREMN
            AMEXPL (LP) = AMFRBK (KPEXPL(LP))
            ETCMS  = HLFHLF * ( UMCHRG + ( AMEXPL (KP) - AMEXPL (LP) )
     &             * ( AMEXPL (KP) + AMEXPL (LP) ) / UMCHRG )
            PTCMS  = SQRT ( ( ETCMS - AMEXPL (KP) )
     &                    * ( ETCMS + AMEXPL (KP) ) )
            CALL DT_RACO( PXCMS, PYCMS, PZCMS )
            PXCMS  = PTCMS * PXCMS
            PYCMS  = PTCMS * PYCMS
            PZCMS  = PTCMS * PZCMS
            ETAPCM = ETACHX * PXCMS + ETACHY * PYCMS + ETACHZ * PZCMS
            PHELP  = ETCMS  + ETAPCM / ( GAMCHR + ONEONE )
            ETEXPL (KP) = GAMCHR * ETCMS + ETAPCM
            PXEXPL (KP) = PXCMS + ETACHX * PHELP
            PYEXPL (KP) = PYCMS + ETACHY * PHELP
            PZEXPL (KP) = PZCMS + ETACHZ * PHELP
c  |  |  Now the heavy fragment:
            ETCMS  = UMCHRG - ETCMS
            ETAPCM = - ETAPCM
            PHELP  = ETCMS  + ETAPCM / ( GAMCHR + ONEONE )
            ETEXPL (LP) = GAMCHR * ETCMS + ETAPCM
            PXEXPL (LP) =-PXCMS + ETACHX * PHELP
            PYEXPL (LP) =-PYCMS + ETACHY * PHELP
            PZEXPL (LP) =-PZCMS + ETACHZ * PHELP
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Three body:
         ELSE
c  |  |  Transform the unstable nucleus into the light decay fragment:
            KPEXPL (KP) = KPDECY
            AMEXPL (KP) = AMFRBK (KPEXPL(KP))
            NPEXPL = NPEXPL + 2
            MP     = NPEXPL - 1
            LP     = NPEXPL
c  |  |  Second light decay fragment:
            KPEXPL (MP) = KPDCY2
            AMEXPL (MP) = AMFRBK (KPEXPL(MP))
c  |  |  Heavy fragment:
            KPEXPL (LP) = KPREMN
            AMEXPL (LP) = AMFRBK (KPEXPL(LP))
            AMCHRG (1)  = AMEXPL (KP)
            AMCHRG (2)  = AMEXPL (MP)
            AMCHRG (3)  = AMEXPL (LP)
            ETOTHL      = UMCHRG
c  |  |  Make the three body decay:
            CALL DT_EXPLOD(      3, AMCHRG, ETOTHL, ETCHRG, PXCHRG,
     &                    PYCHRG, PZCHRG )
c  |  |  First light fragment:
            ETAPCM = ETACHX * PXCHRG (1) + ETACHY * PYCHRG (1)
     &             + ETACHZ * PZCHRG (1)
            PHELP  = ETCHRG (1) + ETAPCM / ( GAMCHR + ONEONE )
            ETEXPL (KP) = GAMCHR * ETCHRG (1) + ETAPCM
            PXEXPL (KP) = PXCHRG (1) + ETACHX * PHELP
            PYEXPL (KP) = PYCHRG (1) + ETACHY * PHELP
            PZEXPL (KP) = PZCHRG (1) + ETACHZ * PHELP
c  |  |  Second light fragment:
            ETAPCM = ETACHX * PXCHRG (2) + ETACHY * PYCHRG (2)
     &             + ETACHZ * PZCHRG (2)
            PHELP  = ETCHRG (2) + ETAPCM / ( GAMCHR + ONEONE )
            ETEXPL (MP) = GAMCHR * ETCHRG (2) + ETAPCM
            PXEXPL (MP) = PXCHRG (2) + ETACHX * PHELP
            PYEXPL (MP) = PYCHRG (2) + ETACHY * PHELP
            PZEXPL (MP) = PZCHRG (2) + ETACHZ * PHELP
c  |  |  Now the heavy fragment:
            ETAPCM = ETACHX * PXCHRG (3) + ETACHY * PYCHRG (3)
     &             + ETACHZ * PZCHRG (3)
            PHELP  = ETCHRG (3) + ETAPCM / ( GAMCHR + ONEONE )
            ETEXPL (LP) = GAMCHR * ETCHRG (3) + ETAPCM
            PXEXPL (LP) = PXCHRG (3) + ETACHX * PHELP
            PYEXPL (LP) = PYCHRG (3) + ETACHY * PHELP
            PZEXPL (LP) = PZCHRG (3) + ETACHZ * PHELP
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
 7000    CONTINUE
         KP = KP + 1
      IF ( KP .LE. NPEXPL ) GO TO 5500
c  |
c  +-------------------------------------------------------------------*
 8000 CONTINUE
      ECHCK  = ETOTCM + EKRES
      PXCHCK = PXRES
      PYCHCK = PYRES
      PZCHCK = PZRES
      NONEVP = 0
c  +-------------------------------------------------------------------*
c  |  Make the transformation to the lab system of all produced
c  |  particles:
      DO 8200 I = 1, NPEXPL
         ETAPCM     = ETAX * PXEXPL (I) + ETAY * PYEXPL (I)
     &              + ETAZ * PZEXPL (I)
         PHELP      = ETEXPL (I) + ETAPCM / ( GAMCMS + ONEONE )
         ETEXPL (I) = GAMCMS * ETEXPL (I) + ETAPCM
         PXEXPL (I) = PXEXPL (I) + ETAX * PHELP
         PYEXPL (I) = PYEXPL (I) + ETAY * PHELP
         PZEXPL (I) = PZEXPL (I) + ETAZ * PHELP
         IF ( KPEXPL (I) .GT. 6 ) THEN
            NONEVP = NONEVP + 1
            INOEVP = I
         END IF
         ECHCK  = ECHCK  - ETEXPL (I)
         PXCHCK = PXCHCK - PXEXPL (I)
         PYCHCK = PYCHCK - PYEXPL (I)
         PZCHCK = PZCHCK - PZEXPL (I)
 8200 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Check energy and momentum conservation:
      IF ( ABS (ECHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &     .GT. ETEPS  ) THEN
         WRITE (ErrorOut,*)
     &   ' *** FRMBRK:ENERGY OR MOMENTUM CONSERVATION FAILURE:'
         WRITE (ErrorOut,*)
     &' NPEXPL,NCHRGD,N8BEFR,NUNSTB,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK',
     &  NPEXPL,NCHRGD,N8BEFR,NUNSTB,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK
         WRITE (ErrorOut,*)' Iares,Izres,',IARES,IZRES
         DO 8300 KP = 1, NPEXPL
            WRITE (ErrorOut,*)' Nfrgm,Infrg,Izfrg,',KP,
     &                        IFRBKN(KPEXPL(KP)),IFRBKZ(KPEXPL(KP))
 8300    CONTINUE
      END IF
c  |
c  +-------------------------------------------------------------------*
      ECHCK  = ETOTCM + EKRES
      PXCHCK = PXRES
      PYCHCK = PYRES
      PZCHCK = PZRES
c  +-------------------------------------------------------------------*
c  |  Just one "residual" nucleus plus n,p,d,t,3-He and alphas
      IF ( NONEVP .EQ. 1 ) THEN
         INRES  = IFRBKN (KPEXPL(INOEVP))
         IZRES  = IFRBKZ (KPEXPL(INOEVP))
         IARES  = INRES + IZRES
         ARES   = IARES
         ZRES   = IZRES
         EKRES  = ETEXPL (INOEVP) - AMEXPL (INOEVP)
c  |  Atomic mass of the residual nucleus:
         AMRESD = AMUGEV * GEVMEV * ARES + DT_ENERGY( ARES, ZRES )
         IF ( LNCMSS ) AMRESD = AMRESD - ZRES  * AMELCT * GEVMEV
     &                        + ELBNDE (IZRES) * GEVMEV
         EXCRES = AMEXPL (INOEVP) - AMRESD
         EXCRES = MAX ( EXCRES, ZERZER )
         PXRES  = PXEXPL (INOEVP)
         PYRES  = PYEXPL (INOEVP)
         PZRES  = PZEXPL (INOEVP)
         IF ( IFBKST (KPEXPL(INOEVP)) .EQ. 0 ) THEN
            ISTRES = KPEXPL (INOEVP)
         ELSE
            WRITE (ErrorOut,*)
     &   ' *** FRMBRK: PARTICLE UNSTABLE RES. NUC. LEFT AFTER BREAK UP',
     &         KPEXPL (INOEVP),' ***'
               WRITE (ErrorOut,*)
     &   ' *** FRMBRK: PARTICLE UNSTABLE RES. NUC. LEFT AFTER BREAK UP',
     &         KPEXPL (INOEVP),' ***'
            ISTRES = -1
         END IF
         P2RES  = PXRES * PXRES + PYRES * PYRES + PZRES * PZRES
         PTRES  = SQRT (P2RES)
         COSLBR (1) = PXRES / PTRES
         COSLBR (2) = PYRES / PTRES
         COSLBR (3) = PZRES / PTRES
         ECHCK  = ECHCK  - AMRESD - EXCRES - EKRES
         PXCHCK = PXCHCK - PXRES
         PYCHCK = PYCHCK - PYRES
         PZCHCK = PZCHCK - PZRES
c  |  +----------------------------------------------------------------*
c  |  |  Extract the "residual" nucleus and fill the hole with the
c  |  |  last fragment:
         IF ( INOEVP .NE. NPEXPL ) THEN
            KPEXPL (INOEVP) = KPEXPL (NPEXPL)
            ETEXPL (INOEVP) = ETEXPL (NPEXPL)
            AMEXPL (INOEVP) = AMEXPL (NPEXPL)
            PXEXPL (INOEVP) = PXEXPL (NPEXPL)
            PYEXPL (INOEVP) = PYEXPL (NPEXPL)
            PZEXPL (INOEVP) = PZEXPL (NPEXPL)
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         NPEXPL = NPEXPL - 1
c  |
c  +-------------------------------------------------------------------*
c  |  Or "true" multifragmentation event or just only evaporation
c  |  particles:
      ELSE
c  |  Set up a flag to signal it is a "true" multifragmentation event:
         LFRGMN = NONEVP .GT. 1
         IARES  = 0
         IZRES  = 0
         INRES  = 0
         ISTRES = 0
         AMRESD = ZERZER
         EXCRES = ZERZER
         EKRES  = ZERZER
         PXRES  = ZERZER
         PYRES  = ZERZER
         PZRES  = ZERZER
         PTRES  = ZERZER
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Bank n,p,d,t,3-He and 4-He and possible heavier fragments:
      DO 8600 KP = 1, NPEXPL
         EKIN   = ETEXPL (KP) - AMEXPL (KP)
         PTEXPL = SQRT ( PXEXPL (KP)**2 + PYEXPL (KP)**2
     &                 + PZEXPL (KP)**2 )
c  |  +----------------------------------------------------------------*
c  |  |  "Real" fragment:
         IF ( KPEXPL (KP) .GT. 6 ) THEN
            IF ( NONEVP .LE. 1 ) STOP 'STOP:FRMBRK-NONEVP'
            NFISS            = NFISS + 1
            PPFIS  (NFISS)   = PTEXPL
            EKFIS  (NFISS)   = EKIN
            AFIS   (NFISS)   = IFRBKN (KPEXPL(KP)) + IFRBKZ (KPEXPL(KP))
            ZFIS   (NFISS)   = IFRBKZ (KPEXPL(KP))
c  |  |  Atomic mass of the Fragment (ground state):
            AMFRGM           = AMUGEV * GEVMEV * AFIS (NFISS)
     &                       + DT_ENERGY( AFIS (NFISS), ZFIS (NFISS) )
            IF ( LNCMSS ) AMFRGM = AMFRGM - ( ZFIS (NFISS) * AMELCT
     &                           + ELBNDE (IFRBKZ(KPEXPL(KP)))) * GEVMEV
            AMFIS  (NFISS)   = AMFRBK (KPEXPL(KP))
            UFIS   (NFISS)   = AMFRBK (KPEXPL(KP)) - AMFRGM
            UFIS   (NFISS )  = MAX ( UFIS (NFISS), ZERZER )
            COSLFF (1,NFISS) = PXEXPL (KP) / PTEXPL
            COSLFF (2,NFISS) = PYEXPL (KP) / PTEXPL
            COSLFF (3,NFISS) = PZEXPL (KP) / PTEXPL
            IF ( IFBKST (KPEXPL(KP)) .EQ. 0 ) THEN
               ISTFIS (NFISS) = KPEXPL (KP)
            ELSE
               WRITE (ErrorOut,*)
     &       ' *** FRMBRK: PARTICLE UNSTABLE STATE LEFT AFTER BREAK UP',
     &         KPEXPL (KP),' ***'
               WRITE (ErrorOut,*)
     &       ' *** FRMBRK: PARTICLE UNSTABLE STATE LEFT AFTER BREAK UP',
     &         KPEXPL (KP),' ***'
               ISTFIS (NFISS) = -1
            END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Standard evaporation particles:
         ELSE
            NPART  (KPEXPL(KP)) = NPART (KPEXPL(KP)) + 1
            SMOM1  (KPEXPL(KP)) = SMOM1 (KPEXPL(KP)) + EKIN
            ITEMP  = NPART (KPEXPL(KP))
            EPART  (ITEMP,KPEXPL(KP))   = EKIN
            COSEVP (1,ITEMP,KPEXPL(KP)) = PXEXPL (KP) / PTEXPL
            COSEVP (2,ITEMP,KPEXPL(KP)) = PYEXPL (KP) / PTEXPL
            COSEVP (3,ITEMP,KPEXPL(KP)) = PZEXPL (KP) / PTEXPL
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         ECHCK  = ECHCK  - AMEXPL (KP) - EKIN
         PXCHCK = PXCHCK - PXEXPL (KP)
         PYCHCK = PYCHCK - PYEXPL (KP)
         PZCHCK = PZCHCK - PZEXPL (KP)
 8600 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Check energy and momentum conservation:
      IF ( ABS (ECHCK) + ABS (PXCHCK) + ABS (PYCHCK) + ABS (PZCHCK)
     &     .GT. ETEPS  ) THEN
         WRITE (ErrorOut,*)
     &   ' *** FRMBRK_F:ENERGY OR MOMENTUM CONSERVATION FAILURE:'
         WRITE (ErrorOut,*)
     & ' NPEXPL,NCHRGD,N8BEFR,NUNSTB,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK',
     &   NPEXPL,NCHRGD,N8BEFR,NUNSTB,ETOTEX,ECHCK,PXCHCK,PYCHCK,PZCHCK
      END IF
c  |
c  +-------------------------------------------------------------------*
c=== End of subroutine Frmbrk =========================================*
      RETURN
      END

c$ CREATE DT_GETA.FOR
cCOPY DT_GETA
c
c=== geta =============================================================*
c
CDECK  ID>, DT_GETA
      DOUBLE PRECISION FUNCTION DT_GETA( U, JZ, JN, MODE, IS, AOGMAX,
     &                                 AOGMIN )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created on 18 january 1993   by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 20-jun-94     by    Alfredo Ferrari               *
c                                                                      *
c----------------------------------------------------------------------*
c
c (original name: COOKCM)
      PARAMETER ( ASMTOG = SIXSIX / PIPIPI**2 )
      LOGICAL LDEFOZ, LDEFON
      PARAMETER ( INCOOK = 150, IZCOOK = 98 )
      COMMON /FKCOOK/ ALPIGN, BETIGN, GAMIGN, POWIGN,
     &                SZCOOK (IZCOOK), SNCOOK (INCOOK), PZCOOK (IZCOOK),
     &                PNCOOK (INCOOK), LDEFOZ (IZCOOK), LDEFON (INCOOK)

c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: NUCLEV)
      LOGICAL LCLVSL, LFLVSL, LRLVSL, LEQSBL
      COMMON /FKNLEV/ PAENUC (200,2), SHENUC (200,2), DEFRMI (2),
     &                DEFMAG (2), ENNCLV (160,2), RANCLV (160,2),
     &                CUMRAD (0:160,2), RUSNUC (2),
     &                ENPLVL (114), ENNLVL(164), JUSNUC (160,2),
     &                NTANUC (2), NAVNUC (2), NLSNUC (2), NCONUC (2),
     &                NSKNUC (2), NHANUC (2), NUSNUC (2), NACNUC (2),
     &                JMXNUC (2), IPRNUC (3), JPRNUC (3), MAGNUM (8),
     &                MAGNUC (2), MGSNUC (8,2), MGSSNC (25,2),
     &                NSBSHL (2), NMNSBS (2), NPRNUC, INUCLV, LCLVSL,
     &                LFLVSL, LRLVSL, LEQSBL
      DIMENSION JUSPRO (160), JUSNEU (160), MGSPRO (8), MGSNEU (8),
     &          MGSSPR (19) , MGSSNE (25)
      EQUIVALENCE ( RUSNUC (1), RUSPRO )
      EQUIVALENCE ( RUSNUC (2), RUSNEU )
      EQUIVALENCE ( JUSNUC (1,1), JUSPRO (1) )
      EQUIVALENCE ( JUSNUC (1,2), JUSNEU (1) )
      EQUIVALENCE ( MGSNUC (1,1), MGSPRO (1) )
      EQUIVALENCE ( MGSNUC (1,2), MGSNEU (1) )
      EQUIVALENCE ( MGSSNC (1,1), MGSSPR (1) )
      EQUIVALENCE ( MGSSNC (1,2), MGSSNE (1) )
      EQUIVALENCE ( NTANUC (1), NTAPRO )
      EQUIVALENCE ( NTANUC (2), NTANEU )
      EQUIVALENCE ( NAVNUC (1), NAVPRO )
      EQUIVALENCE ( NAVNUC (2), NAVNEU )
      EQUIVALENCE ( NLSNUC (1), NLSPRO )
      EQUIVALENCE ( NLSNUC (2), NLSNEU )
      EQUIVALENCE ( NCONUC (1), NCOPRO )
      EQUIVALENCE ( NCONUC (2), NCONEU )
      EQUIVALENCE ( NSKNUC (1), NSKPRO )
      EQUIVALENCE ( NSKNUC (2), NSKNEU )
      EQUIVALENCE ( NHANUC (1), NHAPRO )
      EQUIVALENCE ( NHANUC (2), NHANEU )
      EQUIVALENCE ( NUSNUC (1), NUSPRO )
      EQUIVALENCE ( NUSNUC (2), NUSNEU )
      EQUIVALENCE ( NACNUC (1), NACPRO )
      EQUIVALENCE ( NACNUC (2), NACNEU )
      EQUIVALENCE ( JMXNUC (1), JMXPRO )
      EQUIVALENCE ( JMXNUC (2), JMXNEU )
      EQUIVALENCE ( MAGNUC (1), MAGPRO )
      EQUIVALENCE ( MAGNUC (2), MAGNEU )

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

      LOGICAL LASMLL
c
      LASMLL = .TRUE.
      IF ( JZ .LE. 0 .OR. JN .LE. 0 ) THEN
         DT_GETA = ( JZ + JN) / B0
         AOGMAX = DT_GETA
         AOGMIN = DT_GETA
         RETURN
      END IF
      GO TO 5
      ENTRY DT_GETG ( U, JZ, JN, MODE, IS, AOGMAX, AOGMIN )
      LASMLL = .FALSE.
    5 CONTINUE
      JA = JN + JZ
      AA = JA
      ZZ = JZ
      GO TO (100,200,300,400), MODE
c  +-------------------------------------------------------------------*
c  |  Standard EVAP parametrization for the level density
  100 CONTINUE
c  |  Actually this a/A
         ASMALD = ( ONEONE + Y0 * ( ( AA - TWOTWO*ZZ ) / AA )**2)
     &          / B0
      GO TO 1000
c  |
c  +-------------------------------------------------------------------*
c  |  Gilbert & Cameron level density with Z and A dependent correction
  200 CONTINUE
         IF ( JA .GT. 250 ) GO TO 100
c  |  No Cameron/Gilbert data available, use the Julich formulation
         IF ( JZ .GT. IZCOOK .OR. JN .GT. INCOOK ) GO TO 300
         IF ( JZ .LT. 9 .OR. JN .LT. 9 ) GO TO 300
c  |  +----------------------------------------------------------------*
c  |  |  Check if it is a deformed nucleus
         IF ( LDEFOZ (JZ) .OR. LDEFON (JN) ) THEN
c  |  |  Gilbert & Cameron deformation dependent term:
            DEFTGC = 0.120D+00
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  Undeformed
         ELSE
c  |  |  Gilbert & Cameron deformation dependent term:
            DEFTGC = 0.142D+00
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Gilbert & Cameron Shell term
         SHTEGC = SZCOOK (JZ) + SNCOOK (JN)
c  |  Actually this is the Gilbert & Cameron a/A
         ASMALD = 9.17D-03 * SHTEGC + DEFTGC
      GO TO 1000
c  |
c  +-------------------------------------------------------------------*
c  |  Julich A-dependent level density:
  300 CONTINUE
         IF ( JA .GT. 250 ) GO TO 100
         IF ( JA .LE. 240 ) THEN
            ASMALD = APRIME (JA)
         ELSE
            ASMALD = (APRIME(240)+(2.5D+00-1.D-01*APRIME(240))
     &             * (JA-240.D+00))
         END IF
c  |  Actually this is a/A
         ASMALD = ASMALD * ( ONEONE + Y0 * ( ( AA - TWOTWO*ZZ )
     &          / AA )**2 ) / AA
      GO TO 1000
c  |
c  +-------------------------------------------------------------------*
c  |  Brancazio & Cameron level density (with Z and A dependent correc-
c  |  tions)
  400 CONTINUE
         IF ( JA .GT. 250 ) GO TO 100
c  |  No Cameron/Gilbert data available, use the Julich formulation
         IF ( JZ .GT. IZCOOK .OR. JN .GT. INCOOK ) GO TO 300
         IF ( JZ .LT. 9 .OR. JN .LT. 9 ) GO TO 300
         DEFTBC = 0.143 D+00
c  |  Gilbert & Cameron Shell term
         SHTEGC = SZCOOK (JZ) + SNCOOK (JN)
         IDSTMG = JN + JZ
c  |  +----------------------------------------------------------------*
c  |  |  Get the minimum number of nucleons (neutrons or protons)
c  |  |  from the nearest shell
         DO 410 MG = 1, 8
            IDSTMG = MIN ( IDSTMG, ABS (JZ-MAGNUM(MG)),
     &                             ABS (JN-MAGNUM(MG)) )
  410    CONTINUE
c  |  |
c  |  +----------------------------------------------------------------*
         DSTMGS = IDSTMG
c  |  Actually this is the Brancazio & Cameron a/A
         ASMALD = 9.1D-03 * ( SHTEGC - 0.23 D+00 * DSTMGS ) + DEFTBC
      GO TO 1000
c  |
c  +-------------------------------------------------------------------*
 1000 CONTINUE
c  +-------------------------------------------------------------------*
c  |  Go smoothly to the Ignyatuk high energy limit
      IF ( ABS (GAMIGN) .GT. ANGLGB ) THEN
c        UEFF = U - PZCOOK (JZ) - PNCOOK (JN)
         UEFF = U - CAM4   (JZ) - CAM5   (JN)
c  |  +----------------------------------------------------------------*
c  |  |  Second Ignyatuk formulation:
         IF ( ABS (POWIGN) .GT. ANGLGB ) THEN
            SURIGN = ONEONE
            AAAHLP = SURIGN * AA**POWIGN
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  First Ignyatuk formulation:
         ELSE
            AAAHLP = AA
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |  Ignatyuk high energy limit: actually this is a~/A
c*sr 30.6.
C        ATILDE = ALPIGN + BETIGN * AAAHLP * SURIGN
         ATILDE = ALPIGN + BETIGN * AAAHLP
c*
c  |  +----------------------------------------------------------------*
c  |  |  A independent gamma of Ignyatuk:
         IF ( GAMIGN .GT. ZERZER ) THEN
            GAMHLP = GAMIGN
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |  A dependent gamma:
         ELSE
            GAMHLP = - ATILDE / GAMIGN / RMASS (JA)
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
         GAMU   = MAX ( GAMHLP * UEFF, 1.D-05 )
c  |  Ignatyuk weighting factor for the zero energy limit:
c*sr avoid floating point underflows
C        GU     = ( ONEONE - EXP (-GAMU) ) / GAMU
         IF (-GAMU.LT.LOG(ANGLGB)) THEN
            GU = ONEONE/GAMU
         ELSE
            GU     = ( ONEONE - EXP (-GAMU) ) / GAMU
         ENDIF
c*
c  |  Make the weighted mean:
         TEMP   = AA * ( ASMALD * GU + ( ONEONE - GU ) * ATILDE )
c  |  +----------------------------------------------------------------*
c  |  |  Check if a_max is at T=0 or at T=oo
         IF ( ASMALD .GT. ATILDE ) THEN
            AOGMAX = AA * ASMALD
            AOGMIN = AA * ATILDE
c  |  |
c  |  +----------------------------------------------------------------*
c  |  |
         ELSE
            AOGMIN = AA * ASMALD
            AOGMAX = AA * ATILDE
         END IF
c  |  |
c  |  +----------------------------------------------------------------*
c  |
c  +-------------------------------------------------------------------*
c  |  No energy dependent level density:
      ELSE
         TEMP   = AA * ASMALD
         AOGMIN = TEMP
         AOGMAX = TEMP
      END IF
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  geta = a (U) (aogmax = a_max)
      IF ( LASMLL ) THEN
         DT_GETA   = TEMP
c  |
c  +-------------------------------------------------------------------*
c  |  getg = g (U) (aogmax = g_max)
      ELSE
         DT_GETG   = ASMTOG * TEMP
         AOGMAX = ASMTOG * AOGMAX
         AOGMIN = ASMTOG * AOGMIN
      END IF
c  |
c  +-------------------------------------------------------------------*
c=== End of Function geta =============================================*
      RETURN
      END

c$ CREATE IORDIN.FOR
cCOPY IORDIN
c
c=== iordin ===========================================================*
c
CDECK  ID>, DT_IORDIN
      SUBROUTINE DT_IORDIN( IVECT, ICORR, LEN )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Integer array ORDering in INcreasing order:                      *
c                                                                      *
c     Created on 08 february 1995  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 13-feb-95     by    Alfredo Ferrari               *
c                                                                      *
c----------------------------------------------------------------------*
c
      DIMENSION IVECT (LEN), ICORR (LEN)
c
c  +-------------------------------------------------------------------*
c  |
      DO 100 I = 1, LEN
         ICORR (I) = I
  100 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Ordering loop:
      DO 300 I = 1, LEN - 1
         DO 200 J = I + 1, LEN
            IF ( IVECT (J) .LT. IVECT (I) ) THEN
               IHELP     = IVECT (I)
               IVECT (I) = IVECT (J)
               IVECT (J) = IHELP
               ICHELP    = ICORR (I)
               ICORR (I) = ICORR (J)
               ICORR (J) = ICHELP
            END IF
  200    CONTINUE
  300 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Check the ordering loop:
      DO 400 I = 1, LEN - 1
         IF ( IVECT (I) .GT. IVECT (I+1) ) STOP 'STOP:IORDIN-ORDER'
  400 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      RETURN
c=== End of subroutine Iordin =========================================*
      END

c$ CREATE NORRAN.FOR
cCOPY NORRAN
c
c=== norran ===========================================================*
c
CDECK  ID>, DT_NORRAN
      SUBROUTINE DT_NORRAN(RGAUSS)

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     NORmal distributed RANdom number generator                       *
c                                                                      *
c     Created on  03 april  1992   by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 19-jul-92     by    Alfredo Ferrari               *
c                                                                      *
c     This routine has the same name of the CERNLIB one for backcompa- *
c     tibility: now it is based on F.James RM48 uniform random number  *
c     generator                                                        *
c                                                                      *
c                                                                      *
c----------------------------------------------------------------------*
c
c Start_VAX_seq
      REAL SEEDA, SEEDB
c End_VAX_seq
      PARAMETER ( TWOPI = 6.283185307179586454D+00 )
C     DIMENSION RNDNUM (2)
c
c*sr 17.5.95
c replaced by random-number generator used in DPMJET
C     CALL RM48 (RNDNUM,2)
C     RGAUSS = SQRT (-2.D+00*LOG(RNDNUM(1)))*SIN(TWOPI*RNDNUM(2))
      V1 = DT_RNDM(V1)
      V2 = DT_RNDM(V2)
      RGAUSS = SQRT (-2.D+00*LOG(V1))*SIN(TWOPI*V2)
c*
      RETURN
      ENTRY DT_NORRUT ( SEEDA, SEEDB )
      SEEDA = 1.D+00
      SEEDB = 1.D+00
      RETURN
      ENTRY DT_NORRIN ( SEEDA, SEEDB )
c=== End of subroutine Norran =========================================*
      RETURN
      END

c$ CREATE DT_QNRG.FOR
cCOPY DT_QNRG
c                                                                      *
c=== qnrg =============================================================*
c                                                                      *
CDECK  ID>, DT_QNRG
      DOUBLE PRECISION FUNCTION DT_QNRG( A1, Z1, A2, Z2 )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Revised version of the original routine from EVAP, now it is     *
c     a dummy function:                                                *
c                                                                      *
c     Created on   15 may 1990     by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 01-oct-94     by    Alfredo Ferrari               *
c                                                                      *
c     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c     !!!  It is supposed to be used with the updated atomic   !!!     *
c     !!!                    mass data file                    !!!     *
c     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
c                                                                      *
c----------------------------------------------------------------------*
c
      ENRG1 = DT_ENERGY( A1, Z1 )
      ENRG2 = DT_ENERGY( A2, Z2 )
      DT_QNRG = ENRG1 - ENRG2
      RETURN
      END

c$ CREATE RORDIN.FOR
cCOPY RORDIN
c
c=== rordin ===========================================================*
c
CDECK  ID>, DT_RORDIN
      SUBROUTINE DT_RORDIN( RVECT, ICORR, LEN )

C     INCLUDE '(DBLPRC)'
c$ CREATE DBLPRC.ADD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c (original name: GLOBAL)
      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( EXCSSV = +35.23192357547063 D+00 )
      PARAMETER ( ENGLGB = -35.23192357547063 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( ONEFOU = ONEONE / FOUFOU )
      PARAMETER ( THRTWO = THRTHR / TWOTWO )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( TWOPIP = 6.283185307179586476925286766559D+00 )
      PARAMETER ( PIP5O2 = 7.853981633974483096156608458199D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( PIHALF = 1.570796326794896619231321691640D+00 )
      PARAMETER ( ERFA00 = 0.886226925452758013649083741671D+00 )
      PARAMETER ( SQTWPI = 2.506628274631000502415765284811D+00 )
      PARAMETER ( EULERO = 0.577215664901532860606512      D+00 )
      PARAMETER ( EULEXP = 1.781072417990197985236504      D+00 )
      PARAMETER ( EULLOG =-0.5495393129816448223376619     D+00 )
      PARAMETER ( E1M2EU = 0.8569023337737540831433017     D+00 )
      PARAMETER ( ENEPER = 2.718281828459045235360287471353D+00 )
      PARAMETER ( SQRENT = 1.648721270700128146848650787814D+00 )
      PARAMETER ( SQRTWO = 1.414213562373095048801688724210D+00 )
      PARAMETER ( SQRTHR = 1.732050807568877293527446341506D+00 )
      PARAMETER ( SQRFIV = 2.236067977499789696409173668731D+00 )
      PARAMETER ( SQRSIX = 2.449489742783178098197284074706D+00 )
      PARAMETER ( SQRSEV = 2.645751311064590590501615753639D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( BOLTZM = 1.380658           D-23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( AMPRMU = 1.007276470        D+00 )
      PARAMETER ( AMNEMU = 1.008664904        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( AMPRTN = 0.93827231         D+00 )
      PARAMETER ( AMNTRN = 0.93956563         D+00 )
      PARAMETER ( AMDEUT = 1.87561339         D+00 )
      PARAMETER ( COUGFM = ELCCGS * ELCCGS / ELCMKS * 1.D-07 * 1.D+13
     &                   * 1.D-09 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( BLTZMN = 8.617385           D-14 )
      PARAMETER ( A0BOHR = PLABRC / ALPFSC / AMELCT )
      PARAMETER ( GFOHB3 = 1.16639            D-05 )
      PARAMETER ( GFERMI = GFOHB3 * PLABRC * PLABRC * PLABRC )
      PARAMETER ( SIN2TW = 0.2319             D+00 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
      LOGICAL LGBIAS, LGBANA
      COMMON /FKGLOB/ LGBIAS, LGBANA

C     INCLUDE '(DIMPAR)'
c$ CREATE DIMPAR.ADD
      PARAMETER ( MXXRGN = 5000 )
      PARAMETER ( MXXMDF = 82   )
      PARAMETER ( MXXMDE = 54   )
      PARAMETER ( MFSTCK = 1000 )
      PARAMETER ( MESTCK = 100  )
      PARAMETER ( NALLWP = 39   )
      PARAMETER ( NELEMX = 80   )
      PARAMETER ( MPDPDX = 8    )
      PARAMETER ( ICOMAX = 180  )
      PARAMETER ( NSTBIS = 304  )
      PARAMETER ( IDMAXP = 220  )
      PARAMETER ( IDMXDC = 640  )
      PARAMETER ( MKBMX1 = 1    )
      PARAMETER ( MKBMX2 = 1    )
C     INCLUDE '(IOUNIT)'
c$ CREATE IOUNIT.ADD
      PARAMETER ( LUNIN  =  5 )
      PARAMETER ( LUNOUT =  6 )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
      PARAMETER ( LUNBER = 14 )
      PARAMETER ( LUNECH =  8 )
      PARAMETER ( LUNFLU = 13 )
      PARAMETER ( LUNGEO = 16 )
      PARAMETER ( LUNPMF = 12 )
      PARAMETER ( LUNRAN =  2 )
      PARAMETER ( LUNXSC =  9 )
      PARAMETER ( LUNDET = 17 )
      PARAMETER ( LUNRAY = 10 )
      PARAMETER ( LUNRDB =  1 )
      PARAMETER ( LUNPGO =  7 )
      PARAMETER ( LUNPGS =  4 )
      PARAMETER ( LUNSCR =  3 )
c
c----------------------------------------------------------------------*
c                                                                      *
c     Real array ORDering in INcreasing order:                         *
c                                                                      *
c     Created on 08 february 1995  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 13-feb-95     by    Alfredo Ferrari               *
c                                                                      *
c----------------------------------------------------------------------*
c
      DIMENSION RVECT (LEN), ICORR (LEN)
c
c  +-------------------------------------------------------------------*
c  |
      DO 100 I = 1, LEN
         ICORR (I) = I
  100 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Ordering loop:
      DO 300 I = 1, LEN - 1
         DO 200 J = I + 1, LEN
            IF ( RVECT (J) .LT. RVECT (I) ) THEN
               RHELP     = RVECT (I)
               RVECT (I) = RVECT (J)
               RVECT (J) = RHELP
               ICHELP    = ICORR (I)
               ICORR (I) = ICORR (J)
               ICORR (J) = ICHELP
            END IF
  200    CONTINUE
  300 CONTINUE
c  |
c  +-------------------------------------------------------------------*
c  +-------------------------------------------------------------------*
c  |  Check the ordering loop:
      DO 400 I = 1, LEN - 1
         IF ( RVECT (I) .GT. RVECT (I+1) ) STOP 'STOP:RORDIN-ORDER'
  400 CONTINUE
c  |
c  +-------------------------------------------------------------------*
      RETURN
c=== End of subroutine Rordin =========================================*
      END
c                                                                      *
c=== berttp ===========================================================*
c                                                                      *
CDECK  ID>, DT_BERTTP
      SUBROUTINE DT_BERTTP

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( PIPIPI = 3.141592653589793238462643383279D+00 )
      PARAMETER ( PIPISQ = 9.869604401089358618834490999876D+00 )
      PARAMETER ( SQRT12 = 3.464101615137754587054892683012D+00 )
      PARAMETER ( EMVGEV = 1.0                D-03 )

      PARAMETER ( NSTBIS = 304  )

      PARAMETER ( LUNIN  = 5  )
      PARAMETER ( LUNOUT = 6  )
c*sr 19.5. set error output-unit from 15 to 6
      PARAMETER ( LUNERR = 6  )
C---------------------------------------------------------------------
C SUBNAME = DT_BERTTP --- READ BERTINI DATA
C---------------------------------------------------------------------
C     ---------------------------------- I-N-C DATA
C     COMMON R8(2127),R4(64),CRSC(600,4),R8B(336),CS(29849)
C     REAL*8 R8,R8B,CRSC,CS
C     REAL*4 R4
C     --------------------------------- EVAPORATION DATA
c (original name: COOKCM)
      PARAMETER ( ASMTOG = SIXSIX / PIPIPI**2 )
      LOGICAL LDEFOZ, LDEFON
      PARAMETER ( INCOOK = 150, IZCOOK = 98 )
      COMMON /FKCOOK/ ALPIGN, BETIGN, GAMIGN, POWIGN,
     &                SZCOOK (IZCOOK), SNCOOK (INCOOK), PZCOOK (IZCOOK),
     &                PNCOOK (INCOOK), LDEFOZ (IZCOOK), LDEFON (INCOOK)

c (original name: EVA0)
      COMMON /FKEVA0/ Y0, B0, P0 (1001), P1 (1001), P2 (1001),
     *                FLA (6), FLZ (6), RHO (6), OMEGA (6), EXMASS (6),
     *                CAM2 (130), CAM3 (200), CAM4 (130), CAM5 (200),
     *                T (4,7), RMASS (297), ALPH (297), BET (297),
     *                APRIME (250), IA (6), IZ (6)

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: HETTP)
      COMMON /FKHETP/  NHSTP,NBERTP,IOSUB,INSRS

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

c (original name: ISOTOP)
      PARAMETER ( NAMSMX = 270 )
      PARAMETER ( NZGVAX =  15 )
      PARAMETER ( NISMMX = 574 )
      COMMON /FKISOT/ WAPS   (NAMSMX,NZGVAX),  T12NUC (NAMSMX,NZGVAX),
     &                WAPISM (NISMMX), T12ISM (NISMMX),
     &                ABUISO (NSTBIS), ASTLIN (2,100), ZSTLIN (2,260),
     &                AMSSST (100)  , ISOMNM (NSTBIS), ISONDX (2,100),
     &                JSPNUC (NAMSMX,NZGVAX), JPTNUC (NAMSMX,NZGVAX),
     &                INWAPS (NAMSMX), JSPISM (NISMMX),
     &                JPTISM (NISMMX), IZWISM (NISMMX),
     &                INWISM (0:NAMSMX)

c (original name: NUCGID,NUCGEO,NUCGE2,NUCPWI,NUCGII)
      PARAMETER ( PI     = PIPIPI )
      PARAMETER ( PISQ   = PIPISQ )
      PARAMETER ( SKTOHL = 0.5456645846610345D+00 )
      PARAMETER ( RZNUCL = 1.12        D+00 )
      PARAMETER ( RMSPRO = 0.8         D+00 )
      PARAMETER ( R0PROT = RMSPRO / SQRT12  )
      PARAMETER ( ARHPRO = 1.D+00 / 8.D+00 / PI / R0PROT / R0PROT
     &          / R0PROT )
      PARAMETER ( RLLE04 = RZNUCL )
      PARAMETER ( RLLE16 = RZNUCL )
      PARAMETER ( RLGT16 = RZNUCL )
      PARAMETER ( RCLE04 = 0.75D+00 / PI / RLLE04 / RLLE04 / RLLE04 )
      PARAMETER ( RCLE16 = 0.75D+00 / PI / RLLE16 / RLLE16 / RLLE16 )
      PARAMETER ( RCGT16 = 0.75D+00 / PI / RLGT16 / RLGT16 / RLGT16 )
      PARAMETER ( SKLE04 = 1.4D+00 )
      PARAMETER ( SKLE16 = 1.9D+00 )
      PARAMETER ( SKGT16 = 2.4D+00 )
      PARAMETER ( HLLE04 = SKTOHL * SKLE04 )
      PARAMETER ( HLLE16 = SKTOHL * SKLE16 )
      PARAMETER ( HLGT16 = SKTOHL * SKGT16 )
      PARAMETER ( ALPHA0 = 0.1D+00 )
      PARAMETER ( OMALH0 = 1.D+00 - ALPHA0 )
      PARAMETER ( GAMSK0 = 0.9D+00 )
      PARAMETER ( OMGAS0 = 1.D+00 - GAMSK0 )
      PARAMETER ( POTME0 = 0.6666666666666667D+00 )
      PARAMETER ( POTBA0 = 1.D+00 )
      PARAMETER ( PNFRAT = 1.533D+00 )
      PARAMETER ( RADPIM = 0.035D+00 )
      PARAMETER ( RDPMHL = 14.D+00   )
      PARAMETER ( APMRST = 4.D+00 / 44.D+00 )
      PARAMETER ( APMPRO = 1.D+00 / 6.D+00 )
      PARAMETER ( APPPRO = 5.D+00 / 6.D+00 )
      PARAMETER ( AP0PFS = 0.5D+00 )
      PARAMETER ( AP0PFP = 1.D+00 / 3.D+00 )
      PARAMETER ( AP0NFP = 2.D+00 / 3.D+00 )
      PARAMETER ( XPAUCO = 1.88495407241652 D+00 )
      PARAMETER ( MXSCIN = 50     )
      LOGICAL LABRST, LELSTC, LINELS, LCHEXC, LABSRP, LABSTH, LNCDCY,
     &        LNUSCT, LPREEQ, LNPHTC, LNWRAD, LPNRHO, LFTCMP, LFTCAC
      COMMON /FKNGID/ RHOTAB (2:260), RHATAB (2:260), ALPTAB (2:260),
     &                RADTAB (2:260), SKITAB (2:260), HALTAB (2:260),
     &                SK3TAB (2:260), SK4TAB (2:260), HABTAB (2:260),
     &                CWSTAB (2:260), EKATAB (2:260), PFATAB (2:260),
     &                PFRTAB (2:260)
      COMMON /FKNGEO/ RADTOT, RADIU1, RADIU0, RAD1O2, SKINDP, HALODP,
     &                ALPHAL, OMALHL, RADSKN, SKNEFF, CPARWS, RADPRO,
     &                RADCOR, RADCO2, RADMAX, BIMPTR, RIMPTR, XIMPTR,
     &                YIMPTR, ZIMPTR, RHOIMT, EKFPRO, PFRPRO, RHOCEN,
     &                RHOCOR, RHOSKN, EKFCEN (2), PFRCEN (2), EKFBIM,
     &                PFRBIM, RHOIMP, EKFIMP, PFRIMP, RHOIM2, EKFIM2,
     &                PFRIM2, RHOIM3, EKFIM3, PFRIM3, VPRWLL, RIMPCT,
     &                BIMPCT, XIMPCT, YIMPCT, ZIMPCT, RIMPC2, XIMPC2,
     &                YIMPC2, ZIMPC2, RIMPC3, XIMPC3, YIMPC3, ZIMPC3,
     &                XBIMPC, YBIMPC, ZBIMPC, CXIMPC, CYIMPC, CZIMPC,
     &                SQRIMP, SIGMAP, SIGMAN, SIGMAA, RHORED, R0TRAJ,
     &                R1TRAJ, SBUSED, SBTOT , SBRES , RHOAVE, EKFAVE,
     &                PFRAVE, AVEBIN, ACOLL , ZCOLL , RADSIG, OPACTY,
     &                EKECON, PNUCCO, EKEWLL, PPRWLL, PXPROJ, PYPROJ,
     &                PZPROJ, EKFERM, PNFRMI, PXFERM, PYFERM, PZFERM,
     &                EKFER2, PNFRM2, PXFER2, PYFER2, PZFER2, EKFER3,
     &                PNFRM3, PXFER3, PYFER3, PZFER3, RHOMEM, EKFMEM,
     &                BIMMEM, WLLRED, VPRBIM, POTINC, POTOUT, EEXMIN
      COMMON /FKNGE2/ RDTTNC (2), RHONCP (2), RHONC2 (2), RHONC3 (2),
     &                RHONCT (2), AMOTHR, EKOTHR, AMCREA, EKNCLN,
     &                EEXDEL, EEXANY, CLMBBR, RDCLMB, BFCLMB, BFCEFF,
     &                BNPROJ, BNDNUC, DEBRLM, SK4PAR, UBIMPC, VBIMPC,
     &                WBIMPC, BNDPOT, SIGMAT, SIGABP, SIGABN, WLLRES,
     &                POTBAR, POTMES, AGEPRI, OPNOPA, ETHRND,
     &                BNENRG (3), DEFNUC (2), SIGMPR (4), SIGMNU (4),
     &                SIGPAB (3), SIGNAB (3), HHLP   (2), FORTOT (2),
     &                FPNBLC, DPNBLC, FFTFLG, IFTFLG,
     &                IPWELL, ITNCMX, KPRIN , NTARGT, KNUCIM, KNUCI2,
     &                KNUCI3, IEVPRE, ISFCOL, ISFTAR, ISFTA2, ISFTA3,
     &                NPOTHR, ICOTHR, IBOTHR, NPUMFN, ISTNCL, ITAUCM,
     &                IABCOU, IADFLG, IGSFLG, IALFLG, ICBFLG, LPREEQ,
     &                LNPHTC, LPNRHO, LNWRAD, LFTCMP, LFTCAC
      COMMON /FKNPWI/ ALMBAR, BIMMAX, SIGGEO, LLLMAX, LLLACT
      COMMON /FKNGII/ HOLEXP (2*MXSCIN), XEXPIN (3,0:MXSCIN),
     &                YEXPIN (3,0:MXSCIN), ZEXPIN (3,0:MXSCIN),
     &                AGEXIN (0:MXSCIN), RHOEXP (2), EKFEXP, EHLFIX,
     &                NHLEXP, NHLFIX, IPRTYP, NNCEXI (0:MXSCIN),
     &                NCEXPI (3,0:MXSCIN), ISEXIN (3,0:MXSCIN),
     &                ISCTYP (0:MXSCIN), NUSCIN, NEXPEM,
     &                LABRST, LELSTC, LINELS, LCHEXC, LABSRP, LABSTH,
     &                LNCDCY, LNUSCT
      DIMENSION AWSTAB (2:260), SIGMAB (3)
      EQUIVALENCE ( DEFPRO, DEFNUC (1) )
      EQUIVALENCE ( DEFNEU, DEFNUC (2) )
      EQUIVALENCE ( RHOIPP, RHONCP (1) )
      EQUIVALENCE ( RHOINP, RHONCP (2) )
      EQUIVALENCE ( RHOIP2, RHONC2 (1) )
      EQUIVALENCE ( RHOIN2, RHONC2 (2) )
      EQUIVALENCE ( RHOIP3, RHONC3 (1) )
      EQUIVALENCE ( RHOIN3, RHONC3 (2) )
      EQUIVALENCE ( RHOIPT, RHONCT (1) )
      EQUIVALENCE ( RHOINT, RHONCT (2) )
      EQUIVALENCE ( OMALHL, SK3PAR )
      EQUIVALENCE ( ALPHAL, HABPAR )
      EQUIVALENCE ( ALPTAB (2), AWSTAB (2) )
      EQUIVALENCE ( SIGMPE, SIGMPR (1) )
      EQUIVALENCE ( SIGMPC, SIGMPR (2) )
      EQUIVALENCE ( SIGMPI, SIGMPR (3) )
      EQUIVALENCE ( SIGMPA, SIGMPR (4) )
      EQUIVALENCE ( SIGMNE, SIGMNU (1) )
      EQUIVALENCE ( SIGMNC, SIGMNU (2) )
      EQUIVALENCE ( SIGMNI, SIGMNU (3) )
      EQUIVALENCE ( SIGMNA, SIGMNU (4) )
      EQUIVALENCE ( SIGMA2, SIGPAB (1) )
      EQUIVALENCE ( SIGMA3, SIGPAB (2) )
      EQUIVALENCE ( SIGMAS, SIGPAB (3) )
      EQUIVALENCE ( SIGPAB (1), SIGMAB (1) )

c (original name: NUCLEV)
      LOGICAL LCLVSL, LFLVSL, LRLVSL, LEQSBL
      COMMON /FKNLEV/ PAENUC (200,2), SHENUC (200,2), DEFRMI (2),
     &                DEFMAG (2), ENNCLV (160,2), RANCLV (160,2),
     &                CUMRAD (0:160,2), RUSNUC (2),
     &                ENPLVL (114), ENNLVL(164), JUSNUC (160,2),
     &                NTANUC (2), NAVNUC (2), NLSNUC (2), NCONUC (2),
     &                NSKNUC (2), NHANUC (2), NUSNUC (2), NACNUC (2),
     &                JMXNUC (2), IPRNUC (3), JPRNUC (3), MAGNUM (8),
     &                MAGNUC (2), MGSNUC (8,2), MGSSNC (25,2),
     &                NSBSHL (2), NMNSBS (2), NPRNUC, INUCLV, LCLVSL,
     &                LFLVSL, LRLVSL, LEQSBL
      DIMENSION JUSPRO (160), JUSNEU (160), MGSPRO (8), MGSNEU (8),
     &          MGSSPR (19) , MGSSNE (25)
      EQUIVALENCE ( RUSNUC (1), RUSPRO )
      EQUIVALENCE ( RUSNUC (2), RUSNEU )
      EQUIVALENCE ( JUSNUC (1,1), JUSPRO (1) )
      EQUIVALENCE ( JUSNUC (1,2), JUSNEU (1) )
      EQUIVALENCE ( MGSNUC (1,1), MGSPRO (1) )
      EQUIVALENCE ( MGSNUC (1,2), MGSNEU (1) )
      EQUIVALENCE ( MGSSNC (1,1), MGSSPR (1) )
      EQUIVALENCE ( MGSSNC (1,2), MGSSNE (1) )
      EQUIVALENCE ( NTANUC (1), NTAPRO )
      EQUIVALENCE ( NTANUC (2), NTANEU )
      EQUIVALENCE ( NAVNUC (1), NAVPRO )
      EQUIVALENCE ( NAVNUC (2), NAVNEU )
      EQUIVALENCE ( NLSNUC (1), NLSPRO )
      EQUIVALENCE ( NLSNUC (2), NLSNEU )
      EQUIVALENCE ( NCONUC (1), NCOPRO )
      EQUIVALENCE ( NCONUC (2), NCONEU )
      EQUIVALENCE ( NSKNUC (1), NSKPRO )
      EQUIVALENCE ( NSKNUC (2), NSKNEU )
      EQUIVALENCE ( NHANUC (1), NHAPRO )
      EQUIVALENCE ( NHANUC (2), NHANEU )
      EQUIVALENCE ( NUSNUC (1), NUSPRO )
      EQUIVALENCE ( NUSNUC (2), NUSNEU )
      EQUIVALENCE ( NACNUC (1), NACPRO )
      EQUIVALENCE ( NACNUC (2), NACNEU )
      EQUIVALENCE ( JMXNUC (1), JMXPRO )
      EQUIVALENCE ( JMXNUC (2), JMXNEU )
      EQUIVALENCE ( MAGNUC (1), MAGPRO )
      EQUIVALENCE ( MAGNUC (2), MAGNEU )

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c (original name: XSEPAR)
      COMMON /FKXSEP/ AANXSE (100), BBNXSE (100), CCNXSE (100),
     &                DDNXSE (100), EENXSE (100), ZZNXSE (100),
     &                EMNXSE (100), XMNXSE (100),
     &                AAPXSE (100), BBPXSE (100), CCPXSE (100),
     &                DDPXSE (100), EEPXSE (100), FFPXSE (100),
     &                ZZPXSE (100), EMPXSE (100), XMPXSE (100)


C---------------------------------------------------------------------
c*sr 17.5.95
c modified for use in DPMJET
C     WRITE( LUNOUT,'(A,I2)')
C    & ' *** Reading evaporation and nuclear data from unit: ', NBERTP
C     REWIND NBERTP
      IF (LEVPRT) WRITE(ErrorOut,1000)
 1000 FORMAT(/,1X,'BERTTP:',4X,'INITIALIZATION OF EVAPORATION MODULE',
     &       /,12X,'------------------------------------',/)
      NBERNW = 23
cc     &&&&&& KK
cc      OPEN (UNIT=NBERNW,FILE='DPMJET.DAT',STATUS='UNKNOWN')
      call cdpmOpen2(NBERNW, 'DPMJET.DAT')
cc      &&&&&&
c*sr 17.5.
c!!!! changed to be able to read the ASCII !!!!
c*
C A. Ferrari: first of all read isotopic data
      READ (NBERNW,*) ISONDX
      READ (NBERNW,*) ISOMNM
      READ (NBERNW,*) ABUISO
C     READ (NBERTP) ISONDX
C     READ (NBERTP) ISOMNM
C     READ (NBERTP) ABUISO
      DO 1 I=1,4
C        READ  (NBERTP) (CRSC(J,I),J=1,600)
C A. Ferrari: commented also the dummy read to save disk space
C        READ  (NBERTP)
    1 CONTINUE
C     READ  (NBERTP) CS
C A. Ferrari: commented also the dummy read to save disk space
C     READ  (NBERTP)
C---------------------------------------------------------------------
      READ (NBERNW,*) (P0(I),P1(I),P2(I),I=1,1001)
      READ (NBERNW,*) IA,IZ
      DO 2 I=1,6
         FLA(I)=IA(I)
         FLZ(I)=IZ(I)
    2 CONTINUE
      READ (NBERNW,*) RHO,OMEGA
      READ (NBERNW,*) EXMASS
      READ (NBERNW,*) CAM2
      READ (NBERNW,*) CAM3
      READ (NBERNW,*) CAM4
      READ (NBERNW,*) CAM5
      READ (NBERNW,*) ((T(I,J),J=1,7),I=1,3)
      DO 3 I=1,7
         T(4,I) = ZERZER
    3 CONTINUE
      READ (NBERNW,*) RMASS
      READ (NBERNW,*) ALPH
      READ (NBERNW,*) BET
      READ (NBERNW,*) INWAPS
      READ (NBERNW,*) WAPS
      READ (NBERNW,*) T12NUC
      READ (NBERNW,*) JSPNUC
      READ (NBERNW,*) JPTNUC
      READ (NBERNW,*) INWISM
      READ (NBERNW,*) IZWISM
      READ (NBERNW,*) WAPISM
      READ (NBERNW,*) T12ISM
      READ (NBERNW,*) JSPISM
      READ (NBERNW,*) JPTISM
      READ (NBERNW,*) APRIME
      IF (LEVPRT)
     &WRITE( ErrorOut,
     * '(A)' ) ' *** Evaporation: using 1977 Waps data ***'
      READ (NBERNW,*) AHELP , BHELP , LRMSCH, LRD1O2, LTRASP
      IF ( ABS (AHELP-ALPHA0) .GT. CSNNRM * ALPHA0 .OR.
     &     ABS (BHELP-GAMSK0) .GT. CSNNRM * GAMSK0 ) THEN
         WRITE (ErrorOut,*)
     &         ' *** INCONSISTENT NUCLEAR GEOMETRY DATA ON FILE ***'
         STOP
      END IF
      READ (NBERNW,*) RHOTAB, RHATAB, ALPTAB, RADTAB, SKITAB, HALTAB,
     &              EKATAB, PFATAB, PFRTAB
      READ (NBERNW,*) AANXSE, BBNXSE, CCNXSE, DDNXSE, EENXSE, ZZNXSE,
     &              EMNXSE, XMNXSE
      READ (NBERNW,*) AAPXSE, BBPXSE, CCPXSE, DDPXSE, EEPXSE, FFPXSE,
     &              ZZPXSE, EMPXSE, XMPXSE
c  Data about Fermi-breakup:
      READ (NBERNW,*) IPOSST, MXPDUM, MXADUM, MXNDUM, MXZDUM, IFBSTF
      IF ( MXADUM .NE. MXAFBK .OR. MXNDUM .NE. MXNFBK .OR. MXZDUM .NE.
     &     MXZFBK .OR. MXPDUM .NE. MXPSST ) THEN
         WRITE (ErrorOut,
     * *)' *** Inconsistent Fermi BreakUp data',
     &                   ' IN THE NUCLEAR DATA FILE ***'
         STOP 'STOP:BERTTP-INCONS-FERMI-BREAKUP-DATA'
      END IF
      READ (NBERNW,*) IFRBKN
      READ (NBERNW,*) IFRBKZ
      READ (NBERNW,*) IFBKSP
      READ (NBERNW,*) IFBKST
      READ (NBERNW,*) EEXFBK

      CLOSE (UNIT=NBERNW)

C     READ (NBERTP) (P0(I),P1(I),P2(I),I=1,1001)
C     READ (NBERTP) IA,IZ
C     DO 2 I=1,6
C        FLA(I)=IA(I)
C        FLZ(I)=IZ(I)
C   2 CONTINUE
C     READ (NBERTP) RHO,OMEGA
C     READ (NBERTP) EXMASS
C     READ (NBERTP) CAM2
C     READ (NBERTP) CAM3
C     READ (NBERTP) CAM4
C     READ (NBERTP) CAM5
C     READ (NBERTP) ((T(I,J),J=1,7),I=1,3)
C     DO 3 I=1,7
C        T(4,I) = ZERZER
C   3 CONTINUE
C     READ (NBERTP) RMASS
C     READ (NBERTP) ALPH
C     READ (NBERTP) BET
C     READ (NBERTP) INWAPS
C     READ (NBERTP) WAPS
C     READ (NBERTP) T12NUC
C     READ (NBERTP) JSPNUC
C     READ (NBERTP) JPTNUC
C     READ (NBERTP) INWISM
C     READ (NBERTP) IZWISM
C     READ (NBERTP) WAPISM
C     READ (NBERTP) T12ISM
C     READ (NBERTP) JSPISM
C     READ (NBERTP) JPTISM
C     READ (NBERTP) APRIME
C     WRITE( LUNOUT,'(A)' ) ' *** Evaporation: using 1977 Waps data ***'
C     READ (NBERTP) AHELP , BHELP , LRMSCH, LRD1O2, LTRASP
C     IF ( ABS (AHELP-ALPHA0) .GT. CSNNRM * ALPHA0 .OR.
C    &     ABS (BHELP-GAMSK0) .GT. CSNNRM * GAMSK0 ) THEN
C        WRITE (LUNOUT,*)
C    &         ' *** Inconsistent Nuclear Geometry data on file ***'
C        STOP
C     END IF
C     READ (NBERTP) RHOTAB, RHATAB, ALPTAB, RADTAB, SKITAB, HALTAB,
C    &              EKATAB, PFATAB, PFRTAB
C     READ (NBERTP) AANXSE, BBNXSE, CCNXSE, DDNXSE, EENXSE, ZZNXSE,
C    &              EMNXSE, XMNXSE
C     READ (NBERTP) AAPXSE, BBPXSE, CCPXSE, DDPXSE, EEPXSE, FFPXSE,
C    &              ZZPXSE, EMPXSE, XMPXSE
c  Data about Fermi-breakup:
C     READ (NBERTP) IPOSST, MXPDUM, MXADUM, MXNDUM, MXZDUM, IFBSTF
C     IF ( MXADUM .NE. MXAFBK .OR. MXNDUM .NE. MXNFBK .OR. MXZDUM .NE.
C    &     MXZFBK .OR. MXPDUM .NE. MXPSST ) THEN
C        WRITE (LUNOUT,*)' *** Inconsistent Fermi BreakUp data',
C    &                   ' in the Nuclear Data file ***'
C        STOP 'STOP:BERTTP-INCONS-FERMI-BREAKUP-DATA'
C     END IF
C     READ (NBERTP) IFRBKN
C     READ (NBERTP) IFRBKZ
C     READ (NBERTP) IFBKSP
C     READ (NBERTP) IFBKST
C     READ (NBERTP) EEXFBK
C     CLOSE (UNIT=NBERTP)
      DO 100 JZ = 1, 130
         SHENUC ( JZ, 1 ) = EMVGEV * ( CAM2 (JZ) + CAM4 (JZ) )
  100 CONTINUE
      DO 200 JA = 1, 200
         SHENUC ( JA, 2 ) = EMVGEV * ( CAM3 (JA) + CAM5 (JA) )
  200 CONTINUE
      CALL DT_STALIN
      IF ( ILVMOD .LE. 0 ) THEN
         ILVMOD = IB0
      ELSE
         IB0 = ILVMOD
      END IF
      IF ( LLVMOD ) THEN
         DO 300 JZ = 1, IZCOOK
            CAM4 (JZ) = PZCOOK (JZ)
  300    CONTINUE
         DO 400 JN = 1, INCOOK
            CAM5 (JN) = PNCOOK (JZ)
  400    CONTINUE
      END IF
c*sr
      IF (LEVPRT) THEN
         WRITE (ErrorOut,*)
         IF ( ILVMOD .EQ. 1 ) THEN
            WRITE (ErrorOut,*)
     &   ' **** STANDARD EVAP T=0 LEVEL DENSITY USED ****'
         ELSE IF ( ILVMOD .EQ. 2 ) THEN
            WRITE (ErrorOut,*)
     &   ' **** GILBERT & CAMERON T=0 N,Z-DEP. LEVEL DENSITY USED ****'
         ELSE IF ( ILVMOD .EQ. 3 ) THEN
            WRITE (ErrorOut,*)
     &      ' **** JULICH A-DEPENDENT LEVEL DENSITY USED ****'
         ELSE IF ( ILVMOD .EQ. 4 ) THEN
            WRITE (ErrorOut,*)
     &   ' **** BRANCAZIO & CAMERON T=0 N,Z-DEP. LEVEL DENSITY USED',
     &                                                          ' ****'
         ELSE
            WRITE (ErrorOut,*)
     &   ' **** UNKNOWN T=0 LEVEL DENSITY OPTION REQUESTED ****'
            STOP 'BERTTP-ILVMOD'
         END IF
         IF ( JLVMOD .LE. 0 ) THEN
            GAMIGN = ZERZER
            WRITE (ErrorOut,*)
     &   ' **** NO EXCITATION EN. DEPENDENCE FOR LEVEL DENSITIES ****'
         ELSE IF ( JLVMOD .EQ. 1 ) THEN
            WRITE (ErrorOut,*)
     &   ' **** IGNYATUK (1975, 1ST) LEVEL DENSITY EN. DEP. USED ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH IGNYATUK (1975, 1ST) SET OF PARAMETERS FOR T=OO',
     &                                                        ' ****'
            GAMIGN = 0.054D+00
            BETIGN = -6.3 D-05
            ALPIGN = 0.154D+00
            POWIGN = ZERZER
         ELSE IF ( JLVMOD .EQ. 2 ) THEN
            WRITE (ErrorOut,*)
     &   ' ****   IGNYATUK (1975, 1ST) LEVEL DENSITY EN. DEP. USED ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH UNKNOWN SET OF PARAMETERS FOR T=OO ****'
            STOP 'BERTTP-JLVMOD'
         ELSE IF ( JLVMOD .EQ. 3 ) THEN
            WRITE (ErrorOut,*)
     &   ' ****   IGNYATUK (1975, 1ST) LEVEL DENSITY EN. DEP. USED ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH UNKNOWN SET OF PARAMETERS FOR T=OO ****'
            STOP 'BERTTP-JLVMOD'
         ELSE IF ( JLVMOD .EQ. 4 ) THEN
            WRITE (ErrorOut,*)
     &   ' ****   IGNYATUK (1975, 2ND) LEVEL DENSITY EN. DEP. USED ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH IGNYATUK (1975, 2ND) SET OF PARAMETERS FOR T=OO',
     &                                                        ' ****'
            GAMIGN = 0.054D+00
            BETIGN = 0.162D+00
            ALPIGN = 0.114D+00
            POWIGN = -ONETHI
         ELSE IF ( JLVMOD .EQ. 5 ) THEN
            WRITE (ErrorOut,*)
     &   ' ****  IGNYATUK (1975, 2ND) LEVEL DENSITY EN. DEP. USED  ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH ILJINOV & MEBEL 1ST SET OF PARAMETERS FOR T=OO****'
            GAMIGN = 0.051D+00
            BETIGN = 0.098D+00
            ALPIGN = 0.114D+00
            POWIGN = -ONETHI
         ELSE IF ( JLVMOD .EQ. 6 ) THEN
            WRITE (ErrorOut,*)
     &   ' ****   IGNYATUK (1975, 2ND) LEVEL DENSITY EN. DEP. USED ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH ILJINOV & MEBEL 2ND SET OF PARAMETERS FOR T=OO****'
            GAMIGN = -0.46D+00
            BETIGN = 0.107D+00
            ALPIGN = 0.111D+00
            POWIGN = -ONETHI
         ELSE IF ( JLVMOD .EQ. 7 ) THEN
            WRITE (ErrorOut,*)
     &   ' ****   IGNYATUK (1975, 2ND) LEVEL DENSITY EN. DEP. USED ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH ILJINOV & MEBEL 3RD SET OF PARAMETERS FOR T=OO****'
            GAMIGN = 0.059D+00
            BETIGN = 0.257D+00
            ALPIGN = 0.072D+00
            POWIGN = -ONETHI
         ELSE IF ( JLVMOD .EQ. 8 ) THEN
            WRITE (ErrorOut,*)
     &   ' ****   IGNYATUK (1975, 2ND) LEVEL DENSITY EN. DEP. USED ****'
            WRITE (ErrorOut,*)
     &   ' **** WITH ILJINOV & MEBEL 4TH SET OF PARAMETERS FOR T=OO****'
            GAMIGN = -0.37D+00
            BETIGN = 0.229D+00
            ALPIGN = 0.077D+00
            POWIGN = -ONETHI
         ELSE
            WRITE (ErrorOut,*)
     &   ' **** UNKNOWN T=OO LEVEL DENSITY OPTION REQUESTED ****'
            STOP 'BERTTP-JLVMOD'
         END IF
         IF ( LLVMOD ) THEN
            WRITE (ErrorOut,*)
     &      ' **** COOK''S MODIFIED PAIRING ENERGY USED ****'
         ELSE
            WRITE (ErrorOut,*)
     &      ' **** ORIGINAL GILBERT/CAMERON PAIRING ENERGY USED ****'
         END IF
      ENDIF
c*

      ILVMOD = IB0
      DO 500 JZ = 1, 130
         PAENUC ( JZ, 1 ) = EMVGEV * CAM4 (JZ)
  500 CONTINUE
      DO 600 JA = 1, 200
         PAENUC ( JA, 2 ) = EMVGEV * CAM5 (JA)
  600 CONTINUE
      RETURN
      END
c***********************************************************************
c                                                                      *
c  DPMJET 3.0:   cross section routines                                *
c                                                                      *
c***********************************************************************
c
c
c     SUBROUTINE DT_SHNDIF
c         diffractive cross sections (all energies)
c     SUBROUTINE DT_PHOXS
c         total and inel. cross sections from PHOJET interpol. tables
c     SUBROUTINE DT_XSHN
c         total and el. cross sections for all energies
c     SUBROUTINE DT_SIHNAB
c         pion 2-nucleon absorption cross sections
c     SUBROUTINE DT_SIGEMU
c         cross section for target "compounds"
c     SUBROUTINE DT_SIGGA
c         photon nucleus cross sections
c     SUBROUTINE DT_SIGGAT
c         photon nucleus cross sections from tables
c     SUBROUTINE DT_SANO
c         anomalous hard photon-nucleon cross sections from tables
c     SUBROUTINE DT_SIGGP
c         photon nucleon cross sections
c     SUBROUTINE DT_SIGVEL
c         quasi-elastic vector meson prod. cross sections
c     DOUBLE PRECISION FUNCTION DT_SIGVP
c         sigma_VN(tilde)
c     DOUBLE PRECISION FUNCTION DT_RRM2
c     DOUBLE PRECISION FUNCTION DT_RM2
c     DOUBLE PRECISION FUNCTION DT_SAM2
c     SUBROUTINE DT_CKMT
c     SUBROUTINE DT_CKMTX
c     SUBROUTINE DT_PDF0
c     SUBROUTINE DT_CKMTQ0
c     SUBROUTINE DT_CKMTDE
c     SUBROUTINE DT_CKMTPR
c     FUNCTION DT_CKMTFF
c
c     SUBROUTINE DT_FLUINI
c         total nucleon cross section fluctuation treatment
c
c     SUBROUTINE DT_SIGTBL
c         pre-tabulation of low-energy elastic x-sec. using SIHNEL
c     SUBROUTINE DT_XSTABL
c         service routines
c
c
c
c===shndif===============================================================*
c
CDECK  ID>, DT_SHNDIF
      SUBROUTINE DT_SHNDIF(ECM,KPROJ,KTARG,SIGDIF,SIGDIH)

c*********************************************************************
c   Single diffractive hadron-nucleon cross sections                 *
c                                              S.Roesler 14/1/93     *
c                                                                    *
c   The cross sections are calculated from extrapolated single       *
c   diffractive antiproton-proton cross sections (DTUJET92) using    *
c   scaling relations between total and single diffractive cross     *
c   sections.                                                        *
c*********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ZERO=0.0D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c
      CSD1   =   4.201483727D0
      CSD4   = -0.4763103556D-02
      CSD5   =  0.4324148297D0
c
      CHMSD1 =  0.8519297242D0
      CHMSD4 = -0.1443076599D-01
      CHMSD5 =  0.4014954567D0
c
      EPN = (ECM**2 -AAM(KPROJ)**2 -AAM(KTARG)**2)/(2.0D0*AAM(KTARG))
      PPN = SQRT((EPN-AAM(KPROJ))*(EPN+AAM(KPROJ)))
c
      SDIAPP = CSD1+CSD4*LOG(PPN)**2+CSD5*LOG(PPN)
      SHMSD  = CHMSD1+CHMSD4*LOG(PPN)**2+CHMSD5*LOG(PPN)
      FRAC   = SHMSD/SDIAPP
c
      GOTO( 10, 20,999,999,999,999,999, 10, 20,999,
     &     999, 20, 20, 20, 20, 20, 10, 20, 20, 10,
     &      10, 10, 20, 20, 20) KPROJ
c
   10 CONTINUE
c---------------------------- p - p , n - p , sigma0+- - p ,
c                             Lambda - p
      CSD1   =  6.004476070D0
      CSD4   = -0.1257784606D-03
      CSD5   =  0.2447335720D0
      SIGDIF = CSD1+CSD4*LOG(PPN)**2+CSD5*LOG(PPN)
      SIGDIH = FRAC*SIGDIF
      RETURN
c
   20 CONTINUE
c
      KPSCAL = 2
      KTSCAL = 1
C     F      = SDIAPP/DT_SHNTOT(KPSCAL,KTSCAL,ECM,ZERO)
      DUMZER = ZERO
      CALL DT_XSHN(KPSCAL,KTSCAL,DUMZER,ECM,SIGTO,SIGEL)
      F      = SDIAPP/SIGTO
      KT     = 1
C     SIGDIF = DT_SHNTOT(KPROJ,KT,ECM,ZERO)*F
      CALL DT_XSHN(KPROJ,KT,DUMZER,ECM,SIGTO,SIGEL)
      SIGDIF = SIGTO*F
      SIGDIH = FRAC*SIGDIF
      RETURN
c
  999 CONTINUE
c-------------------------- leptons..
      SIGDIF = 1.D-10
      SIGDIH = 1.D-10
      RETURN
      END
c
c===phoxs================================================================*
c
CDECK  ID>, DT_PHOXS
      SUBROUTINE DT_PHOXS(KPROJ,KTARG,ECM,PLAB,STOT,SINE,SDIF1,BEL,MODE)

c***********************************************************************
c Total/inelastic proton-nucleon cross sections taken from PHOJET-     *
c interpolation tables.                                                *
c This version dated 05.11.97 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI  = 6.283185307179586454D+00,
     &           PI     = TWOPI/TWO,
     &           GEV2MB = 0.38938D0)

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


c*PHOJET105a
C     PARAMETER (IEETAB=10)
C     COMMON /XSETAB/ SIGTAB(4,70,IEETAB),SIGECM(4,IEETAB),ISIMAX
c*PHOJET110
C  energy-interpolation table
      INTEGER IEETA2
      PARAMETER ( IEETA2 = 20 )
      INTEGER ISIMAX
      DOUBLE PRECISION SIGTAB,SIGECM
      COMMON /POTABL/ SIGTAB(4,80,IEETA2),SIGECM(4,IEETA2),ISIMAX

c*

      IF ((MCGENE.NE.2).AND.(MODE.NE.1)) THEN
         WRITE(ErrorOut,*) MCGENE
 1000    FORMAT(1X,'PHOXS: WARNING! PHOJET NOT INITIALIZED (',I2,')')
         STOP
      ENDIF

      IF (ECM.LE.ZERO) THEN
         EPN = SQRT(AAM(KPROJ)**2+PLAB**2)
         ECM = SQRT(AAM(KPROJ)**2+AAM(KTARG)**2+2.0D0*EPN*AAM(KTARG))
      ENDIF

      IF (MODE.EQ.1) THEN
c DL
         DELDL = 0.0808D0
         EPSDL = -0.4525D0
         S     = ECM*ECM
         STOT  = 21.7D0*S**DELDL+56.08D0*S**EPSDL
         ALPHAP= 0.25D0
         BEL   = 8.5D0+2.D0*ALPHAP*LOG(S)
         SIGEL = STOT**2/(16.D0*PI*BEL*GEV2MB)
         SINE  = STOT-SIGEL
         SDIF1 = ZERO
      ELSE
c Phojet
         IP = 1
         IF(ECM.LE.SIGECM(IP,1)) THEN
           I1 = 1
           I2 = 1
         ELSEIF (ECM.LT.SIGECM(IP,ISIMAX)) THEN
           DO 1 I=2,ISIMAX
              IF (ECM.LE.SIGECM(IP,I)) GOTO 2
    1      CONTINUE
    2      CONTINUE
           I1 = I-1
           I2 = I
         ELSE
           WRITE(ErrorOut,'(/1X,A,2E12.3)')
     &       'PHOXS: WARNING! ENERGY ABOVE INITIALIZATION LIMIT (',
     &       ECM,SIGECM(IP,ISIMAX)
           I1 = ISIMAX
           I2 = ISIMAX
         ENDIF
         FAC2 = ZERO
         IF (I1.NE.I2) FAC2 = LOG(ECM/SIGECM(IP,I1))
     &                       /LOG(SIGECM(IP,I2)/SIGECM(IP,I1))
         FAC1  = ONE-FAC2
         STOT  = FAC2*SIGTAB(IP, 1,I2)+FAC1*SIGTAB(IP, 1,I1)
         SINE  = FAC2*SIGTAB(IP,28,I2)+FAC1*SIGTAB(IP,28,I1)
         SDIF1 = FAC2*(SIGTAB(IP,30,I2)+SIGTAB(IP,32,I2))+
     &           FAC1*(SIGTAB(IP,30,I1)+SIGTAB(IP,32,I1))
         BEL   = FAC2*SIGTAB(IP,39,I2)+FAC1*SIGTAB(IP,39,I1)
      ENDIF

      RETURN
      END
c
c===xshn===============================================================*
c
CDECK  ID>, DT_XSHN
      SUBROUTINE DT_XSHN(IP,IT,PL,ECM,STOT,SELA)

c***********************************************************************
c Total and elastic hadron-nucleon cross section.                      *
c Below 500GeV cross sections are based on the '98 data compilation    *
c of the PDG. At higher energies PHOJET results are used (patched to   *
c the low energy data at 500GeV).                                      *
c     IP      projectile index (BAMJET numbering scheme)               *
c             (should be in the range 1..25)                           *
c     IT      target index (BAMJET numbering scheme)                   *
c             (1 = proton, 8 = neutron)                                *
c     PL      laboratory momentum                                      *
c     ECM     cm. energy (ignored if PL>0)                             *
c     STOT    total cross section                                      *
c     SELA    elastic cross section                                    *
c Last change: 24.4.99 by S. Roesler                                   *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

      PARAMETER (LIN=5,LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0)

      PARAMETER (NPOIN1 = 54, NPOIN2 = 8,
     &           PLABLO = 0.1D0, PTHRE = 5.0D0, PLABHI = 500.0D0)
      PARAMETER (NPOINT = NPOIN1+NPOIN2+1)

      LOGICAL LFIRST
c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c*PHOJET105a
C     PARAMETER (IEETAB=10)
C     COMMON /XSETAB/ SIGTAB(4,70,IEETAB),SIGECM(4,IEETAB),ISIMAX
c*PHOJET110
C  energy-interpolation table
      INTEGER IEETA2
      PARAMETER ( IEETA2 = 20 )
      INTEGER ISIMAX
      DOUBLE PRECISION SIGTAB,SIGECM
      COMMON /POTABL/ SIGTAB(4,80,IEETA2),SIGECM(4,IEETA2),ISIMAX


      DIMENSION APL(NPOINT),ASIGTO(10,NPOINT),ASIGEL(10,NPOINT)
      DIMENSION IDXDAT(25,2)
c
      DATA APL /
     &-1.000,-0.969,-0.937,-0.906,-0.874,-0.843,-0.811,-0.780,-0.748,
     &-0.717,-0.685,-0.654,-0.622,-0.591,-0.560,-0.528,-0.497,-0.465,
     &-0.434,-0.402,-0.371,-0.339,-0.308,-0.276,-0.245,-0.213,-0.182,
     &-0.151,-0.119,-0.088,-0.056,-0.025, 0.007, 0.038, 0.070, 0.101,
     & 0.133, 0.164, 0.196, 0.227, 0.258, 0.290, 0.321, 0.353, 0.384,
     & 0.416, 0.447, 0.479, 0.510, 0.542, 0.573, 0.605, 0.636, 0.668,
     & 0.699, 0.949, 1.199, 1.449, 1.699, 1.949, 2.199, 2.449, 2.699/
c
c total cross sections:
c p p
      DATA (ASIGTO(1,K),K=1,NPOINT) /
     & 2.837, 2.760, 2.686, 2.614, 2.543, 2.472, 2.401, 2.329, 2.255,
     & 2.180, 2.103, 2.030, 1.968, 1.919, 1.861, 1.775, 1.698, 1.646,
     & 1.577, 1.518, 1.462, 1.420, 1.393, 1.375, 1.363, 1.356, 1.352,
     & 1.350, 1.351, 1.359, 1.381, 1.410, 1.444, 1.487, 1.544, 1.596,
     & 1.650, 1.672, 1.676, 1.677, 1.677, 1.675, 1.675, 1.669, 1.664,
     & 1.658, 1.653, 1.645, 1.640, 1.634, 1.630, 1.625, 1.620, 1.617,
     & 1.614, 1.602, 1.594, 1.589, 1.581, 1.583, 1.588, 1.596, 1.603/
c pbar p
      DATA (ASIGTO(2,K),K=1,NPOINT) /
     & 2.778, 2.759, 2.739, 2.718, 2.697, 2.675, 2.651, 2.626, 2.598,
     & 2.569, 2.537, 2.502, 2.471, 2.443, 2.420, 2.389, 2.361, 2.329,
     & 2.313, 2.304, 2.268, 2.244, 2.222, 2.212, 2.178, 2.162, 2.151,
     & 2.132, 2.109, 2.097, 2.089, 2.078, 2.063, 2.049, 2.035, 2.024,
     & 2.014, 2.004, 1.993, 1.981, 1.970, 1.958, 1.946, 1.933, 1.921,
     & 1.909, 1.894, 1.885, 1.871, 1.854, 1.836, 1.825, 1.816, 1.802,
     & 1.790, 1.744, 1.694, 1.663, 1.642, 1.614, 1.623, 1.623, 1.630/
c n p
      DATA (ASIGTO(3,K),K=1,NPOINT) /
     & 3.192, 3.145, 3.097, 3.047, 2.995, 2.940, 2.883, 2.824, 2.763,
     & 2.700, 2.634, 2.565, 2.494, 2.420, 2.344, 2.269, 2.196, 2.115,
     & 2.048, 1.964, 1.906, 1.842, 1.779, 1.719, 1.656, 1.604, 1.569,
     & 1.547, 1.534, 1.526, 1.522, 1.520, 1.525, 1.536, 1.550, 1.566,
     & 1.578, 1.580, 1.581, 1.584, 1.590, 1.598, 1.605, 1.608, 1.609,
     & 1.608, 1.608, 1.608, 1.608, 1.608, 1.607, 1.606, 1.606, 1.605,
     & 1.606, 1.599, 1.588, 1.587, 1.586, 1.589, 1.592, 1.597, 1.600/
c pi+ p
      DATA (ASIGTO(4,K),K=1,NPOINT) /
     & 0.643, 0.786, 0.929, 1.074, 1.199, 1.272, 1.340, 1.484, 1.610,
     & 1.750, 1.881, 2.014, 2.178, 2.244, 2.301, 2.309, 2.219, 2.118,
     & 2.001, 1.875, 1.801, 1.665, 1.609, 1.484, 1.412, 1.334, 1.195,
     & 1.160, 1.166, 1.208, 1.309, 1.356, 1.394, 1.406, 1.419, 1.473,
     & 1.540, 1.596, 1.570, 1.533, 1.516, 1.484, 1.471, 1.478, 1.492,
     & 1.497, 1.491, 1.479, 1.465, 1.453, 1.449, 1.450, 1.444, 1.428,
     & 1.422, 1.406, 1.384, 1.369, 1.364, 1.369, 1.374, 1.388, 1.395/
c pi- p
      DATA (ASIGTO(5,K),K=1,NPOINT) /
     & 0.458, 0.540, 0.626, 0.718, 0.819, 0.933, 1.063, 1.208, 1.226,
     & 1.436, 1.470, 1.594, 1.708, 1.786, 1.852, 1.836, 1.763, 1.679,
     & 1.590, 1.492, 1.445, 1.426, 1.423, 1.433, 1.473, 1.506, 1.547,
     & 1.660, 1.671, 1.545, 1.591, 1.687, 1.808, 1.656, 1.582, 1.543,
     & 1.562, 1.560, 1.537, 1.540, 1.549, 1.557, 1.557, 1.551, 1.535,
     & 1.527, 1.511, 1.510, 1.507, 1.500, 1.491, 1.483, 1.478, 1.468,
     & 1.463, 1.435, 1.408, 1.394, 1.384, 1.380, 1.383, 1.393, 1.411/
c K+ p
      DATA (ASIGTO(6,K),K=1,NPOINT) /
     & 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.097,
     & 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.097,
     & 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.097, 1.096, 1.095,
     & 1.098, 1.105, 1.111, 1.139, 1.169, 1.209, 1.248, 1.259, 1.268,
     & 1.262, 1.257, 1.254, 1.252, 1.250, 1.249, 1.246, 1.244, 1.244,
     & 1.243, 1.240, 1.238, 1.237, 1.236, 1.235, 1.235, 1.236, 1.236,
     & 1.236, 1.233, 1.238, 1.248, 1.257, 1.272, 1.292, 1.311, 1.336/
c K- p
      DATA (ASIGTO(7,K),K=1,NPOINT) /
     & 2.003, 2.002, 2.001, 2.000, 1.999, 1.998, 1.998, 1.997, 1.997,
     & 1.996, 1.995, 1.993, 1.990, 1.992, 1.974, 1.912, 1.865, 1.847,
     & 1.896, 1.950, 1.827, 1.681, 1.637, 1.616, 1.589, 1.545, 1.543,
     & 1.532, 1.603, 1.604, 1.616, 1.658, 1.700, 1.658, 1.595, 1.508,
     & 1.493, 1.514, 1.531, 1.523, 1.501, 1.479, 1.474, 1.467, 1.463,
     & 1.450, 1.444, 1.435, 1.426, 1.424, 1.423, 1.415, 1.401, 1.396,
     & 1.384, 1.364, 1.330, 1.313, 1.310, 1.309, 1.317, 1.329, 1.338/
c K+ n
      DATA (ASIGTO(8,K),K=1,NPOINT) /
     & 0.176, 0.229, 0.282, 0.334, 0.386, 0.437, 0.487, 0.536, 0.584,
     & 0.631, 0.675, 0.719, 0.760, 0.799, 0.835, 0.870, 0.901, 0.931,
     & 0.958, 0.984, 1.008, 1.032, 1.056, 1.079, 1.102, 1.125, 1.147,
     & 1.168, 1.187, 1.205, 1.224, 1.248, 1.279, 1.315, 1.324, 1.301,
     & 1.285, 1.279, 1.274, 1.273, 1.272, 1.271, 1.267, 1.263, 1.261,
     & 1.259, 1.256, 1.252, 1.247, 1.244, 1.241, 1.240, 1.240, 1.240,
     & 1.241, 1.243, 1.245, 1.253, 1.265, 1.275, 1.293, 1.314, 1.342/
c K- n
      DATA (ASIGTO(9,K),K=1,NPOINT) /
     & 1.778, 1.778, 1.778, 1.778, 1.778, 1.778, 1.778, 1.778, 1.778,
     & 1.778, 1.778, 1.778, 1.778, 1.778, 1.779, 1.779, 1.778, 1.773,
     & 1.765, 1.746, 1.703, 1.646, 1.561, 1.488, 1.454, 1.437, 1.437,
     & 1.458, 1.505, 1.561, 1.588, 1.593, 1.581, 1.551, 1.500, 1.454,
     & 1.427, 1.408, 1.390, 1.372, 1.361, 1.356, 1.351, 1.347, 1.343,
     & 1.341, 1.340, 1.338, 1.337, 1.335, 1.334, 1.332, 1.331, 1.330,
     & 1.330, 1.313, 1.303, 1.288, 1.288, 1.297, 1.305, 1.320, 1.342/
c Lambda p
      DATA (ASIGTO(10,K),K=1,NPOINT) /
     & 2.648, 2.598, 2.548, 2.498, 2.446, 2.394, 2.340, 2.283, 2.224,
     & 2.160, 2.091, 2.015, 1.936, 1.858, 1.785, 1.720, 1.669, 1.629,
     & 1.599, 1.576, 1.558, 1.543, 1.530, 1.520, 1.512, 1.505, 1.499,
     & 1.495, 1.495, 1.497, 1.504, 1.514, 1.525, 1.536, 1.550, 1.567,
     & 1.578, 1.580, 1.581, 1.584, 1.590, 1.598, 1.605, 1.608, 1.609,
     & 1.608, 1.608, 1.608, 1.608, 1.608, 1.607, 1.606, 1.606, 1.605,
     & 1.606, 1.599, 1.588, 1.587, 1.586, 1.589, 1.592, 1.597, 1.600/
c
c elastic cross sections:
c p p
      DATA (ASIGEL(1,K),K=1,NPOINT) /
     & 2.837, 2.760, 2.686, 2.614, 2.543, 2.472, 2.401, 2.329, 2.255,
     & 2.180, 2.103, 2.030, 1.968, 1.919, 1.861, 1.775, 1.698, 1.646,
     & 1.577, 1.518, 1.462, 1.420, 1.393, 1.374, 1.360, 1.353, 1.350,
     & 1.351, 1.356, 1.362, 1.369, 1.376, 1.384, 1.385, 1.399, 1.397,
     & 1.389, 1.385, 1.379, 1.366, 1.358, 1.344, 1.320, 1.294, 1.275,
     & 1.260, 1.248, 1.235, 1.219, 1.199, 1.172, 1.144, 1.126, 1.115,
     & 1.104, 1.013, 0.962, 0.905, 0.869, 0.845, 0.846, 0.850, 0.868/
c pbar p
      DATA (ASIGEL(2,K),K=1,NPOINT) /
     & 1.987, 1.985, 1.983, 1.980, 1.978, 1.975, 1.971, 1.968, 1.963,
     & 1.958, 1.951, 1.944, 1.935, 1.925, 1.914, 1.902, 1.889, 1.875,
     & 1.859, 1.845, 1.834, 1.817, 1.792, 1.769, 1.754, 1.738, 1.720,
     & 1.702, 1.688, 1.676, 1.667, 1.659, 1.652, 1.645, 1.640, 1.636,
     & 1.620, 1.591, 1.562, 1.546, 1.540, 1.524, 1.496, 1.475, 1.457,
     & 1.429, 1.402, 1.373, 1.344, 1.330, 1.306, 1.294, 1.265, 1.228,
     & 1.204, 1.086, 0.977, 0.933, 0.914, 0.850, 0.862, 0.848, 0.845/
c n p
      DATA (ASIGEL(3,K),K=1,NPOINT) /
     & 3.192, 3.145, 3.097, 3.047, 2.995, 2.940, 2.883, 2.824, 2.763,
     & 2.700, 2.634, 2.565, 2.494, 2.420, 2.344, 2.269, 2.196, 2.115,
     & 2.048, 1.964, 1.906, 1.842, 1.779, 1.719, 1.656, 1.604, 1.569,
     & 1.544, 1.527, 1.514, 1.504, 1.495, 1.486, 1.476, 1.466, 1.454,
     & 1.440, 1.425, 1.409, 1.392, 1.375, 1.358, 1.340, 1.322, 1.304,
     & 1.285, 1.267, 1.250, 1.234, 1.219, 1.202, 1.181, 1.158, 1.136,
     & 1.116, 0.727,-2.128, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0/
c pi+ p
      DATA (ASIGEL(4,K),K=1,NPOINT) /
     & 0.643, 0.786, 0.929, 1.074, 1.199, 1.272, 1.340, 1.484, 1.610,
     & 1.750, 1.881, 2.014, 2.178, 2.244, 2.301, 2.309, 2.219, 2.118,
     & 2.001, 1.875, 1.801, 1.664, 1.610, 1.479, 1.423, 1.299, 1.166,
     & 1.097, 1.020, 0.958, 0.914, 1.013, 1.088, 1.153, 1.167, 1.235,
     & 1.240, 1.237, 1.202, 1.135, 1.090, 1.026, 0.975, 0.941, 0.904,
     & 0.894, 0.884, 0.862, 0.850, 0.845, 0.827, 0.805, 0.789, 0.776,
     & 0.763, 0.686, 0.626, 0.562, 0.505, 0.518, 0.525, 0.528, 0.528/
c pi- p
      DATA (ASIGEL(5,K),K=1,NPOINT) /
     & 0.266, 0.278, 0.294, 0.320, 0.360, 0.419, 0.503, 0.608, 0.727,
     & 0.850, 0.968, 1.071, 1.167, 1.305, 1.369, 1.404, 1.446, 1.217,
     & 1.112, 1.071, 1.014, 1.002, 0.996, 1.008, 1.070, 1.126, 1.209,
     & 1.300, 1.281, 1.188, 1.156, 1.341, 1.423, 1.314, 1.171, 1.140,
     & 1.106, 1.071, 1.011, 1.037, 1.026, 1.024, 0.988, 0.953, 0.895,
     & 0.894, 0.880, 0.871, 0.864, 0.853, 0.837, 0.820, 0.809, 0.800,
     & 0.782, 0.674, 0.612, 0.530, 0.521, 0.528, 0.524, 0.542, 0.569/
c K+ p
      DATA (ASIGEL(6,K),K=1,NPOINT) /
     & 1.064, 1.065, 1.065, 1.066, 1.066, 1.066, 1.066, 1.066, 1.066,
     & 1.065, 1.064, 1.063, 1.062, 1.062, 1.062, 1.064, 1.066, 1.070,
     & 1.076, 1.082, 1.088, 1.096, 1.103, 1.104, 1.104, 1.102, 1.093,
     & 1.087, 1.084, 1.079, 1.075, 1.067, 1.058, 1.040, 1.029, 1.012,
     & 1.003, 0.985, 0.935, 0.909, 0.880, 0.846, 0.790, 0.771, 0.759,
     & 0.743, 0.718, 0.681, 0.666, 0.645, 0.622, 0.606, 0.594, 0.584,
     & 0.575, 0.513, 0.453, 0.403, 0.356, 0.365, 0.389, 0.430, 0.477/
c K- p
      DATA (ASIGEL(7,K),K=1,NPOINT) /
     & 1.941, 1.936, 1.931, 1.926, 1.919, 1.912, 1.903, 1.892, 1.878,
     & 1.863, 1.844, 1.821, 1.791, 1.755, 1.713, 1.666, 1.615, 1.561,
     & 1.533, 1.531, 1.518, 1.511, 1.452, 1.339, 1.265, 1.233, 1.188,
     & 1.184, 1.236, 1.316, 1.333, 1.336, 1.333, 1.277, 1.216, 1.077,
     & 1.018, 0.912, 0.926, 0.920, 0.910, 0.894, 0.830, 0.825, 0.800,
     & 0.788, 0.747, 0.703, 0.707, 0.689, 0.643, 0.633, 0.635, 0.618,
     & 0.584, 0.579, 0.461, 0.403, 0.405, 0.399, 0.408, 0.418, 0.413/
c K+ n
      DATA (ASIGEL(8,K),K=1,NPOINT) /
     & 0.176, 0.229, 0.282, 0.334, 0.386, 0.437, 0.487, 0.536, 0.584,
     & 0.631, 0.676, 0.719, 0.760, 0.799, 0.835, 0.870, 0.901, 0.931,
     & 0.958, 0.984, 1.008, 1.032, 1.056, 1.079, 1.103, 1.126, 1.148,
     & 1.168, 1.187, 1.205, 1.223, 1.248, 1.282, 1.269, 1.185, 1.111,
     & 1.063, 1.031, 0.998, 0.964, 0.928, 0.889, 0.849, 0.814, 0.785,
     & 0.760, 0.738, 0.720, 0.703, 0.688, 0.674, 0.660, 0.648, 0.635,
     & 0.624, 0.536, 0.473, 0.442, 0.428, 0.428, 0.436, 0.453, 0.477/
c K- n
      DATA (ASIGEL(9,K),K=1,NPOINT) /
     & 1.613, 1.613, 1.613, 1.613, 1.613, 1.613, 1.613, 1.613, 1.613,
     & 1.613, 1.613, 1.613, 1.612, 1.613, 1.614, 1.614, 1.612, 1.606,
     & 1.593, 1.564, 1.498, 1.402, 1.240, 1.071, 0.977, 0.922, 0.914,
     & 0.961, 1.077, 1.214, 1.271, 1.290, 1.281, 1.217, 1.096, 0.979,
     & 0.896, 0.822, 0.736, 0.655, 0.608, 0.591, 0.580, 0.569, 0.559,
     & 0.550, 0.540, 0.531, 0.522, 0.514, 0.507, 0.500, 0.494, 0.489,
     & 0.485, 0.477, 0.477, 0.477, 0.477, 0.477, 0.477, 0.477, 0.477/
c Lambda p
      DATA (ASIGEL(10,K),K=1,NPOINT) /
     & 2.648, 2.598, 2.548, 2.498, 2.446, 2.394, 2.340, 2.283, 2.224,
     & 2.160, 2.091, 2.015, 1.936, 1.858, 1.785, 1.720, 1.669, 1.630,
     & 1.600, 1.577, 1.558, 1.542, 1.528, 1.518, 1.510, 1.505, 1.502,
     & 1.501, 1.500, 1.499, 1.496, 1.491, 1.485, 1.477, 1.466, 1.454,
     & 1.440, 1.425, 1.408, 1.392, 1.375, 1.358, 1.340, 1.322, 1.304,
     & 1.285, 1.267, 1.250, 1.234, 1.219, 1.202, 1.181, 1.158, 1.136,
     & 1.116, 0.727,-2.128, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0/

      DATA (IDXDAT(K,1),K=1,25) /
     &  1, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0,67, 4, 5, 6, 7,10, 2,67, 3,
     &  1, 3,45, 8, 9/
      DATA (IDXDAT(K,2),K=1,25) /
     &  3, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0,89, 5, 4, 8, 9, 1, 2,89, 1,
     &  3, 1,45, 6, 7/

      DATA LFIRST /.TRUE./

      IF (LFIRST) THEN
         APLABL = LOG10(PLABLO)
         APLABH = LOG10(PLABHI)
         APTHRE = LOG10(PTHRE)
         ADP1   = (APTHRE-APLABL)/DBLE(NPOIN1)
         ADP2   = (APLABH-APTHRE)/DBLE(NPOIN2)
         DUM0   = ZERO
         PHOPLA = PLABHI
         PHOELA = SQRT(AAM(1)**2+PHOPLA**2)
         ECMS   = SQRT(2.0D0*AAM(1)**2+2.0D0*AAM(1)*PHOELA)
         IF (MCGENE.EQ.2) THEN
            IF (ECMS.LE.SIGECM(1,ISIMAX)) THEN
               CALL DT_PHOXS(1,1,DUM0,PHOPLA,PHOSTO,PHOSIN,DUM1,DUM2,0)
            ELSE
               CALL DT_PHOXS(1,1,DUM0,PHOPLA,PHOSTO,PHOSIN,DUM1,DUM2,1)
            ENDIF
         ELSE
            CALL DT_PHOXS(1,1,DUM0,PHOPLA,PHOSTO,PHOSIN,DUM1,DUM2,1)
         ENDIF
         PHOSEL = PHOSTO-PHOSIN
         APHOST = LOG10(PHOSTO)
         APHOSE = LOG10(PHOSEL)
         LFIRST = .FALSE.
      ENDIF
      STOT = ZERO
      SELA = ZERO
      PLAB = PL
      ECMS = ECM
      IF ( (IP.LT.1).OR.((IT.NE.1).AND.(IT.NE.8)) ) THEN
         WRITE(ErrorOut,1000) IP,IT
 1000    FORMAT(1X,'DT_XSHN: CROSS SECTIONS NOT IMPLEMENTED FOR ',
     &          'PROJ/TARGET',2I4)
         STOP
      ENDIF

      IF ((PLAB.LE.ZERO).AND.(ECMS.GT.ZERO)) THEN
         ELAB = (ECMS**2-AAM(IP)**2-AAM(IT)**2)/(2.0D0*AAM(IT))
         PLAB = SQRT((ELAB-AAM(IP))*(ELAB+AAM(IP)))
      ELSEIF ((PLAB.LE.ZERO).AND.(ECMS.LE.ZERO)) THEN
         WRITE(ErrorOut,1001) PLAB,ECMS
 1001    FORMAT(1X,'DT_XSHN: INVALID MOMENTUM/CM-ENERGY ',2E15.5)
         STOP
      ENDIF

c index of spectrum
      IDXP = IP
      IF (IP.GT.25) THEN
         IF (AAM(IP).GT.ZERO) THEN
            IF (ABS(IIBAR(IP)).GT.0) THEN
               IDXP = 1
            ELSE
               IDXP = 13
            ENDIF
         ELSE
            IDXP = 7
         ENDIF
      ENDIF
      IDXT = 1
      IF (IT.EQ.8) IDXT = 2
      IDXS = IDXDAT(IDXP,IDXT)
      IF (IDXS.EQ.0) RETURN

c compute momentum bin indices
      IF (PLAB.LT.PLABLO) THEN
         IDX0 = 1
         IDX1 = 1
      ELSEIF (PLAB.GE.PLABHI) THEN
         IDX0 = NPOINT
         IDX1 = NPOINT
      ELSE
         APLAB = LOG10(PLAB)
         IF ((PLAB.GE.PLABLO).AND.(PLAB.LT.PTHRE )) THEN
            IDX0 = INT((APLAB-APLABL)/ADP1)+1
         ELSEIF ((PLAB.GE.PTHRE ).AND.(PLAB.LT.PLABHI)) THEN
            IDX0 = INT((APLAB-APTHRE)/ADP2)+NPOIN1+1
         ENDIF
         IDX1 = IDX0+1
      ENDIF

c interpolate cross section
      IF (IDXS.GT.10) THEN
         IDXS1 = IDXS/10
         IDXS2 = IDXS-10*IDXS1
         IF (IDX0.EQ.IDX1) THEN
            IF (IDX0.EQ.1) THEN
               ASTOT = 0.5D0*(ASIGTO(IDXS1,IDX0)+ASIGTO(IDXS2,IDX0))
               ASELA = 0.5D0*(ASIGEL(IDXS1,IDX0)+ASIGEL(IDXS2,IDX0))
            ELSE
               DUM0   = ZERO
               CALL DT_PHOXS(1,1,DUM0,PLAB,PHOSTO,PHOSIN,DUM1,DUM2,0)
               PHOSEL = PHOSTO-PHOSIN
               ASTOT1 = ASIGTO(IDXS1,NPOINT)-APHOST+LOG10(PHOSTO)
               ASELA1 = ASIGEL(IDXS1,NPOINT)-APHOSE+LOG10(PHOSEL)
               ASTOT2 = ASIGTO(IDXS2,NPOINT)-APHOST+LOG10(PHOSTO)
               ASELA2 = ASIGEL(IDXS2,NPOINT)-APHOSE+LOG10(PHOSEL)
               ASTOT  = 0.5D0*(ASTOT1+ASTOT2)
               ASELA  = 0.5D0*(ASELA1+ASELA2)
            ENDIF
         ELSE
            FAC = (APLAB-APL(IDX0))/(APL(IDX1)-APL(IDX0))
            ASTOT1 = ASIGTO(IDXS1,IDX0)+
     &               FAC*(ASIGTO(IDXS1,IDX1)-ASIGTO(IDXS1,IDX0))
            ASTOT2 = ASIGTO(IDXS2,IDX0)+
     &               FAC*(ASIGTO(IDXS2,IDX1)-ASIGTO(IDXS2,IDX0))
            ASTOT  = 0.5D0*(ASTOT1+ASTOT2)
            ASELA1 = ASIGEL(IDXS1,IDX0)+
     &               FAC*(ASIGEL(IDXS1,IDX1)-ASIGEL(IDXS1,IDX0))
            ASELA2 = ASIGEL(IDXS2,IDX0)+
     &               FAC*(ASIGEL(IDXS2,IDX1)-ASIGEL(IDXS2,IDX0))
            ASELA  = 0.5D0*(ASELA1+ASELA2)
         ENDIF
      ELSE
         IF (IDX0.EQ.IDX1) THEN
            IF (IDX0.EQ.1) THEN
               ASTOT = ASIGTO(IDXS,IDX0)
               ASELA = ASIGEL(IDXS,IDX0)
            ELSE
               DUM0   = ZERO
               CALL DT_PHOXS(1,1,DUM0,PLAB,PHOSTO,PHOSIN,DUM1,DUM2,0)
               PHOSEL = PHOSTO-PHOSIN
               ASTOT  = ASIGTO(IDXS,NPOINT)-APHOST+LOG10(PHOSTO)
               ASELA  = ASIGEL(IDXS,NPOINT)-APHOSE+LOG10(PHOSEL)
            ENDIF
         ELSE
            FAC = (APLAB-APL(IDX0))/(APL(IDX1)-APL(IDX0))
            ASTOT = ASIGTO(IDXS,IDX0)+
     &              FAC*(ASIGTO(IDXS,IDX1)-ASIGTO(IDXS,IDX0))
            ASELA = ASIGEL(IDXS,IDX0)+
     &              FAC*(ASIGEL(IDXS,IDX1)-ASIGEL(IDXS,IDX0))
         ENDIF
      ENDIF
      STOT = 10.0D0**ASTOT
      SELA = 10.0D0**ASELA

      RETURN
      END
c
c===sihnab===============================================================*
c
CDECK  ID>, DT_SIHNAB
      SUBROUTINE DT_SIHNAB(IDP,IDT,PLAB,SIGABS)

c*********************************************************************
c Pion 2-nucleon absorption cross sections.                          *
c (sigma_tot for pi+ d --> p p, pi- d --> n n                        *
c  taken from Ritchie PRC 28 (1983) 926 )                            *
c This version dated 18.05.96 is written by S. Roesler               *
c*********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,TINY3=1.0D-3)
      PARAMETER (AMPR = 938.0D0,
     &           AMPI = 140.0D0,
     &           AMDE = TWO*AMPR,
     &           A    = -1.2D0,
     &           B    = 3.5D0,
     &           C    = 7.4D0,
     &           D    = 5600.0D0,
     &           ER   = 2136.0D0)

      SIGABS = ZERO
      IF ( ((IDP.NE.13).AND.(IDP.NE.14).AND.(IDP.NE.23))
     &                   .OR.((IDT.NE.1).AND.(IDT.NE.8)) ) RETURN
      PTOT = PLAB*1.0D3
      EKIN = SQRT(AMPI**2+PTOT**2)-AMPI
      IF ((EKIN.LT.TINY3).OR.(EKIN.GT.400.0D0)) RETURN
      ECM  = SQRT( (AMPI+AMDE)**2+TWO*EKIN*AMDE )
      SIGABS = A+B/SQRT(EKIN)+C*1.0D4/((ECM-ER)**2+D)
c approximate 3N-abs., I=1-abs. etc.
      SIGABS = SIGABS/0.40D0
c pi0-absorption (rough approximation!!)
      IF (IDP.EQ.23) SIGABS = 0.5D0*SIGABS

      RETURN
      END
c
c===sigemu=============================================================*
c
CDECK  ID>, DT_SIGEMU
      SUBROUTINE DT_SIGEMU

c***********************************************************************
c Combined cross section for target compounds.                         *
c This version dated 6.4.98   is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY2=1.0D-2,ZERO=0.0D0,DLARGE=1.0D10,
     &           OHALF=0.5D0,ONE=1.0D0)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN


      IF (MCGENE.NE.4) THEN
         WRITE(ErrorOut,
     * '(A)') ' DT_SIGEMU:    Combined cross sections'
         WRITE(ErrorOut,'(15X,A)') '-----------------------'
      ENDIF
      DO 1 IE=1,NEBINI
         DO 2 IQ=1,NQBINI
            SIGTOT = ZERO
            SIGELA = ZERO
            SIGQEP = ZERO
            SIGQET = ZERO
            SIGQE2 = ZERO
            SIGPRO = ZERO
            SIGDEL = ZERO
            SIGDQE = ZERO
            ERRTOT = ZERO
            ERRELA = ZERO
            ERRQEP = ZERO
            ERRQET = ZERO
            ERRQE2 = ZERO
            ERRPRO = ZERO
            ERRDEL = ZERO
            ERRDQE = ZERO
            IF (NCOMPO.GT.0) THEN
               DO 3 IC=1,NCOMPO
                  SIGTOT = SIGTOT+EMUFRA(IC)*XSTOT(IE,IQ,IC)
                  SIGELA = SIGELA+EMUFRA(IC)*XSELA(IE,IQ,IC)
                  SIGQEP = SIGQEP+EMUFRA(IC)*XSQEP(IE,IQ,IC)
                  SIGQET = SIGQET+EMUFRA(IC)*XSQET(IE,IQ,IC)
                  SIGQE2 = SIGQE2+EMUFRA(IC)*XSQE2(IE,IQ,IC)
                  SIGPRO = SIGPRO+EMUFRA(IC)*XSPRO(IE,IQ,IC)
                  SIGDEL = SIGDEL+EMUFRA(IC)*XSDEL(IE,IQ,IC)
                  SIGDQE = SIGDQE+EMUFRA(IC)*XSDQE(IE,IQ,IC)
                  ERRTOT = ERRTOT+XETOT(IE,IQ,IC)**2
                  ERRELA = ERRELA+XEELA(IE,IQ,IC)**2
                  ERRQEP = ERRQEP+XEQEP(IE,IQ,IC)**2
                  ERRQET = ERRQET+XEQET(IE,IQ,IC)**2
                  ERRQE2 = ERRQE2+XEQE2(IE,IQ,IC)**2
                  ERRPRO = ERRPRO+XEPRO(IE,IQ,IC)**2
                  ERRDEL = ERRDEL+XEDEL(IE,IQ,IC)**2
                  ERRDQE = ERRDQE+XEDQE(IE,IQ,IC)**2
    3          CONTINUE
               ERRTOT = SQRT(ERRTOT)
               ERRELA = SQRT(ERRELA)
               ERRQEP = SQRT(ERRQEP)
               ERRQET = SQRT(ERRQET)
               ERRQE2 = SQRT(ERRQE2)
               ERRPRO = SQRT(ERRPRO)
               ERRDEL = SQRT(ERRDEL)
               ERRDQE = SQRT(ERRDQE)
            ELSE
               SIGTOT = XSTOT(IE,IQ,1)
               SIGELA = XSELA(IE,IQ,1)
               SIGQEP = XSQEP(IE,IQ,1)
               SIGQET = XSQET(IE,IQ,1)
               SIGQE2 = XSQE2(IE,IQ,1)
               SIGPRO = XSPRO(IE,IQ,1)
               SIGDEL = XSDEL(IE,IQ,1)
               SIGDQE = XSDQE(IE,IQ,1)
               ERRTOT = XETOT(IE,IQ,1)
               ERRELA = XEELA(IE,IQ,1)
               ERRQEP = XEQEP(IE,IQ,1)
               ERRQET = XEQET(IE,IQ,1)
               ERRQE2 = XEQE2(IE,IQ,1)
               ERRPRO = XEPRO(IE,IQ,1)
               ERRDEL = XEDEL(IE,IQ,1)
               ERRDQE = XEDQE(IE,IQ,1)
            ENDIF
            IF (MCGENE.NE.4) THEN
               WRITE(ErrorOut,1000) ECMNN(IE),Q2G(IQ)
 1000         FORMAT(/,1X,'E_CM =',F9.1,' GEV  Q^2 =',F6.1,' GEV^2 :',/)
               WRITE(ErrorOut,1001) SIGTOT,ERRTOT
 1001          FORMAT(1X,'TOTAL',32X,F10.4,' +-',F11.5,' MB')
               WRITE(ErrorOut,1002) SIGELA,ERRELA
 1002          FORMAT(1X,'ELASTIC',30X,F10.4,' +-',F11.5,' MB')
               WRITE(ErrorOut,1003) SIGQEP,ERRQEP
 1003          FORMAT(1X,'QUASI-ELASTIC (A+B-->A+X)',12X,F10.4,' +-',
     &                F11.5,' MB')
               WRITE(ErrorOut,1004) SIGQET,ERRQET
 1004          FORMAT(1X,'QUASI-ELASTIC (A+B-->X+B)',12X,F10.4,' +-',
     &                F11.5,' MB')
               WRITE(ErrorOut,1005) SIGQE2,ERRQE2
 1005          FORMAT(1X,'QUASI-ELASTIC (A+B-->X, EXCL. 2-4)',3X,F10.4,
     &                ' +-',F11.5,' MB')
               WRITE(ErrorOut,1006) SIGPRO,ERRPRO
 1006          FORMAT(1X,'PRODUCTION',27X,F10.4,' +-',F11.5,' MB')
               WRITE(ErrorOut,1007) SIGDEL,ERRDEL
 1007          FORMAT(1X,'DIFF-EL   ',27X,F10.4,' +-',F11.5,' MB')
               WRITE(ErrorOut,1008) SIGDQE,ERRDQE
 1008          FORMAT(1X,'DIFF-QEL  ',27X,F10.4,' +-',F11.5,' MB')
            ENDIF

    2    CONTINUE
    1 CONTINUE

      RETURN
      END
c
c===sigga==============================================================*
c
CDECK  ID>, DT_SIGGA
      SUBROUTINE DT_SIGGA(NTI,XI,Q2I,ECMI,XNUI,STOT,ETOT,SIN,EIN,STOT0)

c***********************************************************************
c Total/inelastic photon-nucleus cross sections.                       *
c     !!!! Overwrites SHMAKI-initialization. Do not use it during      *
c          production runs !!!!                                        *
c This version dated 27.03.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY2=1.0D-2,ZERO=0.0D0,DLARGE=1.0D10,
     &           OHALF=0.5D0,ONE=1.0D0)
      PARAMETER (AMPROT = 0.938D0)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI


      NT  = NTI
      X   = XI
      Q2  = Q2I
      ECM = ECMI
      XNU = XNUI
      IF ((ECMI.LE.ZERO).AND.(XNUI.GT.ZERO))
     &   ECM = SQRT(AMPROT**2-Q2+2.0D0*XNUI*AMPROT)
      CALL DT_XSGLAU(1,NT,7,X,Q2,ECM,1,1,-1)
      STOT  = XSTOT(1,1,1)
      ETOT  = XETOT(1,1,1)
      SIN   = XSPRO(1,1,1)
      EIN   = XEPRO(1,1,1)

      RETURN
      END
c
c===siggat=============================================================*
c
CDECK  ID>, DT_SIGGAT
      SUBROUTINE DT_SIGGAT(Q2I,ECMI,STOT,NT)

c***********************************************************************
c Total/inelastic photon-nucleus cross sections.                       *
c Uses pre-tabulated cross section.                                    *
c This version dated 29.07.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY14=1.0D-14,
     &           ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI


      NTARG = ABS(NT)
      I1   = 1
      I2   = 1
      RATE = ONE
      IF (NEBINI.GT.1) THEN
         IF (ECMI.GE.ECMNN(NEBINI)) THEN
            I1   = NEBINI
            I2   = NEBINI
            RATE = ONE
         ELSEIF (ECMI.GT.ECMNN(1)) THEN
            DO 1 I=2,NEBINI
               IF (ECMI.LT.ECMNN(I)) THEN
                  I1   = I-1
                  I2   = I
                  RATE = (ECMI-ECMNN(I1))/(ECMNN(I2)-ECMNN(I1))
                  GOTO 2
               ENDIF
    1       CONTINUE
    2       CONTINUE
         ENDIF
      ENDIF
      J1   = 1
      J2   = 1
      RATQ = ONE
      IF (NQBINI.GT.1) THEN
         IF (Q2I.GE.Q2G(NQBINI)) THEN
            J1   = NQBINI
            J2   = NQBINI
            RATQ = ONE
         ELSEIF (Q2I.GT.Q2G(1)) THEN
            DO 3 I=2,NQBINI
               IF (Q2I.LT.Q2G(I)) THEN
                  J1   = I-1
                  J2   = I
                  RATQ = LOG10(    Q2I/MAX(Q2G(J1),TINY14))/
     &                   LOG10(Q2G(J2)/MAX(Q2G(J1),TINY14))
C                 RATQ = (Q2I-Q2G(J1))/(Q2G(J2)-Q2G(J1))
                  GOTO 4
               ENDIF
    3       CONTINUE
    4       CONTINUE
         ENDIF
      ENDIF

      STOT = XSTOT(I1,J1,NTARG)+
     &   RATE*(XSTOT(I2,J1,NTARG)-XSTOT(I1,J1,NTARG))+
     &   RATQ*(XSTOT(I1,J2,NTARG)-XSTOT(I1,J1,NTARG))+
     &   RATE*RATQ*(XSTOT(I2,J2,NTARG)-XSTOT(I1,J2,NTARG)+
     &              XSTOT(I1,J1,NTARG)-XSTOT(I2,J1,NTARG))

      RETURN
      END
c
c===sigano=============================================================*
c
CDECK  ID>, DT_SANO
      DOUBLE PRECISION FUNCTION DT_SANO(ECM)

c***********************************************************************
c This version dated 31.07.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY14=1.0D-14,
     &           ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (NE = 8)

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG


      DIMENSION ECMANO(NE),FRAANO(NE),SIGHRD(NE)
      DATA ECMANO /
     &             0.200D+02,0.500D+02,0.100D+03,0.200D+03,0.500D+03,
     &             0.100D+04,0.200D+04,0.500D+04
     &            /
c fixed cut (3 GeV/c)
      DATA FRAANO /
     &             0.085D+00,0.114D+00,0.105D+00,0.091D+00,0.073D+00,
     &             0.062D+00,0.054D+00,0.042D+00
     &            /
      DATA SIGHRD /
     &           4.0099D-04,3.3104D-03,1.1905D-02,3.6435D-02,1.3493D-01,
     &           3.3086D-01,7.6255D-01,2.1319D+00
     &            /
c running cut (based on obsolete Phojet-caluclations, bugs..)
C     DATA FRAANO /
C    &             0.251E+00,0.313E+00,0.279E+00,0.239E+00,0.186E+00,
C    &             0.167E+00,0.150E+00,0.131E+00
C    &            /
C     DATA SIGHRD /
C    &           6.6569E-04,4.4949E-03,1.4837E-02,4.1466E-02,1.5071E-01,
C    &           2.5736E-01,4.5593E-01,8.2550E-01
C    &            /

      DT_SANO = ZERO
      IF ((ISHAD(2).NE.1).OR.(IJPROJ.NE.7)) RETURN
      J1   = 0
      J2   = 0
      RATE = ONE
      IF (ECM.GE.ECMANO(NE)) THEN
         J1 = NE
         J2 = NE
      ELSEIF (ECM.GT.ECMANO(1)) THEN
         DO 1 IE=2,NE
            IF (ECM.LT.ECMANO(IE)) THEN
               J1   = IE-1
               J2   = IE
               RATE = LOG10(ECM/ECMANO(J1))/LOG10(ECMANO(J2)/ECMANO(J1))
               GOTO 2
            ENDIF
    1    CONTINUE
    2    CONTINUE
      ENDIF
      IF ((J1.GT.0).AND.(J2.GT.0)) THEN
         AFRA1  = LOG10(MAX(FRAANO(J1)*SIGHRD(J1),TINY14))
         AFRA2  = LOG10(MAX(FRAANO(J2)*SIGHRD(J2),TINY14))
         DT_SANO = 10.0D0**(AFRA1+RATE*(AFRA2-AFRA1))
      ENDIF

      RETURN
      END
c
c===siggp==============================================================*
c
CDECK  ID>, DT_SIGGP
      SUBROUTINE DT_SIGGP(XI,Q2I,ECMI,XNUI,STOT,SINE,SDIR)

c***********************************************************************
c Total/inelastic photon-nucleon cross sections.                       *
c This version dated 30.04.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI  = 6.283185307179586476925286766559D+00,
     &           PI     = TWOPI/TWO,
     &           GEV2MB = 0.38938D0,
     &           ALPHEM = ONE/137.0D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)


c*PHOJET105a
C     CHARACTER*8 MDLNA
C     COMMON /MODELS/ MDLNA(50),ISWMDL(50),PARMDL(200),IPAMDL(100)
C     PARAMETER (IEETAB=10)
C     COMMON /XSETAB/ SIGTAB(4,70,IEETAB),SIGECM(4,IEETAB),ISIMAX
c*PHOJET110
C  model switches and parameters
      CHARACTER*8 MDLNA
      INTEGER ISWMDL,IPAMDL
      DOUBLE PRECISION PARMDL
      COMMON /POMDLS/ MDLNA(50),ISWMDL(50),PARMDL(400),IPAMDL(400)

C  energy-interpolation table
      INTEGER IEETA2
      PARAMETER ( IEETA2 = 20 )
      INTEGER ISIMAX
      DOUBLE PRECISION SIGTAB,SIGECM
      COMMON /POTABL/ SIGTAB(4,80,IEETA2),SIGECM(4,IEETA2),ISIMAX

c*

C     PARAMETER (NPOINT=80)
      PARAMETER (NPOINT=16)
      DIMENSION ABSZX(NPOINT),WEIGHT(NPOINT)

      STOT = ZERO
      SINE = ZERO
      SDIR = ZERO

      W2 = ECMI**2
      IF ((ECMI.LE.ZERO).AND.(XNUI.GT.ZERO))
     &   W2 = AAM(1)**2-Q2I+TWO*XNUI*AAM(1)
      Q2 = Q2I
      X  = XI
c photoprod.
      IF ((X.LE.ZERO).AND.(Q2.LE.ZERO).AND.(W2.GT.ZERO)) THEN
         Q2 = 0.0001D0
         X  = Q2/(W2+Q2-AAM(1)**2)
c DIS
      ELSEIF ((X.LE.ZERO).AND.(Q2.GT.ZERO).AND.(W2.GT.ZERO)) THEN
         X  = Q2/(W2+Q2-AAM(1)**2)
      ELSEIF ((X.GT.ZERO).AND.(Q2.LE.ZERO).AND.(W2.GT.ZERO)) THEN
         Q2 = (W2-AAM(1)**2)*X/(ONE-X)
      ELSEIF ((X.GT.ZERO).AND.(Q2.GT.ZERO)) THEN
         W2 = Q2*(ONE-X)/X+AAM(1)**2
      ELSE
         WRITE(ErrorOut,*) 'SIGGP: inconsistent input ',W2,Q2,X
         STOP
      ENDIF
      ECM = SQRT(W2)

      IF (MODEGA.EQ.1) THEN
         SCALE = SQRT(Q2)
         CALL DT_CKMT(X,SCALE,UPV,DNV,USEA,DSEA,STR,CHM,BOT,TOP,GL,F2,
     &                                                       IDPDF)
C        W = SQRT(W2)

C        ALLMF2 = PHO_ALLM97(Q2,W)

C        write(*,*) 'X,Q2,W,F2,ALLMF2',X,Q2,W,F2,ALLMF2
         STOT = TWOPI**2*ALPHEM/(Q2*(ONE-X)) * F2 *GEV2MB
         SINE = ZERO
         SDIR = ZERO
      ELSEIF (MODEGA.EQ.2) THEN
         IF (INTRGE(1).EQ.1) THEN
            AMLO2 = (3.0D0*AAM(13))**2
         ELSEIF (INTRGE(1).EQ.2) THEN
            AMLO2 = AAM(33)**2
         ELSE
            AMLO2 = AAM(96)**2
         ENDIF
         IF (INTRGE(2).EQ.1) THEN
            AMHI2 = W2/TWO
         ELSEIF (INTRGE(2).EQ.2) THEN
            AMHI2 = W2/4.0D0
         ELSE
            AMHI2 = W2
         ENDIF
         AMHI20 = (ECM-AAM(1))**2
         IF (AMHI2.GE.AMHI20) AMHI2 = AMHI20
         XAMLO  = LOG( AMLO2+Q2 )
         XAMHI  = LOG( AMHI2+Q2 )
c*PHOJET105a
C        CALL GSET(XAMLO,XAMHI,NPOINT,ABSZX,WEIGHT)
c*PHOJET112

         CALL PHO_GAUSET(XAMLO,XAMHI,NPOINT,ABSZX,WEIGHT)

c*
         SUM  = ZERO
         DO 1 J=1,NPOINT
            AM2 = EXP(ABSZX(J))-Q2
            IF (AM2.LT.16.0D0) THEN
               R = TWO
            ELSEIF ((AM2.GE.16.0D0).AND.(AM2.LT.121.0D0)) THEN
               R = 10.0D0/3.0D0
            ELSE
               R = 11.0D0/3.0D0
            ENDIF
C           FAC = R * AM2/( (AM2+Q2)*(AM2+Q2+RL2) )
            FAC = R * AM2/( (AM2+Q2)*(AM2+Q2+RL2) )
     &            * (ONE+EPSPOL*Q2/AM2)
            SUM = SUM+WEIGHT(J)*FAC
    1    CONTINUE
         SINE = SUM
         SDIR = DT_SIGVP(X,Q2)
         STOT = ALPHEM/(3.0D0*PI*(ONE-X))*SUM*SDIR
         SDIR = SDIR/(0.588D0+RL2+Q2)
C        STOT = ALPHEM/(3.0D0*PI*(ONE-X))*SUM*DT_SIGVP(X,Q2)
      ELSEIF (MODEGA.EQ.3) THEN
         CALL DT_SIGGA(1,XI,Q2I,ECMI,ZERO,STOT,ETOT,SINE,EINE,DUM)
      ELSEIF (MODEGA.EQ.4) THEN
c  load cross sections from PHOJET interpolation table
         IP = 1
         IF(ECM.LE.SIGECM(IP,1)) THEN
           I1 = 1
           I2 = 1
         ELSEIF (ECM.LT.SIGECM(IP,ISIMAX)) THEN
           DO 2 I=2,ISIMAX
              IF (ECM.LE.SIGECM(IP,I)) GOTO 3
    2      CONTINUE
    3      CONTINUE
           I1 = I-1
           I2 = I
         ELSE
           WRITE(ErrorOut,'(/1X,A,2E12.3)')
     &       'SIGGP:WARNING:TOO HIGH ENERGY',ECM,SIGECM(IP,ISIMAX)
           I1 = ISIMAX
           I2 = ISIMAX
         ENDIF
         FAC2 = ZERO
         IF (I1.NE.I2) FAC2 = LOG(ECM/SIGECM(IP,I1))
     &                       /LOG(SIGECM(IP,I2)/SIGECM(IP,I1))
         FAC1 = ONE-FAC2
c  cross section dependence on photon virtuality
         FSUP1 = ZERO
         DO 4 I=1,3
            FSUP1 = FSUP1+PARMDL(26+I)*(1.D0+Q2/(4.D0*PARMDL(30+I)))
     &                                /(1.D0+Q2/PARMDL(30+I))**2
    4    CONTINUE
         FSUP1 = FSUP1+PARMDL(30)/(1.D0+Q2/PARMDL(34))
         FAC1  = FAC1*FSUP1
         FAC2  = FAC2*FSUP1
         FSUP2 = 1.0D0
         STOT  = FAC2*SIGTAB(IP, 1,I2)+FAC1*SIGTAB(IP, 1,I1)
         SINE  = FAC2*SIGTAB(IP,28,I2)+FAC1*SIGTAB(IP,28,I1)
         SDIR  = FAC2*SIGTAB(IP,29,I2)+FAC1*SIGTAB(IP,29,I1)
c*re:
         STOT  = STOT-SDIR
c*
         SDIR  = SDIR/(FSUP1*FSUP2)
c*re:
         STOT  = STOT+SDIR
c*
      ENDIF

      RETURN
      END
c
c===sigvel=============================================================*
c
CDECK  ID>, DT_SIGVEL
      SUBROUTINE DT_SIGVEL(XI,Q2I,ECMI,XNUI,IDXV,SVEL,SIG1,SIG2)

c***********************************************************************
c Cross section for elastic vector meson production                    *
c This version dated 10.05.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI  = 6.283185307179586476925286766559D+00,
     &           PI     = TWOPI/TWO,
     &           GEV2MB = 0.38938D0,
     &           ALPHEM = ONE/137.0D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)


      W2 = ECMI**2
      IF ((ECMI.LE.ZERO).AND.(XNUI.GT.ZERO))
     &   W2 = AAM(1)**2-Q2I+TWO*XNUI*AAM(1)
      Q2 = Q2I
      X  = XI
c photoprod.
      IF ((X.LE.ZERO).AND.(Q2.LE.ZERO).AND.(W2.GT.ZERO)) THEN
         Q2 = 0.0001D0
         X  = Q2/(W2+Q2-AAM(1)**2)
c DIS
      ELSEIF ((X.LE.ZERO).AND.(Q2.GT.ZERO).AND.(W2.GT.ZERO)) THEN
         X  = Q2/(W2+Q2-AAM(1)**2)
      ELSEIF ((X.GT.ZERO).AND.(Q2.LE.ZERO).AND.(W2.GT.ZERO)) THEN
         Q2 = (W2-AAM(1)**2)*X/(ONE-X)
      ELSEIF ((X.GT.ZERO).AND.(Q2.GT.ZERO)) THEN
         W2 = Q2*(ONE-X)/X+AAM(1)**2
      ELSE
         WRITE(ErrorOut,*) 'SIGVEL: inconsistent input ',W2,Q2,X
         STOP
      ENDIF
      ECM = SQRT(W2)

      AMV  = AAM(IDXV)
      AMV2 = AMV**2

      BSLOPE = 2.0D0*(2.0D0+AAM(32)**2/(AMV2+Q2)
     &        +0.25D0*LOG(W2/(AMV2+Q2)))*GEV2MB
      ROSH   = 0.1D0
      STOVP  = DT_SIGVP(X,Q2)/(AMV2+Q2+RL2)
      SELVP  = STOVP**2*(ONE+ROSH**2)/(8.0D0*TWOPI*BSLOPE)

      IF (IDXV.EQ.33) THEN
         COUPL = 0.00365D0
      ELSE
         STOP
      ENDIF
      SIG1 = (AMV2/(AMV2+Q2))**2 * (ONE+EPSPOL*Q2/AMV2)
      SIG2 = SELVP
      SVEL  = COUPL * (AMV2/(AMV2+Q2))**2
     &              * (ONE+EPSPOL*Q2/AMV2) * SELVP

      RETURN
      END
c
c===sigvp==============================================================*
c
CDECK  ID>, DT_SIGVP
      DOUBLE PRECISION FUNCTION DT_SIGVP(XI,Q2I)

c***********************************************************************
c sigma_Vp                                                             *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI = 6.283185307179586476925286766559D+00,
     &           PI    = TWOPI/TWO,
     &           GEV2MB = 0.38938D0,
     &           AMPROT = 0.938D0,
     &           ALPHEM = ONE/137.0D0)
c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)


      X  = XI
      Q2 = Q2I
      IF (XI.LE.ZERO)  X  = 0.0001D0
      IF (Q2I.LE.ZERO) Q2 = 0.0001D0

      ECM    = SQRT( Q2*(ONE-X)/X+AMPROT**2 )

      SCALE = SQRT(Q2)
      IF (MODEGA.EQ.1) THEN
         CALL DT_CKMT(X,SCALE,UPV,DNV,USEA,DSEA,STR,CHM,BOT,TOP,GL,F2,
     &                                                       IDPDF)
C        W = ECM

C        ALLMF2 = PHO_ALLM97(Q2,W)

C        write(*,*) 'X,Q2,W,F2,ALLMF2',X,Q2,W,F2,ALLMF2
C        STOT = TWOPI**2*ALPHEM/(Q2*(ONE-X)) * F2 *GEV2MB
C        DT_SIGVP = 12.0D0*PI**3.0D0*F2/(Q2*DT_RRM2(X,Q2))
         DT_SIGVP = 12.0D0*PI**3.0D0*F2/(Q2*DT_RRM2(X,Q2))*GEV2MB
      ELSEIF (MODEGA.EQ.4) THEN
         CALL DT_SIGGP(X,Q2,ECM,DUM1,STOT,DUM2,DUM3)
C        F2 = Q2*(ONE-X)/(TWOPI**2*ALPHEM*GEV2MB) * STOT
         DT_SIGVP = 3.0D0*PI/(ALPHEM*DT_RRM2(X,Q2)) * STOT
      ELSE
         STOP ' DT_SIGVP: F2 NOT DEFINED FOR THIS MODEGA !'
      ENDIF

      RETURN

      END
c
c===RRM2===============================================================*
c
CDECK  ID>, DT_RRM2
      DOUBLE PRECISION FUNCTION DT_RRM2(X,Q2)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI = 6.283185307179586476925286766559D+00,
     &           PI    = TWOPI/TWO,
     &           GEV2MB = 0.38938D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)


      S   = Q2*(ONE-X)/X+AAM(1)**2
      ECM = SQRT(S)

      IF (INTRGE(1).EQ.1) THEN
         AMLO2 = (3.0D0*AAM(13))**2
      ELSEIF (INTRGE(1).EQ.2) THEN
         AMLO2 = AAM(33)**2
      ELSE
         AMLO2 = AAM(96)**2
      ENDIF
      IF (INTRGE(2).EQ.1) THEN
         AMHI2 = S/TWO
      ELSEIF (INTRGE(2).EQ.2) THEN
         AMHI2 = S/4.0D0
      ELSE
         AMHI2 = S
      ENDIF
      AMHI20 = (ECM-AAM(1))**2
      IF (AMHI2.GE.AMHI20) AMHI2 = AMHI20

      AM1C2 = 16.0D0
      AM2C2 = 121.0D0
      IF (AMHI2.LE.AM1C2) THEN
         DT_RRM2 = TWO*DT_RM2(AMLO2,AMHI2,Q2)
      ELSEIF ((AMHI2.GT.AM1C2).AND.(AMHI2.LE.AM2C2)) THEN
         DT_RRM2 = TWO*DT_RM2(AMLO2,AM1C2,Q2)+
     &          10.0D0/3.0D0*DT_RM2(AM1C2,AMHI2,Q2)
      ELSE
         DT_RRM2 = TWO*DT_RM2(AMLO2,AM1C2,Q2)+
     &          10.0D0/3.0D0*DT_RM2(AM1C2,AM2C2,Q2)+
     &          11.0D0/3.0D0*DT_RM2(AM2C2,AMHI2,Q2)
      ENDIF

      RETURN
      END
c
c===RM2================================================================*
c
CDECK  ID>, DT_RM2
      DOUBLE PRECISION FUNCTION DT_RM2(AMLO2,AMHI2,Q2)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)
      PARAMETER (TWOPI = 6.283185307179586476925286766559D+00,
     &           PI    = TWOPI/TWO,
     &           GEV2MB = 0.38938D0)
c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)


      IF (RL2.LE.ZERO) THEN
         DT_RM2 = -ONE/(AMHI2+Q2)+Q2/(TWO*(AMHI2+Q2)**2) -
     &        (-ONE/(AMLO2+Q2)+Q2/(TWO*(AMLO2+Q2)**2))
     &         +EPSPOL*(-Q2/(TWO*(AMHI2+Q2)**2)+Q2/(TWO*(AMLO2+Q2)**2))
      ELSE
         TMPMLO = LOG(ONE+RL2/(AMLO2+Q2))
         TMPMHI = LOG(ONE+RL2/(AMHI2+Q2))
         DT_RM2 = Q2/(RL2*(AMHI2+Q2))-(Q2+RL2)/RL2**2*TMPMHI
     &       -(Q2/(RL2*(AMLO2+Q2))-(Q2+RL2)/RL2**2*TMPMLO)
     &       +EPSPOL*(
     &         -Q2/(RL2*(AMHI2+Q2))+Q2/RL2**2*TMPMHI
     &       -(-Q2/(RL2*(AMLO2+Q2))+Q2/RL2**2*TMPMLO))
      ENDIF

      RETURN
      END
c
c===SAM2===============================================================*
c
CDECK  ID>, DT_SAM2
      DOUBLE PRECISION FUNCTION DT_SAM2(Q2,ECM)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0,
     &           TENTRD=10.0D0/3.0D0,ELVTRD=11.0D0/3.0D0)
      PARAMETER (TWOPI = 6.283185307179586476925286766559D+00,
     &           PI    = TWOPI/TWO,
     &           GEV2MB = 0.38938D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c VDM parameter for photon-nucleus interactions
      COMMON /DTVDMP/ RL2,EPSPOL,INTRGE(2),IDPDF,MODEGA,ISHAD(3)


      S = ECM**2
      IF (INTRGE(1).EQ.1) THEN
         AMLO2 = (3.0D0*AAM(13))**2
      ELSEIF (INTRGE(1).EQ.2) THEN
         AMLO2 = AAM(33)**2
      ELSE
         AMLO2 = AAM(96)**2
      ENDIF
      IF (INTRGE(2).EQ.1) THEN
         AMHI2 = S/TWO
      ELSEIF (INTRGE(2).EQ.2) THEN
         AMHI2 = S/4.0D0
      ELSE
         AMHI2 = S
      ENDIF
      AMHI20 = (ECM-AAM(1))**2
      IF (AMHI2.GE.AMHI20) AMHI2 = AMHI20

      AM1C2 = 16.0D0
      AM2C2 = 121.0D0
      YLO   = LOG(AMLO2+Q2)
      YC1   = LOG(AM1C2+Q2)
      YC2   = LOG(AM2C2+Q2)
      YHI   = LOG(AMHI2+Q2)
      IF (AMHI2.LE.AM1C2) THEN
         FACHI = TWO
      ELSEIF ((AMHI2.GT.AM1C2).AND.(AMHI2.LE.AM2C2)) THEN
         FACHI = TENTRD
      ELSE
         FACHI = ELVTRD
      ENDIF

    1 CONTINUE
      YSAM2  = YLO+(YHI-YLO)*DT_RNDM(AM1C2)
      IF (YSAM2.LE.YC1) THEN
         FAC = TWO
      ELSEIF ((YSAM2.GT.YC1).AND.(YSAM2.LE.YC2)) THEN
         FAC = TENTRD
      ELSE
         FAC = ELVTRD
      ENDIF
      WEIGMX = FACHI*(ONE-Q2*EXP(  -YHI))
      XSAM2  = FAC  *(ONE-Q2*EXP(-YSAM2))
      IF (DT_RNDM(YSAM2)*WEIGMX.GT.XSAM2) GOTO 1

      DT_SAM2   = EXP(YSAM2)-Q2

      RETURN
      END
c
c===ckmt===============================================================*
c
CDECK  ID>, DT_CKMT
      SUBROUTINE DT_CKMT(X,SCALE,UPV,DNV,USEA,DSEA,STR,CHM,BOT,TOP,GL,
     &                F2,IPAR)

c***********************************************************************
c This version dated 31.01.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TWO=2.0D0,TINY10=1.0D-10)

      PARAMETER (Q02 = 2.0D0,
     &           DQ2 = 10.05D0,
     &           Q12 = Q02+DQ2)

      DIMENSION PD(-6:6),SEA(3),VAL(2)

      CALL DT_PDF0(Q02,X,F2Q0,VAL,SEA,GLU,IPAR)
      CALL DT_PDF0(Q12,X,F2Q1,VAL,SEA,GLU,IPAR)
      ADQ2 = LOG10(Q12)-LOG10(Q02)
      F2P  = (F2Q1-F2Q0)/ADQ2
      CALL DT_CKMTX(IPAR,X,Q02,PD,F2PQ0)
      CALL DT_CKMTX(IPAR,X,Q12,PD,F2PQ1)
      F2PP = (F2PQ1-F2PQ0)/ADQ2
      FX   = (F2P-F2PP)/(F2PP+LOG(DQ2)*F2PQ0+TINY10)*Q02

      Q2     = MAX(SCALE**2.0D0,TINY10)
      SMOOTH = 1.0D0+FX*(Q2-Q02)/Q2**2
      IF (Q2.LT.Q02) THEN
         CALL DT_PDF0(Q2,X,F2,VAL,SEA,GLU,IPAR)
         UPV  = VAL(1)
         DNV  = VAL(2)
         USEA = SEA(1)
         DSEA = SEA(2)
         STR  = SEA(3)
         CHM  = 0.0D0
         BOT  = 0.0D0
         TOP  = 0.0D0
         GL   = GLU
      ELSE
         CALL DT_CKMTX(IPAR,X,Q2,PD,F2)
         F2 = F2*SMOOTH
         UPV  = PD(2)-PD(3)
         DNV  = PD(1)-PD(3)
         USEA = PD(3)
         DSEA = PD(3)
         STR  = PD(3)
         CHM  = PD(4)
         BOT  = PD(5)
         TOP  = PD(6)
         GL   = PD(0)
C        UPV  = UPV*SMOOTH
C        DNV  = DNV*SMOOTH
C        USEA = USEA*SMOOTH
C        DSEA = DSEA*SMOOTH
C        STR  = STR*SMOOTH
C        CHM  = CHM*SMOOTH
C        GL   = GL*SMOOTH
      ENDIF

      RETURN
      END
C
CDECK  ID>, DT_CKMTX
      SUBROUTINE DT_CKMTX(IPAR,X,SCALE2,PD,F2)
C**********************************************************************
C
C     PDF based on Regge theory, evolved with .... by ....
C
C     input: IPAR     2212   proton (not installed)
C                       45   Pomeron
C                      100   Deuteron
C
C     output: PD(-6:6) x*f(x)  parton distribution functions
C            (PDFLIB convention: d = PD(1), u = PD(2) )
C
C**********************************************************************
#include "Zmanagerp.h"

      SAVE
      DOUBLE PRECISION  X,SCALE2,PD(-6:6),CDN,CUP,F2
      DIMENSION QQ(7)
C
      Q2=SNGL(SCALE2)
      Q1S=Q2
      XX=SNGL(X)
C  QCD lambda for evolution
      OWLAM = 0.23D0
      OWLAM2=OWLAM**2
C  Q0**2 for evolution
      Q02 = 2.D0
C
C
C  the conventions are : q(1)=x*u, q(2)=x*d, q(3)=q(4)=x*sbar=x*ubar=...
C                        q(6)=x*charm, q(7)=x*gluon
C
      SB=0.
      IF(Q2-Q02) 1,1,2
    2 SB=LOG(LOG(Q2/OWLAM2)/LOG(Q02/OWLAM2))
    1 CONTINUE
      IF(IPAR.EQ.2212) THEN
        CALL DT_CKMTPR(1,0,XX,SB,QQ(1))
        CALL DT_CKMTPR(2,0,XX,SB,QQ(2))
        CALL DT_CKMTPR(3,0,XX,SB,QQ(3))
        CALL DT_CKMTPR(4,0,XX,SB,QQ(4))
        CALL DT_CKMTPR(5,0,XX,SB,QQ(5))
        CALL DT_CKMTPR(8,0,XX,SB,QQ(6))
        CALL DT_CKMTPR(7,0,XX,SB,QQ(7))
C     ELSEIF (IPAR.EQ.45) THEN
C       CALL CKMTPO(1,0,XX,SB,QQ(1))
C       CALL CKMTPO(2,0,XX,SB,QQ(2))
C       CALL CKMTPO(3,0,XX,SB,QQ(3))
C       CALL CKMTPO(4,0,XX,SB,QQ(4))
C       CALL CKMTPO(5,0,XX,SB,QQ(5))
C       CALL CKMTPO(8,0,XX,SB,QQ(6))
C       CALL CKMTPO(7,0,XX,SB,QQ(7))
      ELSEIF (IPAR.EQ.100) THEN
        CALL DT_CKMTDE(1,0,XX,SB,QQ(1))
        CALL DT_CKMTDE(2,0,XX,SB,QQ(2))
        CALL DT_CKMTDE(3,0,XX,SB,QQ(3))
        CALL DT_CKMTDE(4,0,XX,SB,QQ(4))
        CALL DT_CKMTDE(5,0,XX,SB,QQ(5))
        CALL DT_CKMTDE(8,0,XX,SB,QQ(6))
        CALL DT_CKMTDE(7,0,XX,SB,QQ(7))
      ELSE
        WRITE(ErrorOut,'(1X,A,I4,A)')
     &     'CKMTX:   IPAR =',IPAR,' NOT IMPLEMENTED!'
        STOP
      ENDIF
C
      PD(-6) = 0.D0
      PD(-5) = 0.D0
      PD(-4) = DBLE(QQ(6))
      PD(-3) = DBLE(QQ(3))
      PD(-2) = DBLE(QQ(4))
      PD(-1) = DBLE(QQ(5))
      PD(0)  = DBLE(QQ(7))
      PD(1)  = DBLE(QQ(2))
      PD(2)  = DBLE(QQ(1))
      PD(3)  = DBLE(QQ(3))
      PD(4)  = DBLE(QQ(6))
      PD(5)  = 0.D0
      PD(6)  = 0.D0
      IF(IPAR.EQ.45) THEN
        CDN = (PD(1)-PD(-1))/2.D0
        CUP = (PD(2)-PD(-2))/2.D0
        PD(-1) = PD(-1) + CDN
        PD(-2) = PD(-2) + CUP
        PD(1) = PD(-1)
        PD(2) = PD(-2)
      ENDIF
      F2 = 4.0D0/9.0D0*(PD(2)-PD(3)+2.0D0*PD(3))+
     &     1.0D0/9.0D0*(PD(1)-PD(3)+2.0D0*PD(3))+
     &     1.0D0/9.0D0*(2.0D0*PD(3))+4.0D0/9.0D0*(2.0D0*PD(4))
      END
C
c
c===pdf0===============================================================*
c
CDECK  ID>, DT_PDF0
      SUBROUTINE DT_PDF0(Q2,X,F2,VAL,SEA,GLU,IPAR)

c***********************************************************************
c This subroutine calculates F_2 and PDF below Q^2=Q_0^2=2 GeV^2       *
c an F_2-ansatz given in Capella et al. PLB 337(1994)358.              *
c                   IPAR  = 2212   proton                              *
c                         =  100   deuteron                            *
c This version dated 31.01.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY9=1.0D-9)

      PARAMETER (
     &              AA     = 0.1502D0,
     &              BBDEU  = 1.2D0,
     &              BUD    = 0.754D0,
     &              BDD    = 0.4495D0,
     &              BUP    = 1.2064D0,
     &              BDP    = 0.1798D0,
     &              DELTA0 = 0.07684D0,
     &              D      = 1.117D0,
     &              C      = 3.5489D0,
     &              A      = 0.2631D0,
     &              B      = 0.6452D0,
     &              ALPHAR = 0.415D0,
     &              E      = 0.1D0
     &          )

      PARAMETER (NPOINT=16)
C     DIMENSION ABSZX(NPOINT),WEIGHT(NPOINT)
      DIMENSION SEA(3),VAL(2)

      DELTA = DELTA0*(1.0D0+2.0D0*Q2/(Q2+D))
      AN    = 1.5D0*(1.0D0+Q2/(Q2+C))
c proton, deuteron
      IF ((IPAR.EQ.2212).OR.(IPAR.EQ.100)) THEN
         CALL DT_CKMTQ0(Q2,X,IPAR,VALU0,VALD0,SEA0)
         SEA(1) = 0.75D0*SEA0
         SEA(2) = SEA(1)
         SEA(3) = SEA(1)
         VAL(1) = 9.0D0/4.0D0*VALU0
         VAL(2) = 9.0D0*VALD0
         GLU0   = SEA(1)/(1.0D0-X)
         F2     = SEA0+VALU0+VALD0
         F2PDF  = 4.0D0/9.0D0*(VAL(1)+2.0D0*SEA(1))+
     &            1.0D0/9.0D0*(VAL(2)+2.0D0*SEA(2))+
     &            1.0D0/9.0D0*(2.0D0*SEA(3))
         IF (ABS(F2-F2PDF).GT.TINY9) THEN
            WRITE(ErrorOut,
     * '(1X,A,2E15.5)') 'inconsistent PDF! ',F2,F2PDF
            STOP
         ENDIF
c*PHOJET105a
C        CALL GSET(ZERO,ONE,NPOINT,ABSZX,WEIGHT)
c*PHOJET112

C        CALL PHO_GAUSET(ZERO,ONE,NPOINT,ABSZX,WEIGHT)

c*
C        SUMQ = ZERO
C        SUMG = ZERO
C        DO 1 J=1,NPOINT
C           CALL DT_CKMTQ0(Q2,ABSZX(J),IPAR,VALU0,VALD0,SEA0)
C           VALU0 = 9.0D0/4.0D0*VALU0
C           VALD0 = 9.0D0*VALD0
C           SEA0  = 0.75D0*SEA0
C           SUMQ  = SUMQ+ (VALU0+VALD0+6.0D0*SEA0) *WEIGHT(J)
C           SUMG  = SUMG+ (SEA0/(1.0D0-ABSZX(J)))  *WEIGHT(J)
C   1    CONTINUE
C        GLU = GLU0*(1.0D0-SUMQ)/SUMG
      ELSE
         WRITE(ErrorOut,'(1X,A,I4,A)')
     &      'PDF0:   IPAR =',IPAR,' NOT IMPLEMENTED!'
         STOP
      ENDIF

      RETURN
      END
c
c===ckmtq0=============================================================*
c
CDECK  ID>, DT_CKMTQ0
      SUBROUTINE DT_CKMTQ0(Q2,X,IPAR,VALU0,VALD0,SEA0)

c***********************************************************************
c This subroutine calculates F_2 and PDF below Q^2=Q_0^2=2 GeV^2       *
c an F_2-ansatz given in Capella et al. PLB 337(1994)358.              *
c                   IPAR  = 2212   proton                              *
c                         =  100   deuteron                            *
c This version dated 31.01.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TINY9=1.0D-9)

      PARAMETER (
     &              AA     = 0.1502D0,
     &              BBDEU  = 1.2D0,
     &              BUD    = 0.754D0,
     &              BDD    = 0.4495D0,
     &              BUP    = 1.2064D0,
     &              BDP    = 0.1798D0,
     &              DELTA0 = 0.07684D0,
     &              D      = 1.117D0,
     &              C      = 3.5489D0,
     &              A      = 0.2631D0,
     &              B      = 0.6452D0,
     &              ALPHAR = 0.415D0,
     &              E      = 0.1D0
     &          )

      DELTA = DELTA0*(1.0D0+2.0D0*Q2/(Q2+D))
      AN    = 1.5D0*(1.0D0+Q2/(Q2+C))
c proton, deuteron
      IF ((IPAR.EQ.2212).OR.(IPAR.EQ.100)) THEN
         IF (IPAR.EQ.2212) THEN
            BU = BUP
            BD = BDP
         ELSE
            BU = BUD
            BD = BDD
         ENDIF
         SEA0  = AA*X**(-DELTA)*(1.0D0-X)**(AN+4.0D0)*
     &          (Q2/(Q2+A))**(1.0D0+DELTA)
         VALU0 = BU*X**(1.0D0-ALPHAR)*(1.0D0-X)**AN*
     &           (Q2/(Q2+B))**(ALPHAR)
         VALD0 = BD*X**(1.0D0-ALPHAR)*(1.0D0-X)**(AN+1.0D0)*
     &           (Q2/(Q2+B))**(ALPHAR)
      ELSE
         WRITE(ErrorOut,'(1X,A,I4,A)')
     &      'CKMTQ0: IPAR =',IPAR,' NOT IMPLEMENTED!'
         STOP
      ENDIF
      RETURN
      END
C
C
CDECK  ID>, DT_CKMTDE
      SUBROUTINE DT_CKMTDE(I,NDRV,X,S,ANS)
C
C**********************************************************************
C    Deuteron - PDFs
C    I   = 1, 2, 3, 4, 5, 7, 8 : xu, xd, xub, xdb, xsb, xg, xc
C    ANS = PDF(I)
C    This version by S. Roesler, 30.01.96
C**********************************************************************

      SAVE
      DIMENSION F1(25),F2(25),GF(8,20,25),DL(4000)
      EQUIVALENCE (GF(1,1,1),DL(1))
      DATA DELTA/.13/
C
      DATA (DL(K),K=    1,   85) /
     &0.351858E+00,0.388489E+00,0.325356E+00,0.325356E+00,0.325356E+00,
     &0.325356E+00,0.445218E+01,0.000000E+00,0.419818E+00,0.459249E+00,
     &0.391167E+00,0.391143E+00,0.391125E+00,0.391167E+00,0.628186E+01,
     &0.703797E-01,0.498333E+00,0.540626E+00,0.467466E+00,0.467423E+00,
     &0.467393E+00,0.467466E+00,0.837368E+01,0.151191E+00,0.587839E+00,
     &0.633058E+00,0.554689E+00,0.554630E+00,0.554595E+00,0.554689E+00,
     &0.107170E+02,0.242877E+00,0.688652E+00,0.736861E+00,0.653150E+00,
     &0.653080E+00,0.653046E+00,0.653150E+00,0.132960E+02,0.345760E+00,
     &0.800961E+00,0.852226E+00,0.763038E+00,0.762961E+00,0.762933E+00,
     &0.763038E+00,0.160884E+02,0.460033E+00,0.924829E+00,0.979213E+00,
     &0.884414E+00,0.884335E+00,0.884319E+00,0.884414E+00,0.190679E+02,
     &0.585764E+00,0.106016E+01,0.111773E+01,0.101719E+01,0.101711E+01,
     &0.101711E+01,0.101719E+01,0.222033E+02,0.722864E+00,0.120670E+01,
     &0.126752E+01,0.116110E+01,0.116102E+01,0.116105E+01,0.116110E+01,
     &0.254603E+02,0.871079E+00,0.136402E+01,0.142815E+01,0.131571E+01,
     &0.131565E+01,0.131570E+01,0.131571E+01,0.288020E+02,0.102998E+01,
     &0.153151E+01,0.159900E+01,0.148043E+01,0.148038E+01,0.148046E+01/
      DATA (DL(K),K=   86,  170) /
     &0.148043E+01,0.321898E+02,0.119897E+01,0.170838E+01,0.177930E+01,
     &0.165447E+01,0.165444E+01,0.165455E+01,0.165447E+01,0.355845E+02,
     &0.137726E+01,0.189369E+01,0.196807E+01,0.183687E+01,0.183686E+01,
     &0.183701E+01,0.183687E+01,0.389473E+02,0.156390E+01,0.208631E+01,
     &0.216422E+01,0.202653E+01,0.202654E+01,0.202673E+01,0.202653E+01,
     &0.422402E+02,0.175779E+01,0.228501E+01,0.236648E+01,0.222220E+01,
     &0.222224E+01,0.222248E+01,0.222220E+01,0.454277E+02,0.195768E+01,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.326035E+00,0.380777E+00,0.286363E+00,0.286363E+00,0.286363E+00,
     &0.286363E+00,0.392252E+01,-.138778E-16,0.380092E+00,0.438587E+00/
      DATA (DL(K),K=  171,  255) /
     &0.337452E+00,0.337430E+00,0.337424E+00,0.337452E+00,0.532193E+01,
     &0.553645E-01,0.440879E+00,0.503177E+00,0.395208E+00,0.395169E+00,
     &0.395165E+00,0.395208E+00,0.686454E+01,0.117354E+00,0.508415E+00,
     &0.574566E+00,0.459649E+00,0.459600E+00,0.459604E+00,0.459649E+00,
     &0.853316E+01,0.185994E+00,0.582647E+00,0.652699E+00,0.530722E+00,
     &0.530667E+00,0.530687E+00,0.530722E+00,0.103093E+02,0.261237E+00,
     &0.663404E+00,0.737405E+00,0.608254E+00,0.608199E+00,0.608241E+00,
     &0.608254E+00,0.121710E+02,0.342917E+00,0.750429E+00,0.828423E+00,
     &0.691990E+00,0.691941E+00,0.692009E+00,0.691990E+00,0.140946E+02,
     &0.430783E+00,0.843361E+00,0.925391E+00,0.781571E+00,0.781533E+00,
     &0.781632E+00,0.781571E+00,0.160553E+02,0.524479E+00,0.941741E+00,
     &0.102784E+01,0.876538E+00,0.876515E+00,0.876650E+00,0.876538E+00,
     &0.180277E+02,0.623549E+00,0.104501E+01,0.113521E+01,0.976335E+00,
     &0.976332E+00,0.976506E+00,0.976335E+00,0.199863E+02,0.727439E+00,
     &0.115251E+01,0.124685E+01,0.108031E+01,0.108034E+01,0.108055E+01,
     &0.108031E+01,0.219066E+02,0.835506E+00,0.126352E+01,0.136201E+01,
     &0.118775E+01,0.118780E+01,0.118806E+01,0.118775E+01,0.237652E+02/
      DATA (DL(K),K=  256,  340) /
     &0.947020E+00,0.137724E+01,0.147989E+01,0.129783E+01,0.129791E+01,
     &0.129822E+01,0.129783E+01,0.255406E+02,0.106119E+01,0.149279E+01,
     &0.159961E+01,0.140972E+01,0.140984E+01,0.141019E+01,0.140972E+01,
     &0.272135E+02,0.117715E+01,0.160929E+01,0.172028E+01,0.152252E+01,
     &0.152267E+01,0.152308E+01,0.152252E+01,0.287669E+02,0.129402E+01,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.309785E+00,0.391282E+00,0.250518E+00,0.250518E+00,0.250518E+00,
     &0.250518E+00,0.343842E+01,-.138778E-16,0.352113E+00,0.438463E+00,
     &0.288877E+00,0.288863E+00,0.288878E+00,0.288877E+00,0.446765E+01,
     &0.424850E-01,0.398382E+00,0.489596E+00,0.331132E+00,0.331111E+00/
      DATA (DL(K),K=  341,  425) /
     &0.331148E+00,0.331132E+00,0.555902E+01,0.888369E-01,0.448375E+00,
     &0.544458E+00,0.377064E+00,0.377043E+00,0.377108E+00,0.377064E+00,
     &0.669490E+01,0.138845E+00,0.501854E+00,0.602811E+00,0.426440E+00,
     &0.426425E+00,0.426523E+00,0.426440E+00,0.785892E+01,0.192281E+00,
     &0.558506E+00,0.664331E+00,0.478946E+00,0.478944E+00,0.479079E+00,
     &0.478946E+00,0.903368E+01,0.248834E+00,0.617972E+00,0.728657E+00,
     &0.534229E+00,0.534244E+00,0.534421E+00,0.534229E+00,0.102022E+02,
     &0.308155E+00,0.679844E+00,0.795370E+00,0.591883E+00,0.591921E+00,
     &0.592141E+00,0.591883E+00,0.113479E+02,0.369841E+00,0.743667E+00,
     &0.864009E+00,0.651460E+00,0.651525E+00,0.651792E+00,0.651460E+00,
     &0.124553E+02,0.433447E+00,0.808951E+00,0.934073E+00,0.712474E+00,
     &0.712571E+00,0.712885E+00,0.712474E+00,0.135102E+02,0.498486E+00,
     &0.875171E+00,0.100503E+01,0.774408E+00,0.774541E+00,0.774902E+00,
     &0.774408E+00,0.144999E+02,0.564446E+00,0.941784E+00,0.107632E+01,
     &0.836726E+00,0.836897E+00,0.837307E+00,0.836726E+00,0.154136E+02,
     &0.630788E+00,0.100823E+01,0.114738E+01,0.898879E+00,0.899092E+00,
     &0.899551E+00,0.898879E+00,0.162423E+02,0.696967E+00,0.107396E+01/
      DATA (DL(K),K=  426,  510) /
     &0.121764E+01,0.960319E+00,0.960577E+00,0.961084E+00,0.960319E+00,
     &0.169791E+02,0.762433E+00,0.113843E+01,0.128655E+01,0.102051E+01,
     &0.102081E+01,0.102137E+01,0.102051E+01,0.176190E+02,0.826647E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.304680E+00,0.425088E+00,0.216504E+00,0.216504E+00,0.216504E+00,
     &0.216504E+00,0.298356E+01,0.000000E+00,0.337300E+00,0.463627E+00,
     &0.244023E+00,0.244024E+00,0.244063E+00,0.244023E+00,0.370271E+01,
     &0.316585E-01,0.371787E+00,0.503942E+00,0.273415E+00,0.273423E+00,
     &0.273505E+00,0.273415E+00,0.443039E+01,0.651685E-01,0.407853E+00,
     &0.545739E+00,0.304395E+00,0.304418E+00,0.304545E+00,0.304395E+00/
      DATA (DL(K),K=  511,  595) /
     &0.515321E+01,0.100252E+00,0.445229E+00,0.588741E+00,0.336700E+00,
     &0.336744E+00,0.336918E+00,0.336700E+00,0.586004E+01,0.136648E+00,
     &0.483606E+00,0.632629E+00,0.370026E+00,0.370095E+00,0.370318E+00,
     &0.370026E+00,0.654027E+01,0.174056E+00,0.522666E+00,0.677074E+00,
     &0.404062E+00,0.404162E+00,0.404433E+00,0.404062E+00,0.718442E+01,
     &0.212167E+00,0.562075E+00,0.721735E+00,0.438483E+00,0.438618E+00,
     &0.438938E+00,0.438483E+00,0.778423E+01,0.250658E+00,0.601494E+00,
     &0.766258E+00,0.472959E+00,0.473131E+00,0.473500E+00,0.472959E+00,
     &0.833276E+01,0.289199E+00,0.640580E+00,0.810290E+00,0.507156E+00,
     &0.507369E+00,0.507784E+00,0.507156E+00,0.882448E+01,0.327457E+00,
     &0.678993E+00,0.853479E+00,0.540747E+00,0.541003E+00,0.541463E+00,
     &0.540747E+00,0.925529E+01,0.365104E+00,0.716405E+00,0.895483E+00,
     &0.573411E+00,0.573714E+00,0.574216E+00,0.573411E+00,0.962250E+01,
     &0.401821E+00,0.752501E+00,0.935975E+00,0.604848E+00,0.605197E+00,
     &0.605740E+00,0.604848E+00,0.992478E+01,0.437304E+00,0.786987E+00,
     &0.974647E+00,0.634775E+00,0.635173E+00,0.635752E+00,0.634775E+00,
     &0.101620E+02,0.471269E+00,0.819594E+00,0.101122E+01,0.662936E+00/
      DATA (DL(K),K=  596,  680) /
     &0.663382E+00,0.663995E+00,0.662936E+00,0.103354E+02,0.503459E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.312661E+00,0.487836E+00,0.182562E+00,0.182562E+00,0.182562E+00,
     &0.182562E+00,0.253626E+01,0.000000E+00,0.336910E+00,0.518440E+00,
     &0.200702E+00,0.200721E+00,0.200779E+00,0.200702E+00,0.299460E+01,
     &0.224425E-01,0.361554E+00,0.549164E+00,0.219359E+00,0.219402E+00,
     &0.219517E+00,0.219359E+00,0.343183E+01,0.453742E-01,0.386348E+00,
     &0.579759E+00,0.238296E+00,0.238367E+00,0.238536E+00,0.238296E+00,
     &0.384076E+01,0.685610E-01,0.411080E+00,0.610003E+00,0.257305E+00,
     &0.257408E+00,0.257630E+00,0.257305E+00,0.421619E+01,0.917987E-01/
      DATA (DL(K),K=  681,  765) /
     &0.435528E+00,0.639668E+00,0.276174E+00,0.276313E+00,0.276583E+00,
     &0.276174E+00,0.455400E+01,0.114876E+00,0.459476E+00,0.668531E+00,
     &0.294698E+00,0.294875E+00,0.295191E+00,0.294698E+00,0.485107E+01,
     &0.137589E+00,0.482719E+00,0.696375E+00,0.312682E+00,0.312900E+00,
     &0.313258E+00,0.312682E+00,0.510539E+01,0.159742E+00,0.505060E+00,
     &0.722995E+00,0.329941E+00,0.330200E+00,0.330596E+00,0.329941E+00,
     &0.531589E+01,0.181149E+00,0.526315E+00,0.748199E+00,0.346303E+00,
     &0.346604E+00,0.347034E+00,0.346303E+00,0.548250E+01,0.201638E+00,
     &0.546317E+00,0.771808E+00,0.361613E+00,0.361957E+00,0.362418E+00,
     &0.361613E+00,0.560595E+01,0.221052E+00,0.564917E+00,0.793667E+00,
     &0.375735E+00,0.376122E+00,0.376609E+00,0.375735E+00,0.568772E+01,
     &0.239253E+00,0.581987E+00,0.813638E+00,0.388553E+00,0.388982E+00,
     &0.389491E+00,0.388553E+00,0.572992E+01,0.256122E+00,0.597419E+00,
     &0.831608E+00,0.399972E+00,0.400443E+00,0.400970E+00,0.399972E+00,
     &0.573516E+01,0.271562E+00,0.611129E+00,0.847487E+00,0.409919E+00,
     &0.410430E+00,0.410972E+00,0.409919E+00,0.570642E+01,0.285497E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K=  766,  850) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.335149E+00,0.582072E+00,0.146415E+00,0.146415E+00,0.146415E+00,
     &0.146415E+00,0.206772E+01,0.000000E+00,0.351552E+00,0.603437E+00,
     &0.156515E+00,0.156542E+00,0.156595E+00,0.156515E+00,0.231143E+01,
     &0.146091E-01,0.367407E+00,0.623737E+00,0.166387E+00,0.166442E+00,
     &0.166542E+00,0.166387E+00,0.252488E+01,0.289315E-01,0.382571E+00,
     &0.642832E+00,0.175891E+00,0.175976E+00,0.176118E+00,0.175891E+00,
     &0.270658E+01,0.428312E-01,0.396926E+00,0.660609E+00,0.184917E+00,
     &0.185034E+00,0.185212E+00,0.184917E+00,0.285608E+01,0.561981E-01,
     &0.410365E+00,0.676962E+00,0.193365E+00,0.193513E+00,0.193722E+00,
     &0.193365E+00,0.297375E+01,0.689319E-01,0.422792E+00,0.691796E+00/
      DATA (DL(K),K=  851,  935) /
     &0.201144E+00,0.201324E+00,0.201560E+00,0.201144E+00,0.306050E+01,
     &0.809434E-01,0.434123E+00,0.705030E+00,0.208181E+00,0.208393E+00,
     &0.208650E+00,0.208181E+00,0.311775E+01,0.921567E-01,0.444287E+00,
     &0.716596E+00,0.214413E+00,0.214656E+00,0.214931E+00,0.214413E+00,
     &0.314738E+01,0.102508E+00,0.453228E+00,0.726441E+00,0.219792E+00,
     &0.220066E+00,0.220354E+00,0.219792E+00,0.315156E+01,0.111949E+00,
     &0.460906E+00,0.734527E+00,0.224285E+00,0.224589E+00,0.224886E+00,
     &0.224285E+00,0.313271E+01,0.120441E+00,0.467291E+00,0.740835E+00,
     &0.227870E+00,0.228203E+00,0.228506E+00,0.227870E+00,0.309338E+01,
     &0.127963E+00,0.472372E+00,0.745357E+00,0.230541E+00,0.230902E+00,
     &0.231208E+00,0.230541E+00,0.303621E+01,0.134506E+00,0.476148E+00,
     &0.748105E+00,0.232304E+00,0.232690E+00,0.232996E+00,0.232304E+00,
     &0.296381E+01,0.140070E+00,0.478635E+00,0.749103E+00,0.233176E+00,
     &0.233586E+00,0.233889E+00,0.233176E+00,0.287874E+01,0.144672E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K=  936, 1020) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.370162E+00,0.695827E+00,0.105823E+00,0.105823E+00,0.105823E+00,
     &0.105823E+00,0.154556E+01,0.208167E-16,0.378214E+00,0.703794E+00,
     &0.109539E+00,0.109554E+00,0.109571E+00,0.109539E+00,0.162770E+01,
     &0.818783E-02,0.385258E+00,0.710067E+00,0.112818E+00,0.112847E+00,
     &0.112879E+00,0.112818E+00,0.168578E+01,0.158212E-01,0.391264E+00,
     &0.714648E+00,0.115620E+00,0.115666E+00,0.115709E+00,0.115620E+00,
     &0.172175E+01,0.228667E-01,0.396214E+00,0.717539E+00,0.117923E+00,
     &0.117985E+00,0.118037E+00,0.117923E+00,0.173756E+01,0.293009E-01,
     &0.400098E+00,0.718759E+00,0.119711E+00,0.119790E+00,0.119848E+00,
     &0.119711E+00,0.173541E+01,0.351123E-01,0.402915E+00,0.718332E+00,
     &0.120979E+00,0.121074E+00,0.121137E+00,0.120979E+00,0.171755E+01,
     &0.402951E-01,0.404672E+00,0.716292E+00,0.121728E+00,0.121840E+00/
      DATA (DL(K),K= 1021, 1105) /
     &0.121905E+00,0.121728E+00,0.168619E+01,0.448514E-01,0.405385E+00,
     &0.712681E+00,0.121967E+00,0.122095E+00,0.122161E+00,0.121967E+00,
     &0.164352E+01,0.487902E-01,0.405077E+00,0.707551E+00,0.121712E+00,
     &0.121855E+00,0.121920E+00,0.121712E+00,0.159162E+01,0.521265E-01,
     &0.403778E+00,0.700963E+00,0.120984E+00,0.121141E+00,0.121204E+00,
     &0.120984E+00,0.153245E+01,0.548814E-01,0.401525E+00,0.692984E+00,
     &0.119809E+00,0.119980E+00,0.120040E+00,0.119809E+00,0.146780E+01,
     &0.570807E-01,0.398361E+00,0.683691E+00,0.118218E+00,0.118402E+00,
     &0.118457E+00,0.118218E+00,0.139928E+01,0.587542E-01,0.394333E+00,
     &0.673166E+00,0.116244E+00,0.116440E+00,0.116490E+00,0.116244E+00,
     &0.132834E+01,0.599355E-01,0.389495E+00,0.661496E+00,0.113924E+00,
     &0.114131E+00,0.114175E+00,0.113924E+00,0.125620E+01,0.606602E-01,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 1106, 1190) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.394012E+00,0.757115E+00,0.772117E-01,0.772117E-01,0.772117E-01,
     &0.772117E-01,0.117279E+01,0.346945E-17,0.395841E+00,0.752988E+00,
     &0.780501E-01,0.780655E-01,0.780723E-01,0.780501E-01,0.118528E+01,
     &0.491697E-02,0.396627E+00,0.747223E+00,0.785386E-01,0.785692E-01,
     &0.785806E-01,0.785386E-01,0.118242E+01,0.932754E-02,0.396401E+00,
     &0.739901E+00,0.786820E-01,0.787273E-01,0.787413E-01,0.786820E-01,
     &0.116673E+01,0.132427E-01,0.395190E+00,0.731092E+00,0.784870E-01,
     &0.785464E-01,0.785613E-01,0.784870E-01,0.114033E+01,0.166738E-01,
     &0.393030E+00,0.720878E+00,0.779683E-01,0.780410E-01,0.780555E-01,
     &0.779683E-01,0.110528E+01,0.196392E-01,0.389962E+00,0.709342E+00,
     &0.771427E-01,0.772280E-01,0.772409E-01,0.771427E-01,0.106344E+01,
     &0.221591E-01,0.386027E+00,0.696571E+00,0.760304E-01,0.761276E-01,
     &0.761378E-01,0.760304E-01,0.101653E+01,0.242567E-01,0.381274E+00,
     &0.682657E+00,0.746543E-01,0.747623E-01,0.747692E-01,0.746543E-01/
      DATA (DL(K),K= 1191, 1275) /
     &0.966057E+00,0.259571E-01,0.375752E+00,0.667695E+00,0.730389E-01,
     &0.731569E-01,0.731598E-01,0.730389E-01,0.913345E+00,0.272876E-01,
     &0.369514E+00,0.651782E+00,0.712104E-01,0.713374E-01,0.713358E-01,
     &0.712104E-01,0.859530E+00,0.282763E-01,0.362616E+00,0.635021E+00,
     &0.691957E-01,0.693307E-01,0.693243E-01,0.691957E-01,0.805566E+00,
     &0.289524E-01,0.355116E+00,0.617511E+00,0.670220E-01,0.671640E-01,
     &0.671526E-01,0.670220E-01,0.752235E+00,0.293453E-01,0.347072E+00,
     &0.599357E+00,0.647162E-01,0.648642E-01,0.648478E-01,0.647162E-01,
     &0.700161E+00,0.294844E-01,0.338543E+00,0.580659E+00,0.623046E-01,
     &0.624578E-01,0.624363E-01,0.623046E-01,0.649828E+00,0.293983E-01,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 1276, 1360) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.408305E+00,0.775318E+00,0.509141E-01,0.509141E-01,0.509141E-01,
     &0.509141E-01,0.818839E+00,-.867362E-17,0.403619E+00,0.758058E+00,
     &0.502245E-01,0.502351E-01,0.502337E-01,0.502245E-01,0.795347E+00,
     &0.264045E-02,0.398068E+00,0.739709E+00,0.493454E-01,0.493661E-01,
     &0.493626E-01,0.493454E-01,0.764942E+00,0.491508E-02,0.391719E+00,
     &0.720394E+00,0.482952E-01,0.483253E-01,0.483192E-01,0.482952E-01,
     &0.729624E+00,0.685202E-02,0.384627E+00,0.700222E+00,0.470896E-01,
     &0.471285E-01,0.471194E-01,0.470896E-01,0.690906E+00,0.847433E-02,
     &0.376851E+00,0.679300E+00,0.457475E-01,0.457946E-01,0.457822E-01,
     &0.457475E-01,0.650078E+00,0.980774E-02,0.368452E+00,0.657739E+00,
     &0.442875E-01,0.443419E-01,0.443261E-01,0.442875E-01,0.608239E+00,
     &0.108769E-01,0.359490E+00,0.635646E+00,0.427281E-01,0.427892E-01,
     &0.427698E-01,0.427281E-01,0.566280E+00,0.117061E-01,0.350026E+00,
     &0.613128E+00,0.410878E-01,0.411549E-01,0.411320E-01,0.410878E-01,
     &0.524918E+00,0.123191E-01,0.340122E+00,0.590292E+00,0.393848E-01,
     &0.394571E-01,0.394308E-01,0.393848E-01,0.484713E+00,0.127393E-01/
      DATA (DL(K),K= 1361, 1445) /
     &0.329838E+00,0.567240E+00,0.376363E-01,0.377132E-01,0.376836E-01,
     &0.376363E-01,0.446084E+00,0.129888E-01,0.319236E+00,0.544074E+00,
     &0.358589E-01,0.359396E-01,0.359068E-01,0.358589E-01,0.409328E+00,
     &0.130888E-01,0.308374E+00,0.520890E+00,0.340678E-01,0.341517E-01,
     &0.341160E-01,0.340678E-01,0.374641E+00,0.130594E-01,0.297312E+00,
     &0.497781E+00,0.322772E-01,0.323636E-01,0.323253E-01,0.322772E-01,
     &0.342135E+00,0.129195E-01,0.286106E+00,0.474837E+00,0.304999E-01,
     &0.305882E-01,0.305474E-01,0.304999E-01,0.311854E+00,0.126863E-01,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.407248E+00,0.746438E+00,0.335640E-01,0.335640E-01,0.335640E-01/
      DATA (DL(K),K= 1446, 1530) /
     &0.335640E-01,0.573540E+00,0.173472E-16,0.397516E+00,0.719825E+00,
     &0.324649E-01,0.324735E-01,0.324698E-01,0.324649E-01,0.540770E+00,
     &0.147177E-02,0.387197E+00,0.692869E+00,0.312911E-01,0.313075E-01,
     &0.313000E-01,0.312911E-01,0.505972E+00,0.269995E-02,0.376365E+00,
     &0.665689E+00,0.300576E-01,0.300811E-01,0.300699E-01,0.300576E-01,
     &0.470389E+00,0.371147E-02,0.365085E+00,0.638387E+00,0.287770E-01,
     &0.288070E-01,0.287922E-01,0.287770E-01,0.434885E+00,0.452768E-02,
     &0.353423E+00,0.611066E+00,0.274623E-01,0.274980E-01,0.274797E-01,
     &0.274623E-01,0.400103E+00,0.516996E-02,0.341442E+00,0.583823E+00,
     &0.261256E-01,0.261663E-01,0.261448E-01,0.261256E-01,0.366541E+00,
     &0.565807E-02,0.329207E+00,0.556753E+00,0.247782E-01,0.248234E-01,
     &0.247989E-01,0.247782E-01,0.334555E+00,0.601048E-02,0.316777E+00,
     &0.529946E+00,0.234308E-01,0.234798E-01,0.234525E-01,0.234308E-01,
     &0.304384E+00,0.624451E-02,0.304214E+00,0.503489E+00,0.220932E-01,
     &0.221452E-01,0.221155E-01,0.220932E-01,0.276170E+00,0.637618E-02,
     &0.291575E+00,0.477462E+00,0.207739E-01,0.208286E-01,0.207966E-01,
     &0.207739E-01,0.249976E+00,0.642028E-02,0.278917E+00,0.451941E+00/
      DATA (DL(K),K= 1531, 1615) /
     &0.194809E-01,0.195376E-01,0.195037E-01,0.194809E-01,0.225809E+00,
     &0.639038E-02,0.266293E+00,0.426995E+00,0.182209E-01,0.182791E-01,
     &0.182436E-01,0.182209E-01,0.203629E+00,0.629880E-02,0.253754E+00,
     &0.402686E+00,0.169996E-01,0.170587E-01,0.170219E-01,0.169996E-01,
     &0.183361E+00,0.615665E-02,0.241347E+00,0.379071E+00,0.158217E-01,
     &0.158814E-01,0.158436E-01,0.158217E-01,0.164907E+00,0.597385E-02,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.395106E+00,0.689399E+00,0.218554E-01,0.218554E-01,0.218554E-01,
     &0.218554E-01,0.398362E+00,-.173472E-17,0.381441E+00,0.656777E+00,
     &0.207816E-01,0.207886E-01,0.207844E-01,0.207816E-01,0.366703E+00/
      DATA (DL(K),K= 1616, 1700) /
     &0.826643E-03,0.367505E+00,0.624578E+00,0.197001E-01,0.197133E-01,
     &0.197053E-01,0.197001E-01,0.335573E+00,0.149886E-02,0.353373E+00,
     &0.592889E+00,0.186195E-01,0.186383E-01,0.186266E-01,0.186195E-01,
     &0.305590E+00,0.203730E-02,0.339106E+00,0.561783E+00,0.175468E-01,
     &0.175705E-01,0.175555E-01,0.175468E-01,0.277136E+00,0.245817E-02,
     &0.324766E+00,0.531331E+00,0.164887E-01,0.165166E-01,0.164986E-01,
     &0.164887E-01,0.250424E+00,0.277666E-02,0.310411E+00,0.501599E+00,
     &0.154510E-01,0.154825E-01,0.154618E-01,0.154510E-01,0.225588E+00,
     &0.300658E-02,0.296100E+00,0.472648E+00,0.144390E-01,0.144735E-01,
     &0.144504E-01,0.144390E-01,0.202681E+00,0.316040E-02,0.281885E+00,
     &0.444535E+00,0.134570E-01,0.134940E-01,0.134689E-01,0.134570E-01,
     &0.181693E+00,0.324944E-02,0.267820E+00,0.417309E+00,0.125091E-01,
     &0.125481E-01,0.125212E-01,0.125091E-01,0.162572E+00,0.328396E-02,
     &0.253953E+00,0.391017E+00,0.115984E-01,0.116389E-01,0.116106E-01,
     &0.115984E-01,0.145235E+00,0.327313E-02,0.240328E+00,0.365695E+00,
     &0.107275E-01,0.107690E-01,0.107396E-01,0.107275E-01,0.129575E+00,
     &0.322510E-02,0.226989E+00,0.341375E+00,0.989805E-02,0.994030E-02/
      DATA (DL(K),K= 1701, 1785) /
     &0.990998E-02,0.989805E-02,0.115477E+00,0.314713E-02,0.213972E+00,
     &0.318081E+00,0.911149E-02,0.915408E-02,0.912316E-02,0.911149E-02,
     &0.102820E+00,0.304556E-02,0.201311E+00,0.295830E+00,0.836852E-02,
     &0.841111E-02,0.837984E-02,0.836852E-02,0.914804E-01,0.292596E-02,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.374678E+00,0.616087E+00,0.139531E-01,0.139531E-01,0.139531E-01,
     &0.139531E-01,0.272491E+00,-.693889E-17,0.358052E+00,0.580345E+00,
     &0.130624E-01,0.130680E-01,0.130641E-01,0.130624E-01,0.245861E+00,
     &0.460255E-03,0.341487E+00,0.545719E+00,0.121971E-01,0.122076E-01,
     &0.122002E-01,0.121971E-01,0.220877E+00,0.826785E-03,0.325046E+00/
      DATA (DL(K),K= 1786, 1870) /
     &0.512244E+00,0.113599E-01,0.113748E-01,0.113641E-01,0.113599E-01,
     &0.197730E+00,0.111366E-02,0.308783E+00,0.479952E+00,0.105534E-01,
     &0.105720E-01,0.105585E-01,0.105534E-01,0.176497E+00,0.133192E-02,
     &0.292747E+00,0.448868E+00,0.977938E-02,0.980112E-02,0.978518E-02,
     &0.977938E-02,0.157150E+00,0.149139E-02,0.276986E+00,0.419015E+00,
     &0.903955E-02,0.906394E-02,0.904584E-02,0.903955E-02,0.139631E+00,
     &0.160093E-02,0.261546E+00,0.390412E+00,0.833509E-02,0.836165E-02,
     &0.834171E-02,0.833509E-02,0.123850E+00,0.166838E-02,0.246467E+00,
     &0.363074E+00,0.766687E-02,0.769516E-02,0.767369E-02,0.766687E-02,
     &0.109695E+00,0.170073E-02,0.231787E+00,0.337008E+00,0.703540E-02,
     &0.706500E-02,0.704230E-02,0.703540E-02,0.970428E-01,0.170416E-02,
     &0.217542E+00,0.312218E+00,0.644083E-02,0.647137E-02,0.644772E-02,
     &0.644083E-02,0.857658E-01,0.168409E-02,0.203759E+00,0.288701E+00,
     &0.588300E-02,0.591415E-02,0.588981E-02,0.588300E-02,0.757385E-01,
     &0.164528E-02,0.190467E+00,0.266449E+00,0.536147E-02,0.539292E-02,
     &0.536812E-02,0.536147E-02,0.668383E-01,0.159185E-02,0.177686E+00,
     &0.245447E+00,0.487551E-02,0.490698E-02,0.488195E-02,0.487551E-02/
      DATA (DL(K),K= 1871, 1955) /
     &0.589492E-01,0.152735E-02,0.165434E+00,0.225677E+00,0.442416E-02,
     &0.445543E-02,0.443037E-02,0.442416E-02,0.519652E-01,0.145483E-02,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.348042E+00,0.534691E+00,0.867977E-02,0.867977E-02,0.867977E-02,
     &0.867977E-02,0.182547E+00,-.693889E-17,0.329349E+00,0.498248E+00,
     &0.800724E-02,0.801198E-02,0.800836E-02,0.800724E-02,0.161948E+00,
     &0.250949E-03,0.311047E+00,0.463485E+00,0.737155E-02,0.738040E-02,
     &0.737356E-02,0.737155E-02,0.143267E+00,0.447662E-03,0.293181E+00,
     &0.430377E+00,0.677169E-02,0.678409E-02,0.677441E-02,0.677169E-02,
     &0.126447E+00,0.598803E-03,0.275787E+00,0.398907E+00,0.620726E-02/
      DATA (DL(K),K= 1956, 2040) /
     &0.622265E-02,0.621051E-02,0.620726E-02,0.111401E+00,0.711280E-03,
     &0.258900E+00,0.369051E+00,0.567741E-02,0.569532E-02,0.568106E-02,
     &0.567741E-02,0.979944E-01,0.790986E-03,0.242550E+00,0.340785E+00,
     &0.518138E-02,0.520134E-02,0.518531E-02,0.518138E-02,0.860936E-01,
     &0.843227E-03,0.226765E+00,0.314083E+00,0.471828E-02,0.473987E-02,
     &0.472238E-02,0.471828E-02,0.755615E-01,0.872644E-03,0.211568E+00,
     &0.288916E+00,0.428714E-02,0.430998E-02,0.429133E-02,0.428714E-02,
     &0.662627E-01,0.883319E-03,0.196981E+00,0.265252E+00,0.388691E-02,
     &0.391065E-02,0.389112E-02,0.388691E-02,0.580684E-01,0.878818E-03,
     &0.183020E+00,0.243053E+00,0.351645E-02,0.354077E-02,0.352060E-02,
     &0.351645E-02,0.508578E-01,0.862228E-03,0.169696E+00,0.222280E+00,
     &0.317451E-02,0.319914E-02,0.317858E-02,0.317451E-02,0.445190E-01,
     &0.836224E-03,0.157017E+00,0.202888E+00,0.285982E-02,0.288450E-02,
     &0.286376E-02,0.285982E-02,0.389523E-01,0.803096E-03,0.144987E+00,
     &0.184832E+00,0.257101E-02,0.259553E-02,0.257480E-02,0.257101E-02,
     &0.340677E-01,0.764787E-03,0.133605E+00,0.168060E+00,0.230670E-02,
     &0.233087E-02,0.231031E-02,0.230670E-02,0.297820E-01,0.722929E-03/
      DATA (DL(K),K= 2041, 2125) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.316867E+00,0.451111E+00,0.522815E-02,0.522815E-02,0.522815E-02,
     &0.522815E-02,0.119118E+00,0.889046E-17,0.296950E+00,0.415915E+00,
     &0.475497E-02,0.475914E-02,0.475574E-02,0.475497E-02,0.104204E+00,
     &0.132513E-03,0.277735E+00,0.382805E+00,0.431809E-02,0.432582E-02,
     &0.431944E-02,0.431809E-02,0.910279E-01,0.235347E-03,0.259241E+00,
     &0.351694E+00,0.391455E-02,0.392531E-02,0.391637E-02,0.391455E-02,
     &0.794222E-01,0.313322E-03,0.241485E+00,0.322517E+00,0.354249E-02,
     &0.355575E-02,0.354464E-02,0.354249E-02,0.692354E-01,0.370408E-03,
     &0.224480E+00,0.295202E+00,0.319987E-02,0.321518E-02,0.320226E-02/
      DATA (DL(K),K= 2126, 2210) /
     &0.319987E-02,0.603106E-01,0.409866E-03,0.208235E+00,0.269681E+00,
     &0.288490E-02,0.290184E-02,0.288744E-02,0.288490E-02,0.525034E-01,
     &0.434663E-03,0.192759E+00,0.245887E+00,0.259589E-02,0.261407E-02,
     &0.259852E-02,0.259589E-02,0.456838E-01,0.447393E-03,0.178054E+00,
     &0.223752E+00,0.233123E-02,0.235033E-02,0.233390E-02,0.233123E-02,
     &0.397318E-01,0.450314E-03,0.164120E+00,0.203207E+00,0.208941E-02,
     &0.210910E-02,0.209206E-02,0.208941E-02,0.345396E-01,0.445394E-03,
     &0.150954E+00,0.184182E+00,0.186896E-02,0.188897E-02,0.187155E-02,
     &0.186896E-02,0.300131E-01,0.434333E-03,0.138548E+00,0.166608E+00,
     &0.166844E-02,0.168854E-02,0.167096E-02,0.166844E-02,0.260692E-01,
     &0.418584E-03,0.126892E+00,0.150412E+00,0.148650E-02,0.150648E-02,
     &0.148891E-02,0.148650E-02,0.226325E-01,0.399380E-03,0.115971E+00,
     &0.135523E+00,0.132180E-02,0.134148E-02,0.132409E-02,0.132180E-02,
     &0.196374E-01,0.377764E-03,0.105767E+00,0.121870E+00,0.117308E-02,
     &0.119231E-02,0.117524E-02,0.117308E-02,0.170312E-01,0.354610E-03,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 2211, 2295) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.282579E+00,0.369670E+00,0.302765E-02,0.302765E-02,0.302765E-02,
     &0.302765E-02,0.752529E-01,-.455365E-17,0.262229E+00,0.337209E+00,
     &0.271512E-02,0.271883E-02,0.271564E-02,0.271512E-02,0.651086E-01,
     &0.669321E-04,0.242857E+00,0.307069E+00,0.243269E-02,0.243953E-02,
     &0.243360E-02,0.243269E-02,0.563252E-01,0.118744E-03,0.224455E+00,
     &0.279111E+00,0.217687E-02,0.218631E-02,0.217808E-02,0.217687E-02,
     &0.487143E-01,0.157767E-03,0.207014E+00,0.253223E+00,0.194534E-02,
     &0.195689E-02,0.194675E-02,0.194534E-02,0.421227E-01,0.186063E-03,
     &0.190523E+00,0.229293E+00,0.173585E-02,0.174909E-02,0.173741E-02,
     &0.173585E-02,0.364156E-01,0.205286E-03,0.174969E+00,0.207218E+00,
     &0.154647E-02,0.156100E-02,0.154811E-02,0.154647E-02,0.314732E-01/
      DATA (DL(K),K= 2296, 2380) /
     &0.216964E-03,0.160335E+00,0.186895E+00,0.137545E-02,0.139092E-02,
     &0.137713E-02,0.137545E-02,0.271927E-01,0.222455E-03,0.146604E+00,
     &0.168227E+00,0.122121E-02,0.123733E-02,0.122290E-02,0.122121E-02,
     &0.234852E-01,0.222947E-03,0.133756E+00,0.151116E+00,0.108234E-02,
     &0.109881E-02,0.108400E-02,0.108234E-02,0.202747E-01,0.219474E-03,
     &0.121765E+00,0.135471E+00,0.957502E-03,0.974107E-03,0.959112E-03,
     &0.957502E-03,0.174932E-01,0.212928E-03,0.110606E+00,0.121198E+00,
     &0.845493E-03,0.862024E-03,0.847037E-03,0.845493E-03,0.150824E-01,
     &0.204075E-03,0.100250E+00,0.108210E+00,0.745196E-03,0.761482E-03,
     &0.746662E-03,0.745196E-03,0.129965E-01,0.193573E-03,0.906661E-01,
     &0.964191E-01,0.655569E-03,0.671466E-03,0.656948E-03,0.655569E-03,
     &0.111930E-01,0.181962E-03,0.818218E-01,0.857412E-01,0.575637E-03,
     &0.591030E-03,0.576925E-03,0.575637E-03,0.962922E-02,0.169687E-03,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 2381, 2465) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.246444E+00,0.293515E+00,0.167124E-02,0.167124E-02,0.167124E-02,
     &0.167124E-02,0.456929E-01,-.260209E-17,0.226393E+00,0.264836E+00,
     &0.147748E-02,0.148085E-02,0.147783E-02,0.147748E-02,0.392393E-01,
     &0.318190E-04,0.207552E+00,0.238550E+00,0.130596E-02,0.131212E-02,
     &0.130656E-02,0.130596E-02,0.337276E-01,0.566426E-04,0.189877E+00,
     &0.214470E+00,0.115347E-02,0.116190E-02,0.115427E-02,0.115347E-02,
     &0.290012E-01,0.753776E-04,0.173336E+00,0.192452E+00,0.101789E-02,
     &0.102811E-02,0.101881E-02,0.101789E-02,0.249381E-01,0.889466E-04,
     &0.157889E+00,0.172355E+00,0.897268E-03,0.908872E-03,0.898270E-03,
     &0.897268E-03,0.214419E-01,0.980950E-04,0.143501E+00,0.154046E+00,
     &0.789951E-03,0.802565E-03,0.790996E-03,0.789951E-03,0.184296E-01,
     &0.103536E-03,0.130132E+00,0.137402E+00,0.694510E-03,0.707811E-03,
     &0.695568E-03,0.694510E-03,0.158331E-01,0.105929E-03,0.117743E+00/
      DATA (DL(K),K= 2466, 2550) /
     &0.122303E+00,0.609684E-03,0.623394E-03,0.610733E-03,0.609684E-03,
     &0.135929E-01,0.105853E-03,0.106293E+00,0.108637E+00,0.534365E-03,
     &0.548244E-03,0.535386E-03,0.534365E-03,0.116583E-01,0.103825E-03,
     &0.957386E-01,0.962976E-01,0.467572E-03,0.481416E-03,0.468551E-03,
     &0.467572E-03,0.999103E-02,0.100301E-03,0.860376E-01,0.851820E-01,
     &0.408422E-03,0.422062E-03,0.409350E-03,0.408422E-03,0.855563E-02,
     &0.956675E-04,0.771455E-01,0.751930E-01,0.356117E-03,0.369416E-03,
     &0.356989E-03,0.356117E-03,0.731542E-02,0.902499E-04,0.690178E-01,
     &0.662386E-01,0.309950E-03,0.322797E-03,0.310761E-03,0.309950E-03,
     &0.624633E-02,0.843305E-04,0.616096E-01,0.582312E-01,0.269281E-03,
     &0.281590E-03,0.270030E-03,0.269281E-03,0.533230E-02,0.781441E-04,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 2551, 2635) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.209608E+00,0.224862E+00,0.869706E-03,0.869706E-03,0.869706E-03,
     &0.869706E-03,0.264204E-01,-.138236E-17,0.190523E+00,0.200603E+00,
     &0.757542E-03,0.760626E-03,0.757768E-03,0.757542E-03,0.226261E-01,
     &0.138827E-04,0.172819E+00,0.178656E+00,0.660281E-03,0.665837E-03,
     &0.660670E-03,0.660281E-03,0.194018E-01,0.249832E-04,0.156420E+00,
     &0.158805E+00,0.575414E-03,0.582918E-03,0.575917E-03,0.575414E-03,
     &0.166434E-01,0.334851E-04,0.141265E+00,0.140883E+00,0.501258E-03,
     &0.510252E-03,0.501836E-03,0.501258E-03,0.142710E-01,0.397017E-04,
     &0.127291E+00,0.124732E+00,0.436386E-03,0.446473E-03,0.437008E-03,
     &0.436386E-03,0.122297E-01,0.439154E-04,0.114437E+00,0.110205E+00,
     &0.379575E-03,0.390415E-03,0.380217E-03,0.379575E-03,0.104701E-01,
     &0.464110E-04,0.102644E+00,0.971655E-01,0.329805E-03,0.341109E-03,
     &0.330448E-03,0.329805E-03,0.895086E-02,0.474758E-04,0.918521E-01,
     &0.854876E-01,0.286206E-03,0.297729E-03,0.286836E-03,0.286206E-03,
     &0.764249E-02,0.473771E-04,0.820032E-01,0.750529E-01,0.248027E-03/
      DATA (DL(K),K= 2636, 2720) /
     &0.259564E-03,0.248633E-03,0.248027E-03,0.651744E-02,0.463561E-04,
     &0.730394E-01,0.657510E-01,0.214611E-03,0.225995E-03,0.215186E-03,
     &0.214611E-03,0.554573E-02,0.446239E-04,0.649040E-01,0.574789E-01,
     &0.185396E-03,0.196491E-03,0.185935E-03,0.185396E-03,0.470938E-02,
     &0.423722E-04,0.575411E-01,0.501405E-01,0.159891E-03,0.170590E-03,
     &0.160391E-03,0.159891E-03,0.399752E-02,0.397689E-04,0.508960E-01,
     &0.436466E-01,0.137650E-03,0.147874E-03,0.138111E-03,0.137650E-03,
     &0.338807E-02,0.369434E-04,0.449157E-01,0.379141E-01,0.118285E-03,
     &0.127973E-03,0.118705E-03,0.118285E-03,0.286125E-02,0.340035E-04,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 2721, 2805) /
     &0.173133E+00,0.165162E+00,0.420483E-03,0.420483E-03,0.420483E-03,
     &0.420483E-03,0.143704E-01,0.418773E-17,0.155600E+00,0.145586E+00,
     &0.360490E-03,0.363140E-03,0.360629E-03,0.360490E-03,0.123560E-01,
     &0.533279E-05,0.139551E+00,0.128113E+00,0.309555E-03,0.314310E-03,
     &0.309792E-03,0.309555E-03,0.106262E-01,0.982612E-05,0.124876E+00,
     &0.112516E+00,0.265952E-03,0.272344E-03,0.266256E-03,0.265952E-03,
     &0.913151E-02,0.133834E-04,0.111490E+00,0.986188E-01,0.228522E-03,
     &0.236138E-03,0.228869E-03,0.228522E-03,0.783135E-02,0.160429E-04,
     &0.993081E-01,0.862590E-01,0.196336E-03,0.204821E-03,0.196706E-03,
     &0.196336E-03,0.670031E-02,0.178799E-04,0.882484E-01,0.752883E-01,
     &0.168604E-03,0.177655E-03,0.168981E-03,0.168604E-03,0.572016E-02,
     &0.189837E-04,0.782334E-01,0.655714E-01,0.144684E-03,0.154047E-03,
     &0.145058E-03,0.144684E-03,0.487276E-02,0.194655E-04,0.691885E-01,
     &0.569841E-01,0.124035E-03,0.133497E-03,0.124397E-03,0.124035E-03,
     &0.413648E-02,0.194296E-04,0.610420E-01,0.494128E-01,0.106203E-03,
     &0.115592E-03,0.106548E-03,0.106203E-03,0.350042E-02,0.189800E-04,
     &0.537249E-01,0.427533E-01,0.908141E-04,0.999895E-04,0.911377E-04/
      DATA (DL(K),K= 2806, 2890) /
     &0.908141E-04,0.295961E-02,0.182192E-04,0.471713E-01,0.369100E-01,
     &0.775359E-04,0.863895E-04,0.778360E-04,0.775359E-04,0.249629E-02,
     &0.172287E-04,0.413182E-01,0.317957E-01,0.660857E-04,0.745356E-04,
     &0.663611E-04,0.660857E-04,0.209482E-02,0.160791E-04,0.361056E-01,
     &0.273306E-01,0.562298E-04,0.642173E-04,0.564804E-04,0.562298E-04,
     &0.175588E-02,0.148407E-04,0.314766E-01,0.234421E-01,0.477598E-04,
     &0.552457E-04,0.479859E-04,0.477598E-04,0.147398E-02,0.135653E-04,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.138007E+00,0.115214E+00,0.185072E-03,0.185072E-03,0.185072E-03,
     &0.185072E-03,0.722856E-02,-.380826E-17,0.122517E+00,0.100251E+00/
      DATA (DL(K),K= 2891, 2975) /
     &0.155814E-03,0.158287E-03,0.155901E-03,0.155814E-03,0.630580E-02,
     &0.155371E-05,0.108535E+00,0.870870E-01,0.131535E-03,0.135909E-03,
     &0.131680E-03,0.131535E-03,0.547867E-02,0.304952E-05,0.959260E-01,
     &0.754985E-01,0.111183E-03,0.116980E-03,0.111366E-03,0.111183E-03,
     &0.473794E-02,0.433106E-05,0.845828E-01,0.653163E-01,0.940433E-04,
     &0.100851E-03,0.942493E-04,0.940433E-04,0.407647E-02,0.533613E-05,
     &0.744017E-01,0.563870E-01,0.795843E-04,0.870596E-04,0.798007E-04,
     &0.795843E-04,0.349165E-02,0.606691E-05,0.652864E-01,0.485720E-01,
     &0.673476E-04,0.752069E-04,0.675656E-04,0.673476E-04,0.297273E-02,
     &0.652898E-05,0.571466E-01,0.417472E-01,0.569700E-04,0.649812E-04,
     &0.571831E-04,0.569700E-04,0.251732E-02,0.675028E-05,0.498975E-01,
     &0.358008E-01,0.481618E-04,0.561391E-04,0.483654E-04,0.481618E-04,
     &0.212754E-02,0.677236E-05,0.434594E-01,0.306320E-01,0.406746E-04,
     &0.484724E-04,0.408657E-04,0.406746E-04,0.179059E-02,0.662814E-05,
     &0.377578E-01,0.261500E-01,0.343050E-04,0.418123E-04,0.344818E-04,
     &0.343050E-04,0.149563E-02,0.635273E-05,0.327229E-01,0.222734E-01,
     &0.288923E-04,0.360279E-04,0.290540E-04,0.288923E-04,0.124695E-02/
      DATA (DL(K),K= 2976, 3060) /
     &0.598767E-05,0.282894E-01,0.189287E-01,0.242960E-04,0.310036E-04,
     &0.244423E-04,0.242960E-04,0.104112E-02,0.556344E-05,0.243968E-01,
     &0.160504E-01,0.203920E-04,0.266363E-04,0.205232E-04,0.203920E-04,
     &0.863677E-03,0.510070E-05,0.209890E-01,0.135797E-01,0.170822E-04,
     &0.228449E-04,0.171989E-04,0.170822E-04,0.711641E-03,0.462338E-05,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.105155E+00,0.752467E-01,0.719932E-04,0.719932E-04,0.719932E-04,
     &0.719932E-04,0.328057E-02,-.758942E-18,0.920856E-01,0.645455E-01,
     &0.592305E-04,0.615087E-04,0.592802E-04,0.592305E-04,0.295327E-02,
     &0.945234E-07,0.804695E-01,0.552770E-01,0.489125E-04,0.528632E-04/
      DATA (DL(K),K= 3061, 3145) /
     &0.489946E-04,0.489125E-04,0.261804E-02,0.365139E-06,0.701499E-01,
     &0.472409E-01,0.404786E-04,0.456186E-04,0.405807E-04,0.404786E-04,
     &0.229460E-02,0.686912E-06,0.610049E-01,0.402864E-01,0.335367E-04,
     &0.394631E-04,0.336495E-04,0.335367E-04,0.198445E-02,0.981070E-06,
     &0.529201E-01,0.342803E-01,0.278134E-04,0.342044E-04,0.279301E-04,
     &0.278134E-04,0.169772E-02,0.122521E-05,0.457907E-01,0.291037E-01,
     &0.230821E-04,0.296833E-04,0.231978E-04,0.230821E-04,0.144575E-02,
     &0.140819E-05,0.395205E-01,0.246522E-01,0.191553E-04,0.257661E-04,
     &0.192666E-04,0.191553E-04,0.122125E-02,0.152152E-05,0.340212E-01,
     &0.208330E-01,0.158874E-04,0.223546E-04,0.159921E-04,0.158874E-04,
     &0.101912E-02,0.156880E-05,0.292116E-01,0.175644E-01,0.131678E-04,
     &0.193783E-04,0.132645E-04,0.131678E-04,0.847586E-03,0.156432E-05,
     &0.250173E-01,0.147740E-01,0.109029E-04,0.167762E-04,0.109910E-04,
     &0.109029E-04,0.705515E-03,0.151845E-05,0.213702E-01,0.123979E-01,
     &0.901273E-05,0.144953E-04,0.909200E-05,0.901273E-05,0.581767E-03,
     &0.143817E-05,0.182083E-01,0.103797E-01,0.743733E-05,0.124978E-04,
     &0.750792E-05,0.743733E-05,0.475483E-03,0.133574E-05,0.154751E-01/
      DATA (DL(K),K= 3146, 3230) /
     &0.867011E-02,0.612722E-05,0.107517E-04,0.618950E-05,0.612722E-05,
     &0.390116E-03,0.122183E-05,0.131193E-01,0.722560E-02,0.503734E-05,
     &0.922584E-05,0.509185E-05,0.503734E-05,0.319980E-03,0.110130E-05,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.754424E-01,0.449848E-01,0.236444E-04,0.236444E-04,0.236444E-04,
     &0.236444E-04,0.129291E-02,0.113079E-17,0.650429E-01,0.379660E-01,
     &0.187739E-04,0.207130E-04,0.187990E-04,0.187739E-04,0.124038E-02,
     &-.327995E-06,0.559588E-01,0.319936E-01,0.149625E-04,0.182671E-04,
     &0.150033E-04,0.149625E-04,0.113497E-02,-.464337E-06,0.480234E-01,
     &0.269030E-01,0.119484E-04,0.161746E-04,0.119982E-04,0.119484E-04/
      DATA (DL(K),K= 3231, 3315) /
     &0.100877E-02,-.490618E-06,0.411091E-01,0.225716E-01,0.954833E-05,
     &0.143391E-04,0.960250E-05,0.954833E-05,0.883852E-03,-.461770E-06,
     &0.350995E-01,0.188947E-01,0.763738E-05,0.127129E-04,0.769248E-05,
     &0.763738E-05,0.760077E-03,-.403363E-06,0.298897E-01,0.157798E-01,
     &0.611070E-05,0.112548E-04,0.616439E-05,0.611070E-05,0.639505E-03,
     &-.335607E-06,0.253856E-01,0.131470E-01,0.488993E-05,0.994021E-05,
     &0.494070E-05,0.488993E-05,0.534131E-03,-.267652E-06,0.215026E-01,
     &0.109271E-01,0.391276E-05,0.875190E-05,0.395967E-05,0.391276E-05,
     &0.445478E-03,-.205292E-06,0.181648E-01,0.906007E-02,0.312720E-05,
     &0.767418E-05,0.316978E-05,0.312720E-05,0.366232E-03,-.154024E-06,
     &0.153041E-01,0.749382E-02,0.249633E-05,0.670002E-05,0.253440E-05,
     &0.249633E-05,0.297435E-03,-.112673E-06,0.128596E-01,0.618334E-02,
     &0.199074E-05,0.582360E-05,0.202435E-05,0.199074E-05,0.242305E-03,
     &-.794410E-07,0.107770E-01,0.508977E-02,0.158457E-05,0.503733E-05,
     &0.161393E-05,0.158457E-05,0.196927E-03,-.546702E-07,0.900806E-02,
     &0.417964E-02,0.125888E-05,0.433619E-05,0.128428E-05,0.125888E-05,
     &0.158171E-03,-.364714E-07,0.751006E-02,0.342418E-02,0.998674E-06/
      DATA (DL(K),K= 3316, 3400) /
     &0.371518E-05,0.102046E-05,0.998674E-06,0.126865E-03,-.228706E-07,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.496787E-01,0.236961E-01,0.607312E-05,0.607312E-05,0.607312E-05,
     &0.607312E-05,0.415108E-03,-.140523E-17,0.420445E-01,0.196196E-01,
     &0.443589E-05,0.603481E-05,0.444683E-05,0.443589E-05,0.444425E-03,
     &-.375397E-06,0.355108E-01,0.162223E-01,0.321766E-05,0.587645E-05,
     &0.323504E-05,0.321766E-05,0.432635E-03,-.593989E-06,0.299148E-01,
     &0.133836E-01,0.231504E-05,0.562250E-05,0.233581E-05,0.231504E-05,
     &0.395801E-03,-.699904E-06,0.251339E-01,0.110157E-01,0.164651E-05,
     &0.526880E-05,0.166853E-05,0.164651E-05,0.344925E-03,-.733095E-06/
      DATA (DL(K),K= 3401, 3485) /
     &0.210605E-01,0.904539E-02,0.115940E-05,0.485739E-05,0.118122E-05,
     &0.115940E-05,0.294439E-03,-.715193E-06,0.175989E-01,0.740944E-02,
     &0.808365E-06,0.441709E-05,0.829075E-06,0.808365E-06,0.249093E-03,
     &-.665420E-06,0.146656E-01,0.605433E-02,0.555563E-06,0.396078E-05,
     &0.574607E-06,0.555563E-06,0.205675E-03,-.600648E-06,0.121872E-01,
     &0.493466E-02,0.375914E-06,0.350822E-05,0.393011E-06,0.375914E-06,
     &0.166757E-03,-.529210E-06,0.100993E-01,0.401191E-02,0.250032E-06,
     &0.307359E-05,0.265094E-06,0.250032E-06,0.135196E-03,-.456996E-06,
     &0.834582E-02,0.325348E-02,0.162261E-06,0.266488E-05,0.175325E-06,
     &0.162261E-06,0.108862E-03,-.388821E-06,0.687767E-02,0.263179E-02,
     &0.102273E-06,0.228913E-05,0.113453E-06,0.102273E-06,0.865539E-04,
     &-.326325E-06,0.565221E-02,0.212357E-02,0.620694E-07,0.194975E-05,
     &0.715290E-07,0.620694E-07,0.687156E-04,-.270547E-06,0.463248E-02,
     &0.170926E-02,0.351992E-07,0.164711E-05,0.431226E-07,0.351992E-07,
     &0.543744E-04,-.222379E-06,0.378655E-02,0.137242E-02,0.178902E-07,
     &0.138124E-05,0.244675E-07,0.178902E-07,0.426626E-04,-.181158E-06,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 3486, 3570) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.286141E-01,0.102357E-01,0.105702E-05,0.105702E-05,0.105702E-05,
     &0.105702E-05,0.963318E-04,0.591070E-18,0.236608E-01,0.827483E-02,
     &0.548552E-06,0.163293E-05,0.551993E-06,0.548552E-06,0.133058E-03,
     &-.268677E-06,0.195282E-01,0.668247E-02,0.238780E-06,0.183459E-05,
     &0.243802E-06,0.238780E-06,0.135119E-03,-.393414E-06,0.160742E-01,
     &0.538444E-02,0.599864E-07,0.183277E-05,0.655085E-07,0.599864E-07,
     &0.124554E-03,-.428349E-06,0.131940E-01,0.432750E-02,-.392825E-07,
     &0.172071E-05,-.338391E-07,-.392825E-07,0.111121E-03,-.415550E-06,
     &0.107996E-01,0.346954E-02,-.875089E-07,0.154604E-05,-.824926E-07,
     &-.875089E-07,0.941854E-04,-.376855E-06,0.881435E-02,0.277463E-02/
      DATA (DL(K),K= 3571, 3655) /
     &-.103962E-06,0.135013E-05,-.995446E-07,-.103962E-06,0.772195E-04,
     &-.326008E-06,0.717317E-02,0.221313E-02,-.102844E-06,0.115335E-05,
     &-.990733E-07,-.102844E-06,0.626565E-04,-.272858E-06,0.582050E-02,
     &0.176061E-02,-.929503E-07,0.967229E-06,-.898064E-07,-.929503E-07,
     &0.499930E-04,-.222828E-06,0.470908E-02,0.139692E-02,-.791495E-07,
     &0.800414E-06,-.765797E-07,-.791495E-07,0.394181E-04,-.178141E-06,
     &0.379875E-02,0.110542E-02,-.647230E-07,0.655119E-06,-.626567E-07,
     &-.647230E-07,0.309999E-04,-.140000E-06,0.305549E-02,0.872447E-03,
     &-.515215E-07,0.530834E-06,-.498829E-07,-.515215E-07,0.240354E-04,
     &-.108633E-06,0.245058E-02,0.686769E-03,-.400234E-07,0.426835E-06,
     &-.387401E-07,-.400234E-07,0.184613E-04,-.832544E-07,0.195984E-02,
     &0.539209E-03,-.304312E-07,0.341169E-06,-.294373E-07,-.304312E-07,
     &0.143512E-04,-.630818E-07,0.156297E-02,0.422273E-03,-.228633E-07,
     &0.271199E-06,-.221014E-07,-.228633E-07,0.110898E-04,-.474683E-07,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 3656, 3740) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.129345E-01,0.308444E-02,0.903693E-07,0.903693E-07,0.903693E-07,
     &0.903693E-07,0.123538E-04,-.166230E-18,0.103598E-01,0.241354E-02,
     &0.155648E-06,-.205296E-06,0.154889E-06,0.155648E-06,0.267249E-04,
     &0.880707E-07,0.828507E-02,0.188764E-02,0.176333E-06,-.341498E-06,
     &0.175220E-06,0.176333E-06,0.306432E-04,0.125718E-06,0.660736E-02,
     &0.147304E-02,0.173444E-06,-.383695E-06,0.172215E-06,0.173444E-06,
     &0.280787E-04,0.135578E-06,0.525320E-02,0.114618E-02,0.158651E-06,
     &-.373371E-06,0.157437E-06,0.158651E-06,0.243526E-04,0.130412E-06,
     &0.416429E-02,0.889584E-03,0.137131E-06,-.333468E-06,0.136012E-06,
     &0.137131E-06,0.203463E-04,0.116115E-06,0.329102E-02,0.688580E-03,
     &0.113839E-06,-.280874E-06,0.112853E-06,0.113839E-06,0.161038E-04,
     &0.982305E-07,0.259282E-02,0.531508E-03,0.914374E-07,-.225427E-06/
      DATA (DL(K),K= 3741, 3825) /
     &0.905971E-07,0.914374E-07,0.125639E-04,0.798741E-07,0.203641E-02,
     &0.409120E-03,0.709595E-07,-.173123E-06,0.702607E-07,0.709595E-07,
     &0.979247E-05,0.624138E-07,0.159441E-02,0.314027E-03,0.532256E-07,
     &-.127272E-06,0.526566E-07,0.532256E-07,0.741899E-05,0.469253E-07,
     &0.124447E-02,0.240357E-03,0.385509E-07,-.888851E-07,0.380956E-07,
     &0.385509E-07,0.554070E-05,0.339174E-07,0.968328E-03,0.183454E-03,
     &0.267272E-07,-.580277E-07,0.263687E-07,0.267272E-07,0.420032E-05,
     &0.233280E-07,0.751159E-03,0.139632E-03,0.174605E-07,-.342016E-07,
     &0.171822E-07,0.174605E-07,0.315522E-05,0.149727E-07,0.580936E-03,
     &0.105986E-03,0.104515E-07,-.164567E-07,0.102383E-07,0.104515E-07,
     &0.230829E-05,0.863527E-08,0.447955E-03,0.802293E-04,0.531954E-08,
     &-.376312E-08,0.515829E-08,0.531954E-08,0.170771E-05,0.399662E-08,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 3826, 3910) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.324478E-02,0.386879E-03,0.135983E-08,0.135983E-08,0.135983E-08,
     &0.135983E-08,0.371787E-06,-.274599E-19,0.246219E-02,0.286505E-03,
     &-.106852E-06,0.327611E-06,-.106589E-06,-.106852E-06,0.231631E-05,
     &-.107814E-06,0.186777E-02,0.212413E-03,-.161566E-06,0.492001E-06,
     &-.161179E-06,-.161566E-06,0.311589E-05,-.162249E-06,0.141322E-02,
     &0.157212E-03,-.183398E-06,0.557106E-06,-.182972E-06,-.183398E-06,
     &0.267943E-05,-.183884E-06,0.106518E-02,0.115892E-03,-.185231E-06,
     &0.562185E-06,-.184809E-06,-.185231E-06,0.203027E-05,-.185573E-06,
     &0.800350E-03,0.851995E-04,-.174680E-06,0.530096E-06,-.174290E-06,
     &-.174680E-06,0.165870E-05,-.174922E-06,0.599444E-03,0.624676E-04,
     &-.157644E-06,0.478420E-06,-.157300E-06,-.157644E-06,0.130112E-05,
     &-.157815E-06,0.447433E-03,0.456556E-04,-.137838E-06,0.418429E-06,
     &-.137543E-06,-.137838E-06,0.903220E-06,-.137958E-06,0.332836E-03,
     &0.332643E-04,-.117616E-06,0.357179E-06,-.117368E-06,-.117616E-06/
      DATA (DL(K),K= 3911, 3995) /
     &0.636187E-06,-.117699E-06,0.246754E-03,0.241622E-04,-.984560E-07,
     &0.299077E-06,-.982529E-07,-.984560E-07,0.481221E-06,-.985144E-07,
     &0.182315E-03,0.174961E-04,-.811089E-07,0.246465E-06,-.809446E-07,
     &-.811089E-07,0.342859E-06,-.811495E-07,0.134250E-03,0.126299E-04,
     &-.659052E-07,0.200354E-06,-.657742E-07,-.659052E-07,0.227840E-06,
     &-.659334E-07,0.985288E-04,0.908931E-05,-.529252E-07,0.160947E-06,
     &-.528218E-07,-.529252E-07,0.161641E-06,-.529447E-07,0.720750E-04,
     &0.652153E-05,-.420621E-07,0.127943E-06,-.419814E-07,-.420621E-07,
     &0.119540E-06,-.420756E-07,0.525538E-04,0.466527E-05,-.331141E-07,
     &0.100758E-06,-.330516E-07,-.331141E-07,0.808991E-07,-.331233E-07,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 3996, 4000) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
C
      ANS = 0.
      IF (X.GT.0.9985) RETURN
      IF ( ((I.EQ.3).OR.(I.EQ.8)) .AND. (X.GT.0.95) ) RETURN
C
      IS  = S/DELTA+1
      IS1 = IS+1
      DO 1 L=1,25
         KL    = L+NDRV*25
         F1(L) = GF(I,IS,KL)
         F2(L) = GF(I,IS1,KL)
    1 CONTINUE
      A1 = DT_CKMTFF(X,F1)
      A2 = DT_CKMTFF(X,F2)
C      A1=ALOG(A1)
C      A2=ALOG(A2)
      S1  = (IS-1)*DELTA
      S2  = S1+DELTA
      ANS = A1*(S-S2)/(S1-S2)+A2*(S-S1)/(S2-S1)
C      ANS=EXP(ANS)
      RETURN
      END
C
C
CDECK  ID>, DT_CKMTPR
      SUBROUTINE DT_CKMTPR(I,NDRV,X,S,ANS)
C
C**********************************************************************
C    Proton   - PDFs
C    I   = 1, 2, 3, 4, 5, 7, 8 : xu, xd, xub, xdb, xsb, xg, xc
C    ANS = PDF(I)
C    This version by S. Roesler, 31.01.96
C**********************************************************************

      SAVE
      DIMENSION F1(25),F2(25),GF(8,20,25),DL(4000)
      EQUIVALENCE (GF(1,1,1),DL(1))
      DATA DELTA/.10/
C
      DATA (DL(K),K=    1,   85) /
     &0.367759E+00,0.350609E+00,0.325356E+00,0.325356E+00,0.325356E+00,
     &0.325356E+00,0.533117E+01,0.138778E-16,0.427988E+00,0.409718E+00,
     &0.382948E+00,0.382920E+00,0.382933E+00,0.382948E+00,0.686279E+01,
     &0.611113E-01,0.494752E+00,0.475328E+00,0.447011E+00,0.446959E+00,
     &0.446984E+00,0.447011E+00,0.855688E+01,0.128659E+00,0.568248E+00,
     &0.547637E+00,0.517743E+00,0.517671E+00,0.517705E+00,0.517743E+00,
     &0.104074E+02,0.202846E+00,0.648622E+00,0.626792E+00,0.595289E+00,
     &0.595201E+00,0.595244E+00,0.595289E+00,0.124065E+02,0.283819E+00,
     &0.735974E+00,0.712890E+00,0.679748E+00,0.679648E+00,0.679696E+00,
     &0.679748E+00,0.145441E+02,0.371679E+00,0.830359E+00,0.805987E+00,
     &0.771173E+00,0.771066E+00,0.771119E+00,0.771173E+00,0.168081E+02,
     &0.466485E+00,0.931778E+00,0.906084E+00,0.869566E+00,0.869456E+00,
     &0.869511E+00,0.869566E+00,0.191850E+02,0.568240E+00,0.104018E+01,
     &0.101313E+01,0.974873E+00,0.974763E+00,0.974819E+00,0.974873E+00,
     &0.216593E+02,0.676890E+00,0.115544E+01,0.112700E+01,0.108698E+01,
     &0.108687E+01,0.108693E+01,0.108698E+01,0.242146E+02,0.792321E+00,
     &0.127738E+01,0.124751E+01,0.120570E+01,0.120560E+01,0.120565E+01/
      DATA (DL(K),K=   86,  170) /
     &0.120570E+01,0.268333E+02,0.914356E+00,0.140577E+01,0.137444E+01,
     &0.133079E+01,0.133070E+01,0.133075E+01,0.133079E+01,0.294970E+02,
     &0.104275E+01,0.154028E+01,0.150745E+01,0.146194E+01,0.146187E+01,
     &0.146192E+01,0.146194E+01,0.321867E+02,0.117720E+01,0.168054E+01,
     &0.164619E+01,0.159879E+01,0.159874E+01,0.159877E+01,0.159879E+01,
     &0.348836E+02,0.131732E+01,0.182613E+01,0.179020E+01,0.174088E+01,
     &0.174086E+01,0.174088E+01,0.174088E+01,0.375685E+02,0.146269E+01,
     &0.197653E+01,0.193901E+01,0.188774E+01,0.188774E+01,0.188775E+01,
     &0.188774E+01,0.402228E+02,0.161282E+01,0.213121E+01,0.209205E+01,
     &0.203880E+01,0.203884E+01,0.203884E+01,0.203880E+01,0.428285E+02,
     &0.176714E+01,0.228955E+01,0.224873E+01,0.219348E+01,0.219355E+01,
     &0.219353E+01,0.219348E+01,0.453682E+02,0.192507E+01,0.245093E+01,
     &0.240840E+01,0.235113E+01,0.235123E+01,0.235120E+01,0.235113E+01,
     &0.478258E+02,0.208597E+01,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.349839E+00,0.324128E+00,0.286363E+00,0.286363E+00,0.286363E+00,
     &0.286363E+00,0.469694E+01,0.000000E+00,0.398361E+00,0.371065E+00/
      DATA (DL(K),K=  171,  255) /
     &0.331239E+00,0.331213E+00,0.331227E+00,0.331239E+00,0.586152E+01,
     &0.481683E-01,0.451010E+00,0.422096E+00,0.380182E+00,0.380137E+00,
     &0.380161E+00,0.380182E+00,0.711349E+01,0.100378E+00,0.507782E+00,
     &0.477215E+00,0.433187E+00,0.433128E+00,0.433160E+00,0.433187E+00,
     &0.844371E+01,0.156627E+00,0.568644E+00,0.536390E+00,0.490220E+00,
     &0.490152E+00,0.490190E+00,0.490220E+00,0.984291E+01,0.216886E+00,
     &0.633517E+00,0.599543E+00,0.551204E+00,0.551133E+00,0.551174E+00,
     &0.551204E+00,0.113005E+02,0.281079E+00,0.702295E+00,0.666565E+00,
     &0.616031E+00,0.615963E+00,0.616004E+00,0.616031E+00,0.128050E+02,
     &0.349101E+00,0.774832E+00,0.737311E+00,0.684556E+00,0.684495E+00,
     &0.684535E+00,0.684556E+00,0.143447E+02,0.420809E+00,0.850945E+00,
     &0.811598E+00,0.756596E+00,0.756547E+00,0.756583E+00,0.756596E+00,
     &0.159073E+02,0.496022E+00,0.930413E+00,0.889207E+00,0.831933E+00,
     &0.831901E+00,0.831931E+00,0.831933E+00,0.174801E+02,0.574524E+00,
     &0.101298E+01,0.969882E+00,0.910312E+00,0.910301E+00,0.910324E+00,
     &0.910312E+00,0.190508E+02,0.656061E+00,0.109836E+01,0.105333E+01,
     &0.991445E+00,0.991459E+00,0.991471E+00,0.991445E+00,0.206070E+02/
      DATA (DL(K),K=  256,  340) /
     &0.740345E+00,0.118622E+01,0.113923E+01,0.107501E+01,0.107505E+01,
     &0.107505E+01,0.107501E+01,0.221368E+02,0.827056E+00,0.127622E+01,
     &0.122724E+01,0.116065E+01,0.116073E+01,0.116072E+01,0.116065E+01,
     &0.236287E+02,0.915845E+00,0.136797E+01,0.131696E+01,0.124800E+01,
     &0.124812E+01,0.124809E+01,0.124800E+01,0.250721E+02,0.100634E+01,
     &0.146107E+01,0.140801E+01,0.133666E+01,0.133681E+01,0.133677E+01,
     &0.133666E+01,0.264571E+02,0.109813E+01,0.155511E+01,0.149996E+01,
     &0.142621E+01,0.142641E+01,0.142634E+01,0.142621E+01,0.277747E+02,
     &0.119081E+01,0.164964E+01,0.159239E+01,0.151622E+01,0.151646E+01,
     &0.151638E+01,0.151622E+01,0.290168E+02,0.128396E+01,0.174424E+01,
     &0.168485E+01,0.160626E+01,0.160655E+01,0.160645E+01,0.160626E+01,
     &0.301765E+02,0.137713E+01,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.345345E+00,0.306823E+00,0.250518E+00,0.250518E+00,0.250518E+00,
     &0.250518E+00,0.411726E+01,-.138778E-16,0.384210E+00,0.343514E+00,
     &0.284500E+00,0.284487E+00,0.284496E+00,0.284500E+00,0.496835E+01,
     &0.371582E-01,0.425419E+00,0.382518E+00,0.320782E+00,0.320762E+00/
      DATA (DL(K),K=  341,  425) /
     &0.320777E+00,0.320782E+00,0.585504E+01,0.765988E-01,0.468853E+00,
     &0.423717E+00,0.359246E+00,0.359226E+00,0.359243E+00,0.359246E+00,
     &0.676824E+01,0.118207E+00,0.514392E+00,0.466990E+00,0.399771E+00,
     &0.399758E+00,0.399775E+00,0.399771E+00,0.769967E+01,0.161865E+00,
     &0.561883E+00,0.512186E+00,0.442209E+00,0.442208E+00,0.442222E+00,
     &0.442209E+00,0.864071E+01,0.207426E+00,0.611162E+00,0.559140E+00,
     &0.486395E+00,0.486411E+00,0.486420E+00,0.486395E+00,0.958280E+01,
     &0.254727E+00,0.662044E+00,0.607667E+00,0.532145E+00,0.532185E+00,
     &0.532185E+00,0.532145E+00,0.105176E+02,0.303587E+00,0.714325E+00,
     &0.657566E+00,0.579261E+00,0.579328E+00,0.579318E+00,0.579261E+00,
     &0.114370E+02,0.353808E+00,0.767786E+00,0.708618E+00,0.627526E+00,
     &0.627625E+00,0.627603E+00,0.627526E+00,0.123333E+02,0.405174E+00,
     &0.822195E+00,0.760591E+00,0.676711E+00,0.676846E+00,0.676810E+00,
     &0.676711E+00,0.131994E+02,0.457458E+00,0.877307E+00,0.813242E+00,
     &0.726575E+00,0.726750E+00,0.726697E+00,0.726575E+00,0.140286E+02,
     &0.510420E+00,0.932865E+00,0.866317E+00,0.776867E+00,0.777085E+00,
     &0.777015E+00,0.776867E+00,0.148150E+02,0.563809E+00,0.988608E+00/
      DATA (DL(K),K=  426,  510) /
     &0.919556E+00,0.827330E+00,0.827594E+00,0.827505E+00,0.827330E+00,
     &0.155533E+02,0.617368E+00,0.104427E+01,0.972694E+00,0.877703E+00,
     &0.878016E+00,0.877907E+00,0.877703E+00,0.162391E+02,0.670837E+00,
     &0.109958E+01,0.102547E+01,0.927723E+00,0.928088E+00,0.927957E+00,
     &0.927723E+00,0.168687E+02,0.723954E+00,0.115428E+01,0.107761E+01,
     &0.977132E+00,0.977550E+00,0.977397E+00,0.977132E+00,0.174391E+02,
     &0.776458E+00,0.120809E+01,0.112886E+01,0.102567E+01,0.102615E+01,
     &0.102597E+01,0.102567E+01,0.179481E+02,0.828097E+00,0.126078E+01,
     &0.117898E+01,0.107310E+01,0.107363E+01,0.107343E+01,0.107310E+01,
     &0.183942E+02,0.878621E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.357586E+00,0.299938E+00,0.216504E+00,0.216504E+00,0.216504E+00,
     &0.216504E+00,0.357260E+01,-.277556E-16,0.388529E+00,0.327984E+00,
     &0.241161E+00,0.241168E+00,0.241168E+00,0.241161E+00,0.415893E+01,
     &0.278429E-01,0.420472E+00,0.357015E+00,0.266823E+00,0.266844E+00,
     &0.266842E+00,0.266823E+00,0.474689E+01,0.566783E-01,0.453271E+00,
     &0.386886E+00,0.293349E+00,0.293389E+00,0.293381E+00,0.293349E+00/
      DATA (DL(K),K=  511,  595) /
     &0.532982E+01,0.863668E-01,0.486793E+00,0.417464E+00,0.320608E+00,
     &0.320673E+00,0.320657E+00,0.320608E+00,0.590219E+01,0.116779E+00,
     &0.520887E+00,0.448601E+00,0.348454E+00,0.348549E+00,0.348523E+00,
     &0.348454E+00,0.645868E+01,0.147773E+00,0.555403E+00,0.480149E+00,
     &0.376740E+00,0.376870E+00,0.376831E+00,0.376740E+00,0.699440E+01,
     &0.179201E+00,0.590183E+00,0.511950E+00,0.405314E+00,0.405482E+00,
     &0.405429E+00,0.405314E+00,0.750493E+01,0.210912E+00,0.625064E+00,
     &0.543845E+00,0.434019E+00,0.434229E+00,0.434159E+00,0.434019E+00,
     &0.798636E+01,0.242750E+00,0.659882E+00,0.575673E+00,0.462696E+00,
     &0.462952E+00,0.462864E+00,0.462696E+00,0.843528E+01,0.274558E+00,
     &0.694472E+00,0.607271E+00,0.491188E+00,0.491492E+00,0.491385E+00,
     &0.491188E+00,0.884885E+01,0.306178E+00,0.728669E+00,0.638478E+00,
     &0.519337E+00,0.519690E+00,0.519563E+00,0.519337E+00,0.922480E+01,
     &0.337451E+00,0.762311E+00,0.669133E+00,0.546987E+00,0.547392E+00,
     &0.547244E+00,0.546987E+00,0.956139E+01,0.368224E+00,0.795240E+00,
     &0.699084E+00,0.573988E+00,0.574447E+00,0.574277E+00,0.573988E+00,
     &0.985744E+01,0.398346E+00,0.827302E+00,0.728181E+00,0.600196E+00/
      DATA (DL(K),K=  596,  680) /
     &0.600710E+00,0.600518E+00,0.600196E+00,0.101123E+02,0.427671E+00,
     &0.858354E+00,0.756282E+00,0.625475E+00,0.626044E+00,0.625829E+00,
     &0.625475E+00,0.103258E+02,0.456064E+00,0.888257E+00,0.783256E+00,
     &0.649696E+00,0.650321E+00,0.650083E+00,0.649696E+00,0.104982E+02,
     &0.483395E+00,0.916887E+00,0.808981E+00,0.672742E+00,0.673422E+00,
     &0.673161E+00,0.672742E+00,0.106303E+02,0.509546E+00,0.944126E+00,
     &0.833345E+00,0.694506E+00,0.695243E+00,0.694958E+00,0.694506E+00,
     &0.107231E+02,0.534410E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.390721E+00,0.304671E+00,0.182562E+00,0.182562E+00,0.182562E+00,
     &0.182562E+00,0.303699E+01,0.693889E-17,0.414806E+00,0.325059E+00,
     &0.199103E+00,0.199133E+00,0.199124E+00,0.199103E+00,0.339971E+01,
     &0.198528E-01,0.438929E+00,0.345508E+00,0.215797E+00,0.215862E+00,
     &0.215842E+00,0.215797E+00,0.374624E+01,0.398420E-01,0.462973E+00,
     &0.365903E+00,0.232531E+00,0.232635E+00,0.232601E+00,0.232531E+00,
     &0.407322E+01,0.598565E-01,0.486835E+00,0.386142E+00,0.249208E+00,
     &0.249352E+00,0.249304E+00,0.249208E+00,0.437817E+01,0.797987E-01/
      DATA (DL(K),K=  681,  765) /
     &0.510407E+00,0.406123E+00,0.265725E+00,0.265913E+00,0.265849E+00,
     &0.265725E+00,0.465901E+01,0.995694E-01,0.533588E+00,0.425746E+00,
     &0.281986E+00,0.282220E+00,0.282139E+00,0.281986E+00,0.491410E+01,
     &0.119072E+00,0.556274E+00,0.444912E+00,0.297897E+00,0.298178E+00,
     &0.298079E+00,0.297897E+00,0.514220E+01,0.138212E+00,0.578369E+00,
     &0.463528E+00,0.313366E+00,0.313696E+00,0.313578E+00,0.313366E+00,
     &0.534249E+01,0.156900E+00,0.599777E+00,0.481503E+00,0.328308E+00,
     &0.328688E+00,0.328549E+00,0.328308E+00,0.551456E+01,0.175048E+00,
     &0.620409E+00,0.498752E+00,0.342642E+00,0.343071E+00,0.342913E+00,
     &0.342642E+00,0.565833E+01,0.192575E+00,0.640181E+00,0.515196E+00,
     &0.356292E+00,0.356770E+00,0.356592E+00,0.356292E+00,0.577410E+01,
     &0.209407E+00,0.659017E+00,0.530764E+00,0.369190E+00,0.369718E+00,
     &0.369519E+00,0.369190E+00,0.586243E+01,0.225474E+00,0.676845E+00,
     &0.545389E+00,0.381275E+00,0.381852E+00,0.381633E+00,0.381275E+00,
     &0.592421E+01,0.240714E+00,0.693604E+00,0.559015E+00,0.392493E+00,
     &0.393118E+00,0.392880E+00,0.392493E+00,0.596052E+01,0.255072E+00,
     &0.709239E+00,0.571593E+00,0.402799E+00,0.403472E+00,0.403213E+00/
      DATA (DL(K),K=  766,  850) /
     &0.402799E+00,0.597267E+01,0.268502E+00,0.723703E+00,0.583081E+00,
     &0.412157E+00,0.412875E+00,0.412597E+00,0.412157E+00,0.596211E+01,
     &0.280966E+00,0.736960E+00,0.593447E+00,0.420536E+00,0.421299E+00,
     &0.421002E+00,0.420536E+00,0.593045E+01,0.292434E+00,0.748980E+00,
     &0.602669E+00,0.427918E+00,0.428723E+00,0.428408E+00,0.427918E+00,
     &0.587934E+01,0.302884E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.448390E+00,0.320678E+00,0.146415E+00,0.146415E+00,0.146415E+00,
     &0.146415E+00,0.247594E+01,0.000000E+00,0.465760E+00,0.333734E+00,
     &0.155974E+00,0.156013E+00,0.156000E+00,0.155974E+00,0.265633E+01,
     &0.130329E-01,0.482525E+00,0.346293E+00,0.165233E+00,0.165311E+00,
     &0.165285E+00,0.165233E+00,0.281612E+01,0.257304E-01,0.498626E+00,
     &0.358294E+00,0.174131E+00,0.174249E+00,0.174209E+00,0.174131E+00,
     &0.295484E+01,0.380345E-01,0.514008E+00,0.369688E+00,0.182622E+00,
     &0.182779E+00,0.182724E+00,0.182622E+00,0.307242E+01,0.498976E-01,
     &0.528624E+00,0.380432E+00,0.190660E+00,0.190856E+00,0.190786E+00,
     &0.190660E+00,0.316911E+01,0.612760E-01,0.542428E+00,0.390485E+00/
      DATA (DL(K),K=  851,  935) /
     &0.198205E+00,0.198441E+00,0.198356E+00,0.198205E+00,0.324538E+01,
     &0.721303E-01,0.555382E+00,0.399810E+00,0.205224E+00,0.205498E+00,
     &0.205398E+00,0.205224E+00,0.330192E+01,0.824256E-01,0.567448E+00,
     &0.408377E+00,0.211687E+00,0.211997E+00,0.211882E+00,0.211687E+00,
     &0.333960E+01,0.921319E-01,0.578597E+00,0.416159E+00,0.217568E+00,
     &0.217915E+00,0.217784E+00,0.217568E+00,0.335945E+01,0.101224E+00,
     &0.588802E+00,0.423136E+00,0.222847E+00,0.223229E+00,0.223084E+00,
     &0.222847E+00,0.336262E+01,0.109681E+00,0.598043E+00,0.429293E+00,
     &0.227512E+00,0.227928E+00,0.227768E+00,0.227512E+00,0.335036E+01,
     &0.117489E+00,0.606305E+00,0.434619E+00,0.231551E+00,0.232000E+00,
     &0.231826E+00,0.231551E+00,0.332398E+01,0.124636E+00,0.613579E+00,
     &0.439110E+00,0.234962E+00,0.235442E+00,0.235254E+00,0.234962E+00,
     &0.328483E+01,0.131119E+00,0.619860E+00,0.442766E+00,0.237745E+00,
     &0.238254E+00,0.238053E+00,0.237745E+00,0.323429E+01,0.136936E+00,
     &0.625150E+00,0.445594E+00,0.239905E+00,0.240441E+00,0.240228E+00,
     &0.239905E+00,0.317371E+01,0.142091E+00,0.629453E+00,0.447603E+00,
     &0.241452E+00,0.242014E+00,0.241788E+00,0.241452E+00,0.310443E+01/
      DATA (DL(K),K=  936, 1020) /
     &0.146594E+00,0.632782E+00,0.448808E+00,0.242400E+00,0.242987E+00,
     &0.242749E+00,0.242400E+00,0.302775E+01,0.150456E+00,0.635151E+00,
     &0.449228E+00,0.242767E+00,0.243376E+00,0.243127E+00,0.242767E+00,
     &0.294491E+01,0.153694E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.528765E+00,0.341825E+00,0.105823E+00,0.105823E+00,0.105823E+00,
     &0.105823E+00,0.185069E+01,-.138778E-16,0.538124E+00,0.347118E+00,
     &0.109762E+00,0.109780E+00,0.109774E+00,0.109762E+00,0.189644E+01,
     &0.738880E-02,0.546541E+00,0.351712E+00,0.113300E+00,0.113336E+00,
     &0.113324E+00,0.113300E+00,0.192700E+01,0.143076E-01,0.554014E+00,
     &0.355607E+00,0.116431E+00,0.116485E+00,0.116466E+00,0.116431E+00,
     &0.194356E+01,0.207515E-01,0.560546E+00,0.358805E+00,0.119150E+00,
     &0.119222E+00,0.119196E+00,0.119150E+00,0.194722E+01,0.267179E-01,
     &0.566139E+00,0.361311E+00,0.121459E+00,0.121549E+00,0.121515E+00,
     &0.121459E+00,0.193921E+01,0.322084E-01,0.570802E+00,0.363134E+00,
     &0.123359E+00,0.123467E+00,0.123426E+00,0.123359E+00,0.192071E+01,
     &0.372262E-01,0.574542E+00,0.364286E+00,0.124858E+00,0.124983E+00/
      DATA (DL(K),K= 1021, 1105) /
     &0.124933E+00,0.124858E+00,0.189295E+01,0.417774E-01,0.577372E+00,
     &0.364779E+00,0.125961E+00,0.126103E+00,0.126046E+00,0.125961E+00,
     &0.185710E+01,0.458703E-01,0.579307E+00,0.364629E+00,0.126681E+00,
     &0.126839E+00,0.126774E+00,0.126681E+00,0.181432E+01,0.495154E-01,
     &0.580363E+00,0.363857E+00,0.127029E+00,0.127202E+00,0.127130E+00,
     &0.127029E+00,0.176571E+01,0.527252E-01,0.580561E+00,0.362483E+00,
     &0.127020E+00,0.127208E+00,0.127128E+00,0.127020E+00,0.171231E+01,
     &0.555142E-01,0.579923E+00,0.360529E+00,0.126670E+00,0.126872E+00,
     &0.126785E+00,0.126670E+00,0.165511E+01,0.578985E-01,0.578474E+00,
     &0.358021E+00,0.125998E+00,0.126213E+00,0.126119E+00,0.125998E+00,
     &0.159501E+01,0.598958E-01,0.576241E+00,0.354987E+00,0.125022E+00,
     &0.125249E+00,0.125148E+00,0.125022E+00,0.153284E+01,0.615248E-01,
     &0.573252E+00,0.351453E+00,0.123762E+00,0.124000E+00,0.123893E+00,
     &0.123762E+00,0.146934E+01,0.628056E-01,0.569539E+00,0.347450E+00,
     &0.122240E+00,0.122488E+00,0.122375E+00,0.122240E+00,0.140517E+01,
     &0.637587E-01,0.565134E+00,0.343008E+00,0.120476E+00,0.120733E+00,
     &0.120615E+00,0.120476E+00,0.134093E+01,0.644054E-01,0.560071E+00/
      DATA (DL(K),K= 1106, 1190) /
     &0.338158E+00,0.118493E+00,0.118758E+00,0.118635E+00,0.118493E+00,
     &0.127712E+01,0.647671E-01,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.584093E+00,0.349173E+00,0.772117E-01,0.772117E-01,0.772117E-01,
     &0.772117E-01,0.140433E+01,0.346945E-17,0.586736E+00,0.349017E+00,
     &0.785355E-01,0.785519E-01,0.785448E-01,0.785355E-01,0.139434E+01,
     &0.447504E-02,0.588402E+00,0.348237E+00,0.795437E-01,0.795759E-01,
     &0.795617E-01,0.795437E-01,0.137550E+01,0.854114E-02,0.589124E+00,
     &0.346861E+00,0.802498E-01,0.802970E-01,0.802758E-01,0.802498E-01,
     &0.134918E+01,0.122148E-01,0.588930E+00,0.344912E+00,0.806656E-01,
     &0.807271E-01,0.806990E-01,0.806656E-01,0.131652E+01,0.155101E-01,
     &0.587849E+00,0.342417E+00,0.808055E-01,0.808805E-01,0.808457E-01,
     &0.808055E-01,0.127862E+01,0.184435E-01,0.585912E+00,0.339402E+00,
     &0.806843E-01,0.807718E-01,0.807306E-01,0.806843E-01,0.123648E+01,
     &0.210315E-01,0.583151E+00,0.335894E+00,0.803173E-01,0.804166E-01,
     &0.803692E-01,0.803173E-01,0.119104E+01,0.232909E-01,0.579599E+00,
     &0.331923E+00,0.797205E-01,0.798308E-01,0.797775E-01,0.797205E-01/
      DATA (DL(K),K= 1191, 1275) /
     &0.114317E+01,0.252394E-01,0.575288E+00,0.327516E+00,0.789107E-01,
     &0.790310E-01,0.789721E-01,0.789107E-01,0.109362E+01,0.268946E-01,
     &0.570253E+00,0.322704E+00,0.779045E-01,0.780341E-01,0.779698E-01,
     &0.779045E-01,0.104307E+01,0.282745E-01,0.564530E+00,0.317515E+00,
     &0.767190E-01,0.768570E-01,0.767878E-01,0.767190E-01,0.992143E+00,
     &0.293974E-01,0.558155E+00,0.311981E+00,0.753713E-01,0.755169E-01,
     &0.754432E-01,0.753713E-01,0.941341E+00,0.302812E-01,0.551166E+00,
     &0.306131E+00,0.738784E-01,0.740308E-01,0.739528E-01,0.738784E-01,
     &0.891113E+00,0.309441E-01,0.543599E+00,0.299995E+00,0.722571E-01,
     &0.724154E-01,0.723336E-01,0.722571E-01,0.841829E+00,0.314037E-01,
     &0.535494E+00,0.293603E+00,0.705237E-01,0.706871E-01,0.706019E-01,
     &0.705237E-01,0.793794E+00,0.316774E-01,0.526888E+00,0.286986E+00,
     &0.686941E-01,0.688619E-01,0.687736E-01,0.686941E-01,0.747249E+00,
     &0.317823E-01,0.517822E+00,0.280172E+00,0.667836E-01,0.669551E-01,
     &0.668640E-01,0.667836E-01,0.702381E+00,0.317346E-01,0.508333E+00,
     &0.273189E+00,0.648068E-01,0.649814E-01,0.648879E-01,0.648068E-01,
     &0.659330E+00,0.315501E-01,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 1276, 1360) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.622739E+00,0.340676E+00,0.509141E-01,0.509141E-01,0.509141E-01,
     &0.509141E-01,0.980502E+00,-.173472E-17,0.617764E+00,0.335457E+00,
     &0.507607E-01,0.507701E-01,0.507651E-01,0.507607E-01,0.944375E+00,
     &0.242386E-02,0.611957E+00,0.329837E+00,0.504236E-01,0.504417E-01,
     &0.504321E-01,0.504236E-01,0.905225E+00,0.455851E-02,0.605372E+00,
     &0.323853E+00,0.499207E-01,0.499471E-01,0.499328E-01,0.499207E-01,
     &0.864035E+00,0.642656E-02,0.598052E+00,0.317537E+00,0.492668E-01,
     &0.493008E-01,0.492822E-01,0.492668E-01,0.821557E+00,0.804638E-02,
     &0.590044E+00,0.310919E+00,0.484772E-01,0.485183E-01,0.484955E-01,
     &0.484772E-01,0.778444E+00,0.943663E-02,0.581391E+00,0.304033E+00,
     &0.475665E-01,0.476142E-01,0.475874E-01,0.475665E-01,0.735263E+00,
     &0.106150E-01,0.572137E+00,0.296908E+00,0.465487E-01,0.466024E-01,
     &0.465720E-01,0.465487E-01,0.692487E+00,0.115984E-01,0.562326E+00,
     &0.289573E+00,0.454376E-01,0.454968E-01,0.454629E-01,0.454376E-01,
     &0.650510E+00,0.124032E-01,0.552003E+00,0.282060E+00,0.442463E-01,
     &0.443103E-01,0.442733E-01,0.442463E-01,0.609652E+00,0.130451E-01/
      DATA (DL(K),K= 1361, 1445) /
     &0.541210E+00,0.274395E+00,0.429871E-01,0.430555E-01,0.430156E-01,
     &0.429871E-01,0.570164E+00,0.135389E-01,0.529991E+00,0.266608E+00,
     &0.416720E-01,0.417443E-01,0.417018E-01,0.416720E-01,0.532237E+00,
     &0.138989E-01,0.518389E+00,0.258725E+00,0.403123E-01,0.403879E-01,
     &0.403431E-01,0.403123E-01,0.496010E+00,0.141386E-01,0.506446E+00,
     &0.250772E+00,0.389186E-01,0.389971E-01,0.389501E-01,0.389186E-01,
     &0.461573E+00,0.142708E-01,0.494204E+00,0.242775E+00,0.375006E-01,
     &0.375815E-01,0.375327E-01,0.375006E-01,0.428979E+00,0.143074E-01,
     &0.481705E+00,0.234757E+00,0.360674E-01,0.361503E-01,0.361000E-01,
     &0.360674E-01,0.398246E+00,0.142598E-01,0.468990E+00,0.226741E+00,
     &0.346276E-01,0.347120E-01,0.346605E-01,0.346276E-01,0.369363E+00,
     &0.141385E-01,0.456098E+00,0.218750E+00,0.331887E-01,0.332743E-01,
     &0.332216E-01,0.331887E-01,0.342300E+00,0.139532E-01,0.443068E+00,
     &0.210804E+00,0.317576E-01,0.318440E-01,0.317905E-01,0.317576E-01,
     &0.317005E+00,0.137130E-01,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.631458E+00,0.318714E+00,0.335640E-01,0.335640E-01,0.335640E-01/
      DATA (DL(K),K= 1446, 1530) /
     &0.335640E-01,0.686773E+00,0.346945E-17,0.620274E+00,0.310241E+00,
     &0.329311E-01,0.329377E-01,0.329337E-01,0.329311E-01,0.646559E+00,
     &0.135960E-02,0.608504E+00,0.301610E+00,0.322083E-01,0.322210E-01,
     &0.322133E-01,0.322083E-01,0.606503E+00,0.252820E-02,0.596205E+00,
     &0.292854E+00,0.314099E-01,0.314281E-01,0.314169E-01,0.314099E-01,
     &0.567134E+00,0.352543E-02,0.583429E+00,0.284002E+00,0.305470E-01,
     &0.305704E-01,0.305558E-01,0.305470E-01,0.528824E+00,0.436693E-02,
     &0.570223E+00,0.275080E+00,0.296307E-01,0.296586E-01,0.296411E-01,
     &0.296307E-01,0.491848E+00,0.506768E-02,0.556637E+00,0.266115E+00,
     &0.286709E-01,0.287030E-01,0.286827E-01,0.286709E-01,0.456422E+00,
     &0.564157E-02,0.542717E+00,0.257131E+00,0.276770E-01,0.277128E-01,
     &0.276900E-01,0.276770E-01,0.422697E+00,0.610148E-02,0.528511E+00,
     &0.248154E+00,0.266578E-01,0.266968E-01,0.266718E-01,0.266578E-01,
     &0.390771E+00,0.645942E-02,0.514062E+00,0.239205E+00,0.256210E-01,
     &0.256629E-01,0.256359E-01,0.256210E-01,0.360700E+00,0.672653E-02,
     &0.499417E+00,0.230307E+00,0.245741E-01,0.246185E-01,0.245896E-01,
     &0.245741E-01,0.332498E+00,0.691312E-02,0.484617E+00,0.221480E+00/
      DATA (DL(K),K= 1531, 1615) /
     &0.235237E-01,0.235701E-01,0.235397E-01,0.235237E-01,0.306153E+00,
     &0.702875E-02,0.469706E+00,0.212745E+00,0.224757E-01,0.225238E-01,
     &0.224921E-01,0.224757E-01,0.281624E+00,0.708222E-02,0.454725E+00,
     &0.204118E+00,0.214355E-01,0.214850E-01,0.214522E-01,0.214355E-01,
     &0.258855E+00,0.708159E-02,0.439713E+00,0.195618E+00,0.204079E-01,
     &0.204586E-01,0.204249E-01,0.204079E-01,0.237774E+00,0.703428E-02,
     &0.424709E+00,0.187259E+00,0.193972E-01,0.194486E-01,0.194142E-01,
     &0.193972E-01,0.218298E+00,0.694702E-02,0.409750E+00,0.179057E+00,
     &0.184069E-01,0.184588E-01,0.184239E-01,0.184069E-01,0.200339E+00,
     &0.682594E-02,0.394870E+00,0.171023E+00,0.174402E-01,0.174924E-01,
     &0.174571E-01,0.174402E-01,0.183804E+00,0.667657E-02,0.380104E+00,
     &0.163171E+00,0.164997E-01,0.165519E-01,0.165164E-01,0.164997E-01,
     &0.168600E+00,0.650389E-02,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.619056E+00,0.288873E+00,0.218554E-01,0.218554E-01,0.218554E-01,
     &0.218554E-01,0.477010E+00,-.867362E-17,0.602890E+00,0.278444E+00,
     &0.211480E-01,0.211530E-01,0.211497E-01,0.211480E-01,0.440877E+00/
      DATA (DL(K),K= 1616, 1700) /
     &0.767466E-03,0.586431E+00,0.268081E+00,0.204081E-01,0.204175E-01,
     &0.204113E-01,0.204081E-01,0.406417E+00,0.141432E-02,0.569736E+00,
     &0.257807E+00,0.196446E-01,0.196581E-01,0.196491E-01,0.196446E-01,
     &0.373808E+00,0.195508E-02,0.552853E+00,0.247642E+00,0.188646E-01,
     &0.188816E-01,0.188701E-01,0.188646E-01,0.343145E+00,0.240123E-02,
     &0.535829E+00,0.237603E+00,0.180743E-01,0.180945E-01,0.180808E-01,
     &0.180743E-01,0.314460E+00,0.276332E-02,0.518710E+00,0.227710E+00,
     &0.172796E-01,0.173025E-01,0.172868E-01,0.172796E-01,0.287750E+00,
     &0.305100E-02,0.501539E+00,0.217977E+00,0.164854E-01,0.165108E-01,
     &0.164933E-01,0.164854E-01,0.262983E+00,0.327305E-02,0.484360E+00,
     &0.208420E+00,0.156964E-01,0.157239E-01,0.157049E-01,0.156964E-01,
     &0.240098E+00,0.343744E-02,0.467213E+00,0.199053E+00,0.149165E-01,
     &0.149457E-01,0.149254E-01,0.149165E-01,0.219021E+00,0.355144E-02,
     &0.450140E+00,0.189889E+00,0.141493E-01,0.141800E-01,0.141586E-01,
     &0.141493E-01,0.199660E+00,0.362164E-02,0.433177E+00,0.180939E+00,
     &0.133978E-01,0.134297E-01,0.134073E-01,0.133978E-01,0.181918E+00,
     &0.365401E-02,0.416362E+00,0.172214E+00,0.126646E-01,0.126974E-01/
      DATA (DL(K),K= 1701, 1785) /
     &0.126742E-01,0.126646E-01,0.165692E+00,0.365394E-02,0.399729E+00,
     &0.163725E+00,0.119518E-01,0.119853E-01,0.119615E-01,0.119518E-01,
     &0.150875E+00,0.362628E-02,0.383310E+00,0.155477E+00,0.112613E-01,
     &0.112952E-01,0.112711E-01,0.112613E-01,0.137364E+00,0.357539E-02,
     &0.367138E+00,0.147479E+00,0.105945E-01,0.106287E-01,0.106042E-01,
     &0.105945E-01,0.125056E+00,0.350515E-02,0.351239E+00,0.139737E+00,
     &0.995250E-02,0.998673E-02,0.996211E-02,0.995250E-02,0.113852E+00,
     &0.341903E-02,0.335641E+00,0.132253E+00,0.933610E-02,0.937024E-02,
     &0.934557E-02,0.933610E-02,0.103659E+00,0.332009E-02,0.320367E+00,
     &0.125033E+00,0.874584E-02,0.877973E-02,0.875514E-02,0.874584E-02,
     &0.943886E-01,0.321106E-02,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.591114E+00,0.254807E+00,0.139531E-01,0.139531E-01,0.139531E-01,
     &0.139531E-01,0.326288E+00,0.000000E+00,0.571121E+00,0.243424E+00,
     &0.133325E-01,0.133362E-01,0.133336E-01,0.133325E-01,0.296956E+00,
     &0.429082E-03,0.551151E+00,0.232297E+00,0.127105E-01,0.127175E-01,
     &0.127126E-01,0.127105E-01,0.269811E+00,0.785137E-03,0.531253E+00/
      DATA (DL(K),K= 1786, 1870) /
     &0.221436E+00,0.120916E-01,0.121015E-01,0.120945E-01,0.120916E-01,
     &0.244803E+00,0.107790E-02,0.511467E+00,0.210850E+00,0.114794E-01,
     &0.114918E-01,0.114829E-01,0.114794E-01,0.221863E+00,0.131504E-02,
     &0.491833E+00,0.200545E+00,0.108767E-01,0.108913E-01,0.108808E-01,
     &0.108767E-01,0.200886E+00,0.150337E-02,0.472388E+00,0.190531E+00,
     &0.102861E-01,0.103027E-01,0.102907E-01,0.102861E-01,0.181762E+00,
     &0.164910E-02,0.453170E+00,0.180812E+00,0.970979E-02,0.972799E-02,
     &0.971477E-02,0.970979E-02,0.164371E+00,0.175777E-02,0.434213E+00,
     &0.171394E+00,0.914959E-02,0.916916E-02,0.915488E-02,0.914959E-02,
     &0.148589E+00,0.183434E-02,0.415548E+00,0.162282E+00,0.860700E-02,
     &0.862770E-02,0.861252E-02,0.860700E-02,0.134293E+00,0.188328E-02,
     &0.397208E+00,0.153479E+00,0.808323E-02,0.810484E-02,0.808891E-02,
     &0.808323E-02,0.121361E+00,0.190856E-02,0.379220E+00,0.144989E+00,
     &0.757922E-02,0.760152E-02,0.758501E-02,0.757922E-02,0.109676E+00,
     &0.191374E-02,0.361611E+00,0.136811E+00,0.709565E-02,0.711846E-02,
     &0.710150E-02,0.709565E-02,0.991261E-01,0.190199E-02,0.344406E+00,
     &0.128948E+00,0.663300E-02,0.665614E-02,0.663885E-02,0.663300E-02/
      DATA (DL(K),K= 1871, 1955) /
     &0.896059E-01,0.187610E-02,0.327627E+00,0.121398E+00,0.619152E-02,
     &0.621484E-02,0.619734E-02,0.619152E-02,0.810177E-01,0.183856E-02,
     &0.311292E+00,0.114161E+00,0.577130E-02,0.579466E-02,0.577706E-02,
     &0.577130E-02,0.732709E-01,0.179155E-02,0.295421E+00,0.107235E+00,
     &0.537228E-02,0.539554E-02,0.537794E-02,0.537228E-02,0.662824E-01,
     &0.173700E-02,0.280026E+00,0.100616E+00,0.499423E-02,0.501728E-02,
     &0.499977E-02,0.499423E-02,0.599766E-01,0.167658E-02,0.265121E+00,
     &0.943000E-01,0.463683E-02,0.465958E-02,0.464223E-02,0.463683E-02,
     &0.542848E-01,0.161174E-02,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.551659E+00,0.219084E+00,0.867977E-02,0.867977E-02,0.867977E-02,
     &0.867977E-02,0.218587E+00,-.173472E-16,0.528947E+00,0.207536E+00,
     &0.819621E-02,0.819909E-02,0.819696E-02,0.819621E-02,0.196367E+00,
     &0.234843E-03,0.506575E+00,0.196391E+00,0.772540E-02,0.773082E-02,
     &0.772680E-02,0.772540E-02,0.176280E+00,0.427503E-03,0.484579E+00,
     &0.185646E+00,0.726876E-02,0.727639E-02,0.727069E-02,0.726876E-02,
     &0.158158E+00,0.583933E-03,0.462988E+00,0.175298E+00,0.682746E-02/
      DATA (DL(K),K= 1956, 2040) /
     &0.683702E-02,0.682985E-02,0.682746E-02,0.141851E+00,0.708874E-03,
     &0.441830E+00,0.165345E+00,0.640226E-02,0.641347E-02,0.640502E-02,
     &0.640226E-02,0.127203E+00,0.806409E-03,0.421129E+00,0.155783E+00,
     &0.599380E-02,0.600641E-02,0.599686E-02,0.599380E-02,0.114065E+00,
     &0.880249E-03,0.400912E+00,0.146609E+00,0.560252E-02,0.561629E-02,
     &0.560581E-02,0.560252E-02,0.102296E+00,0.933676E-03,0.381199E+00,
     &0.137819E+00,0.522870E-02,0.524342E-02,0.523217E-02,0.522870E-02,
     &0.917608E-01,0.969607E-03,0.362011E+00,0.129407E+00,0.487247E-02,
     &0.488796E-02,0.487607E-02,0.487247E-02,0.823356E-01,0.990632E-03,
     &0.343367E+00,0.121370E+00,0.453385E-02,0.454992E-02,0.453753E-02,
     &0.453385E-02,0.739054E-01,0.999042E-03,0.325282E+00,0.113700E+00,
     &0.421272E-02,0.422921E-02,0.421644E-02,0.421272E-02,0.663651E-01,
     &0.996863E-03,0.307770E+00,0.106393E+00,0.390887E-02,0.392563E-02,
     &0.391260E-02,0.390887E-02,0.596195E-01,0.985881E-03,0.290841E+00,
     &0.994399E-01,0.362199E-02,0.363889E-02,0.362570E-02,0.362199E-02,
     &0.535826E-01,0.967664E-03,0.274506E+00,0.928343E-01,0.335170E-02,
     &0.336862E-02,0.335536E-02,0.335170E-02,0.481769E-01,0.943587E-03/
      DATA (DL(K),K= 2041, 2125) /
     &0.258771E+00,0.865679E-01,0.309756E-02,0.311439E-02,0.310114E-02,
     &0.309756E-02,0.433336E-01,0.914850E-03,0.243639E+00,0.806321E-01,
     &0.285905E-02,0.287571E-02,0.286255E-02,0.285905E-02,0.389912E-01,
     &0.882497E-03,0.229113E+00,0.750177E-01,0.263565E-02,0.265205E-02,
     &0.263905E-02,0.263565E-02,0.350948E-01,0.847432E-03,0.215193E+00,
     &0.697152E-01,0.242677E-02,0.244285E-02,0.243005E-02,0.242677E-02,
     &0.315960E-01,0.810432E-03,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.503850E+00,0.183581E+00,0.522815E-02,0.522815E-02,0.522815E-02,
     &0.522815E-02,0.142635E+00,0.123599E-16,0.479478E+00,0.172477E+00,
     &0.488093E-02,0.488328E-02,0.488147E-02,0.488093E-02,0.126767E+00,
     &0.124505E-03,0.455750E+00,0.161879E+00,0.455054E-02,0.455493E-02,
     &0.455153E-02,0.455054E-02,0.112695E+00,0.225968E-03,0.432681E+00,
     &0.151771E+00,0.423664E-02,0.424278E-02,0.423800E-02,0.423664E-02,
     &0.100212E+00,0.307702E-03,0.410286E+00,0.142140E+00,0.393907E-02,
     &0.394671E-02,0.394073E-02,0.393907E-02,0.891488E-01,0.372395E-03,
     &0.388577E+00,0.132974E+00,0.365743E-02,0.366634E-02,0.365934E-02/
      DATA (DL(K),K= 2126, 2210) /
     &0.365743E-02,0.793490E-01,0.422302E-03,0.367563E+00,0.124259E+00,
     &0.339138E-02,0.340133E-02,0.339347E-02,0.339138E-02,0.706688E-01,
     &0.459484E-03,0.347256E+00,0.115984E+00,0.314049E-02,0.315129E-02,
     &0.314273E-02,0.314049E-02,0.629792E-01,0.485762E-03,0.327660E+00,
     &0.108136E+00,0.290433E-02,0.291580E-02,0.290667E-02,0.290433E-02,
     &0.561642E-01,0.502744E-03,0.308782E+00,0.100701E+00,0.268243E-02,
     &0.269440E-02,0.268483E-02,0.268243E-02,0.501207E-01,0.511853E-03,
     &0.290625E+00,0.936693E-01,0.247429E-02,0.248663E-02,0.247672E-02,
     &0.247429E-02,0.447569E-01,0.514346E-03,0.273189E+00,0.870261E-01,
     &0.227939E-02,0.229197E-02,0.228184E-02,0.227939E-02,0.399920E-01,
     &0.511328E-03,0.256475E+00,0.807592E-01,0.209722E-02,0.210991E-02,
     &0.209965E-02,0.209722E-02,0.357547E-01,0.503769E-03,0.240478E+00,
     &0.748555E-01,0.192721E-02,0.193992E-02,0.192961E-02,0.192721E-02,
     &0.319825E-01,0.492518E-03,0.225194E+00,0.693019E-01,0.176883E-02,
     &0.178147E-02,0.177117E-02,0.176883E-02,0.286209E-01,0.478318E-03,
     &0.210615E+00,0.640851E-01,0.162151E-02,0.163400E-02,0.162379E-02,
     &0.162151E-02,0.256219E-01,0.461813E-03,0.196733E+00,0.591917E-01/
      DATA (DL(K),K= 2211, 2295) /
     &0.148471E-02,0.149698E-02,0.148691E-02,0.148471E-02,0.229436E-01,
     &0.443561E-03,0.183536E+00,0.546085E-01,0.135786E-02,0.136986E-02,
     &0.135998E-02,0.135786E-02,0.205496E-01,0.424043E-03,0.171011E+00,
     &0.503219E-01,0.124042E-02,0.125211E-02,0.124246E-02,0.124042E-02,
     &0.184079E-01,0.403672E-03,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.450310E+00,0.149685E+00,0.302765E-02,0.302765E-02,0.302765E-02,
     &0.302765E-02,0.901099E-01,-.108420E-17,0.425282E+00,0.139479E+00,
     &0.279499E-02,0.279691E-02,0.279537E-02,0.279499E-02,0.794239E-01,
     &0.632140E-04,0.401169E+00,0.129837E+00,0.257801E-02,0.258157E-02,
     &0.257870E-02,0.257801E-02,0.700941E-01,0.114711E-03,0.377966E+00,
     &0.120733E+00,0.237556E-02,0.238052E-02,0.237650E-02,0.237556E-02,
     &0.619270E-01,0.156107E-03,0.355668E+00,0.112145E+00,0.218688E-02,
     &0.219301E-02,0.218802E-02,0.218688E-02,0.547717E-01,0.188777E-03,
     &0.334269E+00,0.104052E+00,0.201113E-02,0.201823E-02,0.201243E-02,
     &0.201113E-02,0.484974E-01,0.213848E-03,0.313762E+00,0.964335E-01,
     &0.184758E-02,0.185546E-02,0.184900E-02,0.184758E-02,0.429879E-01/
      DATA (DL(K),K= 2296, 2380) /
     &0.232367E-03,0.294139E+00,0.892696E-01,0.169553E-02,0.170402E-02,
     &0.169703E-02,0.169553E-02,0.381432E-01,0.245270E-03,0.275389E+00,
     &0.825414E-01,0.155431E-02,0.156326E-02,0.155586E-02,0.155431E-02,
     &0.338762E-01,0.253383E-03,0.257502E+00,0.762303E-01,0.142329E-02,
     &0.143258E-02,0.142487E-02,0.142329E-02,0.301119E-01,0.257441E-03,
     &0.240464E+00,0.703180E-01,0.130188E-02,0.131138E-02,0.130347E-02,
     &0.130188E-02,0.267853E-01,0.258098E-03,0.224262E+00,0.647867E-01,
     &0.118950E-02,0.119912E-02,0.119108E-02,0.118950E-02,0.238409E-01,
     &0.255929E-03,0.208879E+00,0.596190E-01,0.108562E-02,0.109526E-02,
     &0.108717E-02,0.108562E-02,0.212308E-01,0.251442E-03,0.194298E+00,
     &0.547975E-01,0.989698E-03,0.999283E-03,0.991221E-03,0.989698E-03,
     &0.189136E-01,0.245082E-03,0.180499E+00,0.503054E-01,0.901248E-03,
     &0.910711E-03,0.902726E-03,0.901248E-03,0.168537E-01,0.237238E-03,
     &0.167463E+00,0.461263E-01,0.819789E-03,0.829074E-03,0.821215E-03,
     &0.819789E-03,0.150206E-01,0.228250E-03,0.155167E+00,0.422438E-01,
     &0.744866E-03,0.753925E-03,0.746234E-03,0.744866E-03,0.133878E-01,
     &0.218412E-03,0.143590E+00,0.386421E-01,0.676043E-03,0.684836E-03/
      DATA (DL(K),K= 2381, 2465) /
     &0.677349E-03,0.676043E-03,0.119320E-01,0.207976E-03,0.132706E+00,
     &0.353058E-01,0.612907E-03,0.621403E-03,0.614147E-03,0.612907E-03,
     &0.106334E-01,0.197159E-03,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.393307E+00,0.118409E+00,0.167124E-02,0.167124E-02,0.167124E-02,
     &0.167124E-02,0.547140E-01,0.433681E-17,0.368555E+00,0.109414E+00,
     &0.152547E-02,0.152705E-02,0.152573E-02,0.152547E-02,0.479708E-01,
     &0.303147E-04,0.344946E+00,0.101001E+00,0.139202E-02,0.139494E-02,
     &0.139249E-02,0.139202E-02,0.421517E-01,0.552185E-04,0.322450E+00,
     &0.931345E-01,0.126960E-02,0.127363E-02,0.127024E-02,0.126960E-02,
     &0.371043E-01,0.753524E-04,0.301043E+00,0.857854E-01,0.115731E-02,
     &0.116225E-02,0.115808E-02,0.115731E-02,0.327131E-01,0.913172E-04,
     &0.280698E+00,0.789267E-01,0.105427E-02,0.105995E-02,0.105514E-02,
     &0.105427E-02,0.288844E-01,0.103605E-03,0.261390E+00,0.725323E-01,
     &0.959726E-03,0.965979E-03,0.960659E-03,0.959726E-03,0.255366E-01,
     &0.112688E-03,0.243091E+00,0.665774E-01,0.872987E-03,0.879676E-03,
     &0.873966E-03,0.872987E-03,0.226017E-01,0.119000E-03,0.225775E+00/
      DATA (DL(K),K= 2466, 2550) /
     &0.610385E-01,0.793435E-03,0.800438E-03,0.794441E-03,0.793435E-03,
     &0.200219E-01,0.122931E-03,0.209414E+00,0.558928E-01,0.720508E-03,
     &0.727716E-03,0.721524E-03,0.720508E-03,0.177490E-01,0.124835E-03,
     &0.193979E+00,0.511187E-01,0.653691E-03,0.661011E-03,0.654703E-03,
     &0.653691E-03,0.157425E-01,0.125031E-03,0.179441E+00,0.466950E-01,
     &0.592513E-03,0.599863E-03,0.593511E-03,0.592513E-03,0.139674E-01,
     &0.123805E-03,0.165770E+00,0.426018E-01,0.536539E-03,0.543850E-03,
     &0.537513E-03,0.536539E-03,0.123945E-01,0.121411E-03,0.152935E+00,
     &0.388195E-01,0.485370E-03,0.492584E-03,0.486314E-03,0.485370E-03,
     &0.109993E-01,0.118076E-03,0.140905E+00,0.353295E-01,0.438636E-03,
     &0.445702E-03,0.439543E-03,0.438636E-03,0.976027E-02,0.113999E-03,
     &0.129648E+00,0.321137E-01,0.395992E-03,0.402871E-03,0.396859E-03,
     &0.395992E-03,0.865895E-02,0.109353E-03,0.119131E+00,0.291550E-01,
     &0.357120E-03,0.363779E-03,0.357945E-03,0.357120E-03,0.767960E-02,
     &0.104292E-03,0.109323E+00,0.264366E-01,0.321725E-03,0.328139E-03,
     &0.322505E-03,0.321725E-03,0.680866E-02,0.989468E-04,0.100191E+00,
     &0.239428E-01,0.289531E-03,0.295679E-03,0.290266E-03,0.289531E-03/
      DATA (DL(K),K= 2551, 2635) /
     &0.603390E-02,0.934295E-04,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.334851E+00,0.904666E-01,0.869706E-03,0.869706E-03,0.869706E-03,
     &0.869706E-03,0.316365E-01,-.311708E-17,0.311223E+00,0.828706E-01,
     &0.784673E-03,0.785968E-03,0.784847E-03,0.784673E-03,0.277037E-01,
     &0.134749E-04,0.288910E+00,0.758361E-01,0.708234E-03,0.710597E-03,
     &0.708543E-03,0.708234E-03,0.243298E-01,0.247881E-04,0.267855E+00,
     &0.693222E-01,0.639256E-03,0.642491E-03,0.639671E-03,0.639256E-03,
     &0.214125E-01,0.340882E-04,0.248015E+00,0.632964E-01,0.576953E-03,
     &0.580887E-03,0.577448E-03,0.576953E-03,0.188764E-01,0.415701E-04,
     &0.229343E+00,0.577274E-01,0.520615E-03,0.525096E-03,0.521167E-03,
     &0.520615E-03,0.166642E-01,0.474027E-04,0.211794E+00,0.525860E-01,
     &0.469624E-03,0.474520E-03,0.470215E-03,0.469624E-03,0.147265E-01,
     &0.517615E-04,0.195325E+00,0.478447E-01,0.423445E-03,0.428640E-03,
     &0.424060E-03,0.423445E-03,0.130234E-01,0.548213E-04,0.179891E+00,
     &0.434776E-01,0.381606E-03,0.387001E-03,0.382232E-03,0.381606E-03,
     &0.115226E-01,0.567474E-04,0.165449E+00,0.394601E-01,0.343691E-03/
      DATA (DL(K),K= 2636, 2720) /
     &0.349200E-03,0.344317E-03,0.343691E-03,0.101965E-01,0.576952E-04,
     &0.151958E+00,0.357691E-01,0.309329E-03,0.314879E-03,0.309948E-03,
     &0.309329E-03,0.902217E-02,0.578101E-04,0.139374E+00,0.323826E-01,
     &0.278192E-03,0.283721E-03,0.278796E-03,0.278192E-03,0.798131E-02,
     &0.572266E-04,0.127655E+00,0.292797E-01,0.249984E-03,0.255440E-03,
     &0.250569E-03,0.249984E-03,0.705796E-02,0.560672E-04,0.116760E+00,
     &0.264406E-01,0.224440E-03,0.229782E-03,0.225002E-03,0.224440E-03,
     &0.623793E-02,0.544420E-04,0.106647E+00,0.238467E-01,0.201321E-03,
     &0.206513E-03,0.201856E-03,0.201321E-03,0.550962E-02,0.524504E-04,
     &0.972762E-01,0.214802E-01,0.180411E-03,0.185425E-03,0.180918E-03,
     &0.180411E-03,0.486321E-02,0.501804E-04,0.886073E-01,0.193242E-01,
     &0.161512E-03,0.166328E-03,0.161990E-03,0.161512E-03,0.428946E-02,
     &0.477087E-04,0.806013E-01,0.173629E-01,0.144446E-03,0.149048E-03,
     &0.144894E-03,0.144446E-03,0.378030E-02,0.451020E-04,0.732197E-01,
     &0.155814E-01,0.129049E-03,0.133425E-03,0.129467E-03,0.129049E-03,
     &0.332897E-02,0.424179E-04,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 2721, 2805) /
     &0.276761E+00,0.663170E-01,0.420483E-03,0.420483E-03,0.420483E-03,
     &0.420483E-03,0.172075E-01,0.418773E-17,0.255003E+00,0.601925E-01,
     &0.374768E-03,0.375776E-03,0.374876E-03,0.374768E-03,0.151410E-01,
     &0.540038E-05,0.234664E+00,0.545789E-01,0.334420E-03,0.336252E-03,
     &0.334612E-03,0.334420E-03,0.133594E-01,0.101360E-04,0.215665E+00,
     &0.494328E-01,0.298611E-03,0.301108E-03,0.298867E-03,0.298611E-03,
     &0.118079E-01,0.141555E-04,0.197941E+00,0.447203E-01,0.266766E-03,
     &0.269787E-03,0.267068E-03,0.266766E-03,0.104461E-01,0.174750E-04,
     &0.181428E+00,0.404089E-01,0.238391E-03,0.241815E-03,0.238726E-03,
     &0.238391E-03,0.924609E-02,0.201244E-04,0.166064E+00,0.364687E-01,
     &0.213061E-03,0.216782E-03,0.213417E-03,0.213061E-03,0.818507E-02,
     &0.221467E-04,0.151790E+00,0.328719E-01,0.190418E-03,0.194343E-03,
     &0.190785E-03,0.190418E-03,0.724366E-02,0.235974E-04,0.138548E+00,
     &0.295925E-01,0.170150E-03,0.174202E-03,0.170521E-03,0.170150E-03,
     &0.640614E-02,0.245354E-04,0.126282E+00,0.266063E-01,0.151991E-03,
     &0.156104E-03,0.152359E-03,0.151991E-03,0.566089E-02,0.250221E-04,
     &0.114939E+00,0.238907E-01,0.135710E-03,0.139827E-03,0.136071E-03/
      DATA (DL(K),K= 2806, 2890) /
     &0.135710E-03,0.499773E-02,0.251191E-04,0.104465E+00,0.214245E-01,
     &0.121106E-03,0.125180E-03,0.121455E-03,0.121106E-03,0.440691E-02,
     &0.248850E-04,0.948101E-01,0.191879E-01,0.108002E-03,0.111994E-03,
     &0.108337E-03,0.108002E-03,0.388094E-02,0.243760E-04,0.859247E-01,
     &0.171625E-01,0.962435E-04,0.100124E-03,0.965624E-04,0.962435E-04,
     &0.341379E-02,0.236445E-04,0.777613E-01,0.153309E-01,0.856948E-04,
     &0.894394E-04,0.859960E-04,0.856948E-04,0.299910E-02,0.227378E-04,
     &0.702736E-01,0.136770E-01,0.762337E-04,0.798235E-04,0.765166E-04,
     &0.762337E-04,0.263116E-02,0.216984E-04,0.634174E-01,0.121859E-01,
     &0.677528E-04,0.711742E-04,0.680169E-04,0.677528E-04,0.230551E-02,
     &0.205642E-04,0.571500E-01,0.108434E-01,0.601554E-04,0.633990E-04,
     &0.604008E-04,0.601554E-04,0.201791E-02,0.193681E-04,0.514305E-01,
     &0.963651E-02,0.533545E-04,0.564148E-04,0.535814E-04,0.533545E-04,
     &0.176404E-02,0.181381E-04,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.220700E+00,0.461964E-01,0.185072E-03,0.185072E-03,0.185072E-03,
     &0.185072E-03,0.865568E-02,-.294090E-17,0.201438E+00,0.415162E-01/
      DATA (DL(K),K= 2891, 2975) /
     &0.162774E-03,0.163610E-03,0.162842E-03,0.162774E-03,0.772611E-02,
     &0.184134E-05,0.183625E+00,0.372730E-01,0.143469E-03,0.144974E-03,
     &0.143588E-03,0.143469E-03,0.690038E-02,0.359959E-05,0.167162E+00,
     &0.334245E-01,0.126634E-03,0.128666E-03,0.126791E-03,0.126634E-03,
     &0.616000E-02,0.518075E-05,0.151966E+00,0.299378E-01,0.111904E-03,
     &0.114340E-03,0.112088E-03,0.111904E-03,0.549219E-02,0.654232E-05,
     &0.137959E+00,0.267821E-01,0.989836E-04,0.101716E-03,0.991845E-04,
     &0.989836E-04,0.488896E-02,0.767008E-05,0.125065E+00,0.239289E-01,
     &0.876157E-04,0.905559E-04,0.878269E-04,0.876157E-04,0.434253E-02,
     &0.855860E-05,0.113213E+00,0.213524E-01,0.775899E-04,0.806611E-04,
     &0.778055E-04,0.775899E-04,0.384886E-02,0.921640E-05,0.102335E+00,
     &0.190285E-01,0.687292E-04,0.718676E-04,0.689446E-04,0.687292E-04,
     &0.340422E-02,0.965961E-05,0.923671E-01,0.169353E-01,0.608829E-04,
     &0.640353E-04,0.610944E-04,0.608829E-04,0.300332E-02,0.990752E-05,
     &0.832476E-01,0.150523E-01,0.539242E-04,0.570473E-04,0.541291E-04,
     &0.539242E-04,0.264288E-02,0.998320E-05,0.749179E-01,0.133608E-01,
     &0.477459E-04,0.508046E-04,0.479422E-04,0.477459E-04,0.232088E-02/
      DATA (DL(K),K= 2976, 3060) /
     &0.991147E-05,0.673221E-01,0.118435E-01,0.422554E-04,0.452220E-04,
     &0.424417E-04,0.422554E-04,0.203376E-02,0.971603E-05,0.604073E-01,
     &0.104845E-01,0.373730E-04,0.402263E-04,0.375483E-04,0.373730E-04,
     &0.177791E-02,0.941959E-05,0.541231E-01,0.926900E-02,0.330304E-04,
     &0.357544E-04,0.331943E-04,0.330304E-04,0.155117E-02,0.904408E-05,
     &0.484216E-01,0.818347E-02,0.291681E-04,0.317517E-04,0.293202E-04,
     &0.291681E-04,0.135108E-02,0.860921E-05,0.432578E-01,0.721549E-02,
     &0.257333E-04,0.281694E-04,0.258738E-04,0.257333E-04,0.117463E-02,
     &0.813214E-05,0.385889E-01,0.635362E-02,0.226802E-04,0.249648E-04,
     &0.228093E-04,0.226802E-04,0.101941E-02,0.762814E-05,0.343746E-01,
     &0.558739E-02,0.199682E-04,0.221003E-04,0.200863E-04,0.199682E-04,
     &0.883469E-03,0.711035E-05,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.168205E+00,0.301419E-01,0.719932E-04,0.719932E-04,0.719932E-04,
     &0.719932E-04,0.392825E-02,-.205998E-17,0.151922E+00,0.267932E-01,
     &0.623634E-04,0.630456E-04,0.624028E-04,0.623634E-04,0.361412E-02,
     &0.457084E-06,0.137042E+00,0.237932E-01,0.541981E-04,0.554098E-04/
      DATA (DL(K),K= 3061, 3145) /
     &0.542663E-04,0.541981E-04,0.330342E-02,0.989813E-06,0.123446E+00,
     &0.211038E-01,0.472163E-04,0.488314E-04,0.473050E-04,0.472163E-04,
     &0.300140E-02,0.152631E-05,0.111042E+00,0.186954E-01,0.412159E-04,
     &0.431273E-04,0.413184E-04,0.412159E-04,0.270826E-02,0.202092E-05,
     &0.997395E-01,0.165410E-01,0.360433E-04,0.381615E-04,0.361542E-04,
     &0.360433E-04,0.242968E-02,0.245400E-05,0.894558E-01,0.146159E-01,
     &0.315670E-04,0.338178E-04,0.316822E-04,0.315670E-04,0.216928E-02,
     &0.281218E-05,0.801130E-01,0.128978E-01,0.276779E-04,0.300002E-04,
     &0.277940E-04,0.276779E-04,0.192603E-02,0.308878E-05,0.716379E-01,
     &0.113663E-01,0.242878E-04,0.266317E-04,0.244024E-04,0.242878E-04,
     &0.170100E-02,0.328451E-05,0.639623E-01,0.100031E-01,0.213246E-04,
     &0.236502E-04,0.214357E-04,0.213246E-04,0.149649E-02,0.340483E-05,
     &0.570222E-01,0.879131E-02,0.187277E-04,0.210033E-04,0.188341E-04,
     &0.187277E-04,0.131163E-02,0.345656E-05,0.507574E-01,0.771565E-02,
     &0.164465E-04,0.186476E-04,0.165471E-04,0.164465E-04,0.114469E-02,
     &0.344782E-05,0.451118E-01,0.676223E-02,0.144396E-04,0.165480E-04,
     &0.145339E-04,0.144396E-04,0.995649E-03,0.338831E-05,0.400330E-01/
      DATA (DL(K),K= 3146, 3230) /
     &0.591841E-02,0.126720E-04,0.146744E-04,0.127597E-04,0.126720E-04,
     &0.863829E-03,0.328754E-05,0.354720E-01,0.517273E-02,0.111137E-04,
     &0.130013E-04,0.111946E-04,0.111137E-04,0.747293E-03,0.315403E-05,
     &0.313830E-01,0.451477E-02,0.973915E-05,0.115067E-04,0.981339E-05,
     &0.973915E-05,0.644664E-03,0.299600E-05,0.277237E-01,0.393511E-02,
     &0.852687E-05,0.101721E-04,0.859457E-05,0.852687E-05,0.555034E-03,
     &0.282099E-05,0.244545E-01,0.342521E-02,0.745784E-05,0.898076E-05,
     &0.751926E-05,0.745784E-05,0.476998E-03,0.263530E-05,0.215390E-01,
     &0.297737E-02,0.651555E-05,0.791817E-05,0.657100E-05,0.651555E-05,
     &0.409096E-03,0.244427E-05,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.120694E+00,0.180081E-01,0.236444E-04,0.236444E-04,0.236444E-04,
     &0.236444E-04,0.154817E-02,0.416656E-17,0.107713E+00,0.158098E-01,
     &0.200945E-04,0.206098E-04,0.201146E-04,0.200945E-04,0.151249E-02,
     &0.192118E-07,0.960063E-01,0.138667E-01,0.171552E-04,0.180593E-04,
     &0.171894E-04,0.171552E-04,0.143574E-02,0.116516E-06,0.854477E-01,
     &0.121473E-01,0.146986E-04,0.158894E-04,0.147425E-04,0.146986E-04/
      DATA (DL(K),K= 3231, 3315) /
     &0.133744E-02,0.251060E-06,0.759386E-01,0.106275E-01,0.126329E-04,
     &0.140252E-04,0.126830E-04,0.126329E-04,0.122900E-02,0.395272E-06,
     &0.673865E-01,0.928577E-02,0.108901E-04,0.124142E-04,0.109436E-04,
     &0.108901E-04,0.111367E-02,0.535145E-06,0.597062E-01,0.810254E-02,
     &0.941160E-05,0.110108E-04,0.946648E-05,0.941160E-05,0.996785E-03,
     &0.659421E-06,0.528194E-01,0.706039E-02,0.815165E-05,0.978016E-05,
     &0.820627E-05,0.815165E-05,0.885152E-03,0.762600E-06,0.466540E-01,
     &0.614371E-02,0.707299E-05,0.869464E-05,0.712616E-05,0.707299E-05,
     &0.780484E-03,0.842072E-06,0.411433E-01,0.533850E-02,0.614470E-05,
     &0.773135E-05,0.619559E-05,0.614470E-05,0.682563E-03,0.896683E-06,
     &0.362261E-01,0.463223E-02,0.534297E-05,0.687330E-05,0.539102E-05,
     &0.534297E-05,0.593317E-03,0.928176E-06,0.318459E-01,0.401364E-02,
     &0.464848E-05,0.610690E-05,0.469333E-05,0.464848E-05,0.513720E-03,
     &0.939174E-06,0.279510E-01,0.347266E-02,0.404483E-05,0.542054E-05,
     &0.408628E-05,0.404483E-05,0.442713E-03,0.932117E-06,0.244935E-01,
     &0.300029E-02,0.351893E-05,0.480507E-05,0.355692E-05,0.351893E-05,
     &0.379744E-03,0.910085E-06,0.214299E-01,0.258845E-02,0.306021E-05/
      DATA (DL(K),K= 3316, 3400) /
     &0.425313E-05,0.309476E-05,0.306021E-05,0.324785E-03,0.876365E-06,
     &0.187200E-01,0.222996E-02,0.265958E-05,0.375823E-05,0.269081E-05,
     &0.265958E-05,0.277080E-03,0.833755E-06,0.163273E-01,0.191840E-02,
     &0.230942E-05,0.331477E-05,0.233747E-05,0.230942E-05,0.235661E-03,
     &0.784780E-06,0.142185E-01,0.164805E-02,0.200337E-05,0.291797E-05,
     &0.202844E-05,0.200337E-05,0.199949E-03,0.731774E-06,0.123631E-01,
     &0.141382E-02,0.173596E-05,0.256351E-05,0.175824E-05,0.173596E-05,
     &0.169376E-03,0.676674E-06,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.794823E-01,0.948208E-02,0.607312E-05,0.607312E-05,0.607312E-05,
     &0.607312E-05,0.497062E-03,-.140523E-17,0.699344E-01,0.820355E-02,
     &0.500852E-05,0.538347E-05,0.501731E-05,0.500852E-05,0.542262E-03,
     &-.714686E-07,0.614560E-01,0.709106E-02,0.415227E-05,0.479898E-05,
     &0.416702E-05,0.415227E-05,0.549985E-03,-.960102E-07,0.539240E-01,
     &0.612155E-02,0.345977E-05,0.429563E-05,0.347839E-05,0.345977E-05,
     &0.531288E-03,-.894946E-07,0.472426E-01,0.527757E-02,0.289508E-05,
     &0.385164E-05,0.291595E-05,0.289508E-05,0.495120E-03,-.668594E-07/
      DATA (DL(K),K= 3401, 3485) /
     &0.413245E-01,0.454380E-02,0.243524E-05,0.345851E-05,0.245713E-05,
     &0.243524E-05,0.452156E-03,-.338861E-07,0.360903E-01,0.390658E-02,
     &0.205923E-05,0.310726E-05,0.208123E-05,0.205923E-05,0.406686E-03,
     &0.329349E-08,0.314681E-01,0.335393E-02,0.174861E-05,0.278918E-05,
     &0.177007E-05,0.174861E-05,0.359402E-03,0.387747E-07,0.273932E-01,
     &0.287528E-02,0.149082E-05,0.250013E-05,0.151127E-05,0.149082E-05,
     &0.313779E-03,0.705560E-07,0.238068E-01,0.246132E-02,0.127582E-05,
     &0.223699E-05,0.129498E-05,0.127582E-05,0.272195E-03,0.975744E-07,
     &0.206558E-01,0.210383E-02,0.109488E-05,0.199657E-05,0.111257E-05,
     &0.109488E-05,0.234227E-03,0.118651E-06,0.178921E-01,0.179558E-02,
     &0.941584E-06,0.177694E-05,0.957733E-06,0.941584E-06,0.199907E-03,
     &0.133780E-06,0.154726E-01,0.153020E-02,0.811157E-06,0.157680E-05,
     &0.825743E-06,0.811157E-06,0.169849E-03,0.143581E-06,0.133582E-01,
     &0.130209E-02,0.699567E-06,0.139481E-05,0.712624E-06,0.699567E-06,
     &0.143794E-03,0.148591E-06,0.115137E-01,0.110634E-02,0.603631E-06,
     &0.122977E-05,0.615228E-06,0.603631E-06,0.121163E-03,0.149477E-06,
     &0.990774E-02,0.938615E-03,0.520920E-06,0.108072E-05,0.531148E-06/
      DATA (DL(K),K= 3486, 3570) /
     &0.520920E-06,0.101725E-03,0.147055E-06,0.851194E-02,0.795146E-03,
     &0.449441E-06,0.946634E-06,0.458405E-06,0.449441E-06,0.852238E-04,
     &0.142064E-06,0.730103E-02,0.672622E-03,0.387542E-06,0.826497E-06,
     &0.395353E-06,0.387542E-06,0.712290E-04,0.135149E-06,0.625244E-02,
     &0.568155E-03,0.333888E-06,0.719316E-06,0.340658E-06,0.333888E-06,
     &0.593824E-04,0.126902E-06,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.457819E-01,0.409492E-02,0.105702E-05,0.105702E-05,0.105702E-05,
     &0.105702E-05,0.115350E-03,0.265810E-18,0.395724E-01,0.347873E-02,
     &0.812397E-06,0.103880E-05,0.815187E-06,0.812397E-06,0.160406E-03,
     &-.555147E-07,0.341639E-01,0.295295E-02,0.627904E-06,0.987449E-06,
     &0.632305E-06,0.627904E-06,0.174490E-03,-.847266E-07,0.294481E-01,
     &0.250329E-02,0.490075E-06,0.920197E-06,0.495305E-06,0.490075E-06,
     &0.174490E-03,-.944763E-07,0.253423E-01,0.211912E-02,0.387225E-06,
     &0.845257E-06,0.392760E-06,0.387225E-06,0.167111E-03,-.916775E-07,
     &0.217735E-01,0.179138E-02,0.309989E-06,0.766697E-06,0.315473E-06,
     &0.309989E-06,0.152540E-03,-.819158E-07,0.186760E-01,0.151211E-02/
      DATA (DL(K),K= 3571, 3655) /
     &0.252109E-06,0.688927E-06,0.257316E-06,0.252109E-06,0.135295E-03,
     &-.682145E-07,0.159921E-01,0.127447E-02,0.208612E-06,0.614302E-06,
     &0.213410E-06,0.208612E-06,0.118648E-03,-.528734E-07,0.136704E-01,
     &0.107254E-02,0.175203E-06,0.543807E-06,0.179526E-06,0.175203E-06,
     &0.102484E-03,-.379748E-07,0.116656E-01,0.901214E-03,0.149064E-06,
     &0.478363E-06,0.152890E-06,0.149064E-06,0.871530E-04,-.245007E-07,
     &0.993760E-02,0.756074E-03,0.128274E-06,0.418496E-06,0.131610E-06,
     &0.128274E-06,0.735682E-04,-.128491E-07,0.845081E-02,0.633315E-03,
     &0.111313E-06,0.364260E-06,0.114187E-06,0.111313E-06,0.617706E-04,
     &-.327698E-08,0.717398E-02,0.529654E-03,0.971373E-07,0.315568E-06,
     &0.995871E-07,0.971373E-07,0.514764E-04,0.421954E-08,0.607950E-02,
     &0.442265E-03,0.850687E-07,0.272228E-06,0.871375E-07,0.850687E-07,
     &0.426580E-04,0.982709E-08,0.514311E-02,0.368716E-03,0.746164E-07,
     &0.233927E-06,0.763489E-07,0.746164E-07,0.352463E-04,0.137715E-07,
     &0.434349E-02,0.306920E-03,0.654439E-07,0.200291E-06,0.668838E-07,
     &0.654439E-07,0.290260E-04,0.163078E-07,0.366196E-02,0.255085E-03,
     &0.573307E-07,0.170932E-06,0.585192E-07,0.573307E-07,0.238196E-04/
      DATA (DL(K),K= 3656, 3740) /
     &0.177037E-07,0.308217E-02,0.211681E-03,0.501185E-07,0.145441E-06,
     &0.510931E-07,0.501185E-07,0.195033E-04,0.182028E-07,0.258987E-02,
     &0.175396E-03,0.436915E-07,0.123415E-06,0.444860E-07,0.436915E-07,
     &0.159423E-04,0.180204E-07,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.206951E-01,0.123383E-02,0.903693E-07,0.903693E-07,0.903693E-07,
     &0.903693E-07,0.147928E-04,0.131925E-18,0.174566E-01,0.102241E-02,
     &0.892028E-07,0.129792E-07,0.885875E-07,0.892028E-07,0.328931E-04,
     &0.168541E-07,0.147092E-01,0.846741E-03,0.841992E-07,-.346085E-07,
     &0.832249E-07,0.841992E-07,0.410825E-04,0.262547E-07,0.123736E-01,
     &0.700287E-03,0.769173E-07,-.620958E-07,0.757563E-07,0.769173E-07,
     &0.418512E-04,0.305542E-07,0.103910E-01,0.578275E-03,0.688622E-07,
     &-.753692E-07,0.676306E-07,0.688622E-07,0.392599E-04,0.318183E-07,
     &0.871109E-02,0.476815E-03,0.611778E-07,-.782788E-07,0.599557E-07,
     &0.611778E-07,0.356221E-04,0.316149E-07,0.728984E-02,0.392546E-03,
     &0.537256E-07,-.749101E-07,0.525642E-07,0.537256E-07,0.312295E-04,
     &0.301630E-07,0.608951E-02,0.322656E-03,0.466227E-07,-.678673E-07/
      DATA (DL(K),K= 3741, 3825) /
     &0.455521E-07,0.466227E-07,0.265816E-04,0.278681E-07,0.507758E-02,
     &0.264779E-03,0.400790E-07,-.588670E-07,0.391148E-07,0.400790E-07,
     &0.223044E-04,0.251720E-07,0.422604E-02,0.216927E-03,0.341205E-07,
     &-.492124E-07,0.332680E-07,0.341205E-07,0.185283E-04,0.222885E-07,
     &0.351082E-02,0.177427E-03,0.287480E-07,-.397442E-07,0.280058E-07,
     &0.287480E-07,0.152122E-04,0.193702E-07,0.291126E-02,0.144878E-03,
     &0.239699E-07,-.309608E-07,0.233320E-07,0.239699E-07,0.123840E-04,
     &0.165481E-07,0.240962E-02,0.118102E-03,0.197695E-07,-.231453E-07,
     &0.192276E-07,0.197695E-07,0.100316E-04,0.139043E-07,0.199075E-02,
     &0.961132E-04,0.161186E-07,-.164194E-07,0.156628E-07,0.161186E-07,
     &0.808648E-05,0.114903E-07,0.164168E-02,0.780880E-04,0.129826E-07,
     &-.107955E-07,0.126029E-07,0.129826E-07,0.648861E-05,0.933575E-08,
     &0.135135E-02,0.633381E-04,0.103192E-07,-.622051E-08,0.100055E-07,
     &0.103192E-07,0.519042E-05,0.744979E-08,0.111036E-02,0.512898E-04,
     &0.808255E-08,-.260101E-08,0.782557E-08,0.808255E-08,0.414192E-05,
     &0.582811E-08,0.910718E-03,0.414657E-04,0.622640E-08,0.177583E-09,
     &0.601750E-08,0.622640E-08,0.329729E-05,0.445766E-08,0.745657E-03/
      DATA (DL(K),K= 3826, 3910) /
     &0.334694E-04,0.470431E-08,0.223586E-08,0.453577E-08,0.470431E-08,
     &0.261981E-05,0.331859E-08,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,
     &0.519165E-02,0.154752E-03,0.135983E-08,0.135983E-08,0.135983E-08,
     &0.135983E-08,0.445189E-06,0.165858E-19,0.420352E-02,0.123002E-03,
     &-.202651E-07,0.730203E-07,-.200511E-07,-.202651E-07,0.358557E-05,
     &-.213089E-07,0.340143E-02,0.977718E-04,-.356451E-07,0.114908E-06,
     &-.353066E-07,-.356451E-07,0.384652E-05,-.364475E-07,0.274771E-02,
     &0.776124E-04,-.435588E-07,0.139200E-06,-.431556E-07,-.435588E-07,
     &0.404834E-05,-.441752E-07,0.221524E-02,0.614950E-04,-.471629E-07,
     &0.150069E-06,-.467352E-07,-.471629E-07,0.391615E-05,-.476355E-07,
     &0.178268E-02,0.486476E-04,-.477545E-07,0.151420E-06,-.473296E-07,
     &-.477545E-07,0.334100E-05,-.481163E-07,0.143185E-02,0.384202E-04,
     &-.462359E-07,0.146515E-06,-.458316E-07,-.462359E-07,0.275426E-05,
     &-.465126E-07,0.114781E-02,0.302894E-04,-.434031E-07,0.137587E-06,
     &-.430295E-07,-.434031E-07,0.226010E-05,-.436143E-07,0.918288E-03,
     &0.238367E-04,-.398089E-07,0.126321E-06,-.394715E-07,-.398089E-07/
      DATA (DL(K),K= 3911, 3995) /
     &0.180947E-05,-.399700E-07,0.733193E-03,0.187249E-04,-.358525E-07,
     &0.113940E-06,-.355529E-07,-.358525E-07,0.142045E-05,-.359751E-07,
     &0.584227E-03,0.146823E-04,-.318183E-07,0.101291E-06,-.315563E-07,
     &-.318183E-07,0.110919E-05,-.319115E-07,0.464586E-03,0.114914E-04,
     &-.278936E-07,0.889550E-07,-.276671E-07,-.278936E-07,0.860964E-06,
     &-.279643E-07,0.368700E-03,0.897731E-05,-.241972E-07,0.773096E-07,
     &-.240033E-07,-.241972E-07,0.662825E-06,-.242508E-07,0.292013E-03,
     &0.700034E-05,-.208001E-07,0.665779E-07,-.206356E-07,-.208001E-07,
     &0.508061E-06,-.208406E-07,0.230814E-03,0.544870E-05,-.177366E-07,
     &0.568734E-07,-.175982E-07,-.177366E-07,0.388493E-06,-.177672E-07,
     &0.182078E-03,0.423324E-05,-.150157E-07,0.482316E-07,-.149000E-07,
     &-.150157E-07,0.296111E-06,-.150387E-07,0.143349E-03,0.328297E-05,
     &-.126295E-07,0.406343E-07,-.125335E-07,-.126295E-07,0.225104E-06,
     &-.126468E-07,0.112639E-03,0.254145E-05,-.105595E-07,0.340280E-07,
     &-.104803E-07,-.105595E-07,0.170871E-06,-.105726E-07,0.883377E-04,
     &0.196395E-05,-.878062E-08,0.283380E-07,-.871555E-08,-.878062E-08,
     &0.129517E-06,-.879039E-08,0.000000E+00,0.000000E+00,0.000000E+00/
      DATA (DL(K),K= 3996, 4000) /
     &0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00/
C
      ANS = 0.
      IF (X.GT.0.9985) RETURN
      IF ( ((I.EQ.3).OR.(I.EQ.8)) .AND. (X.GT.0.95) ) RETURN
C
      IS  = S/DELTA+1
      IS1 = IS+1
      DO 1 L=1,25
         KL    = L+NDRV*25
         F1(L) = GF(I,IS,KL)
         F2(L) = GF(I,IS1,KL)
    1 CONTINUE
      A1 = DT_CKMTFF(X,F1)
      A2 = DT_CKMTFF(X,F2)
C      A1=ALOG(A1)
C      A2=ALOG(A2)
      S1  = (IS-1)*DELTA
      S2  = S1+DELTA
      ANS = A1*(S-S2)/(S1-S2)+A2*(S-S1)/(S2-S1)
C      ANS=EXP(ANS)
      RETURN
      END
C
CDECK  ID>, DT_CKMTFF
      FUNCTION DT_CKMTFF(X,FVL)
C**********************************************************************
C
C     LOGARITHMIC INTERPOLATOR - WATCH OUT FOR NEGATIVE
C     FUNCTIONS AND/OR X VALUES OUTSIDE THE RANGE 0 TO 1.
C     NOTE: DIMENSION OF FVL IS OVERWRITTEN BY VALUE USED
C     IN MAIN ROUTINE.
C
C**********************************************************************

      SAVE
      DIMENSION FVL(25),XGRID(25)
      DATA NX,XGRID/25,.001,.002,.004,.008,.016,.032,.064,.1,.15,
     *.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95/
C
      DT_CKMTFF=0.
      DO 1 I=1,NX
      IF(X.LT.XGRID(I)) GO TO 2
    1 CONTINUE
    2 I=I-1
      IF(I.EQ.0) THEN
         I=I+1
      ELSE IF(I.GT.23) THEN
         I=23
      ENDIF
      J=I+1
      K=J+1
      AXI=LOG(XGRID(I))
      BXI=LOG(1.-XGRID(I))
      AXJ=LOG(XGRID(J))
      BXJ=LOG(1.-XGRID(J))
      AXK=LOG(XGRID(K))
      BXK=LOG(1.-XGRID(K))
      FI=LOG(ABS(FVL(I)) +1.E-15)
      FJ=LOG(ABS(FVL(J)) +1.E-16)
      FK=LOG(ABS(FVL(K)) +1.E-17)
      DET=AXI*(BXJ-BXK)+AXJ*(BXK-BXI)+AXK*(BXI-BXJ)
      ALOGA=(FI*(AXJ*BXK-AXK*BXJ)+FJ*(AXK*BXI-AXI*BXK)+FK*(AXI*BXJ-AXJ*
     $ BXI))/DET
      ALPHA=(FI*(BXJ-BXK)+FJ*(BXK-BXI)+FK*(BXI-BXJ))/DET
      BETA=(FI*(AXK-AXJ)+FJ*(AXI-AXK)+FK*(AXJ-AXI))/DET
      IF(ABS(ALPHA).GT.99..OR.ABS(BETA).GT.99..OR.ABS(ALOGA).GT.99.)
     1RETURN
C      IF(ALPHA.GT.50..OR.BETA.GT.50.) THEN
C         WRITE(6,2001) X,FVL
C 2001    FORMAT(8E12.4)
C         WRITE(6,2001) ALPHA,BETA,ALOGA,DET
C      ENDIF
      DT_CKMTFF=EXP(ALOGA)*X**ALPHA*(1.-X)**BETA
      RETURN
      END
c
c===fluini=============================================================*
c
CDECK  ID>, DT_FLUINI
      SUBROUTINE DT_FLUINI

c***********************************************************************
c Initialisation of the nucleon-nucleon cross section fluctuation      *
c treatment. The original version by J. Ranft.                         *
c This version dated 21.04.95 is revised by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,TINY10=1.0D-10,ONE=1.0D0,TWO=2.0D0)

      PARAMETER ( A     = 0.1D0,
     &            B     = 0.893D0,
     &            OM    = 1.1D0,
     &            N     = 6,
     &            DX    = 0.003D0)

c n-n cross section fluctuations
      PARAMETER (NBINS = 1000)
      COMMON /DTXSFL/ FLUIXX(NBINS),IFLUCT

      DIMENSION FLUSI(NBINS),FLUIX(NBINS)

      WRITE(ErrorOut,1000)
 1000 FORMAT(/,1X,'FLUINI:  HADRONIC CROSS SECTION FLUCTUATIONS ',
     &       'TREATED')

      FLUSU  = ZERO
      FLUSUU = ZERO

      DO 1 I=1,NBINS
         X        = DBLE(I)*DX
         FLUIX(I) = X
         FLUS     = ((X-B)/(OM*B))**N
         IF (FLUS.LE.20.0D0) THEN
            FLUSI(I) = (X/B)*EXP(-FLUS)/(X/B+A)
         ELSE
            FLUSI(I) = ZERO
         ENDIF
         FLUSU = FLUSU+FLUSI(I)
    1 CONTINUE
      DO 2 I=1,NBINS
         FLUSUU   = FLUSUU+FLUSI(I)/FLUSU
         FLUSI(I) = FLUSUU
    2 CONTINUE

C     WRITE(LOUT,1001)
C1001 FORMAT(1X,'FLUCTUATIONS')
C     CALL PLOT(FLUIX,FLUSI,1000,1,1000,0.0D0,0.06D0,0.0D0,0.01D0)

      DO 3 I=1,NBINS
         AF = DBLE(I)*0.001D0
         DO 4 J=1,NBINS
            IF (AF.LE.FLUSI(J)) THEN
               FLUIXX(I) = FLUIX(J)
               GOTO 5
            ENDIF
    4    CONTINUE
    5    CONTINUE
    3 CONTINUE
      FLUIXX(1)     = FLUIX(1)
      FLUIXX(NBINS) = FLUIX(NBINS)

      RETURN
      END
c
c===sigtab=============================================================*
c
CDECK  ID>, DT_SIGTBL
      SUBROUTINE DT_SIGTBL(JP,JT,PTOT,SIGE,MODE)

c***********************************************************************
c This version dated 18.11.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER (TINY10=1.0D-10,TINY2=1.0D-2,ZERO=0.0D0,DLARGE=1.0D10,
     &           OHALF=0.5D0,ONE=1.0D0)
      PARAMETER (PLO=0.01D0,PHI=20.0D0,NBINS=150)

      LOGICAL LINIT

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      DIMENSION SIGEP(5,NBINS+1),SIGEN(5,NBINS+1),IDSIG(23)
      DATA IDSIG / 1, 0, 0, 0, 0, 0, 0, 2, 0, 0,
     &             0, 0, 3, 4, 0, 0, 0, 0, 0, 0,
     &             0, 0, 5/
      DATA LINIT /.FALSE./

c precalculation and tabulation of elastic cross sections
      IF (ABS(MODE).EQ.1) THEN
         IF (MODE.EQ.1)
     &      OPEN(LLOOK,FILE='OUTDATA0/SIGTAB.OUT',STATUS='UNKNOWN')
         PLABLX = LOG10(PLO)
         PLABHX = LOG10(PHI)
         DPLAB  = (PLABHX-PLABLX)/DBLE(NBINS)
         DO 1 I=1,NBINS+1
            PLAB = PLABLX+DBLE(I-1)*DPLAB
            PLAB = 10**PLAB
            DO 2 IPROJ=1,23
               IDX = IDSIG(IPROJ)
               IF (IDX.GT.0) THEN
C                 CALL DT_SIHNEL(IPROJ,1,PLAB,SIGEP(IDX,I))
C                 CALL DT_SIHNEL(IPROJ,8,PLAB,SIGEN(IDX,I))
                  DUMZER = ZERO
                  CALL DT_XSHN(IPROJ,1,PLAB,DUMZER,SIGTOT,SIGEP(IDX,I))
                  CALL DT_XSHN(IPROJ,8,PLAB,DUMZER,SIGTOT,SIGEN(IDX,I))
               ENDIF
    2       CONTINUE
            IF (MODE.EQ.1) THEN
               WRITE(LLOOK,1000) PLAB,(SIGEP(IDX,I),IDX=1,5),
     &                                (SIGEN(IDX,I),IDX=1,5)
 1000          FORMAT(F5.1,10F7.2)
            ENDIF
    1    CONTINUE
         IF (MODE.EQ.1) CLOSE(LLOOK)
         LINIT = .TRUE.
      ELSE
         SIGE = -ONE
         IF (LINIT.AND.(JP.LE.23).AND.(PTOT.GE.PLO)
     &                           .AND.(PTOT.LE.PHI) ) THEN
            IDX = IDSIG(JP)
            IF ( (IDX.GT.0).AND.((JT.EQ.1).OR.(JT.EQ.8)) ) THEN
               PLABX = LOG10(PTOT)
               IF (PLABX.LE.PLABLX) THEN
                  I1 = 1
                  I2 = 1
               ELSEIF (PLABX.GE.PLABHX) THEN
                  I1 = NBINS+1
                  I2 = NBINS+1
               ELSE
                  I1 = INT((PLABX-PLABLX)/DPLAB)+1
                  I2 = I1+1
               ENDIF
               PLAB1X = PLABLX+DBLE(I1-1)*DPLAB
               PLAB2X = PLABLX+DBLE(I2-1)*DPLAB
               PBIN   = PLAB2X-PLAB1X
               IF (PBIN.GT.TINY10) THEN
                  RATX = (PLABX-PLAB1X)/(PLAB2X-PLAB1X)
               ELSE
                  RATX = ZERO
               ENDIF
               IF (JT.EQ.1) THEN
                  SIG1 = SIGEP(IDX,I1)
                  SIG2 = SIGEP(IDX,I2)
               ELSE
                  SIG1 = SIGEN(IDX,I1)
                  SIG2 = SIGEN(IDX,I2)
               ENDIF
               SIGE = SIG1+RATX*(SIG2-SIG1)
            ENDIF
         ENDIF
      ENDIF

      RETURN
      END
c
c===xstabl=============================================================*
c
CDECK  ID>, DT_XSTABL
      SUBROUTINE DT_XSTABL(WHAT,IXSQEL,IRATIO)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY2=1.0D-2,ZERO=0.0D0,DLARGE=1.0D10,
     &           OHALF=0.5D0,ONE=1.0D0,TWO=2.0D0)
      LOGICAL LLAB,LELOG,LQLOG

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL


      DIMENSION WHAT(6)

      LLAB   = (WHAT(1).GT.ZERO).OR.(WHAT(2).GT.ZERO)
      ELO    = ABS(WHAT(1))
      EHI    = ABS(WHAT(2))
      IF (ELO.GT.EHI) ELO = EHI
      LELOG  = WHAT(3).LT.ZERO
      NEBINS = MAX(INT(ABS(WHAT(3))),1)
      DEBINS = (EHI-ELO)/DBLE(NEBINS)
      IF (LELOG) THEN
         AELO   = LOG10(ELO)
         AEHI   = LOG10(EHI)
         ADEBIN = (AEHI-AELO)/DBLE(NEBINS)
      ENDIF
      Q2LO   = WHAT(4)
      Q2HI   = WHAT(5)
      IF (Q2LO.GT.Q2HI) Q2LO = Q2HI
      LQLOG  = WHAT(6).LT.ZERO
      NQBINS = MAX(INT(ABS(WHAT(6))),1)
      DQBINS = (Q2HI-Q2LO)/DBLE(NQBINS)
      IF (LQLOG) THEN
         AQ2LO  = LOG10(Q2LO)
         AQ2HI  = LOG10(Q2HI)
         ADQBIN = (AQ2HI-AQ2LO)/DBLE(NQBINS)
      ENDIF

      IF ( ELO.EQ. EHI) NEBINS = 0
      IF (Q2LO.EQ.Q2HI) NQBINS = 0

      WRITE(ErrorOut,
     * 1000) ELO,EHI,LLAB,IXSQEL,Q2LO,Q2HI,IJPROJ,IP,IT
 1000 FORMAT(/,1X,'XSTABL:  E_LO  =',E10.3,' GEV  E_HI  =',E10.3,
     &       ' GEV     LAB = ',L1,'  QEL: ',I2,/,10X,'Q2_LO =',F10.5,
     &       ' GEV^2  Q2_HI =',F10.5,' GEV^2',/,10X,'ID_P = ',I2,
     &       '   A_P = ',I3,'   A_T = ',I3,/)

C     IF (IJPROJ.NE.7) THEN
         WRITE(ErrorOut,
     * '(1X,A,/)')'(E,STOT,SELA,SQEP,SQET,SQE2,SINE,SPROD)'
c normalize fractions of emulsion components
         IF (NCOMPO.GT.0) THEN
            SUMFRA = ZERO
            DO 10 I=1,NCOMPO
               SUMFRA = SUMFRA+EMUFRA(I)
   10       CONTINUE
            IF (SUMFRA.GT.ZERO) THEN
               DO 11 I=1,NCOMPO
                  EMUFRA(I) = EMUFRA(I)/SUMFRA
   11          CONTINUE
            ENDIF
         ENDIF
C     ELSE
C        WRITE(LOUT,'(1X,A,/)') '(Q2,E,STOT,ETOT,SIN,EIN,STOT0)'
C     ENDIF
      DO 1 I=1,NEBINS+1
         IF (LELOG) THEN
            E = 10**(AELO+DBLE(I-1)*ADEBIN)
         ELSE
            E = ELO+DBLE(I-1)*DEBINS
         ENDIF
         DO 2 J=1,NQBINS+1
            IF (LQLOG) THEN
               Q2 = 10**(AQ2LO+DBLE(J-1)*ADQBIN)
            ELSE
               Q2 = Q2LO+DBLE(J-1)*DQBINS
            ENDIF
c            IF (IJPROJ.NE.7) THEN
               IF (LLAB) THEN
                  PLAB = ZERO
                  ECM  = ZERO
                  CALL DT_LTINI(IJPROJ,1,E,PPN0,ECM,0)
               ELSE
                  ECM = E
               ENDIF
               XI  = ZERO
               Q2I = ZERO
               IF (IJPROJ.EQ.7) Q2I = Q2
               IF (NCOMPO.GT.0) THEN
                  DO 20 IC=1,NCOMPO
                     IIT = IEMUMA(IC)
                     CALL DT_XSGLAU(IP,IIT,IJPROJ,XI,Q2I,ECM,1,1,-IC)
   20             CONTINUE
               ELSE
                  CALL DT_XSGLAU(IP,IT,IJPROJ,XI,Q2I,ECM,1,1,-1)
C                 CALL AMPLIT(IP,IT,IJPROJ,XI,Q2I,ECM,1,1,1)
               ENDIF
               IF (NCOMPO.GT.0) THEN
                  XTOT = ZERO
                  ETOT = ZERO
                  XELA = ZERO
                  EELA = ZERO
                  XQEP = ZERO
                  EQEP = ZERO
                  XQET = ZERO
                  EQET = ZERO
                  XQE2 = ZERO
                  EQE2 = ZERO
                  XPRO = ZERO
                  EPRO = ZERO
                  XPRO1= ZERO
                  XDEL = ZERO
                  EDEL = ZERO
                  XDQE = ZERO
                  EDQE = ZERO
                  DO 21 IC=1,NCOMPO
                     XTOT = XTOT+EMUFRA(IC)*XSTOT(1,1,IC)
                     ETOT = ETOT+EMUFRA(IC)*XETOT(1,1,IC)**2
                     XELA = XELA+EMUFRA(IC)*XSELA(1,1,IC)
                     EELA = EELA+EMUFRA(IC)*XEELA(1,1,IC)**2
                     XQEP = XQEP+EMUFRA(IC)*XSQEP(1,1,IC)
                     EQEP = EQEP+EMUFRA(IC)*XEQEP(1,1,IC)**2
                     XQET = XQET+EMUFRA(IC)*XSQET(1,1,IC)
                     EQET = EQET+EMUFRA(IC)*XEQET(1,1,IC)**2
                     XQE2 = XQE2+EMUFRA(IC)*XSQE2(1,1,IC)
                     EQE2 = EQE2+EMUFRA(IC)*XEQE2(1,1,IC)**2
                     XPRO = XPRO+EMUFRA(IC)*XSPRO(1,1,IC)
                     EPRO = EPRO+EMUFRA(IC)*XEPRO(1,1,IC)**2
                     XDEL = XDEL+EMUFRA(IC)*XSDEL(1,1,IC)
                     EDEL = EDEL+EMUFRA(IC)*XEDEL(1,1,IC)**2
                     XDQE = XDQE+EMUFRA(IC)*XSDQE(1,1,IC)
                     EDQE = EDQE+EMUFRA(IC)*XEDQE(1,1,IC)**2
                     YPRO = XSTOT(1,1,IC)-XSELA(1,1,IC)
     &                     -XSQEP(1,1,IC)-XSQET(1,1,IC)
     &                     -XSQE2(1,1,IC)
                     XPRO1= XPRO1+EMUFRA(IC)*YPRO
   21             CONTINUE
                  ETOT = SQRT(ETOT)
                  EELA = SQRT(EELA)
                  EQEP = SQRT(EQEP)
                  EQET = SQRT(EQET)
                  EQE2 = SQRT(EQE2)
                  EPRO = SQRT(EPRO)
                  EDEL = SQRT(EDEL)
                  EDQE = SQRT(EDQE)
                  WRITE(ErrorOut,'(8E9.3)')
     &               E,XTOT,XELA,XQEP,XQET,XQE2,XPRO,XPRO1
C                 WRITE(LOUT,'(4E9.3)')
C    &               E,XDEL,XDQE,XDEL+XDQE
               ELSE
                  WRITE(ErrorOut,'(11E10.3)')
     &              E,
     &              XSTOT(1,1,1),XSELA(1,1,1),XSQEP(1,1,1),XSQET(1,1,1),
     &              XSQE2(1,1,1),XSPRO(1,1,1),
     &              XSTOT(1,1,1)-XSELA(1,1,1)-XSQEP(1,1,1)-XSQET(1,1,1)
     &             -XSQE2(1,1,1),XSDEL(1,1,1),XSDQE(1,1,1),
     &              XSDEL(1,1,1)+XSDQE(1,1,1)
C                 WRITE(LOUT,'(4E9.3)') E,XSDEL(1,1,1),XSDQE(1,1,1),
C    &                                    XSDEL(1,1,1)+XSDQE(1,1,1)
               ENDIF
c            ELSE
c               IF (LLAB) THEN
c                  IF (IT.GT.1) THEN
c                     IF (IXSQEL.EQ.0) THEN
cC                       CALL DT_SIGGA(IT,  Q2, E,ZERO,ZERO,
cC                       CALL DT_SIGGA(IT,   E,Q2,ZERO,ZERO,
c                        CALL DT_SIGGA(IT,ZERO,Q2,ZERO,E,
c     &                             STOT,ETOT,SIN,EIN,STOT0)
c                        IF (IRATIO.EQ.1) THEN
c                           CALL DT_SIGGP(  Q2, E,ZERO,ZERO,STGP,SIGP,SDGP)
cC                          CALL DT_SIGGP(   E,Q2,ZERO,ZERO,STGP,SIGP,SDGP)
cC                          CALL DT_SIGGP(ZERO,Q2,ZERO,E,STGP,SIGP,SDGP)
c*!! save cross sections
c                           STOTA = STOT
c                           ETOTA = ETOT
c                           STOTP = STGP
c*!!
c                           STOT  = STOT/(DBLE(IT)*STGP)
c                           SIN   =  SIN/(DBLE(IT)*SIGP)
c                           STOT0 = STGP
c                           ETOT  = ZERO
c                           EIN   = ZERO
c                        ENDIF
c                     ELSE
c                        WRITE(LOUT,*)
c     &                  ' XSTABL:  qel. xs. not implemented for nuclei'
c                        STOP
c                     ENDIF
c                  ELSE
c                     ETOT = ZERO
c                     EIN  = ZERO
c                     STOT0= ZERO
c                     IF (IXSQEL.EQ.0) THEN
c                        CALL DT_SIGGP(ZERO,Q2,ZERO,E,STOT,SIN,SDIR)
c                     ELSE
c                       SIN = ZERO
c                       CALL DT_SIGVEL(ZERO,Q2,ZERO,E,IXSQEL,STOT,SIN,STOT0)
c                     ENDIF
c                  ENDIF
c               ELSE
c                  IF (IT.GT.1) THEN
c                     IF (IXSQEL.EQ.0) THEN
c                        CALL DT_SIGGA(IT,ZERO,Q2,E,ZERO,
c     &                             STOT,ETOT,SIN,EIN,STOT0)
c                        IF (IRATIO.EQ.1) THEN
c                           CALL DT_SIGGP(ZERO,Q2,E,ZERO,STGP,SIGP,SDGP)
c*!! save cross sections
c                           STOTA = STOT
c                           ETOTA = ETOT
c                           STOTP = STGP
c*!!
c                           STOT  = STOT/(DBLE(IT)*STGP)
c                           SIN   =  SIN/(DBLE(IT)*SIGP)
c                           STOT0 = STGP
c                           ETOT  = ZERO
c                           EIN   = ZERO
c                        ENDIF
c                     ELSE
c                        WRITE(LOUT,*)
c     &                  ' XSTABL:  qel. xs. not implemented for nuclei'
c                        STOP
c                     ENDIF
c                  ELSE
c                     ETOT = ZERO
c                     EIN  = ZERO
c                     STOT0= ZERO
c                     IF (IXSQEL.EQ.0) THEN
c                        CALL DT_SIGGP(ZERO,Q2,E,ZERO,STOT,SIN,SDIR)
c                     ELSE
c                       SIN = ZERO
c                       CALL DT_SIGVEL(ZERO,Q2,E,ZERO,IXSQEL,STOT,SIN,STOT0)
c                     ENDIF
c                  ENDIF
c               ENDIF
cC              WRITE(LOUT,'(1X,7E10.3)')Q2,E,STOT,STOTA,ETOTA,STOTP,ZERO
cC              WRITE(LOUT,'(1X,7E10.3)')Q2,E,STOT,ETOT,SIN,EIN,SDIR
cC              WRITE(LOUT,'(1X,7E10.3)')Q2,E,STOT,ETOT,SIN,EIN,STOT0
c               WRITE(LOUT,'(1X,6E10.3)')Q2,E,STOT,ETOT,SIN,EIN
c            ENDIF
    2    CONTINUE
    1 CONTINUE

      RETURN
      END
c
c===testxs=============================================================*
c
CDECK  ID>, DT_TESTXS
      SUBROUTINE DT_TESTXS

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION XSTOT(26,2),XSELA(26,2)

      OPEN(10,FILE='TESTXS_PTOT.OUT',STATUS='UNKNOWN')
      OPEN(11,FILE='TESTXS_PELA.OUT',STATUS='UNKNOWN')
      OPEN(12,FILE='TESTXS_NTOT.OUT',STATUS='UNKNOWN')
      OPEN(13,FILE='TESTXS_NELA.OUT',STATUS='UNKNOWN')
      DUMECM = 0.0D0
      PLABL = 0.01D0
      PLABH = 10000.0D0
      NBINS = 120
      APLABL = LOG10(PLABL)
      APLABH = LOG10(PLABH)
      ADPLAB = (APLABH-APLABL)/DBLE(NBINS)
      DO 1 I=1,NBINS+1
         ADP = APLABL+DBLE(I-1)*ADPLAB
         P = 10.0D0**ADP
         DO 2 J=1,26
            CALL DT_XSHN(J,1,P,DUMECM,XSTOT(J,1),XSELA(J,1))
            CALL DT_XSHN(J,8,P,DUMECM,XSTOT(J,2),XSELA(J,2))
    2    CONTINUE
         WRITE(10,1000) P,(XSTOT(K,1),K=1,26)
         WRITE(11,1000) P,(XSELA(K,1),K=1,26)
         WRITE(12,1000) P,(XSTOT(K,2),K=1,26)
         WRITE(13,1000) P,(XSELA(K,2),K=1,26)
    1 CONTINUE
 1000 FORMAT(F8.3,26F9.3)

      RETURN
      END
c***********************************************************************
c                                                                      *
c  DTUNUC 2.0:   library routines                                      *
c                                   processed by S. Roesler, 6.5.95    *
c                                                                      *
c***********************************************************************
c
c     1) Handling of parton momenta
c          SUBROUTINE MASHEL
c          SUBROUTINE DFERMI
c
c     2) Handling of parton flavors and particle indices
c          INTEGER FUNCTION IPDG2B
c          INTEGER FUNCTION IB2PDG
c          INTEGER FUNCTION IQUARK
c          INTEGER FUNCTION IBJQUA
c          INTEGER FUNCTION ICIHAD
c          INTEGER FUNCTION IPDGHA
c          INTEGER FUNCTION MCHAD
c          SUBROUTINE FLAHAD
c
c     3) Energy-momentum and quantum number conservation check routines
c          SUBROUTINE EMC1
c          SUBROUTINE EMC2
c          SUBROUTINE EVTEMC
c          SUBROUTINE EVTFLC
c          SUBROUTINE EVTCHG
c
c     4) Transformations
c          SUBROUTINE LTINI
c          SUBROUTINE LTRANS
c          SUBROUTINE LTNUC
c          SUBROUTINE DALTRA
c          SUBROUTINE DTRAFO
c          SUBROUTINE STTRAN
c          SUBROUTINE MYTRAN
c          SUBROUTINE LT2LAO
c          SUBROUTINE LT2LAB
c
c     5) Sampling from distributions
c          INTEGER FUNCTION NPOISS
c          DOUBLE PRECISION FUNCTION SAMPXB
c          DOUBLE PRECISION FUNCTION SAMPEX
c          DOUBLE PRECISION FUNCTION SAMSQX
c          DOUBLE PRECISION FUNCTION BETREJ
c          DOUBLE PRECISION FUNCTION DGAMRN
c          DOUBLE PRECISION FUNCTION DBETAR
c          SUBROUTINE RANNOR
c          SUBROUTINE DPOLI
c          SUBROUTINE DSFECF
c          SUBROUTINE RACO
c
c     6) Special functions, algorithms and service routines
c          DOUBLE PRECISION FUNCTION YLAMB
c          SUBROUTINE SORT
c          SUBROUTINE SORT1
c          SUBROUTINE DT_XTIME
c
c     7) Random number generator package
c          DOUBLE PRECISION FUNCTION DT_RNDM
c          SUBROUTINE DT_RNDMST
c          SUBROUTINE DT_RNDMIN
c          SUBROUTINE DT_RNDMOU
c          SUBROUTINE DT_RNDMTE
c
c***********************************************************************
c                                                                      *
c                 1) Handling of parton momenta                        *
c                                                                      *
c***********************************************************************
c
c===mashel=============================================================*
c
CDECK  ID>, DT_MASHEL
      SUBROUTINE DT_MASHEL(PA1,PA2,XM1,XM2,P1,P2,IREJ)

c***********************************************************************
c                                                                      *
c    rescaling of momenta of two partons to put both                   *
c                                       on mass shell                  *
c                                                                      *
c    input:       PA1,PA2   input momentum vectors                     *
c                 XM1,2     desired masses of particles afterwards     *
c                 P1,P2     changed momentum vectors                   *
c                                                                      *
c The original version is written by R. Engel.                         *
c This version dated 12.12.94 is modified by S. Roesler.               *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ONE=1.0D0,ZERO=0.0D0)

      DIMENSION PA1(4),PA2(4),P1(4),P2(4)

      IREJ = 0

c Lorentz transformation into system CMS
      PX  = PA1(1)+PA2(1)
      PY  = PA1(2)+PA2(2)
      PZ  = PA1(3)+PA2(3)
      EE  = PA1(4)+PA2(4)
      XPTOT = SQRT(PX**2+PY**2+PZ**2)
      XMS   = (EE-XPTOT)*(EE+XPTOT)
      IF(XMS.LT.(XM1+XM2)**2) THEN
C        WRITE(LOUT,'(3E12.4)')XMS,XM1,XM2
         GOTO 9999
      ENDIF
      XMS = SQRT(XMS)
      BGX = PX/XMS
      BGY = PY/XMS
      BGZ = PZ/XMS
      GAM = EE/XMS
      CALL DT_DALTRA(GAM,-BGX,-BGY,-BGZ,PA1(1),PA1(2),PA1(3),
     &           PA1(4),PTOT1,P1(1),P1(2),P1(3),P1(4))
c rotation angles
      COD = P1(3)/PTOT1
C     SID = SQRT((ONE-COD)*(ONE+COD))
      PPT = SQRT(P1(1)**2+P1(2)**2)
      SID = PPT/PTOT1
      COF = ONE
      SIF = ZERO
      IF(PTOT1*SID.GT.TINY10) THEN
         COF   = P1(1)/(SID*PTOT1)
         SIF   = P1(2)/(SID*PTOT1)
         ANORF = SQRT(COF*COF+SIF*SIF)
         COF   = COF/ANORF
         SIF   = SIF/ANORF
      ENDIF
c new CM momentum and energies (for masses XM1,XM2)
      XM12 = SIGN(XM1**2,XM1)
      XM22 = SIGN(XM2**2,XM2)
      SS   = XMS**2
      PCMP = DT_YLAMB(SS,XM12,XM22)/(2.D0*XMS)
      EE1  = SQRT(XM12+PCMP**2)
      EE2  = XMS-EE1
c back rotation
      MODE = 1
      CALL DT_MYTRAN(MODE,ZERO,ZERO,PCMP,COD,SID,COF,SIF,XX,YY,ZZ)
      CALL DT_DALTRA(GAM,BGX,BGY,BGZ,XX,YY,ZZ,EE1,
     &            PTOT1,P1(1),P1(2),P1(3),P1(4))
      CALL DT_DALTRA(GAM,BGX,BGY,BGZ,-XX,-YY,-ZZ,EE2,
     &            PTOT2,P2(1),P2(2),P2(3),P2(4))
c check consistency
      DEL = XMS*0.0001D0
      IF (ABS(PX-P1(1)-P2(1)).GT.DEL) THEN
        IDEV = 1
      ELSEIF (ABS(PY-P1(2)-P2(2)).GT.DEL) THEN
        IDEV = 2
      ELSEIF (ABS(PZ-P1(3)-P2(3)).GT.DEL) THEN
        IDEV = 3
      ELSEIF (ABS(EE-P1(4)-P2(4)).GT.DEL) THEN
        IDEV = 4
      ELSE
        IDEV = 0
      ENDIF
      IF (IDEV.NE.0) THEN
         WRITE(ErrorOut,'(/1X,A,I3)')
     &      'MASHEL: INCONSISTENT TRANSFORMATION',IDEV
         WRITE(ErrorOut,
     * '(1X,A)') 'MASHEL: input momenta/masses:'
         WRITE(ErrorOut,'(1X,5E12.5)') (PA1(K),K=1,4),XM1
         WRITE(ErrorOut,'(1X,5E12.5)') (PA2(K),K=1,4),XM2
         WRITE(ErrorOut,'(1X,A)') 'MASHEL: output momenta:'
         WRITE(ErrorOut,'(5X,4E12.5)') (P1(K),K=1,4)
         WRITE(ErrorOut,'(5X,4E12.5)') (P2(K),K=1,4)
      ENDIF
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===dfermi=============================================================*
c
CDECK  ID>, DT_DFERMI
      SUBROUTINE DT_DFERMI(GPART)

c***********************************************************************
c Find largest of three random numbers.                                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION G(3)

      DO 10 I=1,3
        G(I)=DT_RNDM(GPART)
   10 CONTINUE
      IF (G(3).LT.G(2)) GOTO 40
      IF (G(3).LT.G(1)) GOTO 30
      GPART = G(3)
   20 RETURN
   30 GPART = G(1)
      GOTO 20
   40 IF (G(2).LT.G(1)) GOTO 30
      GPART = G(2)
      GOTO 20

      END

c***********************************************************************
c                                                                      *
c         2) Handling of parton flavors and particle indices           *
c                                                                      *
c***********************************************************************
c
c===ipdg2b=============================================================*
c
CDECK  ID>, IDT_IPDG2B
      INTEGER FUNCTION IDT_IPDG2B(ID,NN,MODE)

c***********************************************************************
c                                                                      *
c     conversion of quark numbering scheme                             *
c                                                                      *
c     input:   PDG parton numbering                                    *
c              for diquarks:  NN number of the constituent quark       *
c                             (e.g. ID=2301,NN=1 -> ICONV2=1)          *
c                                                                      *
c     output:  BAMJET particle codes                                   *
c              1 u     7 a-u   (MODE=1)  -1 a-u   (MODE=2)             *
c              2 d     8 a-d             -2 a-d                        *
c              3 s     9 a-s             -3 a-s                        *
c              4 c    10 a-c             -4 a-c                        *
c                                                                      *
c This is a modified version of ICONV2 written by R. Engel.            *
c This version dated 13.12.94 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      IDA = ABS(ID)
c diquarks
      IF (IDA.GT.6) THEN
        KF  = 3
        IF (IDA.GE.1000) KF = 4
        IDA = IDA/(10**(KF-NN))
        IDA = MOD(IDA,10)
      ENDIF
c exchange up and dn quarks
      IF (IDA.EQ.1) THEN
        IDA = 2
      ELSEIF (IDA.EQ.2) THEN
        IDA = 1
      ENDIF
c antiquarks
      IF (ID.LT.0) THEN
         IF (MODE.EQ.1) THEN
            IDA = IDA+6
         ELSE
            IDA = -IDA
         ENDIF
      ENDIF
      IDT_IPDG2B = IDA

      RETURN
      END
c
c===ib2pdg=============================================================*
c
CDECK  ID>, IDT_IB2PDG
      INTEGER FUNCTION IDT_IB2PDG(ID1,ID2,MODE)

c***********************************************************************
c                                                                      *
c     conversion of quark numbering scheme                             *
c                                                                      *
c     input:   BAMJET particle codes                                   *
c              1 u     7 a-u   (MODE=1)  -1 a-u   (MODE=2)             *
c              2 d     8 a-d             -2 a-d                        *
c              3 s     9 a-s             -3 a-s                        *
c              4 c    10 a-c             -4 a-c                        *
c                                                                      *
c     output:  PDG parton numbering                                    *
c                                                                      *
c This version dated 13.12.94 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      DIMENSION IHKKQ(-6:6),IHKKQQ(-3:3,-3:3)
      DATA IHKKQ/-6,-5,-4,-3,-1,-2,0,2,1,3,4,5,6/
      DATA IHKKQQ/-3303,-3103,-3203,0,0,0,0, -3103,-1103,-2103,0,0,0,0,
     &-3203,-2103,-2203,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,2203,2103,3203,
     &0,0,0,0,2103,1103,3103, 0,0,0,0,3203,3103,3303/

      IDA = ID1
      IDB = ID2
      IF (MODE.EQ.1) THEN
         IF (ID1.GT.6) IDA = -(ID1-6)
         IF (ID2.GT.6) IDB = -(ID2-6)
      ENDIF
      IF (ID2.EQ.0) THEN
         IDT_IB2PDG = IHKKQ(IDA)
      ELSE
         IDT_IB2PDG = IHKKQQ(IDA,IDB)
      ENDIF

      RETURN
      END
c
c===ipdgqu=============================================================*
c
CDECK  ID>, IDT_IQUARK
      INTEGER FUNCTION IDT_IQUARK(K,IDBAMJ)

c***********************************************************************
c                                                                      *
c     quark contents according to PDG conventions                      *
c     (random selection in case of quark mixing)                       *
c                                                                      *
c     input:   IDBAMJ BAMJET particle code                             *
c              K      1..3   quark number                              *
c                                                                      *
c     output:  1   d  (anti --> neg.)                                  *
c              2   u                                                   *
c              3   s                                                   *
c              4   c                                                   *
c                                                                      *
c This version written by R. Engel.                                    *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      IQ = IDT_IBJQUA(K,IDBAMJ)
c quark-antiquark
      IF (IQ.GT.6) THEN
         IQ = 6-IQ
      ENDIF
c exchange of up and down
      IF (ABS(IQ).EQ.1) THEN
         IQ = SIGN(2,IQ)
      ELSEIF (ABS(IQ).EQ.2) THEN
         IQ = SIGN(1,IQ)
      ENDIF
      IDT_IQUARK = IQ

      RETURN
      END
c
c===ibamq==============================================================*
c
CDECK  ID>, IDT_IBJQUA
      INTEGER FUNCTION IDT_IBJQUA(K,IDBAMJ)

c***********************************************************************
c                                                                      *
c     quark contents according to BAMJET conventions                   *
c     (random selection in case of quark mixing)                       *
c                                                                      *
c     input:   IDBAMJ BAMJET particle code                             *
c              K      1..3   quark number                              *
c                                                                      *
c     output:  1   u      7   u bar                                    *
c              2   d      8   d bar                                    *
c              3   s      9   s bar                                    *
c              4   c     10   c bar                                    *
c                                                                      *
c This version written by R. Engel.                                    *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION ITAB(3,210)
      DATA ((ITAB(I,K),I=1,3),K=1,30) /
     &    1,  1,  2,   7,  7,  8,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   1,  2,  2,   7,  8,  8,
csr 10.1.94
C    &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   3,  8,  0,
c
     &    1,  8,  0,   2,  7,  0,   1,  9,  0,
csr 10.1.94
C    &    3,  7,  0,   0,  0,  0,   0,  0,  0,
     &    3,  7,  0,   3,  1,  2,   9,  7,  8,
csr 10.1.94
C    &    0,  0,  0,   2,  2,  3,   1,  1,  3,
     &    2,  9,  0,   2,  2,  3,   1,  1,  3,
c
     &    1,  2,  3, 201,202,  0,   2,  9,  0,
     &    3,  8,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0 /
      DATA ((ITAB(I,K),I=1,3),K=31,60) /
     &    3,  9,  0,   1,  8,  0, 203,204,  0,
     &    2,  7,  0,   0,  0,  0,   1,  9,  0,
     &    2,  9,  0,   3,  7,  0,   3,  8,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   1,  1,  1,   1,  1,  2,
     &    1,  2,  2,   2,  2,  2,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0 /
      DATA ((ITAB(I,K),I=1,3),K=61,90) /
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    7,  7,  7,   7,  7,  8,   7,  8,  8,
     &    8,  8,  8,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0 /
      DATA ((ITAB(I,K),I=1,3),K=91,120) /
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   3,  9,  0,
     &    1,  3,  3,   2,  3,  3,   7,  7,  9,
     &    7,  8,  9,   8,  8,  9,   7,  9,  9,
     &    8,  9,  9,   1,  1,  3,   1,  2,  3,
     &    2,  2,  3,   1,  3,  3,   2,  3,  3,
     &    3,  3,  3,   7,  7,  9,   7,  8,  9,
     &    8,  8,  9,   7,  9,  9,   8,  9,  9,
     &    9,  9,  9,   4,  7,  0,   4,  8,  0,
     &    2, 10,  0,   1, 10,  0,   4,  9,  0 /
      DATA ((ITAB(I,K),I=1,3),K=121,150) /
     &    3, 10,  0,   4, 10,  0,   4,  7,  0,
     &    4,  8,  0,   2, 10,  0,   1, 10,  0,
     &    4,  9,  0,   3, 10,  0,   4, 10,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   1,  2,  4,   1,  3,  4,
     &    2,  3,  4,   1,  1,  4,   0,  0,  0,
     &    2,  2,  4,   0,  0,  0,   0,  0,  0,
     &    3,  3,  4,   1,  4,  4,   2,  4,  4,
     &    3,  4,  4,   7,  8, 10,   7,  9, 10 /
      DATA ((ITAB(I,K),I=1,3),K=151,180) /
     &    8,  9, 10,   7,  7, 10,   0,  0,  0,
     &    8,  8, 10,   0,  0,  0,   0,  0,  0,
     &    9,  9, 10,   7, 10, 10,   8, 10, 10,
     &    9, 10, 10,   1,  1,  4,   1,  2,  4,
     &    2,  2,  4,   1,  3,  4,   2,  3,  4,
     &    3,  3,  4,   1,  4,  4,   2,  4,  4,
     &    3,  4,  4,   4,  4,  4,   7,  7, 10,
     &    7,  8, 10,   8,  8, 10,   7,  9, 10,
     &    8,  9, 10,   9,  9, 10,   7, 10, 10,
     &    8, 10, 10,   9, 10, 10,  10, 10, 10 /
      DATA ((ITAB(I,K),I=1,3),K=181,210) /
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   1,  7,  0,
     &    2,  8,  0,   1,  7,  0,   2,  8,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0,
     &    0,  0,  0,   0,  0,  0,   0,  0,  0 /
      DATA IDOLD /0/

      ONE = 1.0D0
      IF (ITAB(1,IDBAMJ).LE.200) THEN
         ID = ITAB(K,IDBAMJ)
      ELSE
         IF(IDOLD.NE.IDBAMJ) THEN
            IT = AINT((ITAB(2,IDBAMJ)-ITAB(1,IDBAMJ)+0.999999D0)*
     &           DT_RNDM(ONE)+ITAB(1,IDBAMJ))
        ELSE
           IDOLD = 0
        ENDIF
        ID = ITAB(K,IT)
      ENDIF
      IDOLD  = IDBAMJ
      IDT_IBJQUA = ID

      RETURN
      END
c
c===icihad=============================================================*
c
CDECK  ID>, IDT_ICIHAD
      INTEGER FUNCTION IDT_ICIHAD(MCIND)

c***********************************************************************
c Conversion of particle index PDG proposal --> BAMJET-index scheme    *
c This is a completely new version dated 25.10.95.                     *
c Renamed to be not in conflict with the modified PHOJET-version       *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c hadron index conversion (BAMJET <--> PDG)
      COMMON /DTHAIC/ IPDG2(2,7),IBAM2(2,7),IPDG3(2,22),IBAM3(2,22),
     &                IPDG4(2,29),IBAM4(2,29),IPDG5(2,19),IBAM5(2,19),
     &                IAMCIN(210)


      IDT_ICIHAD = 0
      KPDG   = ABS(MCIND)
      IF ((KPDG.EQ.0).OR.(KPDG.GT.70000)) RETURN
      IF (MCIND.LT.0) THEN
         JSIGN = 1
      ELSE
         JSIGN = 2
      ENDIF
      IF (KPDG.GE.10000) THEN
         DO 1 I=1,19
            IDT_ICIHAD = IBAM5(JSIGN,I)
            IF (IPDG5(JSIGN,I).EQ.MCIND) GOTO 5
            IDT_ICIHAD = 0
    1    CONTINUE
      ELSEIF (KPDG.GE.1000) THEN
         DO 2 I=1,29
            IDT_ICIHAD = IBAM4(JSIGN,I)
            IF (IPDG4(JSIGN,I).EQ.MCIND) GOTO 5
            IDT_ICIHAD = 0
    2    CONTINUE
      ELSEIF (KPDG.GE.100) THEN
         DO 3 I=1,22
            IDT_ICIHAD = IBAM3(JSIGN,I)
            IF (IPDG3(JSIGN,I).EQ.MCIND) GOTO 5
            IDT_ICIHAD = 0
    3    CONTINUE
      ELSEIF (KPDG.GE.10) THEN
         DO 4 I=1,7
            IDT_ICIHAD = IBAM2(JSIGN,I)
            IF (IPDG2(JSIGN,I).EQ.MCIND) GOTO 5
            IDT_ICIHAD = 0
    4    CONTINUE
      ENDIF
    5 CONTINUE

      RETURN
      END
c
c===ipdgha=============================================================*
c
CDECK  ID>, IDT_IPDGHA
      INTEGER FUNCTION IDT_IPDGHA(MCIND)

c***********************************************************************
c Conversion of particle index BAMJET-index scheme --> PDG proposal    *
c Adopted from the original by S. Roesler. This version dated 12.5.95  *
c Renamed to be not in conflict with the modified PHOJET-version       *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c hadron index conversion (BAMJET <--> PDG)
      COMMON /DTHAIC/ IPDG2(2,7),IBAM2(2,7),IPDG3(2,22),IBAM3(2,22),
     &                IPDG4(2,29),IBAM4(2,29),IPDG5(2,19),IBAM5(2,19),
     &                IAMCIN(210)


      IDT_IPDGHA = IAMCIN(MCIND)

      RETURN
      END
c
c===flahad=============================================================*
c
CDECK  ID>, DT_FLAHAD
      SUBROUTINE DT_FLAHAD(ID,IF1,IF2,IF3)

c***********************************************************************
c sampling of FLAvor composition for HADrons/photons                   *
c              ID         BAMJET-id of hadron                          *
c              IF1,2,3    flavor content                               *
c                         (u,d,s: 1,2,3;  au,ad,as: -1,-1,-3)          *
c Note:  -  u,d numbering as in BAMJET                                 *
c        -  ID .le. 30 !!                                              *
c This version dated 12.03.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c auxiliary common for reggeon exchange (DTUNUC 1.x)
      COMMON /DTQUAR/ IQECHR(-6:6),IQBCHR(-6:6),IQICHR(-6:6),
     &                IQSCHR(-6:6),IQCCHR(-6:6),IQUCHR(-6:6),
     &                IQTCHR(-6:6),MQUARK(3,39)


      DIMENSION JSEL(3,6)
      DATA JSEL/ 1,2,3,  2,3,1,  3,1,2,  1,3,2,   2,1,3,   3,2,1/

      ONE = 1.0D0
      IF (ID.EQ.7) THEN
c photon (charge dependent flavour sampling)
         K = INT(DT_RNDM(ONE)*6.D0+1.D0)
         IF (K.LE.4) THEN
            IF1 = 2
            IF2 = -2
         ELSE IF(K.EQ.5) THEN
            IF1 = 1
            IF2 = -1
         ELSE
            IF1 = 3
            IF2 = -3
         ENDIF
         IF(DT_RNDM(ONE).LT.0.5D0) THEN
            K   = IF1
            IF1 = IF2
            IF2 = K
         ENDIF
         IF3 = 0
      ELSE
c hadron
         IX  = INT(1.0D0+5.99999D0*DT_RNDM(ONE))
         IF1 = MQUARK(JSEL(1,IX),ID)
         IF2 = MQUARK(JSEL(2,IX),ID)
         IF3 = MQUARK(JSEL(3,IX),ID)
         IF ((IF1.EQ.0).AND.(IF3.NE.0)) THEN
            IF1 = IF3
            IF3 = 0
         ELSEIF ((IF2.EQ.0).AND.(IF3.NE.0)) THEN
            IF2 = IF3
            IF3 = 0
         ENDIF
      ENDIF

      RETURN
      END
c
c===mchad==============================================================*
c
CDECK  ID>, IDT_MCHAD
      INTEGER FUNCTION IDT_MCHAD(ITDTU)

c***********************************************************************
c Conversion of particle index BAMJET-index scheme --> HADRIN index s. *
c Adopted from the original by S. Roesler. This version dated 6.5.95   *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION ITRANS(210)
      DATA ITRANS / 1, 2, -1, -1, -1, -1, -1, 8, 9, -1, -1, 24, 13, 14,
     &15, 16, 8, 9, 25, 8, 1, 8, 23, 24, 25, -1, -1, -1, -1, -1, 23, 13,
     &23, 14, 23, 15, 24, 16, 25, 15, 24, 16, 25, 15, 24, 16, 25, 1, 8,
     &8, 8, 1, 1, 1, 8, 8, 1, 1, 8, 8, 1, 8, 1, 8, 1, 8, 2, 2, 9, 9, 2,
     &2, 9, 9, 2, 9, 1, 13, 23, 14, 1, 1, 8, 8, 1, 1, 23, 14, 1, 8, 1,
     &8, 1, 8, 23, 23, 8, 8, 2, 9, 9, 9, 9, 1, 8, 8, 8, 8, 8, 2, 9, 9,
     &9, 9, 9, 85*- 1,7*-1,1,8,-1/
c &&&&&&&&&& KK
c     althogh  rather rare, ITDTU =0  happens.  set -1 in that case
c  KK found   v3.05 is doing the same thing.
      if(ITDTU .le. 0 ) then
         IDT_MCHAD = -1
c         write(0,*) ' avoiding 0 index for ITRANS'
c         write(0,*) ' setting return value -1'
      else
         IDT_MCHAD = ITRANS(ITDTU)
      endif

      RETURN
      END

c***********************************************************************
c                                                                      *
c   3) Energy-momentum and quantum number conservation check routines  *
c                                                                      *
c***********************************************************************
c
c===emc1===============================================================*
c
CDECK  ID>, DT_EMC1
      SUBROUTINE DT_EMC1(PP1,PP2,PT1,PT2,MODE,IPOS,IREJ)

c***********************************************************************
c This version dated 15.12.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10)

      DIMENSION PP1(4),PP2(4),PT1(4),PT2(4)

      IREJ = 0

      IF ((MODE.EQ.0).OR.(ABS(MODE).GT.3))
     &   WRITE(ErrorOut,
     * '(1X,A,I6)')'EMC1: not supported MODE ',MODE

      IF ((MODE.GT.0).AND.(MODE.LT.3)) THEN
         IF (MODE.EQ.1) THEN
            CALL DT_EVTEMC(PP1(1),PP1(2),PP1(3),PP1(4),1,IDUM,IDUM)
         ELSEIF (MODE.EQ.2) THEN
            CALL DT_EVTEMC(PP1(1),PP1(2),PP1(3),PP1(4),2,IDUM,IDUM)
         ENDIF
         CALL DT_EVTEMC(PP2(1),PP2(2),PP2(3),PP2(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(PT1(1),PT1(2),PT1(3),PT1(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(PT2(1),PT2(2),PT2(3),PT2(4),2,IDUM,IDUM)
      ELSEIF (MODE.LT.0) THEN
         IF (MODE.EQ.-1) THEN
            CALL DT_EVTEMC(-PP1(1),-PP1(2),-PP1(3),-PP1(4),1,IDUM,IDUM)
         ELSEIF (MODE.EQ.-2) THEN
            CALL DT_EVTEMC(-PP1(1),-PP1(2),-PP1(3),-PP1(4),2,IDUM,IDUM)
         ENDIF
         CALL DT_EVTEMC(-PP2(1),-PP2(2),-PP2(3),-PP2(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(-PT1(1),-PT1(2),-PT1(3),-PT1(4),2,IDUM,IDUM)
         CALL DT_EVTEMC(-PT2(1),-PT2(2),-PT2(3),-PT2(4),2,IDUM,IDUM)
      ENDIF

      IF (ABS(MODE).EQ.3) THEN
         CALL DT_EVTEMC(DUM,DUM,DUM,DUM,3,IPOS,IREJ1)
         IF (IREJ1.NE.0) GOTO 9999
      ENDIF
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===emc2===============================================================*
c
CDECK  ID>, DT_EMC2
      SUBROUTINE DT_EMC2(IP1,IP2,IP3,IP4,IP5,MP,IN1,IN2,IN3,IN4,IN5,MN,
     &                                                MODE,IPOS,IREJ)

c***********************************************************************
c             MODE = 1   energy-momentum cons. check                   *
c                  = 2   flavor-cons. check                            *
c                  = 3   energy-momentum & flavor cons. check          *
c                  = 4   energy-momentum & charge cons. check          *
c                  = 5   energy-momentum & flavor & charge cons. check *
c This version dated 16.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,ZERO=0.0D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)


      IREJ  = 0
      IREJ1 = 0
      IREJ2 = 0
      IREJ3 = 0

      IF ((MODE.EQ.1).OR.(MODE.EQ.3).OR.(MODE.EQ.4).OR.(MODE.EQ.5))
     &                CALL DT_EVTEMC(ZERO,ZERO,ZERO,ZERO,1,IDUM,IDUM)
      IF ((MODE.EQ.2).OR.(MODE.EQ.3).OR.(MODE.EQ.5))
     &                                CALL DT_EVTFLC(0,IDUM,1,IDUM,IDUM)
      IF ((MODE.EQ.4).OR.(MODE.EQ.5)) CALL DT_EVTCHG(IDUM,1,IDUM,IDUM)
      DO 1 I=1,NHKK
         IF ((ISTHKK(I).EQ.IP1).OR.(ISTHKK(I).EQ.IP2).OR.
     &       (ISTHKK(I).EQ.IP3).OR.(ISTHKK(I).EQ.IP4).OR.
     &       (ISTHKK(I).EQ.IP5))                          THEN
            IF ((MODE.EQ.1).OR.(MODE.EQ.3).OR.(MODE.EQ.4)
     &                                    .OR.(MODE.EQ.5))
     &      CALL DT_EVTEMC(PHKK(1,I),PHKK(2,I),PHKK(3,I),PHKK(4,I),
     &                                               2,IDUM,IDUM)
            IF ((MODE.EQ.2).OR.(MODE.EQ.3).OR.(MODE.EQ.5))
     &         CALL DT_EVTFLC(IDHKK(I),MP,2,IDUM,IDUM)
            IF ((MODE.EQ.4).OR.(MODE.EQ.5))
     &                            CALL DT_EVTCHG(IDHKK(I),2,IDUM,IDUM)
         ENDIF
         IF ((ISTHKK(I).EQ.IN1).OR.(ISTHKK(I).EQ.IN2).OR.
     &       (ISTHKK(I).EQ.IN3).OR.(ISTHKK(I).EQ.IN4).OR.
     &       (ISTHKK(I).EQ.IN5))                          THEN
            IF ((MODE.EQ.1).OR.(MODE.EQ.3).OR.(MODE.EQ.4)
     &                                    .OR.(MODE.EQ.5))
     &      CALL DT_EVTEMC(-PHKK(1,I),-PHKK(2,I),-PHKK(3,I),-PHKK(4,I),
     &                                                   2,IDUM,IDUM)
            IF ((MODE.EQ.2).OR.(MODE.EQ.3).OR.(MODE.EQ.5))
     &         CALL DT_EVTFLC(IDHKK(I),MN,-2,IDUM,IDUM)
            IF ((MODE.EQ.4).OR.(MODE.EQ.5))
     &                            CALL DT_EVTCHG(IDHKK(I),-2,IDUM,IDUM)
         ENDIF
    1 CONTINUE
      IF ((MODE.EQ.1).OR.(MODE.EQ.3).OR.(MODE.EQ.4).OR.(MODE.EQ.5))
     &   CALL DT_EVTEMC(DUM,DUM,DUM,DUM,5,IPOS,IREJ1)
      IF ((MODE.EQ.2).OR.(MODE.EQ.3).OR.(MODE.EQ.5))
     &   CALL DT_EVTFLC(0,IDUM,3,IPOS,IREJ2)
      IF ((MODE.EQ.4).OR.(MODE.EQ.5)) CALL DT_EVTCHG(IDUM,3,IPOS,IREJ3)
      IF ((IREJ1.NE.0).OR.(IREJ2.NE.0).OR.(IREJ3.NE.0)) GOTO 9999

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===evtemc=============================================================*
c
CDECK  ID>, DT_EVTEMC
      SUBROUTINE DT_EVTEMC(PXIO,PYIO,PZIO,EIO,IMODE,IPOS,IREJ)

c***********************************************************************
c This version dated 13.12.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY1=1.0D-1,TINY2=1.0D-2,TINY4=1.0D-4,TINY10=1.0D-10,
     &           ZERO=0.0D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME


      IREJ = 0

      MODE = IMODE
      CHKLEV = TINY10
      IF (MODE.EQ.4) THEN
         CHKLEV = TINY2
         MODE   = 3
      ELSEIF (MODE.EQ.5) THEN
         CHKLEV = TINY1
         MODE   = 3
      ELSEIF (MODE.EQ.-1) THEN
         CHKLEV = EIO
         MODE   = 3
      ENDIF

      IF (ABS(MODE).EQ.3) THEN
         PXDEV = PX
         PYDEV = PY
         PZDEV = PZ
         EDEV  = E
         IF ((IFRAG(1).EQ.2).AND.(CHKLEV.LT.TINY4)) CHKLEV = TINY4
         IF ((ABS(PXDEV).GT.CHKLEV).OR.(ABS(PYDEV).GT.CHKLEV).OR.
     &       (ABS(PZDEV).GT.CHKLEV).OR.(ABS(EDEV).GT.CHKLEV)) THEN
            IF (IOULEV(2).GT.0) WRITE(ErrorOut,
     * '(1X,A,I4,A,I8,A,/,4G10.3)')
     &         'EVTEMC: ENERGY-MOMENTUM CONS. FAILURE AT POS. ',IPOS,
     &         '  EVENT  ',NEVHKK,
     &         ' ! ',PXDEV,PYDEV,PZDEV,EDEV
            PX   = 0.0D0
            PY   = 0.0D0
            PZ   = 0.0D0
            E    = 0.0D0
            GOTO 9999
         ENDIF
         PX   = 0.0D0
         PY   = 0.0D0
         PZ   = 0.0D0
         E    = 0.0D0
         RETURN
      ENDIF

      IF (MODE.EQ.1) THEN
         PX = 0.0D0
         PY = 0.0D0
         PZ = 0.0D0
         E  = 0.0D0
      ENDIF

      PX = PX+PXIO
      PY = PY+PYIO
      PZ = PZ+PZIO
      E  = E+EIO

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===evtflc=============================================================*
c
CDECK  ID>, DT_EVTFLC
      SUBROUTINE DT_EVTFLC(ID,ID1,MODE,IPOS,IREJ)

c***********************************************************************
c Flavor conservation check.                                           *
c        ID       identity of particle                                 *
c        ID1 = 1  ID for q,aq,qq,aqaq in PDG-numbering scheme          *
c            = 2  ID for particle/resonance in BAMJET numbering scheme *
c            = 3  ID for particle/resonance in PDG    numbering scheme *
c        MODE = 1 initialization and add ID                            *
c             =-1 initialization and subtract ID                       *
c             = 2 add ID                                               *
c             =-2 subtract ID                                          *
c             = 3 check flavor cons.                                   *
c        IPOS     flag to give position of call of EVTFLC to output    *
c                 unit in case of violation                            *
c This version dated 10.01.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10)

      IREJ = 0

      IF (MODE.EQ.3) THEN
         IF (IFL.NE.0) THEN
            WRITE(ErrorOut,'(1X,A,I3,A,I3)')
     &         'EVTFLC: FLAVOR-CONSERVATION FAILURE AT POS. ',IPOS,
     &         ' !  IFL = ',IFL
            IFL = 0
            GOTO 9999
         ENDIF
         IFL = 0
         RETURN
      ENDIF

      IF (MODE.EQ.1) IFL = 0
      IF (ID.EQ.0)   RETURN

      IF (ID1.EQ.1) THEN
         IDD = ABS(ID)
         NQ  = 1
         IF ((IDD.GE.100).AND.(IDD.LT.1000)) NQ = 2
         IF (IDD.GE.1000) NQ = 3
         DO 1 I=1,NQ
            IFBAM = IDT_IPDG2B(ID,I,2)
            IF (ABS(IFBAM).EQ.1) THEN
               IFBAM = SIGN(2,IFBAM)
            ELSEIF (ABS(IFBAM).EQ.2) THEN
               IFBAM = SIGN(1,IFBAM)
            ENDIF
            IF (MODE.GT.0) THEN
               IFL = IFL+IFBAM
            ELSE
               IFL = IFL-IFBAM
            ENDIF
    1    CONTINUE
         RETURN
      ENDIF

      IDD = ID
      IF (ID1.EQ.3) IDD = IDT_ICIHAD(ID)
      IF ((ID1.EQ.2).OR.(ID1.EQ.3)) THEN
         DO 2 I=1,3
            IF (MODE.GT.0) THEN
               IFL = IFL+IDT_IQUARK(I,IDD)
            ELSE
               IFL = IFL-IDT_IQUARK(I,IDD)
            ENDIF
    2    CONTINUE
      ENDIF
      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END
c
c===evtchg=============================================================*
c
CDECK  ID>, DT_EVTCHG
      SUBROUTINE DT_EVTCHG(ID,MODE,IPOS,IREJ)

c***********************************************************************
c Charge conservation check.                                           *
c        ID       identity of particle (PDG-numbering scheme)          *
c        MODE = 1 initialization                                       *
c             =-2 subtract ID-charge                                   *
c             = 2 add ID-charge                                        *
c             = 3 check charge cons.                                   *
c        IPOS     flag to give position of call of EVTCHG to output    *
c                 unit in case of violation                            *
c This version dated 10.01.95 is written by S. Roesler                 *
c Last change: s.r. 21.01.01                                           *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      IREJ = 0

      IF (MODE.EQ.1) THEN
         ICH  = 0
         IBAR = 0
         RETURN
      ENDIF

      IF (MODE.EQ.3) THEN
         IF ((ICH.NE.0).OR.(IBAR.NE.0)) THEN
            WRITE(ErrorOut,'(1X,A,I3,A,2I3,A,I8)')
     &         'EVTCHG: CHARGE/BARYO.-CONS. FAILURE AT POS. ',IPOS,
     &         '! ICH/IBAR= ',ICH,IBAR,' EVENT ',NEVHKK
            ICH  = 0
            IBAR = 0
            GOTO 9999
         ENDIF
         ICH  = 0
         IBAR = 0
         RETURN
      ENDIF

      IF (ID.EQ.0)   RETURN

      IDD = IDT_ICIHAD(ID)
c modification 21.1.01: use intrinsic phojet-functions to determine charge
c and baryon number
C     IF (IDD.GT.0) THEN
C        IF (MODE.EQ.2) THEN
C           ICH  = ICH+IICH(IDD)
C           IBAR = IBAR+IIBAR(IDD)
C        ELSEIF (MODE.EQ.-2) THEN
C           ICH  = ICH-IICH(IDD)
C           IBAR = IBAR-IIBAR(IDD)
C        ENDIF
C     ELSE
C        WRITE(LOUT,'(1X,A,3I6)') 'EVTCHG: (IDD = 0 !), IDD,ID=',IDD,ID
C        CALL DT_EVTOUT(4)
C        STOP
C     ENDIF
      IF (MODE.EQ.2) THEN
         ICH  = ICH+IPHO_CHR3(ID,1)/3
         IBAR = IBAR+IPHO_BAR3(ID,1)/3
      ELSEIF (MODE.EQ.-2) THEN
         ICH  = ICH-IPHO_CHR3(ID,1)/3
         IBAR = IBAR-IPHO_BAR3(ID,1)/3
      ENDIF

      RETURN

 9999 CONTINUE
      IREJ = 1
      RETURN
      END

c***********************************************************************
c                                                                      *
c                 4) Transformations                                   *
c                                                                      *
c***********************************************************************
c
c===ltini==============================================================*
c
CDECK  ID>, DT_LTINI
      SUBROUTINE DT_LTINI(IDPR,IDTA,EPN0,PPN0,ECM0,MODE)

c***********************************************************************
c Initializations of Lorentz-transformations, calculation of Lorentz-  *
c parameters.                                                          *
c This version dated 13.11.95 is written by  S. Roesler.               *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY3=1.0D-3,
     &           ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN


      Q2   = VIRT
      IDP  = IDPR
      IF (MCGENE.NE.3) THEN
c lepton-projectiles and PHOJET: initialize real photon instead
         IF ((IDPR.EQ. 3).OR.(IDPR.EQ. 4).OR.
     &       (IDPR.EQ.10).OR.(IDPR.EQ.11).OR.
     &       (IDPR.EQ. 5).OR.(IDPR.EQ. 6))   THEN
            IDP = 7
            Q2  = ZERO
         ENDIF
      ENDIF
      IDT  = IDTA
      EPN  = EPN0
      PPN  = PPN0
      ECM  = ECM0
      AMP  = AAM(IDP)-SQRT(ABS(Q2))
      AMT  = AAM(IDT)
      AMP2 = SIGN(AMP**2,AMP)
      AMT2 = AMT**2
      IF (ECM0.GT.ZERO) THEN
         EPN = (ECM**2-AMP2-AMT2)/(TWO*AMT)
         IF (AMP2.GT.ZERO) THEN
            PPN = SQRT((EPN+AMP)*(EPN-AMP))
         ELSE
            PPN = SQRT(EPN**2-AMP2)
         ENDIF
      ELSE
         IF ((EPN0.NE.ZERO).AND.(PPN0.EQ.ZERO)) THEN
            IF (IDP.EQ.7) EPN = ABS(EPN)
            IF (EPN.LT.ZERO) EPN = ABS(EPN)+AMP
            IF (AMP2.GT.ZERO) THEN
               PPN = SQRT((EPN+AMP)*(EPN-AMP))
            ELSE
               PPN = SQRT(EPN**2-AMP2)
            ENDIF
         ELSEIF ((PPN0.GT.ZERO).AND.(EPN0.EQ.ZERO)) THEN
            IF (AMP2.GT.ZERO) THEN
               EPN = PPN*SQRT(ONE+(AMP/PPN)**2)
            ELSE
               EPN = SQRT(PPN**2+AMP2)
            ENDIF
         ENDIF
         ECM = SQRT(AMP2+AMT2+TWO*AMT*EPN)
      ENDIF
      UMO   = ECM
      EPROJ = EPN
      PPROJ = PPN
      IF (AMP2.GT.ZERO) THEN
         ETARG = (ECM**2-AMP2-AMT2)/(TWO*AMP)
         PTARG = -SQRT((ETARG+AMT)*(ETARG-AMT))
      ELSE
         ETARG = TINY10
         PTARG = TINY10
      ENDIF
c photon-projectiles (get momentum in cm-frame for virtuality Q^2)
      IF (IDP.EQ.7) THEN
         PGAMM(1) = ZERO
         PGAMM(2) = ZERO
         AMGAM  = AMP
         AMGAM2 = AMP2
         IF (ECM0.GT.ZERO) THEN
            S = ECM0**2
         ELSE
            IF ((EPN0.NE.ZERO).AND.(PPN0.EQ.ZERO)) THEN
               S = AMGAM2+AMT2+TWO*AMT*ABS(EPN0)
            ELSEIF ((PPN0.GT.ZERO).AND.(EPN0.EQ.ZERO)) THEN
               S = AMGAM2+AMT2+TWO*AMT*SQRT(PPN0**2+AMGAM2)
            ENDIF
         ENDIF
         PGAMM(3) = SQRT( (S**2-TWO*AMGAM2*S-TWO*AMT2*S-TWO*AMGAM2*AMT2
     &                     +AMGAM2**2+AMT2**2)/(4.0D0*S) )
         PGAMM(4) = SQRT(AMGAM2+PGAMM(3)**2)
         IF (MODE.EQ.1) THEN
            PNUCL(1) = ZERO
            PNUCL(2) = ZERO
            PNUCL(3) = -PGAMM(3)
            PNUCL(4) = SQRT(S)-PGAMM(4)
         ENDIF
      ENDIF
      IF ((IDPR.EQ. 3).OR.(IDPR.EQ. 4).OR.
     &    (IDPR.EQ.10).OR.(IDPR.EQ.11))   THEN
         PLEPT0(1) = ZERO
         PLEPT0(2) = ZERO
c neglect lepton masses
C        AMLPT2   = AAM(IDPR)**2
         AMLPT2   = ZERO
c
         IF (ECM0.GT.ZERO) THEN
            S = ECM0**2
         ELSE
            IF ((EPN0.NE.ZERO).AND.(PPN0.EQ.ZERO)) THEN
               S = AMLPT2+AMT2+TWO*AMT*ABS(EPN0)
            ELSEIF ((PPN0.GT.ZERO).AND.(EPN0.EQ.ZERO)) THEN
               S = AMLPT2+AMT2+TWO*AMT*SQRT(PPN0**2+AMLPT2)
            ENDIF
         ENDIF
         PLEPT0(3) = SQRT( (S**2-TWO*AMLPT2*S-TWO*AMT2*S-TWO*AMLPT2*AMT2
     &                     +AMLPT2**2+AMT2**2)/(4.0D0*S) )
         PLEPT0(4) = SQRT(AMLPT2+PLEPT0(3)**2)
         PNUCL(1) = ZERO
         PNUCL(2) = ZERO
         PNUCL(3) = -PLEPT0(3)
         PNUCL(4) = SQRT(S)-PLEPT0(4)
      ENDIF
c Lorentz-parameter for transformation Lab. - projectile rest system
      IF ((IDP.EQ.7).OR.(AMP.LT.TINY10)) THEN
         GALAB = TINY10
         BGLAB = TINY10
         BLAB  = TINY10
      ELSE
         GALAB = EPROJ/AMP
         BGLAB = PPROJ/AMP
         BLAB  = BGLAB/GALAB
      ENDIF
c Lorentz-parameter for transf. proj. rest sys. - nucl.-nucl. cms.
      IF (IDP.EQ.7) THEN
         GACMS(1) = TINY10
         BGCMS(1) = TINY10
      ELSE
         GACMS(1) = (ETARG+AMP)/UMO
         BGCMS(1) = PTARG/UMO
      ENDIF
c Lorentz-parameter for transformation Lab. - nucl.-nucl. cms.
      GACMS(2) = (EPROJ+AMT)/UMO
      BGCMS(2) = PPROJ/UMO
      PPCM     = GACMS(2)*PPROJ-BGCMS(2)*EPROJ

      EPN0 = EPN
      PPN0 = PPN
      ECM0 = ECM

      RETURN
      END
c
c===ltrans=============================================================*
c
CDECK  ID>, DT_LTRANS
      SUBROUTINE DT_LTRANS(PXI,PYI,PZI,PEI,PXO,PYO,PZO,PEO,ID,MODE)

c***********************************************************************
c Lorentz-transformations.                                             *
c   MODE = 1(-1)    projectile rest syst.   --> Lab (back)             *
c        = 2(-2)    projectile rest syst.   --> nucl.-nucl.cms (back)  *
c        = 3(-3)    target rest syst. (=Lab)--> nucl.-nucl.cms (back)  *
c This version dated 01.11.95 is written by  S. Roesler.               *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY3=1.0D-3,ZERO=0.0D0,TWO=2.0D0)

      PARAMETER (SQTINF=1.0D+15)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


      PXO = PXI
      PYO = PYI
      CALL DT_LTNUC(PZI,PEI,PZO,PEO,MODE)

c check particle mass for consistency (numerical rounding errors)
      PO     = SQRT(PXO*PXO+PYO*PYO+PZO*PZO)
      AMO2   = (PEO-PO)*(PEO+PO)
      AMORQ2 = AAM(ID)**2
      AMDIF2 = ABS(AMO2-AMORQ2)
      IF ((AMDIF2.GT.TINY3).AND.(PEO.LT.SQTINF).AND.(PO.GT.ZERO)) THEN
         DELTA = (AMORQ2-AMO2)/(TWO*(PEO+PO))
         PEO   = PEO+DELTA
         PO1   = PO -DELTA
         PXO   = PXO*PO1/PO
         PYO   = PYO*PO1/PO
         PZO   = PZO*PO1/PO
C        WRITE(6,*) 'LTRANS corrected', AMDIF2,PZI,PEI,PZO,PEO,MODE,ID
      ENDIF

      RETURN
      END
c
c===ltnuc==============================================================*
c
CDECK  ID>, DT_LTNUC
      SUBROUTINE DT_LTNUC(PIN,EIN,POUT,EOUT,MODE)

c***********************************************************************
c Lorentz-transformations.                                             *
c   PIN        longitudnal momentum       (input)                      *
c   EIN        energy                     (input)                      *
c   POUT       transformed long. momentum (output)                     *
c   EOUT       transformed energy         (output)                     *
c   MODE = 1(-1)    projectile rest syst.   --> Lab (back)             *
c        = 2(-2)    projectile rest syst.   --> nucl.-nucl.cms (back)  *
c        = 3(-3)    target rest syst. (=Lab)--> nucl.-nucl.cms (back)  *
c This version dated 01.11.95 is written by  S. Roesler.               *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ


      BDUM1 = ZERO
      BDUM2 = ZERO
      PDUM1 = ZERO
      PDUM2 = ZERO
      IF (ABS(MODE).EQ.1) THEN
         BG = -SIGN(BGLAB,DBLE(MODE))
         CALL DT_DALTRA(GALAB,BDUM1,BDUM2,-BG,PDUM1,PDUM2,PIN,EIN,
     &                               DUM1,DUM2,DUM3,POUT,EOUT)
      ELSEIF (ABS(MODE).EQ.2) THEN
         BG = SIGN(BGCMS(1),DBLE(MODE))
         CALL DT_DALTRA(GACMS(1),BDUM1,BDUM2,BG,PDUM1,PDUM2,PIN,EIN,
     &                               DUM1,DUM2,DUM3,POUT,EOUT)
      ELSEIF (ABS(MODE).EQ.3) THEN
         BG = -SIGN(BGCMS(2),DBLE(MODE))
         CALL DT_DALTRA(GACMS(2),BDUM1,BDUM2,BG,PDUM1,PDUM2,PIN,EIN,
     &                               DUM1,DUM2,DUM3,POUT,EOUT)
      ELSE
         WRITE(ErrorOut,1000) MODE
 1000    FORMAT(1X,'LTNUC: NOT SUPPORTED MODE (MODE = ',I3,')')
         EOUT = EIN
         POUT = PIN
      ENDIF

      RETURN
      END
c
c===daltra=============================================================*
c
CDECK  ID>, DT_DALTRA
      SUBROUTINE DT_DALTRA(GA,BGX,BGY,BGZ,PCX,PCY,PCZ,EC,P,PX,PY,PZ,E)

c***********************************************************************
c Arbitrary Lorentz-transformation.                                    *
c Adopted from the original by S. Roesler. This version dated 15.01.95 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ONE=1.0D0)

      EP = PCX*BGX+PCY*BGY+PCZ*BGZ
      PE = EP/(GA+ONE)+EC
      PX = PCX+BGX*PE
      PY = PCY+BGY*PE
      PZ = PCZ+BGZ*PE
      P  = SQRT(PX*PX+PY*PY+PZ*PZ)
      E  = GA*EC+EP

      RETURN
      END
c
c====dtrafo============================================================*
c
CDECK  ID>, DT_DTRAFO
      SUBROUTINE DT_DTRAFO(GAM,BGAM,CX,CY,CZ,COD,COF,SIF,P,ECM,
     &                                    PL,CXL,CYL,CZL,EL)

C     LORENTZ TRANSFORMATION INTO THE LAB - SYSTEM

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      IF (ABS(COD).GT.1.0D0) COD = SIGN(1.0D0,COD)
      SID  = SQRT(1.D0-COD*COD)
      PLX  = P*SID*COF
      PLY  = P*SID*SIF
      PCMZ = P*COD
      PLZ  = GAM*PCMZ+BGAM*ECM
      PL   = SQRT(PLX*PLX+PLY*PLY+PLZ*PLZ)
      EL   = GAM*ECM+BGAM*PCMZ
C     ROTATION INTO THE ORIGINAL DIRECTION
      COZ  = PLZ/PL
      SIZ  = SQRT(1.D0-COZ**2)
      CALL DT_STTRAN(CX,CY,CZ,COZ,SIZ,SIF,COF,CXL,CYL,CZL)

      RETURN
      END
c
c====sttran============================================================*
c
CDECK  ID>, DT_STTRAN
      SUBROUTINE DT_STTRAN(XO,YO,ZO,CDE,SDE,SFE,CFE,X,Y,Z)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      DATA ANGLSQ/1.D-30/
c***********************************************************************
c     VERSION BY                     J. RANFT                          *
c                                    LEIPZIG                           *
c                                                                      *
c     THIS IS A SUBROUTINE OF FLUKA TO GIVE NEW DIRECTION COSINES      *
c                                                                      *
c     INPUT VARIABLES:                                                 *
c        XO,YO,ZO = ORIGINAL DIRECTION COSINES                         *
c        CDE,SDE  = COSINE AND SINE OF THE POLAR (THETA)               *
c                   ANGLE OF "SCATTERING"                              *
c        SDE      = SINE OF THE POLAR (THETA) ANGLE OF "SCATTERING"    *
c        SFE,CFE  = SINE AND COSINE OF THE AZIMUTHAL (PHI) ANGLE       *
c                   OF "SCATTERING"                                    *
c                                                                      *
c     OUTPUT VARIABLES:                                                *
c        X,Y,Z     = NEW DIRECTION COSINES                             *
c                                                                      *
c     ROTATION OF COORDINATE SYSTEM (SEE CERN 64-47 )                  *
c***********************************************************************
c
c
c  Changed by A. Ferrari
c
c     IF (ABS(XO)-0.0001D0) 1,1,2
c   1 IF (ABS(YO)-0.0001D0) 3,3,2
c   3 CONTINUE
      A = XO**2 + YO**2
      IF ( A .LT. ANGLSQ ) THEN
         X=SDE*CFE
         Y=SDE*SFE
         Z=CDE*ZO
      ELSE
         XI=SDE*CFE
         YI=SDE*SFE
         ZI=CDE
         A=SQRT(A)
         X=-YO*XI/A-ZO*XO*YI/A+XO*ZI
         Y=XO*XI/A-ZO*YO*YI/A+YO*ZI
         Z=A*YI+ZO*ZI
      ENDIF

      RETURN
      END
c
c===mytran=============================================================*
c
CDECK  ID>, DT_MYTRAN
      SUBROUTINE DT_MYTRAN(IMODE,XO,YO,ZO,CDE,SDE,CFE,SFE,X,Y,Z)

c***********************************************************************
c This subroutine rotates the coordinate frame                         *
c    a) theta  around y                                                *
c    b) phi    around z      if IMODE = 1                              *
c                                                                      *
c     x'          cos(ph) -sin(ph) 0      cos(th)  0  sin(th)   x      *
c     y' = A B =  sin(ph) cos(ph)  0  .   0        1        0   y      *
c     z'          0       0        1     -sin(th)  0  cos(th)   z      *
c                                                                      *
c and vice versa if IMODE = 0.                                         *
c This version dated 5.4.94 is based on the original version DTRAN     *
c by J. Ranft and is written by S. Roesler.                            *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      IF (IMODE.EQ.1) THEN
         X= CDE*CFE*XO-SFE*YO+SDE*CFE*ZO
         Y= CDE*SFE*XO+CFE*YO+SDE*SFE*ZO
         Z=-SDE    *XO       +CDE    *ZO
      ELSE
         X= CDE*CFE*XO+CDE*SFE*YO-SDE*ZO
         Y= -SFE*XO+CFE*YO
         Z= SDE*CFE*XO+SDE*SFE*YO+CDE*ZO
      ENDIF
      RETURN
      END
c
c===lt2lab=============================================================*
c
CDECK  ID>, DT_LT2LAO
      SUBROUTINE DT_LT2LAO

c***********************************************************************
c Lorentz-transformation to lab-system. This subroutine scans DTEVT1   *
c for final state particles/fragments defined in nucleon-nucleon-cms   *
c and transforms them back to the lab.                                 *
c This version dated 16.11.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)


      NEND      = NHKK
      NPOINT(5) = NHKK+1
      IF ( (NPOINT(4).EQ.0).OR.(NEND.LT.NPOINT(4)) ) RETURN
      DO 1 I=NPOINT(4),NEND
C     DO 1 I=1,NEND
         IF ((ABS(ISTHKK(I)).EQ.1).OR.(ISTHKK(I).EQ.1000).OR.
     &                                (ISTHKK(I).EQ.1001)) THEN
            CALL DT_LTNUC(PHKK(3,I),PHKK(4,I),PZ,PE,-3)
            NOB = NOBAM(I)
            CALL DT_EVTPUT(ISTHKK(I),IDHKK(I),I,0,PHKK(1,I),PHKK(2,I),
     &                            PZ,PE,IDRES(I),IDXRES(I),IDCH(I))
            IF ((ISTHKK(I).EQ.1000).OR.(ISTHKK(I).EQ.1001)) THEN
               ISTHKK(I) = 3*ISTHKK(I)
               NOBAM(NHKK)  = NOB
            ELSE
               IF (ISTHKK(I).EQ.-1) NOBAM(NHKK)  = NOB
               ISTHKK(I) = SIGN(3,ISTHKK(I))
            ENDIF
            JDAHKK(1,I) = NHKK
         ENDIF
    1 CONTINUE

      RETURN
      END
c
c===lt2lab=============================================================*
c
CDECK  ID>, DT_LT2LAB
      SUBROUTINE DT_LT2LAB

c***********************************************************************
c Lorentz-transformation to lab-system. This subroutine scans DTEVT1   *
c for final state particles/fragments defined in nucleon-nucleon-cms   *
c and transforms them to the lab.                                      *
c This version dated 07.01.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)


      IF ( (NPOINT(4).EQ.0).OR.(NHKK.LT.NPOINT(4)) ) RETURN
      DO 1 I=NPOINT(4),NHKK
         IF ((ABS(ISTHKK(I)).EQ.1).OR.(ISTHKK(I).EQ.1000).OR.
     &                                (ISTHKK(I).EQ.1001)) THEN
            CALL DT_LTNUC(PHKK(3,I),PHKK(4,I),PZ,PE,-3)
            PHKK(3,I) = PZ
            PHKK(4,I) = PE
         ENDIF
    1 CONTINUE

      RETURN
      END

c***********************************************************************
c                                                                      *
c                 5) Sampling from distributions                       *
c                                                                      *
c***********************************************************************
c
c===npoiss=============================================================*
c
CDECK  ID>, IDT_NPOISS
      INTEGER FUNCTION IDT_NPOISS(AVN)

c***********************************************************************
c Sample according to Poisson distribution with Poisson parameter AVN. *
c The original version written by J. Ranft.                            *
c This version dated 11.1.95 is written by S. Roesler.                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      EXPAVN = EXP(-AVN)
      K = 1
      A = 1.0D0

   10 CONTINUE
      A = DT_RNDM(A)*A
      IF (A.GE.EXPAVN) THEN
         K = K+1
         GOTO 10
      ENDIF
      IDT_NPOISS = K-1

      RETURN
      END
c
c===sampxb=============================================================*
c
CDECK  ID>, DT_SAMPXB
      DOUBLE PRECISION FUNCTION DT_SAMPXB(X1,X2,B)

c***********************************************************************
c Sampling from f(x)=1./SQRT(X**2+B**2) between x1 and x2.             *
c Processed by S. Roesler, 6.5.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (TWO=2.0D0)

      A1 = LOG(X1+SQRT(X1**2+B**2))
      A2 = LOG(X2+SQRT(X2**2+B**2))
      AN = A2-A1
      A  = AN*DT_RNDM(A1)+A1
      BB = EXP(A)
      DT_SAMPXB = (BB**2-B**2)/(TWO*BB)

      RETURN
      END
c
c===sampex=============================================================*
c
CDECK  ID>, DT_SAMPEX
      DOUBLE PRECISION FUNCTION DT_SAMPEX(X1,X2)

c***********************************************************************
c Sampling from f(x)=1./x between x1 and x2.                           *
c Processed by S. Roesler, 6.5.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ONE=1.0D0)

      R   = DT_RNDM(X1)
      AL1 = LOG(X1)
      AL2 = LOG(X2)
      DT_SAMPEX = EXP((ONE-R)*AL1+R*AL2)

      RETURN
      END
c
c===samsqx=============================================================*
c
CDECK  ID>, DT_SAMSQX
      DOUBLE PRECISION FUNCTION DT_SAMSQX(X1,X2)

c***********************************************************************
c Sampling from f(x)=1./x^0.5 between x1 and x2.                       *
c Processed by S. Roesler, 6.5.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ONE=1.0D0)

      R = DT_RNDM(X1)
      DT_SAMSQX = (R*SQRT(X2)+(ONE-R)*SQRT(X1))**2

      RETURN
      END
c
c===samplw=============================================================*
c
CDECK  ID>, DT_SAMPLW
      DOUBLE PRECISION FUNCTION DT_SAMPLW(XMIN,XMAX,B)

c***********************************************************************
c Sampling from f(x)=1/x^b between x_min and x_max.                    *
c S. Roesler, 18.4.98                                                  *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ONE=1.0D0)

      R = DT_RNDM(B)
      IF (B.EQ.ONE) THEN
         DT_SAMPLW = EXP(R*LOG(XMAX)+(ONE-R)*LOG(XMIN))
      ELSE
         ONEMB  = ONE-B
         DT_SAMPLW = (R*XMAX**ONEMB+(ONE-R)*XMIN**ONEMB)**(ONE/ONEMB)
      ENDIF

      RETURN
      END
c
c===betrej=============================================================*
c
CDECK  ID>, DT_BETREJ
      DOUBLE PRECISION FUNCTION DT_BETREJ(GAM,ETA,XMIN,XMAX)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ONE=1.0D0)

      IF (XMIN.GE.XMAX)THEN
cccc &&&&&&&&&&&&&&&&&& KK
cc         WRITE (6,500) XMIN,XMAX
      WRITE (0,500) XMIN,XMAX
cc  500    FORMAT(1X,'DT_BETREJ:  XMIN<XMAX EXECUTION STOPPED ',2F10.5)
  500    FORMAT(1X,'DT_BETREJ:  XMIN<XMAX EXECUTION forced ',2F10.5)
cc         STOP
ccc   &&&&&&&&&&&&&&&&& KK         
         XMAX = XMIN+1.d-8
ccc
      ENDIF

   10 CONTINUE
      XX     = XMIN+(XMAX-XMIN)*DT_RNDM(ETA)
      BETMAX = XMIN**(GAM-ONE)*(ONE-XMIN)**(ETA-ONE)
      YY     = BETMAX*DT_RNDM(XX)
      BETXX  = XX**(GAM-ONE)*(ONE-XX)**(ETA-ONE)
      IF (YY.GT.BETXX) GOTO 10
      DT_BETREJ = XX

      RETURN
      END
c
c===dgamrn=============================================================*
c
CDECK  ID>, DT_DGAMRN
      DOUBLE PRECISION FUNCTION DT_DGAMRN(ALAM,ETA)

c***********************************************************************
c Sampling from Gamma-distribution.                                    *
c       F(X) = ALAM**ETA*X**(ETA-1)*EXP(-ALAM*X) / GAM(ETA)            *
c Processed by S. Roesler, 6.5.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ZERO=0.0D0,TINY9=1.0D-9,ONE=1.0D0)

      NCOU = 0
      N    = INT(ETA)
      F    = ETA-DBLE(N)
      IF (F.EQ.ZERO) GOTO 20
   10 R = DT_RNDM(F)
      NCOU = NCOU+1
      IF (NCOU.GE.11) GOTO 20
      IF (R.LT.F/(F+2.71828D0)) GOTO 30
      YYY = LOG(DT_RNDM(R)+TINY9)/F
      IF (ABS(YYY).GT.50.0D0) GOTO 20
      Y = EXP(YYY)
      IF (LOG(DT_RNDM(Y)+TINY9).GT.-Y) GOTO 10
      GOTO 40
   20 Y = 0.0D0
      GOTO 50
   30 Y = ONE-LOG(DT_RNDM(Y)+TINY9)
      IF (DT_RNDM(R).GT.Y**(F-ONE)) GOTO 10
   40 IF (N.EQ.0) GOTO 70
   50 Z = 1.0D0
      DO 60 I = 1,N
   60 Z = Z*DT_RNDM(Z)
      Y = Y-LOG(Z+TINY9)
   70 DT_DGAMRN = Y/ALAM

      RETURN
      END
c
c===dbetar=============================================================*
c
CDECK  ID>, DT_DBETAR
      DOUBLE PRECISION FUNCTION DT_DBETAR(GAM,ETA)

c***********************************************************************
c Sampling from Beta -distribution between 0.0 and 1.0                 *
c  F(X)=X**(GAM-1.)*(1.-X)**(ETA-1)*GAMM(ETA+GAM)/(GAMM(GAM)*GAMM(ETA))*
c Processed by S. Roesler, 6.5.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      Y = DT_DGAMRN(1.0D0,GAM)
      Z = DT_DGAMRN(1.0D0,ETA)
      DT_DBETAR = Y/(Y+Z)

      RETURN
      END
c
c===rannor=============================================================*
c
CDECK  ID>, DT_RANNOR
      SUBROUTINE DT_RANNOR(X,Y)

c***********************************************************************
c Sampling from Gaussian distribution.                                 *
c Processed by S. Roesler, 6.5.95                                      *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (TINY10=1.0D-10)

      CALL DT_DSFECF(SFE,CFE)
      V = MAX(TINY10,DT_RNDM(X))
      A = SQRT(-2.D0*LOG(V))
      X = A*SFE
      Y = A*CFE

      RETURN
      END
c
c===dpoli==============================================================*
c
CDECK  ID>, DT_DPOLI
      SUBROUTINE DT_DPOLI(CS,SI)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      U  = DT_RNDM(CS)
      CS = DT_RNDM(U)
      IF (U.LT.0.5D0) CS=-CS
      SI = SQRT(1.0D0-CS*CS+1.0D-10)

      RETURN
      END
c
c===dsfecf=============================================================*
c
CDECK  ID>, DT_DSFECF
      SUBROUTINE DT_DSFECF(SFE,CFE)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (TWO=2.0D0,ONE=1.0D0,OHALF=0.5D0,ZERO=0.0D0)

    1 CONTINUE
      X  = DT_RNDM(SFE)
      Y  = DT_RNDM(X)
      XX = X*X
      YY = Y*Y
      XY = XX+YY
      IF (XY.GT.ONE) GOTO 1
      CFE = (XX-YY)/XY
      SFE = TWO*X*Y/XY
      IF (DT_RNDM(X).LT.OHALF) SFE = -SFE
      RETURN
      END
c
c===raco===============================================================*
c
CDECK  ID>, DT_RACO
      SUBROUTINE DT_RACO(WX,WY,WZ)

c***********************************************************************
c Direction cosines of random uniform (isotropic) direction in three   *
c dimensional space                                                    *
c Processed by S. Roesler, 20.11.95                                    *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (TWO=2.0D0,ONE=1.0D0,OHALF=0.5D0,ZERO=0.0D0)

  10  CONTINUE
      X  = TWO*DT_RNDM(WX)-ONE
      Y  = DT_RNDM(X)
      X2 = X*X
      Y2 = Y*Y
      IF (X2+Y2.GT.ONE) GOTO 10

      CFE = (X2-Y2)/(X2+Y2)
      SFE = TWO*X*Y/(X2+Y2)
c z = 1/2 [ 1 + cos (theta) ]
      Z   = DT_RNDM(X)
c 1/2 sin (theta)
      WZ = SQRT(Z*(ONE-Z))
      WX = TWO*WZ*CFE
      WY = TWO*WZ*SFE
      WZ = TWO*Z-ONE

      RETURN
      END

c***********************************************************************
c                                                                      *
c           6) Special functions, algorithms and service routines      *
c                                                                      *
c***********************************************************************
c
c===ylamb==============================================================*
c
CDECK  ID>, DT_YLAMB
      DOUBLE PRECISION FUNCTION DT_YLAMB(X,Y,Z)

c***********************************************************************
c                                                                      *
c     auxiliary function for three particle decay mode                 *
c     (standard LAMBDA**(1/2) function)                                *
c                                                                      *
c Adopted from an original version written by R. Engel.                *
c This version dated 12.12.94 is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      YZ   = Y-Z
      XLAM = X*X-2.D0*X*(Y+Z)+YZ*YZ
      IF (XLAM.LE.0.D0) XLAM = ABS(XLAM)
      DT_YLAMB = SQRT(XLAM)

      RETURN
      END
c
c===sort1==============================================================*
c
CDECK  ID>, DT_SORT
      SUBROUTINE DT_SORT(A,N,I0,I1,MODE)

c***********************************************************************
c This subroutine sorts entries in A in increasing/decreasing order    *
c of A(3,i).                                                           *
c              MODE  = 1     increasing in A(3,i=1..N)                 *
c                    = 2     decreasing in A(3,i=1..N)                 *
c This version dated 21.04.95 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION A(3,N)

      M = I1
   10 CONTINUE
      M = I1-1
      IF (M.LE.0) RETURN
      L = 0
      DO 20 I=I0,M
         J = I+1
         IF (MODE.EQ.1) THEN
            IF (A(3,I).LE.A(3,J)) GOTO 20
         ELSE
            IF (A(3,I).GE.A(3,J)) GOTO 20
         ENDIF
         B = A(3,I)
         C = A(1,I)
         D = A(2,I)
         A(3,I) = A(3,J)
         A(2,I) = A(2,J)
         A(1,I) = A(1,J)
         A(3,J) = B
         A(1,J) = C
         A(2,J) = D
         L = 1
   20 CONTINUE
      IF (L.EQ.1) GOTO 10

      RETURN
      END
c
c===sort1==============================================================*
c
CDECK  ID>, DT_SORT1
      SUBROUTINE DT_SORT1(A,IDX,N,I0,I1,MODE)

c***********************************************************************
c This subroutine sorts entries in A in increasing/decreasing order    *
c of A(i).                                                             *
c              MODE  = 1     increasing in A(i=1..N)                   *
c                    = 2     decreasing in A(i=1..N)                   *
c This version dated 21.04.95 is revised by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION A(N),IDX(N)

      M = I1
   10 CONTINUE
      M = I1-1
      IF (M.LE.0) RETURN
      L = 0
      DO 20 I=I0,M
         J = I+1
         IF (MODE.EQ.1) THEN
            IF (A(I).LE.A(J)) GOTO 20
         ELSE
            IF (A(I).GE.A(J)) GOTO 20
         ENDIF
         B    = A(I)
         A(I) = A(J)
         A(J) = B
         IX     = IDX(I)
         IDX(I) = IDX(J)
         IDX(J) = IX
         L = 1
   20 CONTINUE
      IF (L.EQ.1) GOTO 10

      RETURN
      END
c
c===xtime==============================================================*
c
CDECK  ID>, DT_XTIME
      SUBROUTINE DT_XTIME

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      CHARACTER DAT*9,TIM*11

      DAT = '         '
      TIM = '           '
C     CALL GETDAT(IYEAR,IMONTH,IDAY)
C     CALL GETTIM(IHOUR,IMINUT,ISECND,IHSCND)

C     CALL DATE(DAT)
C     CALL TIME(TIM)
C     WRITE(LOUT,1000) DAT,TIM
 1000 FORMAT(/,2X,'DATE: ',A9,3X,'TIME: ',A11,/)

      RETURN
      END

c***********************************************************************
c                                                                      *
c                 7) Random number generator package                   *
c                                                                      *
c    THIS IS A PACKAGE CONTAINING A RANDOM NUMBER GENERATOR AND        *
c    SERVICE ROUTINES.                                                 *
c    THE ALGORITHM IS FROM                                             *
c      'TOWARD A UNVERSAL RANDOM NUMBER GENERATOR'                     *
c      G.MARSAGLIA, A.ZAMAN ;  FSU-SCRI-87-50                          *
c    IMPLEMENTATION BY K. HAHN  DEC. 88,                               *
c    THIS GENERATOR SHOULD NOT DEPEND ON THE HARD WARE ( IF A REAL HAS *
c    AT LEAST 24 SIGNIFICANT BITS IN INTERNAL REPRESENTATION ),        *
c    THE PERIOD IS ABOUT 2**144,                                       *
c    TIME FOR ONE CALL AT IBM-XT IS ABOUT 0.7 MILLISECONDS,            *
c    THE PACKAGE CONTAINS                                              *
c      FUNCTION DT_RNDM(I)                  : GENERATOR                *
c      SUBROUTINE DT_RNDMST(NA1,NA2,NA3,NB4): INITIALIZATION           *
c      SUBROUTINE DT_RNDMIN(U,C,CD,CM,I,J)  : PUT SEED TO GENERATOR    *
c      SUBROUTINE DT_RNDMOU(U,C,CD,CM,I,J)  : TAKE SEED FROM GENERATOR *
c      SUBROUTINE DT_RNDMTE(IO)             : TEST OF GENERATOR        *
c---                                                                   *
c    FUNCTION DT_RNDM(I)                                               *
c       GIVES UNIFORMLY DISTRIBUTED RANDOM NUMBERS  IN (0..1)          *
c       I  - DUMMY VARIABLE, NOT USED                                  *
c    SUBROUTINE DT_RNDMST(NA1,NA2,NA3,NB1)                             *
c       INITIALIZES THE GENERATOR, MUST BE CALLED BEFORE USING DT_RNDM *
c       NA1,NA2,NA3,NB1  - VALUES FOR INITIALIZING THE GENERATOR       *
c                          NA? MUST BE IN 1..178 AND NOT ALL 1         *
c                          12,34,56  ARE THE STANDARD VALUES           *
c                          NB1 MUST BE IN 1..168                       *
c                          78  IS THE STANDARD VALUE                   *
c    SUBROUTINE DT_RNDMIN(U,C,CD,CM,I,J)                               *
c       PUTS SEED TO GENERATOR ( BRINGS GENERATOR IN THE SAME STATUS   *
c       AS AFTER THE LAST DT_RNDMOU CALL )                             *
c       U(97),C,CD,CM,I,J  - SEED VALUES AS TAKEN FROM DT_RNDMOU       *
c    SUBROUTINE DT_RNDMOU(U,C,CD,CM,I,J)                               *
c       TAKES SEED FROM GENERATOR                                      *
c       U(97),C,CD,CM,I,J  - SEED VALUES                               *
c    SUBROUTINE DT_RNDMTE(IO)                                          *
c       TEST OF THE GENERATOR                                          *
c       IO     - DEFINES OUTPUT                                        *
c                  = 0  OUTPUT ONLY IF AN ERROR IS DETECTED            *
c                  = 1  OUTPUT INDEPENDEND ON AN ERROR                 *
c       DT_RNDMTE USES DT_RNDMIN AND DT_RNDMOU TO BRING GENERATOR TO   *
c       SAME STATUS                                                    *
c       AS BEFORE CALL OF DT_RNDMTE                                    *
c***********************************************************************
c
c===rndm===============================================================*
c
CDECK  ID>, DT_RNDM
ccccc &&&&&&&&&&  KK
      DOUBLE PRECISION FUNCTION DT_RNDM(VDUMMY)
      real*8 VDUMMY
      real*8  u
      call rndc(u)
      DT_RNDM = u
      end
      DOUBLE PRECISION FUNCTION DT_RNDMNOrig(VDUMMY)
cccc  &&&&&&&&&
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c random number generator
      COMMON /DTRAND/ U(97),C,CD,CM,I,J


 100  CONTINUE
      DT_RNDM = U(I)-U(J)
      IF ( DT_RNDM.LT.0.0D0 ) DT_RNDM = DT_RNDM+1.0D0
      U(I) = DT_RNDM
      I    = I-1
      IF ( I.EQ.0 ) I = 97
      J    = J-1
      IF ( J.EQ.0 ) J = 97
      C    = C-CD
      IF ( C.LT.0.0D0 ) C = C+CM
      DT_RNDM = DT_RNDM-C
      IF ( DT_RNDM.LT.0.0D0 ) DT_RNDM = DT_RNDM+1.0D0

      IF ((DT_RNDM.EQ.0.D0).OR.(DT_RNDM.EQ.1.D0)) GOTO 100
c .........
       DT_RNDMNOrig = 0.
c..........
      RETURN
      END
c
c===rndmst=============================================================*
c
CDECK  ID>, DT_RNDMST
      SUBROUTINE DT_RNDMST(NA1,NA2,NA3,NB1)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c random number generator
      COMMON /DTRAND/ U(97),C,CD,CM,I,J


      MA1 = NA1
      MA2 = NA2
      MA3 = NA3
      MB1 = NB1
      I   = 97
      J   = 33
      DO 20 II2 = 1,97
        S = 0
        T = 0.5D0
        DO 10 II1 = 1,24
          MAT  = MOD(MOD(MA1*MA2,179)*MA3,179)
          MA1  = MA2
          MA2  = MA3
          MA3  = MAT
          MB1  = MOD(53*MB1+1,169)
          IF ( MOD(MB1*MAT,64).GE.32 ) S = S+T
   10   T = 0.5D0*T
   20 U(II2) = S
      C  =   362436.0D0/16777216.0D0
      CD =  7654321.0D0/16777216.0D0
      CM = 16777213.0D0/16777216.0D0
      RETURN
      END
c
c===rndmin=============================================================*
c
CDECK  ID>, DT_RNDMIN
      SUBROUTINE DT_RNDMIN(UIN,CIN,CDIN,CMIN,IIN,JIN)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c random number generator
      COMMON /DTRAND/ U(97),C,CD,CM,I,J


      DIMENSION UIN(97)

      DO 10 KKK = 1,97
   10 U(KKK) = UIN(KKK)
      C  = CIN
      CD = CDIN
      CM = CMIN
      I  = IIN
      J  = JIN

      RETURN
      END
c
c===rndmou=============================================================*
c
CDECK  ID>, DT_RNDMOU
      SUBROUTINE DT_RNDMOU(UOUT,COUT,CDOUT,CMOUT,IOUT,JOUT)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c random number generator
      COMMON /DTRAND/ U(97),C,CD,CM,I,J


      DIMENSION UOUT(97)

      DO 10 KKK = 1,97
   10 UOUT(KKK) = U(KKK)
      COUT  = C
      CDOUT = CD
      CMOUT = CM
      IOUT  = I
      JOUT  = J

      RETURN
      END
c
c===rndmte=============================================================*
c
CDECK  ID>, DT_RNDMTE
      SUBROUTINE DT_RNDMTE(IO)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION UU(97),U(6),X(6),D(6)
      DATA U / 6533892.D0, 14220222.D0, 7275067.D0, 6172232.D0,
     +8354498.D0, 10633180.D0/

      CALL DT_RNDMOU(UU,CC,CCD,CCM,II,JJ)
      CALL DT_RNDMST(12,34,56,78)
      DO 10 II1 = 1,20000
   10 XX = DT_RNDM(XX)
      SD        = 0.0D0
      DO 20 II2 = 1,6
        X(II2)  = 4096.D0*(4096.D0*DT_RNDM(SD))
        D(II2)  = X(II2)-U(II2)
   20 SD = SD+D(II2)
      CALL DT_RNDMIN(UU,CC,CCD,CCM,II,JJ)
c*sr 24.01.95
C     IF ( IO.EQ. 1.OR. SD.NE.0. 0) WRITE(6,500) (U(I),X(I),D(I),I=1,6)
      IF ((IO.EQ.1).OR.(SD.NE.0.0)) THEN
C        WRITE(6,1000)
 1000    FORMAT(/,/,1X,'DT_RNDMTE: TEST OF RANDOM-NUMBER GENERATOR...',
     &          ' PASSED')
      ENDIF
c*
      RETURN
  500 FORMAT('  === TEST OF THE RANDOM-GENERATOR ===',/,
     &'    EXPECTED VALUE    CALCULATED VALUE     DIFFERENCE',/, 6(F17.
     &1,F20.1,F15.3,/), '  === END OF TEST ;',
     &'  GENERATOR HAS THE SAME STATUS AS BEFORE CALLING DT_RNDMTE')
      END
c
c
c===title==============================================================*
c
CDECK  ID>, DT_TITLE
      SUBROUTINE DT_TITLE

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      CHARACTER*6 CVERSI
      CHARACTER*11 CCHANG
      DATA CVERSI,CCHANG /'3.0-3 ','15 APR 2001'/

      CALL DT_XTIME
      WRITE(ErrorOut,1000) CVERSI,CCHANG
 1000 FORMAT(1X,'+-------------------------------------------------',
     &                  '----------------------+',/,
     &     1X,'|',71X,'|',/,
     &     1X,'|',26X,'DPMJET VERSION ',A6,24X,'|',/,
     &     1X,'|',71X,'|',/,
     &     1X,'|',22X,'(LAST CHANGE: ',A11,')',23X,'|',/,
     &     1X,'|',71X,'|',/,
     &     1X,'|',12X,'AUTHORS: STEFAN ROESLER   (SLAC)',27X,'|',/,
     &     1X,'|',21X,'RALPH ENGEL      (BARTOL RES. INST.)',14X,'|',/,
     &     1X,'|',21X,'JOHANNES RANFT   (SIEGEN UNIV.)',19X,'|',/,
     &     1X,'|',71X,'|',/,
     &     1X,'|',12X,'HTTP://HOME.CERN.CH/~SROESLER/DPMJET3.HTML',
     &                                              17X,'|',/,
     &     1X,'|',71X,'|',/,
     &     1X,'+-------------------------------------------------',
     &                '----------------------+',/,
     &     1X,'| PLEASE SEND SUGGESTIONS, BUG REPORTS, ETC. TO: ',
     &                                  'STEFAN.ROESLER@CERN.CH |',/,
     &     1X,'+-------------------------------------------------',
     &                '----------------------+',/)

      RETURN
      END
c
c===evtini=============================================================*
c
CDECK  ID>, DT_EVTINI
      SUBROUTINE DT_EVTINI

c***********************************************************************
c Initialization of DTEVT1.                                            *
c This version dated 15.01.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c event flag
      COMMON /DTEVNO/ NEVENT,ICASCA

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL


c initialization of DTEVT1/DTEVT2
      NEND = NHKK
      IF (NEVENT.EQ.1) NEND = NMXHKK
      NHKK   = 0
      NEVHKK = NEVENT
      DO 1 I=1,NEND
         ISTHKK(I)   = 0
         IDHKK(I)    = 0
         JMOHKK(1,I) = 0
         JMOHKK(2,I) = 0
         JDAHKK(1,I) = 0
         JDAHKK(2,I) = 0
         IDRES(I)    = 0
         IDXRES(I)   = 0
         NOBAM(I)    = 0
         IDCH(I)     = 0
         IHIST(1,I)  = 0
         IHIST(2,I)  = 0
         DO 2 J=1,4
            PHKK(J,I) = 0.0D0
            VHKK(J,I) = 0.0D0
            WHKK(J,I) = 0.0D0
    2    CONTINUE
         PHKK(5,I) = 0.0D0
    1 CONTINUE
      DO 3 I=1,10
         NPOINT(I) = 0
    3 CONTINUE
      CALL DT_CHASTA(-1)

C* initialization of DTLTRA
C      IF (NCOMPO.GT.0) CALL DT_LTINI(ID,EPN,PPN,ECM)

      RETURN
      END
c
c===statis=============================================================*
c
CDECK  ID>, DT_STATIS
      SUBROUTINE DT_STATIS(MODE)

c***********************************************************************
c Initialization and output of run-statistics.                         *
c              MODE  = 1     initialization                            *
c                    = 2     output                                    *
c This version dated 23.01.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY3=1.0D-3)

c statistics
      COMMON /DTSTA1/ ICREQU,ICSAMP,ICCPRO,ICDPR,ICDTA,
     &                ICRJSS,ICVV2S,ICCHAI(2,9),ICRES(9),ICDIFF(5),
     &                ICEVTG(8,0:30)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c central particle production, impact parameter biasing
      COMMON /DTIMPA/ BIMIN,BIMAX,XSFRAC,ICENTR

c various options for treatment of partons (DTUNUC 1.x)
c (chain recombination, Cronin,..)
      LOGICAL LCO2CR,LINTPT
      COMMON /DTCHAI/ SEASQ,CRONCO,CUTOF,MKCRON,ISICHA,IRECOM,
     &                LCO2CR,LINTPT

c nucleon-nucleon event-generator
      CHARACTER*8 CMODEL
      LOGICAL LPHOIN
      COMMON /DTMODL/ CMODEL(4),ELOJET,MCGENE,LPHOIN

c flags for particle decays
      COMMON /DTFRPA/ MSTUX(20),PARUX(20),MSTJX(20),PARJX(20),
     &                IMSTU(20),IPARU(20),IMSTJ(20),IPARJ(20),
     &                NMSTU,NPARU,NMSTJ,NPARJ,PDB,PDBSEA(3),ISIG0,IPI0

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3


      DIMENSION PP(4),PT(4)

      GOTO (1,2) MODE

c initialization
    1 CONTINUE

c   initialize statistics counter
      ICREQU = 0
      ICSAMP = 0
      ICCPRO = 0
      ICDPR  = 0
      ICDTA  = 0
      ICRJSS = 0
      ICVV2S = 0
      DO 10 I=1,9
         ICRES(I)    = 0
         ICCHAI(1,I) = 0
         ICCHAI(2,I) = 0
   10 CONTINUE
c   initialize rejection counter
      IRPT      = 0
      IRHHA     = 0
      LOMRES    = 0
      LOBRES    = 0
      IRFRAG    = 0
      IREVT     = 0
      IRRES(1)  = 0
      IRRES(2)  = 0
      IRCHKI(1) = 0
      IRCHKI(2) = 0
      IRCRON(1) = 0
      IRCRON(2) = 0
      IRCRON(3) = 0
      IRDIFF(1) = 0
      IRDIFF(2) = 0
      IRINC     = 0
      DO 11 I=1,5
         ICDIFF(I) = 0
   11 CONTINUE
      DO 12 I=1,8
         DO 13 J=0,30
            ICEVTG(I,J) = 0
   13    CONTINUE
   12 CONTINUE

      RETURN

c output
    2 CONTINUE

c   statistics counter
      WRITE(ErrorOut,1000)
 1000 FORMAT(/,/,1X,'STATIS:',20X,'STATISTICS OF THE RUN',/,
     &       28X,'---------------------')
      WRITE(ErrorOut,
     * 1001) ICREQU,ICSAMP,DBLE(ICSAMP)/DBLE(ICREQU)
 1001 FORMAT(/,1X,'NUMBER OF EVENTS REQUESTED / SAMPLED',13X,
     &       I8,' / ',I8,/,1X,'NUMBER OF SAMP. EVTS PER REQUESTED ',
     &       'EVENT',11X,F9.1)
      IF (ICDIFF(1).NE.0) THEN
         WRITE(ErrorOut,1009) ICDIFF
 1009    FORMAT(/,1X,'DIFFRACTIVE EVENTS:    TOTAL   ',I8,/,49X,
     &          'LOW MASS   HIGH MASS',/,24X,'SINGLE DIFFRACTION',
     &          7X,I8,4X,I8,/,24X,'DOUBLE DIFFRACTION',7X,I8,4X,I8)
      ENDIF
      IF (ICENTR.GT.0) THEN
         WRITE(ErrorOut,1002) DBLE(ICCPRO)/DBLE(ICSAMP),
     &                    DBLE(ICSAMP)/DBLE(ICCPRO)
 1002    FORMAT(/,1X,'CENTRAL PRODUCTION:',/,2X,'MEAN NUMBER',
     &          ' OF SAMPLED GLAUBER-EVENTS PER EVENT',9X,F9.1,/,
     &          2X,'FRACTION OF PRODUCTION CROSS SECTION',21X,F10.6)
      ENDIF
      WRITE(ErrorOut,1003) DBLE(ICDPR)/DBLE(ICSAMP),
     &                 DBLE(ICDTA)/DBLE(ICSAMP)
 1003 FORMAT(/,54X,'PROJ.    TARG.',/,1X,'AVERAGE NUMBER OF WOUNDED',
     &       ' NUCLEONS AFTER X-SAMPLING',2(4X,F6.2))

      IF (MCGENE.EQ.1) THEN
         WRITE(ErrorOut,1004) DBLE(ICRJSS)/DBLE(ICSAMP)
 1004    FORMAT(/,1X,'MEAN NUMBER OF SEA-SEA CHAIN REJECTIONS PER',
     &          ' EVENT',3X,F9.1)
         IF (ISICHA.EQ.1) THEN
            WRITE(ErrorOut,1005) DBLE(ICVV2S)/DBLE(ICSAMP)
 1005       FORMAT(/,1X,'REGGEON CONTRIBUTION:',/,1X,'MEAN NUMBER ',
     &             'OF SINGLE CHAINS  PER EVENT',13X,F9.1)
         ENDIF
         WRITE(ErrorOut,1006)
 1006    FORMAT(/,1X,'CHAIN SYSTEM STATISTICS:  (PER EVENT)',/,
     &       23X,'MEAN NUMBER OF CHAINS      MEAN NUMBER OF CHAINS',/,
     &       23X,'SAMPLED    HADRONIZED      HAVING MASS OF A RESO.')
         WRITE(ErrorOut,
     * 1007) (DBLE(ICCHAI(1,J))/(2.0D0*DBLE(ICSAMP)),
     &                     DBLE(ICCHAI(2,J))/(2.0D0*DBLE(ICREQU)),
     &                     DBLE(ICRES(J))/(2.0D0*DBLE(ICREQU)),J=1,8),
     &                  DBLE(ICCHAI(2,9))/MAX(DBLE(ICCHAI(1,9)),TINY3)
 1007    FORMAT(1X,'SEA     - SEA     ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'DISEA   - SEA     ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'SEA     - DISEA   ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'SEA     - VALENCE ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'DISEA   - VALENCE ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'VALENCE - SEA     ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'VALENCE - DISEA   ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'VALENCE - VALENCE ',6X,F4.1,8X,F4.1,17X,F4.1,/,
     &          1X,'FUSED CHAINS      ',18X,F4.1,17X,F4.1,/)
         WRITE(ErrorOut,1008)
     &     (DBLE(IRCRON(I))/MAX(DBLE(IRCRON(1)),TINY3),I=2,3),
     &     DBLE(IRPT)/DBLE(ICREQU),(DBLE(IRRES(I))/DBLE(ICREQU),I=1,2),
     &     DBLE(LOMRES)/DBLE(ICREQU),DBLE(LOBRES)/DBLE(ICREQU),
     &     (DBLE(IRCHKI(I))/DBLE(ICREQU),I=1,2),
     &     (DBLE(IRDIFF(I))/DBLE(ICREQU),I=1,2),
     &     DBLE(IRHHA)/DBLE(ICREQU),
     &     DBLE(IRFRAG)/DBLE(ICREQU),DBLE(IREVT)/DBLE(ICREQU),
     &     (DBLE(IREXCI(I))/DBLE(ICREQU),I=1,2),IREXCI(3)
 1008    FORMAT(/,1X,'REJECTION COUNTER:  (NEVT = NO. OF EVENTS)',/,/,
     &       1X,'CRONIN-EFFECT (CRONIN)',15X,'IRCRON(2)/IRCRON(1) = ',
     &       F7.2,/,38X,'IRCRON(3)/IRCRON(1) = ',F7.2,/,1X,
     &       'INTRINS. P_T (GETSPT)',21X,'IRPT     /NEVT = ',F7.2,/,
     &       1X,'CHAIN MASS CORR. FOR RESONANCES (EVTRES)',2X,
     &       'IRRES(1) /NEVT = ',F7.2,/,33X,'(CH2RES)  IRRES(2) /',
     &       'NEVT = ',F7.2,/,43X,'LOMRES   /NEVT = ',F7.2,/,
     &       43X,'LOBRES   /NEVT = ',F7.2,/,1X,'KINEM. CORR. OF',
     &       ' 2-CHAIN SYSTEMS (CHKINE)  IRCHKI(1)/NEVT = ',F7.2,/,
     &       43X,'IRCHKI(2)/NEVT = ',F7.2,/,1X,'DIFFRACTION',31X,
     &       'IRDIFF(1)/NEVT = ',F7.2,/,43X,'IRDIFF(2)/NEVT = ',
     &       F7.2,/,1X,'TOTAL NO. OF REJ.',
     &       ' IN CHAIN-SYSTEMS TREATMENT (GETCSY)',/,43X,
     &       'IRHHA    /NEVT = ',F7.2,/,1X,'FRAGMENTATION (EVTFRA)',
     &       ' (NOT YET USED!)',4X,'IRFRAG   /NEVT = ',F7.2,/,
     &       1X,'TOTAL NO. OF REJ. IN DPM-TREATMENT OF ONE EVENT',
     &       ' (EVENTA)',/,43X,'IREVT    /NEVT = ',F7.2,/,1X,
     &       'TREATMENT OF FINAL NUCLEON CONF.',10X,'IREXCI(1)/NEVT = '
     &       ,F7.2,/,43X,'IREXCI(2)/NEVT = ',F7.2,/,48X,
     &       'IREXCI(3) = ',I5,/)
      ELSEIF (MCGENE.EQ.2) THEN
         WRITE(ErrorOut,1010) ELOJET
 1010    FORMAT(/,/,1X,'PHOJET-TREATMENT OF CHAIN SYSTEMS ABOVE  ',
     &          F4.1,' GEV')
         WRITE(ErrorOut,1011)
 1011    FORMAT(/,1X,'1. CHAIN SYSTEM STATISTICS - TOTAL NUMBERS:',/,
     &          30X,'--------------',/,/,12X,'S-S',5X,'D-S',5X,'S-D',
     &          5X,'S-V',5X,'D-V',5X,'V-S',5X,'V-D',5X,'V-V')
         WRITE(ErrorOut,1012) ((ICEVTG(I,J),I=1,8),J=0,1),
     &                    (INT(ICCHAI(2,I)/2.0D0),I=1,8),
     &                    (ICEVTG(I,2),I=1,8),(ICEVTG(I,29),I=1,8),
     &                    ((ICEVTG(I,J),I=1,8),J=3,7),
     &                    ((ICEVTG(I,J),I=1,8),J=19,21),
     &                    (ICEVTG(I,8),I=1,8),
     &                    ((ICEVTG(I,J),I=1,8),J=22,24),
     &                    (ICEVTG(I,9),I=1,8),
     &                    ((ICEVTG(I,J),I=1,8),J=25,28),
     &                    ((ICEVTG(I,J),I=1,8),J=10,18)
 1012    FORMAT(/,1X,'REQ.TO.',8I8,/,/,1X,'LOW RQ.',8I8,/,1X,'LOW AC.',
     &          8I8,/,/,1X,'PHOJET ',8I8,/,'   SNGL ',8I8,/,/,
     &          ' NO-DIF.',8I8,/,
     &          ' EL-SCA.',8I8,/,' QEL-SC.',8I8,/,' DBL-PO.',8I8,/,
     &          ' DIFF-1 ',8I8,/,'  LOW   ',8I8,/,'  HIGH  ',8I8,/,
     &          '  H-DIFF',8I8,/,' DIFF-2 ',8I8,/,'  LOW   ',8I8,/,
     &          '  HIGH  ',8I8,/,'  H-DIFF',8I8,/,' DBL-DI.',8I8,/,
     &          '  LO-LO ',8I8,/,'  HI-HI ',8I8,/,'  LO-HI ',8I8,/,
     &          '  HI-LO ',8I8,/,
     &          ' DIR-GA.',8I8,/,/,' DIR-1  ',8I8,/,' DIR-2  ',8I8,/,
     &          ' DBL-DIR',8I8,/,' S-POM. ',8I8,/,' H-POM. ',8I8,/,
     &          ' S-REG. ',8I8,/,' ENH-TRG',8I8,/,' ENH-LOG',8I8)
         WRITE(ErrorOut,1013)
 1013    FORMAT(/,1X,'2. CHAIN SYSTEM STATISTICS -',
     &          ' MEAN NUMBERS PER EVT:',/,30X,'---------------------',
     &          /,/,16X,'S-S',7X,'D-S',7X,'S-D')
         WRITE(ErrorOut,1014)
     &                 ((DBLE(ICEVTG(I,J))/DBLE(ICSAMP),I=1,3),J=0,1),
     &                 (DBLE(ICCHAI(2,I))/(2.0D0*DBLE(ICSAMP)),I=1,3),
     &                 ((DBLE(ICEVTG(I,J))/DBLE(ICSAMP),I=1,3),J=2,18)
 1014    FORMAT(/,1X,'REQ.TO.    ',3E10.2,/,/,1X,'LOW RQ.    ',3E10.2,/,
     &          1X,'LOW AC.    ',3E10.2,/,/,1X,'PHOJET     ',3E10.2,/,/,
     &          ' NO-DIF.    ',3E10.2,/,' EL-SCA.    ',3E10.2,/,
     &          ' QEL-SC.    ',3E10.2,/,' DBL-PO.    ',3E10.2,/,
     &          ' DIFF-1     ',3E10.2,/,' DIFF-2     ',3E10.2,/,
     &          ' DBL-DI.    ',3E10.2,/,' DIR-GA.    ',3E10.2,/,/,
     &          ' DIR-1      ',3E10.2,/,' DIR-2      ',3E10.2,/,
     &          ' DBL-DIR    ',3E10.2,/,' S-POM.     ',3E10.2,/,
     &          ' H-POM.     ',3E10.2,/,' S-REG.     ',3E10.2,/,
     &          ' ENH-TRG    ',3E10.2,/,' ENH-LOG    ',3E10.2)
         WRITE(ErrorOut,1015)
 1015    FORMAT(/,16X,'S-V',7X,'D-V',7X,'V-S',7X,'V-D',7X,'V-V')
         WRITE(ErrorOut,1016)
     &                 ((DBLE(ICEVTG(I,J))/DBLE(ICSAMP),I=4,8),J=0,1),
     &                 (DBLE(ICCHAI(2,I))/(2.0D0*DBLE(ICSAMP)),I=4,8),
     &                 ((DBLE(ICEVTG(I,J))/DBLE(ICSAMP),I=4,8),J=2,18)
 1016    FORMAT(/,1X,'REQ.TO.    ',5E10.2,/,/,1X,'LOW RQ.    ',5E10.2,/,
     &          1X,'LOW AC.    ',5E10.2,/,/,1X,'PHOJET     ',5E10.2,/,/,
     &          ' NO-DIF.    ',5E10.2,/,' EL-SCA.    ',5E10.2,/,
     &          ' QEL-SC.    ',5E10.2,/,' DBL-PO.    ',5E10.2,/,
     &          ' DIFF-1     ',5E10.2,/,' DIFF-2     ',5E10.2,/,
     &          ' DBL-DI.    ',5E10.2,/,' DIR-GA.    ',5E10.2,/,/,
     &          ' DIR-1      ',5E10.2,/,' DIR-2      ',5E10.2,/,
     &          ' DBL-DIR    ',5E10.2,/,' S-POM.     ',5E10.2,/,
     &          ' H-POM.     ',5E10.2,/,' S-REG.     ',5E10.2,/,
     &          ' ENH-TRG    ',5E10.2,/,' ENH-LOG    ',5E10.2)

      ENDIF
      CALL DT_CHASTA(1)

      IF ((PDBSEA(1).GT.0.0D0).OR.(PDBSEA(2).GT.0.0D0)
     &                        .OR.(PDBSEA(3).GT.0.0D0)) THEN
         WRITE(ErrorOut,*)'YGS1S,YGS2S,YUS1S,YUS2S',
     &    DBRKA(1,1)+DBRKA(2,1),DBRKA(1,2)+DBRKA(2,2),
     &    DBRKA(1,3)+DBRKA(2,3),DBRKA(1,4)+DBRKA(2,4)
         WRITE(ErrorOut,*)'YGS1R,YGS2R,YUS1R,YUS2R',
     &    DBRKR(1,1)+DBRKR(2,1),DBRKR(1,2)+DBRKR(2,2),
     &    DBRKR(1,3)+DBRKR(2,3),DBRKR(1,4)+DBRKR(2,4)
         WRITE(ErrorOut,*)'YGSA1S,YGSA2S,YUSA1S,YUSA2S',
     &    DBRKA(1,5)+DBRKA(2,5),DBRKA(1,6)+DBRKA(2,6),
     &    DBRKA(1,7)+DBRKA(2,7),DBRKA(1,8)+DBRKA(2,8)
         WRITE(ErrorOut,*)'YGSA1R,YGSA2R,YUSA1R,YUSA2R',
     &    DBRKR(1,5)+DBRKR(2,5),DBRKR(1,6)+DBRKR(2,6),
     &    DBRKR(1,7)+DBRKR(2,7),DBRKR(1,8)+DBRKR(2,8)
         WRITE(ErrorOut,*)'YG31S,YG32S,YU31S,YU32S',
     &    DBRKA(3,1),DBRKA(3,2),
     &    DBRKA(3,3),DBRKA(3,4)
         WRITE(ErrorOut,*)'YG31R,YG32R,YU31R,YU32R',
     &    DBRKR(3,1),DBRKR(3,2),
     &    DBRKR(3,3),DBRKR(3,4)
         WRITE(ErrorOut,*)'YG3A1S,YG3A2S,YU3A1S,YU3A2S',
     &    DBRKA(3,5),DBRKA(3,6),
     &    DBRKA(3,7),DBRKA(3,8)
         WRITE(ErrorOut,*)'YG3A1R,YG3A2R,YU3A1R,YU3A2R',
     &    DBRKR(3,5),DBRKR(3,6),
     &    DBRKR(3,7),DBRKR(3,8)
      ENDIF

      FAC = 1.0D0
      IF (MCGENE.EQ.2) THEN

C        CALL PHO_PHIST(-2,SIGMAX)
         CALL PHO_EVENT(-2,PP,PT,FAC,IREJ1)

      ENDIF

      CALL DT_XTIME

      RETURN
      END
c
c===evtout=============================================================*
c
CDECK  ID>, DT_EVTOUT
      SUBROUTINE DT_EVTOUT(MODE)

c***********************************************************************
c            MODE  = 1  plot content of complete DTEVT1 to out. unit   *
c                    3  plot entries of extended DTEVT1 (DTEVT2)       *
c                    4  plot entries of DTEVT1 and DTEVT2              *
c This version dated 11.12.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      PARAMETER (NMXHKK=90000)
      DIMENSION IRANGE(NMXHKK)

      IF (MODE.EQ.2) RETURN

      CALL DT_EVTPLO(IRANGE,MODE)

      RETURN
      END
c
c===evtplo=============================================================*
c
CDECK  ID>, DT_EVTPLO
      SUBROUTINE DT_EVTPLO(IRANGE,MODE)

c***********************************************************************
c            MODE  = 1  plot content of complete DTEVT1 to out. unit   *
c                    2  plot entries of DTEVT1 given by IRANGE         *
c                    3  plot entries of extended DTEVT1 (DTEVT2)       *
c                    4  plot entries of DTEVT1 and DTEVT2              *
c                    5  plot rejection counter                         *
c This version dated 11.12.94 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      CHARACTER*16 CHAU

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC


      DIMENSION IRANGE(NMXHKK)

      IF ((MODE.EQ.1).OR.(MODE.EQ.4)) THEN
         WRITE(ErrorOut,1000)
 1000    FORMAT(/,1X,'EVTPLO:',14X,'    CONTENT OF COMMON /DTEVT1/',/,
     &         15X,'           --------------------------',/,/,
     &             '       ST    ID  M1   M2   D1   D2     PX     PY',
     &             '     PZ      E       M',/)
         DO 1 I=1,NHKK
            WRITE(ErrorOut,
     * 1001) I,ISTHKK(I),IDHKK(I),JMOHKK(1,I),
     &                       JMOHKK(2,I),JDAHKK(1,I),JDAHKK(2,I),
     &                       PHKK(1,I),PHKK(2,I),PHKK(3,I),PHKK(4,I),
     &                       PHKK(5,I)
C           WRITE(LOUT,1011) I,ISTHKK(I),IDHKK(I),JMOHKK(1,I),
C    &                       JMOHKK(2,I),JDAHKK(1,I),JDAHKK(2,I),
C    &                       PHKK(3,I),PHKK(4,I)
C           WRITE(LOUT,'(4E15.4)')
C    &         VHKK(1,I),VHKK(2,I),VHKK(3,I),VHKK(4,I)
 1001       FORMAT(I5,I5,I6,4I5,3F7.3,F8.3,F8.4)
 1011       FORMAT(I5,I5,I6,4I5,2E15.5)
    1    CONTINUE
         WRITE(ErrorOut,*)
C        DO 4 I=1,NHKK
C           WRITE(LOUT,1006) I,ISTHKK(I),
C    &                    VHKK(1,I),VHKK(2,I),VHKK(3,I),WHKK(1,I),
C    &                    WHKK(2,I),WHKK(3,I)
C1006       FORMAT(1X,I4,I6,6E10.3)
C   4    CONTINUE
      ENDIF

      IF (MODE.EQ.2) THEN
         WRITE(ErrorOut,1000)
         NC = 0
    2    CONTINUE
         NC = NC+1
         IF (IRANGE(NC).EQ.-100) GOTO 9999
         I = IRANGE(NC)
         WRITE(ErrorOut,1001) I,ISTHKK(I),IDHKK(I),JMOHKK(1,I),
     &                    JMOHKK(2,I),JDAHKK(1,I),JDAHKK(2,I),
     &                    PHKK(1,I),PHKK(2,I),PHKK(3,I),PHKK(4,I),
     &                    PHKK(5,I)
         GOTO 2
      ENDIF

      IF ((MODE.EQ.3).OR.(MODE.EQ.4)) THEN
         WRITE(ErrorOut,1002)
 1002    FORMAT(/,1X,'EVTPLO:',14X,
     &         ' CONTENT OF COMMON /DTEVT1/,/DTEVT2/',/,
     &         15X,'        -----------------------------------',/,/,
     &             '       ST    ID   M1   M2   D1   D2  IDR  IDXR',
     &             ' NOBAM IDCH    M',/)
         DO 3 I=1,NHKK
C           IF ((ISTHKK(I).GT.10).OR.(ISTHKK(I).EQ.1)) THEN
               KF    = IDHKK(I)
               IDCHK = KF/10000
               IF ((((IDCHK.EQ.7).OR.(IDCHK.EQ.8)).AND.
     &            (KF.NE.80000)).OR.(IDHKK(I).EQ.99999)) KF = 92

               CALL PYNAME(KF,CHAU)

               WRITE(ErrorOut,
     * 1003) I,ISTHKK(I),IDHKK(I),JMOHKK(1,I),
     &                       JMOHKK(2,I),JDAHKK(1,I),JDAHKK(2,I),
     &                       IDRES(I),IDXRES(I),NOBAM(I),IDCH(I),
     &                       PHKK(5,I),CHAU
 1003          FORMAT(I5,I5,I6,4I5,4I4,F8.4,2X,A)
C           ENDIF
    3    CONTINUE
      ENDIF

      IF (MODE.EQ.5) THEN
         WRITE(ErrorOut,1004)
 1004    FORMAT(/,1X,'EVTPLO:',14X,'    CONTENT OF COMMON /DTREJC/',/,
     &         15X,'           --------------------------',/)
         WRITE(ErrorOut,
     * 1005) IRPT,IRHHA,IRRES,LOMRES,LOBRES,IREMC,IRFRAG,
     &                    IRSEA,IRCRON
 1005    FORMAT(1X,'IRPT   = ',I5,'  IRHHA = ',I5,/,
     &          1X,'IRRES  = ',2I5,'  LOMRES = ',I5,'  LOBRES = ',I5,/,
     &          1X,'IREMC  = ',10I5,/,
     &          1X,'IRFRAG = ',I5,'  IRSEA = ',I5,' IRCRON = ',I5,/)
      ENDIF

 9999 RETURN
      END
c
c===evtput=============================================================*
c
CDECK  ID>, DT_EVTPUT
      SUBROUTINE DT_EVTPUT(IST,ID,M1,M2,PX,PY,PZ,E,IDR,IDXR,IDC)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TINY10=1.0D-10,TINY4=1.0D-4,TINY3=1.0D-3,
     &           TINY2=1.0D-2,SQTINF=1.0D+15,ZERO=0.0D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


C     IF (MODE.GT.100) THEN
C        WRITE(LOUT,'(1X,A,I5,A,I5)')
C    &        'EVTPUT: reset NHKK = ',NHKK,' to NHKK =',NHKK-MODE+100
C        NHKK = NHKK-MODE+100
C        RETURN
C     ENDIF
      MO1  = M1
      MO2  = M2
      NHKK = NHKK+1

      IF (NHKK.GT.NMXHKK) THEN
         WRITE(ErrorOut,1000) NHKK
 1000    FORMAT(1X,'EVTPUT: NHKK EXEEDS NMXHKK = ',I7,
     &             '! PROGRAM EXECUTION STOPPED..')
         STOP
      ENDIF
      IF (M1.LT.0) MO1 = NHKK+M1
      IF (M2.LT.0) MO2 = NHKK+M2
      ISTHKK(NHKK)   = IST
      IDHKK(NHKK)    = ID
      JMOHKK(1,NHKK) = MO1
      JMOHKK(2,NHKK) = MO2
      JDAHKK(1,NHKK) = 0
      JDAHKK(2,NHKK) = 0
      IDRES(NHKK)    = IDR
      IDXRES(NHKK)   = IDXR
      IDCH(NHKK)     = IDC
c* here we need to do something..
      IF (ID.EQ.88888) THEN
         IDMO1 = ABS(IDHKK(MO1))
         IDMO2 = ABS(IDHKK(MO2))
         IF ((IDMO1.LT.100).AND.(IDMO2.LT.100)) NOBAM(NHKK) = 3
         IF ((IDMO1.LT.100).AND.(IDMO2.GT.100)) NOBAM(NHKK) = 4
         IF ((IDMO1.GT.100).AND.(IDMO2.GT.100)) NOBAM(NHKK) = 5
         IF ((IDMO1.GT.100).AND.(IDMO2.LT.100)) NOBAM(NHKK) = 6
      ELSE
         NOBAM(NHKK) = 0
      ENDIF
      IDBAM(NHKK) = IDT_ICIHAD(ID)
      IF (MO1.GT.0) THEN
         IF (JDAHKK(1,MO1).NE.0) THEN
            JDAHKK(2,MO1) = NHKK
         ELSE
            JDAHKK(1,MO1) = NHKK
         ENDIF
      ENDIF
      IF (MO2.GT.0) THEN
         IF (JDAHKK(1,MO2).NE.0) THEN
            JDAHKK(2,MO2) = NHKK
         ELSE
            JDAHKK(1,MO2) = NHKK
         ENDIF
      ENDIF
C      IF ((IDBAM(NHKK).GT.0).AND.(IDBAM(NHKK).NE.7)) THEN
C         PTOT   = SQRT(PX**2+PY**2+PZ**2)
C         AM0    = SQRT(ABS( (E-PTOT)*(E+PTOT) ))
C         AMRQ   = AAM(IDBAM(NHKK))
C         AMDIF2 = (AM0-AMRQ)*(AM0+AMRQ)
C         IF ((ABS(AMDIF2).GT.TINY3).AND.(E.LT.SQTINF).AND.
C     &       (PTOT.GT.ZERO)) THEN
C            DELTA = -AMDIF2/(2.0D0*(E+PTOT))
CC           DELTA = (AMRQ2-AM2)/(2.0D0*(E+PTOT))
C            E     = E+DELTA
C            PTOT1 = PTOT-DELTA
C            PX    = PX*PTOT1/PTOT
C            PY    = PY*PTOT1/PTOT
C            PZ    = PZ*PTOT1/PTOT
C         ENDIF
C      ENDIF
      PHKK(1,NHKK) = PX
      PHKK(2,NHKK) = PY
      PHKK(3,NHKK) = PZ
      PHKK(4,NHKK) = E
      PTOT = SQRT( PX**2+PY**2+PZ**2 )
      IF ((IDHKK(NHKK).GE.22).AND.(IDHKK(NHKK).LE.24)) THEN
         PHKK(5,NHKK) = PHKK(4,NHKK)**2-PTOT**2
         PHKK(5,NHKK) = SIGN(SQRT(ABS(PHKK(5,NHKK))),PHKK(5,NHKK))
      ELSE
         PHKK(5,NHKK) = (PHKK(4,NHKK)-PTOT)*(PHKK(4,NHKK)+PTOT)
C        IF ((PHKK(5,NHKK).LT.0.0D0).AND.(ABS(PHKK(5,NHKK)).GT.TINY4))
C    &      WRITE(LOUT,'(1X,A,G10.3)')
C    &        'EVTPUT: negative mass**2 ',PHKK(5,NHKK)
         PHKK(5,NHKK) = SQRT(ABS(PHKK(5,NHKK)))
      ENDIF
      IDCHK = ID/10000
      IF (((IDCHK.EQ.7).OR.(IDCHK.EQ.8)).AND.(ID.NE.80000)) THEN
c special treatment for chains:
c    z coordinate of chain in Lab  = pos. of target nucleon
c    time of chain-creation in Lab = time of passage of projectile
c                                    nucleus at pos. of taget nucleus
C        VHKK(1,NHKK) = 0.5D0*(VHKK(1,MO1)+VHKK(1,MO2))
C        VHKK(2,NHKK) = 0.5D0*(VHKK(2,MO1)+VHKK(2,MO2))
         VHKK(1,NHKK) = VHKK(1,MO2)
         VHKK(2,NHKK) = VHKK(2,MO2)
         VHKK(3,NHKK) = VHKK(3,MO2)
         VHKK(4,NHKK) = VHKK(3,MO2)/BLAB-VHKK(3,MO1)/BGLAB
C        WHKK(1,NHKK) = 0.5D0*(WHKK(1,MO1)+WHKK(1,MO2))
C        WHKK(2,NHKK) = 0.5D0*(WHKK(2,MO1)+WHKK(2,MO2))
         WHKK(1,NHKK) = WHKK(1,MO1)
         WHKK(2,NHKK) = WHKK(2,MO1)
         WHKK(3,NHKK) = WHKK(3,MO1)
         WHKK(4,NHKK) = -WHKK(3,MO1)/BLAB+WHKK(3,MO2)/BGLAB
      ELSE
         IF (MO1.GT.0) THEN
            DO 1 I=1,4
               VHKK(I,NHKK) = VHKK(I,MO1)
               WHKK(I,NHKK) = WHKK(I,MO1)
    1       CONTINUE
         ELSE
            DO 2 I=1,4
               VHKK(I,NHKK) = ZERO
               WHKK(I,NHKK) = ZERO
    2       CONTINUE
         ENDIF
      ENDIF

      RETURN
      END
c
c===chasta=============================================================*
c
CDECK  ID>, DT_CHASTA
      SUBROUTINE DT_CHASTA(MODE)

c***********************************************************************
c This subroutine performs CHAin STAtistics and checks sequence of     *
c partons in dtevt1 and sorts them with projectile partons coming      *
c first if necessary.                                                  *
c                                                                      *
c This version dated  8.5.00  is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      CHARACTER*5 CCHTYP

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c pointer to chains in hkkevt common (used by qq-breaking mechanisms)
      PARAMETER (MAXCHN=10000)
      COMMON /DTIXCH/ IDXCHN(2,MAXCHN),NCHAIN


      DIMENSION ICHCFG(10,10,9,2),ICHTYP(5,5),
     &          CCHTYP(9),ICHSTA(10),ITOT(10)
      DATA ICHCFG /1800*0/
      DATA (ICHTYP(1,K),K=1,5) / 0, 1, 3, 0, 0/
      DATA (ICHTYP(2,K),K=1,5) / 2, 0, 0, 5, 0/
      DATA (ICHTYP(3,K),K=1,5) / 4, 0, 0, 7, 0/
      DATA (ICHTYP(4,K),K=1,5) / 0, 6, 8, 0, 0/
      DATA (ICHTYP(5,K),K=1,5) / 0, 0, 0, 0, 9/
      DATA ICHSTA / 21, 22, 31, 32, 41, 42, 51, 52, 61, 62/
      DATA CCHTYP / ' Q AQ','AQ Q ',' Q D ',' D Q ','AQ AD',
     &              'AD AQ',' D AD','AD D ',' G G '/
c
c initialization
c
      IF (MODE.EQ.-1) THEN
         NCHAIN = 0
c
c loop over DTEVT1 and analyse chain configurations
c
      ELSEIF (MODE.EQ.0) THEN
         DO 21 IDX=NPOINT(3),NHKK
            IDCHK = IDHKK(IDX)/10000
            IF (((IDCHK.EQ.7).OR.(IDCHK.EQ.8)).AND.
     &          (IDHKK(IDX).NE.80000).AND.
     &          (ISTHKK(IDX).NE.2).AND.(IDRES(IDX).EQ.0)) THEN
               IF (JMOHKK(1,IDX).GT.JMOHKK(2,IDX)) THEN
                  WRITE(ErrorOut,
     * *) ' CHASTA: JMOHKK(1,x) > JMOHKK(2,x) ',
     &                          ' AT ENTRY ',IDX
                  GOTO 21
               ENDIF
c
               IST1 = ABS(ISTHKK(JMOHKK(1,IDX)))
               IST2 = ABS(ISTHKK(JMOHKK(2,IDX)))
               IMO1 = IST1/10
               IMO1 = IST1-10*IMO1
               IMO2 = IST2/10
               IMO2 = IST2-10*IMO2
c   swop parton entries if necessary since we need projectile partons
c   to come first in the common
               IF (IMO1.GT.IMO2) THEN
                  NPTN = JMOHKK(2,IDX)-JMOHKK(1,IDX)+1
                  DO 22 K=1,NPTN/2
                     I0 = JMOHKK(1,IDX)-1+K
                     I1 = JMOHKK(2,IDX)+1-K
                     ITMP = ISTHKK(I0)
                     ISTHKK(I0) = ISTHKK(I1)
                     ISTHKK(I1) = ITMP
                     ITMP = IDHKK(I0)
                     IDHKK(I0) = IDHKK(I1)
                     IDHKK(I1) = ITMP
                     IF (JDAHKK(1,JMOHKK(1,I0)).EQ.I0)
     &                  JDAHKK(1,JMOHKK(1,I0)) = I1
                     IF (JDAHKK(2,JMOHKK(1,I0)).EQ.I0)
     &                  JDAHKK(2,JMOHKK(1,I0)) = I1
                     IF (JDAHKK(1,JMOHKK(2,I0)).EQ.I0)
     &                  JDAHKK(1,JMOHKK(2,I0)) = I1
                     IF (JDAHKK(2,JMOHKK(2,I0)).EQ.I0)
     &                  JDAHKK(2,JMOHKK(2,I0)) = I1
                     IF (JDAHKK(1,JMOHKK(1,I1)).EQ.I1)
     &                  JDAHKK(1,JMOHKK(1,I1)) = I0
                     IF (JDAHKK(2,JMOHKK(1,I1)).EQ.I1)
     &                  JDAHKK(2,JMOHKK(1,I1)) = I0
                     IF (JDAHKK(1,JMOHKK(2,I1)).EQ.I1)
     &                  JDAHKK(1,JMOHKK(2,I1)) = I0
                     IF (JDAHKK(2,JMOHKK(2,I1)).EQ.I1)
     &                  JDAHKK(2,JMOHKK(2,I1)) = I0
                     ITMP = JMOHKK(1,I0)
                     JMOHKK(1,I0) = JMOHKK(1,I1)
                     JMOHKK(1,I1) = ITMP
                     ITMP = JMOHKK(2,I0)
                     JMOHKK(2,I0) = JMOHKK(2,I1)
                     JMOHKK(2,I1) = ITMP
                     ITMP = JDAHKK(1,I0)
                     JDAHKK(1,I0) = JDAHKK(1,I1)
                     JDAHKK(1,I1) = ITMP
                     ITMP = JDAHKK(2,I0)
                     JDAHKK(2,I0) = JDAHKK(2,I1)
                     JDAHKK(2,I1) = ITMP
                     DO 23 J=1,4
                        RTMP1 = PHKK(J,I0)
                        RTMP2 = VHKK(J,I0)
                        RTMP3 = WHKK(J,I0)
                        PHKK(J,I0) = PHKK(J,I1)
                        VHKK(J,I0) = VHKK(J,I1)
                        WHKK(J,I0) = WHKK(J,I1)
                        PHKK(J,I1) = RTMP1
                        VHKK(J,I1) = RTMP2
                        WHKK(J,I1) = RTMP3
   23                CONTINUE
                     RTMP1 = PHKK(5,I0)
                     PHKK(5,I0) = PHKK(5,I1)
                     PHKK(5,I1) = RTMP1
                     ITMP = IDRES(I0)
                     IDRES(I0) = IDRES(I1)
                     IDRES(I1) = ITMP
                     ITMP = IDXRES(I0)
                     IDXRES(I0) = IDXRES(I1)
                     IDXRES(I1) = ITMP
                     ITMP = NOBAM(I0)
                     NOBAM(I0) = NOBAM(I1)
                     NOBAM(I1) = ITMP
                     ITMP = IDBAM(I0)
                     IDBAM(I0) = IDBAM(I1)
                     IDBAM(I1) = ITMP
                     ITMP = IDCH(I0)
                     IDCH(I0) = IDCH(I1)
                     IDCH(I1) = ITMP
                     ITMP = IHIST(1,I0)
                     IHIST(1,I0) = IHIST(1,I1)
                     IHIST(1,I1) = ITMP
                     ITMP = IHIST(2,I0)
                     IHIST(2,I0) = IHIST(2,I1)
                     IHIST(2,I1) = ITMP
   22             CONTINUE
               ENDIF
               IST1 = ABS(ISTHKK(JMOHKK(1,IDX)))
               IST2 = ABS(ISTHKK(JMOHKK(2,IDX)))
c
c   parton 1 (projectile side)
               IF (IST1.EQ.21) THEN
                  IDX1 = 1
               ELSEIF (IST1.EQ.22) THEN
                  IDX1 = 2
               ELSEIF (IST1.EQ.31) THEN
                  IDX1 = 3
               ELSEIF (IST1.EQ.32) THEN
                  IDX1 = 4
               ELSEIF (IST1.EQ.41) THEN
                  IDX1 = 5
               ELSEIF (IST1.EQ.42) THEN
                  IDX1 = 6
               ELSEIF (IST1.EQ.51) THEN
                  IDX1 = 7
               ELSEIF (IST1.EQ.52) THEN
                  IDX1 = 8
               ELSEIF (IST1.EQ.61) THEN
                  IDX1 = 9
               ELSEIF (IST1.EQ.62) THEN
                  IDX1 = 10
               ELSE
c                 WRITE(LOUT,*)
c    &               ' CHASTA: unknown parton status flag (',
c    &               IST1,') at entry ',JMOHKK(1,IDX),'(',IDX,')'
                  GOTO 21
               ENDIF
               ID = IDHKK(JMOHKK(1,IDX))
               IF (ABS(ID).LE.4) THEN
                  IF (ID.GT.0) THEN
                     ITYP1 = 1
                  ELSE
                     ITYP1 = 2
                  ENDIF
               ELSEIF (ABS(ID).GE.1000) THEN
                  IF (ID.GT.0) THEN
                     ITYP1 = 3
                  ELSE
                     ITYP1 = 4
                  ENDIF
               ELSEIF (ID.EQ.21) THEN
                  ITYP1 = 5
               ELSE
                  WRITE(ErrorOut,*)
     &               ' CHASTA: INCONSISTENT PARTON IDENTITY (',
     &               ID,') AT ENTRY ',JMOHKK(1,IDX),'(',IDX,')'
                  GOTO 21
               ENDIF
c
c   parton 2 (target side)
               IF (IST2.EQ.21) THEN
                  IDX2 = 1
               ELSEIF (IST2.EQ.22) THEN
                  IDX2 = 2
               ELSEIF (IST2.EQ.31) THEN
                  IDX2 = 3
               ELSEIF (IST2.EQ.32) THEN
                  IDX2 = 4
               ELSEIF (IST2.EQ.41) THEN
                  IDX2 = 5
               ELSEIF (IST2.EQ.42) THEN
                  IDX2 = 6
               ELSEIF (IST2.EQ.51) THEN
                  IDX2 = 7
               ELSEIF (IST2.EQ.52) THEN
                  IDX2 = 8
               ELSEIF (IST2.EQ.61) THEN
                  IDX2 = 9
               ELSEIF (IST2.EQ.62) THEN
                  IDX2 = 10
               ELSE
c                 WRITE(LOUT,*)
c    &               ' CHASTA: unknown parton status flag (',
c    &               IST2,') at entry ',JMOHKK(2,IDX),'(',IDX,')'
                  GOTO 21
               ENDIF
               ID = IDHKK(JMOHKK(2,IDX))
               IF (ABS(ID).LE.4) THEN
                  IF (ID.GT.0) THEN
                     ITYP2 = 1
                  ELSE
                     ITYP2 = 2
                  ENDIF
               ELSEIF (ABS(ID).GE.1000) THEN
                  IF (ID.GT.0) THEN
                     ITYP2 = 3
                  ELSE
                     ITYP2 = 4
                  ENDIF
               ELSEIF (ID.EQ.21) THEN
                  ITYP2 = 5
               ELSE
                  WRITE(ErrorOut,*)
     &               ' CHASTA: INCONSISTENT PARTON IDENTITY (',
     &               ID,') AT ENTRY ',JMOHKK(1,IDX),'(',IDX,')'
                  GOTO 21
               ENDIF
c
c   fill counter
               ITYPE = ICHTYP(ITYP1,ITYP2)
               IF (ITYPE.NE.0) THEN
                  ICHCFG(IDX1,IDX2,ITYPE,1) =ICHCFG(IDX1,IDX2,ITYPE,1)+1
                  NGLUON = JMOHKK(2,IDX)-JMOHKK(1,IDX)-1
                  ICHCFG(IDX1,IDX2,ITYPE,2) =
     &               ICHCFG(IDX1,IDX2,ITYPE,2)+NGLUON

                  NCHAIN = NCHAIN+1
                  IF (NCHAIN.GT.MAXCHN) THEN
                     WRITE(ErrorOut,
     * *) ' CHASTA: NCHAIN > MAXCHN ! ',
     &                  NCHAIN,MAXCHN
                     STOP
                  ENDIF
                  IDXCHN(1,NCHAIN) = IDX
                  IDXCHN(2,NCHAIN) = ITYPE
               ELSE
                  WRITE(ErrorOut,*)
     &               ' CHASTA: INCONSISTENT CHAIN AT ENTRY ',IDX
                  GOTO 21
               ENDIF
            ENDIF
   21    CONTINUE
c
c write statistics to output unit
c
      ELSEIF (MODE.EQ.1) THEN
         WRITE(ErrorOut,
     * '(/,A)') ' CHASTA: generated chain configurations'
         DO 31 I=1,10
            WRITE(ErrorOut,'(/,2A)')
     &         ' -----------------------------------------',
     &         '------------------------------------'
            WRITE(ErrorOut,'(2A)')
     &         ' P\\T         21     22     31     32     41',
     &         '     42     51     52     61     62'
            WRITE(ErrorOut,'(2A)')
     &         ' -----------------------------------------',
     &         '------------------------------------'
            DO 32 J=1,10
               ITOT(J) = 0
               DO 33 K=1,9
                  ITOT(J) = ITOT(J)+ICHCFG(I,J,K,1)
   33          CONTINUE
   32       CONTINUE
            WRITE(ErrorOut,
     * '(1X,I2,5X,10I7,/)') ICHSTA(I),(ITOT(J),J=1,10)
            DO 34 K=1,9
               ISUM = 0
               DO 35 J=1,10
                  ISUM = ISUM+ICHCFG(I,J,K,1)
   35          CONTINUE
               IF (ISUM.GT.0)
     &            WRITE(ErrorOut,'(1X,A5,2X,10I7)')
     &               CCHTYP(K),(ICHCFG(I,J,K,1),J=1,10)
   34       CONTINUE
C           WRITE(LOUT,'(2A)')
C    &         ' -----------------------------------------',
C    &         '-------------------------------'
   31    CONTINUE
c
      ELSE
         WRITE(ErrorOut,
     * *) ' CHASTA: MODE ',MODE,' not supported !'
         STOP
      ENDIF

      RETURN
      END
c
c===pohist=============================================================*
c

CDECK  ID>, PHO_PHIST
      SUBROUTINE PHO_PHIST(IMODE,WEIGHT)


      IMPLICIT DOUBLE PRECISION (A-H,O-X,Z)
      SAVE

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI


      ILAB = 0
      IF (IMODE.EQ.10) THEN
         IMODE = 1
         ILAB  = 1
      ENDIF
      IF (ABS(IMODE).LT.1000) THEN
c PHOJET-statistics
C        CALL POHISX(IMODE,WEIGHT)
         IF (IMODE.EQ.-1) THEN
            MODE = 1
            XSTOT(1,1,1) = WEIGHT
         ENDIF
         IF (IMODE.EQ. 1) MODE = 2
         IF (IMODE.EQ.-2) MODE = 3
         IF (MODE.EQ.2) CALL DT_SWPPHO(ILAB)
C        IF (MODE.EQ.3) WRITE(6,*)
C    &      ' Sigma = ',XSPRO(1,1,1),' mb   used for normalization'
         CALL DT_HISTOG(MODE)
         CALL DT_USRHIS(MODE)
      ELSE
c DTUNUC-statistics
         MODE = IMODE/1000
C        IF (MODE.EQ.3) WRITE(6,*)
C    &      ' Sigma = ',XSPRO(1,1,1),' mb   used for normalization'
         CALL DT_HISTOG(MODE)
         CALL DT_USRHIS(MODE)
      ENDIF

      RETURN
      END
c
c===swppho=============================================================*
c
CDECK  ID>, DT_SWPPHO
      SUBROUTINE DT_SWPPHO(ILAB)

      IMPLICIT DOUBLE PRECISION (A-H,O-X,Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,TINY14=1.0D-14)

      LOGICAL LSTART

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c properties of photon/lepton projectiles
      COMMON /DTGPRO/ VIRT,PGAMM(4),PLEPT0(4),PLEPT1(4),PNUCL(4),IDIREC


c*PHOJET105a
C     PARAMETER (NMXHEP=2000)
C     COMMON/HEPEVS/NEVHEP,NHEP,ISTHEP(NMXHEP),IDHEP(NMXHEP),
C    &JMOHEP(2,NMXHEP),JDAHEP(2,NMXHEP),PHEP(5,NMXHEP),VHEP(4,NMXHEP)
C     COMMON /GLOCMS/ ECM,PCM,PMASS(2),PVIRT(2),IFPAP(2),IFPAB(2)
C     COMMON /PLASAV/ PLAB
c*PHOJET110


C  standard particle data interface
      INTEGER NMXHEP

      PARAMETER (NMXHEP=4000)

      INTEGER NEVHEP,NHEP,ISTHEP,IDHEP,JMOHEP,JDAHEP
      DOUBLE PRECISION PHEP,VHEP
      COMMON /POEVT1/ NEVHEP,NHEP,ISTHEP(NMXHEP),IDHEP(NMXHEP),
     &                JMOHEP(2,NMXHEP),JDAHEP(2,NMXHEP),PHEP(5,NMXHEP),
     &                VHEP(4,NMXHEP)
C  extension to standard particle data interface (PHOJET specific)
      INTEGER IMPART,IPHIST,ICOLOR
      COMMON /POEVT2/ IMPART(NMXHEP),IPHIST(2,NMXHEP),ICOLOR(2,NMXHEP)


C  global event kinematics and particle IDs
      INTEGER IFPAP,IFPAB
      DOUBLE PRECISION ECM,PCM,PMASS,PVIRT
      COMMON /POGCMS/ ECM,PCM,PMASS(2),PVIRT(2),IFPAP(2),IFPAB(2)

c*
      DATA ICOUNT/0/

      DATA LSTART /.TRUE./

C     IF ((IFRAME.EQ.1).AND.(ILAB.EQ.0).AND.LSTART) THEN
      IF ((IFRAME.EQ.1).AND.LSTART) THEN
         UMO  = ECM
         ELA  = ZERO
         PLA  = ZERO
         IDP  = IDT_ICIHAD(IFPAP(1))
         IDT  = IDT_ICIHAD(IFPAP(2))
         VIRT = PVIRT(1)
         CALL DT_LTINI(IDP,IDT,ELA,PLA,UMO,0)
         PLAB = PLA
         LSTART = .FALSE.
      ENDIF

      NHKK   = 0
      ICOUNT = ICOUNT+1
C     NEVHKK = NEVHEP
      NEVHKK = ICOUNT
      IF (MOD(ICOUNT,500).EQ.0) WRITE(ErrorOut,
     * *)' SWPPHO: event # ',ICOUNT
      DO 1 I=3,NHEP
         IF (ISTHEP(I).EQ.1) THEN
            NHKK = NHKK+1
            ISTHKK(NHKK) = 1
            IDHKK(NHKK)  = IDHEP(I)
            JMOHKK(1,NHKK) = 0
            JMOHKK(2,NHKK) = 0
            JDAHKK(1,NHKK) = 0
            JDAHKK(2,NHKK) = 0
            DO 2 K=1,4
               PHKK(K,NHKK) = PHEP(K,I)
               VHKK(K,NHKK) = ZERO
               WHKK(K,NHKK) = ZERO
    2       CONTINUE
            IF ((IFRAME.EQ.1).AND.(ILAB.EQ.0))
     &         CALL DT_LTNUC(PHEP(3,I),PHEP(4,I),
     &                    PHKK(3,NHKK),PHKK(4,NHKK),-3)
            PHKK(5,NHKK) = PHEP(5,I)
            IDRES(NHKK)  = 0
            IDXRES(NHKK) = 0
            NOBAM(NHKK)  = 0
            IDBAM(NHKK)  = IDT_ICIHAD(IDHEP(I))
            IDCH(NHKK)   = 0
         ENDIF
    1 CONTINUE

      RETURN
      END
c
c===histog=============================================================*
c
CDECK  ID>, DT_HISTOG
      SUBROUTINE DT_HISTOG(MODE)

c***********************************************************************
c This version dated 25.03.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      LOGICAL LFSP,LRNL

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c event flag used for histograms
      COMMON /DTNORM/ ICEVT,IEVHKK

c flags for activated histograms
      COMMON /DTHIS3/ IHISPP(50),IHISXS(50),IXSTBL


      IEVHKK = NEVHKK
      GOTO (1,2,3) MODE

c------------------------------------------------------------------
c initialization
    1 CONTINUE
      ICEVT = 0
      IF (IHISPP(1).EQ.1) CALL DT_HISTAT(IDUM,1)
      IF (IHISPP(2).EQ.1) CALL DT_HIMULT(1)

      RETURN
c------------------------------------------------------------------
c filling of histogram with event-record
    2 CONTINUE
      ICEVT = ICEVT+1

      DO 20 I=1,NHKK
         CALL DT_SWPFSP(I,LFSP,LRNL)
         IF (LFSP) THEN
            IF (IHISPP(1).EQ.1) CALL DT_HISTAT(I,2)
            IF (IHISPP(2).EQ.1) CALL DT_HIMULT(2)
         ENDIF
         IF (IHISPP(1).EQ.1) CALL DT_HISTAT(I,5)
   20 CONTINUE
      IF (IHISPP(1).EQ.1) CALL DT_HISTAT(IDUM,4)

      RETURN
c------------------------------------------------------------------
c output
    3 CONTINUE
      IF (IHISPP(1).EQ.1) CALL DT_HISTAT(IDUM,3)
      IF (IHISPP(2).EQ.1) CALL DT_HIMULT(3)

      RETURN
      END
c
c===swpfsp=============================================================*
c
CDECK  ID>, DT_SWPFSP
      SUBROUTINE DT_SWPFSP(IDX,LFSP,LRNL)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,TINY14=1.0D-14)
      PARAMETER (TWOPI=6.283185307179586476925286766559D+00,
     &           PI   =TWOPI/TWO,
     &           BOG  =TWOPI/360.0D0)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c temporary storage for one final state particle
      LOGICAL LFRAG,LGREY,LBLACK
      COMMON /DTFSPA/ AMASS,PE,EECMS,PX,PY,PZ,PZCMS,PT,PTOT,ET,EKIN,
     &                SINTHE,COSTHE,THETA,THECMS,
     &                BETA,YY,YYCMS,ETA,ETACMS,XLAB,XF,
     &                IST,IDPDG,IDBJT,IBARY,ICHAR,MULDEF,
     &                LFRAG,LGREY,LBLACK


      LOGICAL LFSP,LRNL

      LFSP = .FALSE.
      LRNL = .FALSE.
      ISTRNL = 1000
      MULDEF = 1
      IF (LEVPRT) ISTRNL = 1001

      IF (ABS(ISTHKK(IDX)).EQ.1) THEN
         IST    = ISTHKK(IDX)
         IDPDG  = IDHKK(IDX)
         LFRAG  = .FALSE.
         IF (IDHKK(IDX).LT.80000) THEN
            IDBJT  = IDBAM(IDX)
            IBARY  = IIBAR(IDBJT)
            ICHAR  = IICH(IDBJT)
            AMASS  = AAM(IDBJT)
         ELSEIF (IDHKK(IDX).EQ.80000) THEN
            IDBJT  = 0
            IBARY  = IDRES(IDX)
            ICHAR  = IDXRES(IDX)
            AMASS  = PHKK(5,IDX)
            INUT   = IBARY-ICHAR
            IF ((ICHAR.EQ.1).AND.(INUT.EQ.1)) IDBJT = 116
            IF ((ICHAR.EQ.1).AND.(INUT.EQ.2)) IDBJT = 117
            IF ((ICHAR.EQ.2).AND.(INUT.EQ.1)) IDBJT = 118
            IF ((ICHAR.EQ.2).AND.(INUT.EQ.2)) IDBJT = 119
            IF (IDBJT.EQ.0) LFRAG = .TRUE.
         ELSE
            GOTO 9999
         ENDIF
         PE     = PHKK(4,IDX)
         PX     = PHKK(1,IDX)
         PY     = PHKK(2,IDX)
         PZ     = PHKK(3,IDX)
         PT2    = PX**2+PY**2
         PT     = SQRT(PT2)
         PTOT   = SQRT(PT2+PZ**2)
         SINTHE = PT/MAX(PTOT,TINY14)
         COSTHE = PZ/MAX(PTOT,TINY14)
         IF (COSTHE.GT.ONE) THEN
            THETA = ZERO
         ELSEIF (COSTHE.LT.-ONE) THEN
            THETA = TWOPI/2.0D0
         ELSE
            THETA = ACOS(COSTHE)
         ENDIF
         EKIN   = PE-AMASS
c*sr 15.4.96 new E_t-definition
         IF (IBARY.GT.0) THEN
            ET = EKIN*SINTHE
         ELSEIF (IBARY.LT.0) THEN
            ET = (EKIN+TWO*AMASS)*SINTHE
         ELSE
            ET = PE*SINTHE
         ENDIF
c*
         XLAB   = PZ/MAX(PPROJ,TINY14)
C        XLAB   = PE/MAX(EPROJ,TINY14)
         BETA   = SQRT(ABS( (ONE-AMASS/MAX(PE,TINY14))
     &                     *(ONE+AMASS/MAX(PE,TINY14)) ))
         PPLUS  = PE+PZ
         PMINUS = PE-PZ
         IF (PMINUS.GT.TINY14) THEN
            YY = 0.5D0*LOG(ABS(PPLUS/PMINUS))
         ELSE
            YY = 100.0D0
         ENDIF
         IF ((THETA.GT.TINY14).AND.((PI-THETA).GT.TINY14)) THEN
            ETA = -LOG(TAN(THETA/TWO))
         ELSE
            ETA = 100.0D0
         ENDIF
         IF (IFRAME.EQ.1) THEN
            CALL DT_LTNUC(PZ,PE,PZCMS,EECMS,3)
            PPLUS  = EECMS+PZCMS
            PMINUS = EECMS-PZCMS
            IF ((PPLUS*PMINUS).GT.TINY14) THEN
               YYCMS = 0.5D0*LOG(ABS(PPLUS/PMINUS))
            ELSE
               YYCMS = 100.0D0
            ENDIF
            PTOTCM = SQRT(PT2+PZCMS**2)
            COSTH = PZCMS/MAX(PTOTCM,TINY14)
            IF (COSTH.GT.ONE) THEN
               THECMS = ZERO
            ELSEIF (COSTH.LT.-ONE) THEN
               THECMS = TWOPI/2.0D0
            ELSE
               THECMS = ACOS(COSTH)
            ENDIF
            IF ((THECMS.GT.TINY14).AND.((PI-THECMS).GT.TINY14)) THEN
               ETACMS = -LOG(TAN(THECMS/TWO))
            ELSE
               ETACMS = 100.0D0
            ENDIF
            XF = PZCMS/MAX(PPCM,TINY14)
            THECMS = THECMS/BOG
         ELSE
            PZCMS  = PZ
            EECMS  = PE
            YYCMS  = YY
            ETACMS = ETA
            XF     = XLAB
            THECMS = THETA/BOG
         ENDIF
         THETA  = THETA/BOG

c set flag for "grey/black"
         LGREY  = .FALSE.
         LBLACK = .FALSE.
         EK     = EKIN
         IF (IDHKK(IDX).EQ.80000) EK = EKIN/DBLE(IBARY)
         IF (MULDEF.EQ.1) THEN
c  EMU01-Def.
            IF ( ( (IDBJT.EQ. 1).AND.(EK.GT. 26.0D-3).AND.
     &                              (EK.LE.375.0D-3)      ).OR.
     &           ( (IDBJT.EQ.13).AND.(EK.GT. 12.0D-3).AND.
     &                              (EK.LE. 56.0D-3)      ).OR.
     &           ( (IDBJT.EQ.14).AND.(EK.GT. 12.0D-3).AND.
     &                              (EK.LE. 56.0D-3)      ).OR.
     &           ( (IDBJT.EQ.15).AND.(EK.GT. 20.0D-3).AND.
     &                              (EK.LE.198.0D-3)      ).OR.
     &           ( (IDBJT.EQ.16).AND.(EK.GT. 20.0D-3).AND.
     &                              (EK.LE.198.0D-3)      ).OR.
     &           ( (IDBJT.NE. 1).AND.(IDBJT.NE.13).AND.
     &             (IDBJT.NE.14).AND.(IDBJT.NE.15).AND.
     &             (IDBJT.NE.16).AND.
     &             (BETA.GT.0.23D0).AND.(BETA.LE.0.70D0)    ) )
     &         LGREY = .TRUE.
            IF ( ( (IDBJT.EQ. 1).AND.(EK.LE. 26.0D-3) ).OR.
     &           ( (IDBJT.EQ.13).AND.(EK.LE. 12.0D-3) ).OR.
     &           ( (IDBJT.EQ.14).AND.(EK.LE. 12.0D-3) ).OR.
     &           ( (IDBJT.EQ.15).AND.(EK.LE. 20.0D-3) ).OR.
     &           ( (IDBJT.EQ.16).AND.(EK.LE. 20.0D-3) ).OR.
     &           ( (IDBJT.NE. 1).AND.(IDBJT.NE.13).AND.
     &             (IDBJT.NE.14).AND.(IDBJT.NE.15).AND.
     &             (IDBJT.NE.16).AND.(BETA.LE.0.23D0)  ) )
     &         LBLACK = .TRUE.
         ELSE
c  common Def.
            IF ((BETA.GT.0.23D0).AND.(BETA.LE.0.70D0)) LGREY=.TRUE.
            IF (BETA.LE.0.23D0) LBLACK=.TRUE.
         ENDIF
         LFSP = .TRUE.
      ELSEIF (ABS(ISTHKK(IDX)).EQ.ISTRNL) THEN
         IST    = ISTHKK(IDX)
         IDPDG  = IDHKK(IDX)
         LFRAG  = .TRUE.
         IDBJT  = 0
         IBARY  = IDRES(IDX)
         ICHAR  = IDXRES(IDX)
         AMASS  = PHKK(5,IDX)
         PE     = PHKK(4,IDX)
         PX     = PHKK(1,IDX)
         PY     = PHKK(2,IDX)
         PZ     = PHKK(3,IDX)
         PT2    = PX**2+PY**2
         PT     = SQRT(PT2)
         PTOT   = SQRT(PT2+PZ**2)
         SINTHE = PT/MAX(PTOT,TINY14)
         COSTHE = PZ/MAX(PTOT,TINY14)
         IF (COSTHE.GT.ONE) THEN
            THETA = ZERO
         ELSEIF (COSTHE.LT.-ONE) THEN
            THETA = TWOPI/2.0D0
         ELSE
            THETA  = ACOS(COSTHE)
         ENDIF
         EKIN   = PE-AMASS
c*sr 15.4.96 new E_t-definition
C        ET     = PE*SINTHE
         ET     = EKIN*SINTHE
c*
         IF ((THETA.GT.TINY14).AND.((PI-THETA).GT.TINY14)) THEN
            ETA = -LOG(TAN(THETA/TWO))
         ELSE
            ETA = 100.0D0
         ENDIF
         THETA  = THETA/BOG
         LRNL   = .TRUE.
      ENDIF

 9999 CONTINUE
      RETURN
      END
c
c===himult=============================================================*
c
CDECK  ID>, DT_HIMULT
      SUBROUTINE DT_HIMULT(MODE)

c***********************************************************************
c Tables of average energies/multiplicities.                           *
c This version dated 30.08.2000 is written by S. Roesler               *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,TINY14=1.0D-14)

      PARAMETER (SWMEXP=1.7D0)

      CHARACTER*8 ANAMEH(4)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c temporary storage for one final state particle
      LOGICAL LFRAG,LGREY,LBLACK
      COMMON /DTFSPA/ AMASS,PE,EECMS,PX,PY,PZ,PZCMS,PT,PTOT,ET,EKIN,
     &                SINTHE,COSTHE,THETA,THECMS,
     &                BETA,YY,YYCMS,ETA,ETACMS,XLAB,XF,
     &                IST,IDPDG,IDBJT,IBARY,ICHAR,MULDEF,
     &                LFRAG,LGREY,LBLACK

c event flag used for histograms
      COMMON /DTNORM/ ICEVT,IEVHKK

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ


      PARAMETER (NOPART=210)
      DIMENSION AVMULT(4,NOPART),AVE(4,NOPART),AVSWM(4,NOPART)
      DATA ANAMEH /'DEUTERON','3-H     ','3-HE    ','4-HE    '/

      GOTO (1,2,3) MODE

c------------------------------------------------------------------
c initialization
    1 CONTINUE
      DO 10 I=1,NOPART
         DO 11 J=1,4
            AVMULT(J,I) = ZERO
            AVE(J,I)    = ZERO
            AVSWM(J,I)  = ZERO
   11    CONTINUE
   10 CONTINUE

      RETURN

c------------------------------------------------------------------
c filling of histogram with event-record
    2 CONTINUE
      IF (PE.LT.0.0D0) THEN
         WRITE(ErrorOut,*) ' HIMULT:  PE < 0 ! ',PE
         RETURN
      ENDIF
      IF (.NOT.LFRAG) THEN
         IVEL = 2
         IF (LGREY)  IVEL = 3
         IF (LBLACK) IVEL = 4
         AVE(1,IDBJT)       = AVE(1,IDBJT)   +PE
         AVE(IVEL,IDBJT)    = AVE(IVEL,IDBJT)+PE
         AVSWM(1,IDBJT)     = AVSWM(1,IDBJT)   +PE**SWMEXP
         AVSWM(IVEL,IDBJT)  = AVSWM(IVEL,IDBJT)+PE**SWMEXP
         AVMULT(1,IDBJT)    = AVMULT(1,IDBJT)   +ONE
         AVMULT(IVEL,IDBJT) = AVMULT(IVEL,IDBJT)+ONE
         IF (IDBJT.LT.116) THEN
c   total energy, multiplicity
            AVE(1,30)       = AVE(1,30)   +PE
            AVE(IVEL,30)    = AVE(IVEL,30)+PE
            AVSWM(1,30)     = AVSWM(1,30)+PE**SWMEXP
            AVSWM(IVEL,30)  = AVSWM(IVEL,30)+PE**SWMEXP
            AVMULT(1,30)    = AVMULT(1,30)   +ONE
            AVMULT(IVEL,30) = AVMULT(IVEL,30)+ONE
c   charged energy, multiplicity
            IF (ICHAR.LT.0) THEN
               AVE(1,26)       = AVE(1,26)   +PE
               AVE(IVEL,26)    = AVE(IVEL,26)+PE
               AVSWM(1,26)     = AVSWM(1,26)   +PE**SWMEXP
               AVSWM(IVEL,26)  = AVSWM(IVEL,26)+PE**SWMEXP
               AVMULT(1,26)    = AVMULT(1,26)   +ONE
               AVMULT(IVEL,26) = AVMULT(IVEL,26)+ONE
            ENDIF
            IF (ICHAR.NE.0) THEN
               AVE(1,27)       = AVE(1,27)   +PE
               AVE(IVEL,27)    = AVE(IVEL,27)+PE
               AVSWM(1,27)     = AVSWM(1,27)   +PE**SWMEXP
               AVSWM(IVEL,27)  = AVSWM(IVEL,27)+PE**SWMEXP
               AVMULT(1,27)    = AVMULT(1,27)   +ONE
               AVMULT(IVEL,27) = AVMULT(IVEL,27)+ONE
            ENDIF
         ENDIF
      ENDIF

      RETURN

c------------------------------------------------------------------
c output
    3 CONTINUE
      WRITE(ErrorOut,3000)
 3000 FORMAT(/,1X,'HIMULT:',21X,'PARTICLE - STATISTICS',/,
     &       29X,'---------------------',/)
      IF (MULDEF.EQ.1) THEN
         WRITE(ErrorOut,'(1X,A,/)') 'fast/grey/black: EMU-def.'
      ELSE
         BETGRE = 0.7D0
         BETBLC = 0.23D0
         WRITE(ErrorOut,3002) BETGRE,BETGRE,BETBLC,BETBLC
 3002    FORMAT(1X,'FAST:  BETA > ',F4.2,'    GREY:  ',F4.2,' > BETA > '
     &          ,F4.2,'    BLACK:  BETA < ',F4.2,/)
      ENDIF
      WRITE(ErrorOut,3003) SWMEXP
 3003 FORMAT(1X,'PARTICLE    |',12X,'AVERAGE MULTIPLICITY',/,
     &      13X,'|     TOTAL         FAST',
     &      '       GREY     BLACK      K      F(',F3.1,')',/,1X,
     &      '------------+--------------',
     &      '-------------------------------------------------')
      DO 30 I=1,NOPART
         DO 31 J=1,4
            AVMULT(J,I) = AVMULT(J,I)/DBLE(MAX(ICEVT,1))
            AVE(J,I)    = AVE(J,I)/DBLE(MAX(ICEVT,1))/EPROJ
            AVSWM(J,I)  = AVSWM(J,I)/DBLE(MAX(ICEVT,1))/EPROJ**SWMEXP
   31    CONTINUE
         IF (I.LE.115) THEN
            WRITE(ErrorOut,3004) ANAME(I),I,
     &                       AVMULT(1,I),AVMULT(2,I),
     &                       AVMULT(3,I),AVMULT(4,I),
     &                       AVE(1,I),AVSWM(1,I)
         ELSEIF (I.LE.119) THEN
            WRITE(ErrorOut,3004) ANAMEH(I-115),I,
     &                       AVMULT(1,I),AVMULT(2,I),
     &                       AVMULT(3,I),AVMULT(4,I),
     &                       AVE(1,I),AVSWM(1,I)
         ENDIF
 3004    FORMAT(1X,A8,I4,'| ',2F13.6,2F9.5,2F9.5)
   30 CONTINUE
c*temporary
C     WRITE(LOUT,'(A,F7.3)') ' number of charged heavy particles: ',
C    &               AVMULT(3,27)+AVMULT(4,27)
c*

      RETURN
      END
c
c===histat=============================================================*
c
CDECK  ID>, DT_HISTAT
      SUBROUTINE DT_HISTAT(IDX,MODE)

c***********************************************************************
c This version dated 26.02.96 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,TINY14=1.0D-14)
      PARAMETER (NDIM=199)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

      PARAMETER (NCOMPX=20,NEB=8,NQB= 5,KSITEB=50)

c Glauber formalism: cross sections
      COMMON /DTGLXS/ ECMNN(NEB),Q2G(NQB),ECMNOW,Q2,
     &                XSTOT(NEB,NQB,NCOMPX),XSELA(NEB,NQB,NCOMPX),
     &                XSQEP(NEB,NQB,NCOMPX),XSQET(NEB,NQB,NCOMPX),
     &                XSQE2(NEB,NQB,NCOMPX),XSPRO(NEB,NQB,NCOMPX),
     &                XSDEL(NEB,NQB,NCOMPX),XSDQE(NEB,NQB,NCOMPX),
     &                XETOT(NEB,NQB,NCOMPX),XEELA(NEB,NQB,NCOMPX),
     &                XEQEP(NEB,NQB,NCOMPX),XEQET(NEB,NQB,NCOMPX),
     &                XEQE2(NEB,NQB,NCOMPX),XEPRO(NEB,NQB,NCOMPX),
     &                XEDEL(NEB,NQB,NCOMPX),XEDQE(NEB,NQB,NCOMPX),
     &                BSLOPE,NEBINI,NQBINI

c emulsion treatment
      COMMON /DTCOMP/ EMUFRA(NCOMPX),IEMUMA(NCOMPX),IEMUCH(NCOMPX),
     &                NCOMPO,IEMUL

c properties of interacting particles
      COMMON /DTPRTA/ IT,ITZ,IP,IPZ,IJPROJ,IBPROJ,IJTARG,IBTARG

c rejection counter
      COMMON /DTREJC/ IRPT,IRHHA,IRRES(2),LOMRES,LOBRES,
     &                IRCHKI(2),IRFRAG,IRCRON(3),IREVT,
     &                IREXCI(3),IRDIFF(2),IRINC

c statistics: residual nuclei
      COMMON /DTSTA2/ EXCDPM(4),EXCEVA(2),
     &                NINCGE,NINCCO(2,3),NINCHR(2,2),NINCWO(2),
     &                NINCST(2,4),NINCEV(2),
     &                NRESTO(2),NRESPR(2),NRESNU(2),NRESBA(2),
     &                NRESPB(2),NRESCH(2),NRESEV(4),
     &                NEVA(2,6),NEVAGA(2),NEVAHT(2),NEVAHY(2,2,240),
     &                NEVAFI(2,2)

c parameter for intranuclear cascade
      LOGICAL LPAULI
      COMMON /DTFOTI/ TAUFOR,KTAUGE,ITAUVE,INCMOD,LPAULI

c (original name: PAREVT)
      LOGICAL LDIFFR, LINCTV, LEVPRT, LHEAVY, LDEEXG, LGDHPR, LPREEX,
     &        LHLFIX, LPRFIX, LPARWV, LPOWER, LSNGCH, LLVMOD, LSCHDF
      PARAMETER ( NALLWP = 39   )
      COMMON /FKPARE/ DPOWER, FSPRD0, FSHPFN, RN1GSC, RN2GSC,
     &                LDIFFR (NALLWP),LPOWER, LINCTV, LEVPRT, LHEAVY,
     &                LDEEXG, LGDHPR, LPREEX, LHLFIX, LPRFIX, LPARWV,
     &                ILVMOD, JLVMOD, LLVMOD, LSNGCH, LSCHDF

c (original name: FRBKCM)
      PARAMETER ( MXFFBK =     6 )
      PARAMETER ( MXZFBK =     9 )
      PARAMETER ( MXNFBK =    10 )
      PARAMETER ( MXAFBK =    16 )
      PARAMETER ( NXZFBK = MXZFBK + MXFFBK / 3 )
      PARAMETER ( NXNFBK = MXNFBK + MXFFBK / 3 )
      PARAMETER ( NXAFBK = MXAFBK + 1 )
      PARAMETER ( MXPSST =   300 )
      PARAMETER ( MXPSFB = 41000 )
      LOGICAL LFRMBK, LNCMSS
      COMMON /FKFRBK/  AMUFBK, EEXFBK (MXPSST), AMFRBK (MXPSST),
     &          EXFRBK (MXPSFB), SDMFBK (MXPSFB), COUFBK (MXPSFB),
     &          EXMXFB, R0FRBK, R0CFBK, C1CFBK, C2CFBK,
     &          IFRBKN (MXPSST), IFRBKZ (MXPSST),
     &          IFBKSP (MXPSST), IFBKPR (MXPSST), IFBKST (MXPSST),
     &          IPSIND (0:MXNFBK,0:MXZFBK,2), JPSIND (0:MXAFBK),
     &          IFBIND (0:NXNFBK,0:NXZFBK,2), JFBIND (0:NXAFBK),
     &          IFBCHA (5,MXPSFB), IPOSST, IPOSFB, IFBSTF,
     &          IFBFRB, NBUFBK, LFRMBK, LNCMSS

c (original name: INPFLG)
      COMMON /FKINPF/ IANG,IFISS,IB0,IGEOM,ISTRAG,KEYDK

c temporary storage for one final state particle
      LOGICAL LFRAG,LGREY,LBLACK
      COMMON /DTFSPA/ AMASS,PE,EECMS,PX,PY,PZ,PZCMS,PT,PTOT,ET,EKIN,
     &                SINTHE,COSTHE,THETA,THECMS,
     &                BETA,YY,YYCMS,ETA,ETACMS,XLAB,XF,
     &                IST,IDPDG,IDBJT,IBARY,ICHAR,MULDEF,
     &                LFRAG,LGREY,LBLACK

c event flag used for histograms
      COMMON /DTNORM/ ICEVT,IEVHKK

c statistics: double-Pomeron exchange
      COMMON /DTFLG2/ INTFLG,IPOPO


      DIMENSION EMUSAM(NCOMPX)

      CHARACTER*13 CMSG(3)
      DATA CMSG /'NOT REQUESTED','NOT REQUESTED','NOT REQUESTED'/

      GOTO (1,2,3,4,5) MODE

c------------------------------------------------------------------
c initialization
    1 CONTINUE
c  emulsion treatment
      IF (NCOMPO.GT.0) THEN
         DO 10 I=1,NCOMPX
            EMUSAM(I) = ZERO
   10    CONTINUE
      ENDIF
c common /DTSTA2/, statistics on i.n.c., residual nuclei, evap.
      NINCGE = 0
      DO 11 I=1,2
         EXCDPM(I)   = ZERO
         EXCDPM(I+2) = ZERO
         EXCEVA(I)   = ZERO
         NINCWO(I)   = 0
         NINCEV(I)   = 0
         NRESTO(I)   = 0
         NRESPR(I)   = 0
         NRESNU(I)   = 0
         NRESBA(I)   = 0
         NRESPB(I)   = 0
         NRESCH(I)   = 0
         NRESEV(I)   = 0
         NRESEV(I+2) = 0
         NEVAGA(I)   = 0
         NEVAHT(I)   = 0
         NEVAFI(1,I) = 0
         NEVAFI(2,I) = 0
         DO 12 J=1,6
            IF (J.LE.2) NINCHR(I,J) = 0
            IF (J.LE.3) NINCCO(I,J) = 0
            IF (J.LE.4) NINCST(I,J) = 0
            NEVA(I,J) = 0
   12    CONTINUE
         DO 13 J=1,210
            NEVAHY(1,I,J) = 0
            NEVAHY(2,I,J) = 0
   13    CONTINUE
   11 CONTINUE
      MAXGEN = 0
c*dble Po statistics.
      KPOPO = 0

      RETURN
c------------------------------------------------------------------
c filling of histogram with event-record
    2 CONTINUE
      IF (IST.EQ.-1) THEN
         IF (.NOT.LFRAG) THEN
            IF (IDPDG.EQ.2212) THEN
               NEVA(NOBAM(IDX),1) = NEVA(NOBAM(IDX),1)+1
            ELSEIF (IDPDG.EQ.2112) THEN
               NEVA(NOBAM(IDX),2) = NEVA(NOBAM(IDX),2)+1
            ELSEIF (IDPDG.EQ.22) THEN
               NEVAGA(NOBAM(IDX)) = NEVAGA(NOBAM(IDX))+1
            ELSEIF (IDPDG.EQ.80000) THEN
               IF (IDBJT.EQ.116) THEN
                  NEVA(NOBAM(IDX),3) = NEVA(NOBAM(IDX),3)+1
               ELSEIF (IDBJT.EQ.117) THEN
                  NEVA(NOBAM(IDX),4) = NEVA(NOBAM(IDX),4)+1
               ELSEIF (IDBJT.EQ.118) THEN
                  NEVA(NOBAM(IDX),5) = NEVA(NOBAM(IDX),5)+1
               ELSEIF (IDBJT.EQ.119) THEN
                  NEVA(NOBAM(IDX),6) = NEVA(NOBAM(IDX),6)+1
               ENDIF
            ENDIF
         ELSE
c   heavy fragments (here: fission products only)
            NEVAHY(NOBAM(IDX),1,IBARY) = NEVAHY(NOBAM(IDX),1,IBARY)+1
            NEVAHY(NOBAM(IDX),2,ICHAR) = NEVAHY(NOBAM(IDX),2,ICHAR)+1
            NEVAHT(NOBAM(IDX)) = NEVAHT(NOBAM(IDX))+1
         ENDIF
      ELSEIF ((IST.EQ.1).AND.(.NOT.LFRAG)) THEN
         IF (IDCH(IDX).GT.MAXGEN) MAXGEN = IDCH(IDX)
      ENDIF

      RETURN
c------------------------------------------------------------------
c output
    3 CONTINUE

c*dble Po statistics.
C     WRITE(LOUT,'(1X,A,2I7,2E12.4)')
C    &   '# evts. / # dble-Po. evts / s_in / s_popo :',
C    & ICEVT,KPOPO,XSPRO(1,1,1),XSPRO(1,1,1)*DBLE(KPOPO)/DBLE(ICEVT)

c  emulsion treatment
      IF (NCOMPO.GT.0) THEN
         WRITE(ErrorOut,3000)
 3000    FORMAT(/,1X,'HISTAT:',14X,'STATISTICS - TARGET EMULSION',/,
     &          22X,'----------------------------',/,/,19X,
     &          'MASS    CHARGE          FRACTION',/,39X,
     &          'INPUT     TREATED',/)
         DO 30 I=1,NCOMPO
            WRITE(ErrorOut,
     * 3013) I,IEMUMA(I),IEMUCH(I),EMUFRA(I),
     &                       EMUSAM(I)/DBLE(ICEVT)
 3013       FORMAT(12X,I2,1X,2I8,6X,F7.3,5X,F7.3)
   30    CONTINUE
      ENDIF

c  i.n.c. statistics: output
      WRITE(ErrorOut,3001) ICEVT,NRESEV(2),IRINC
 3001 FORMAT(/,1X,'HISTAT:',14X,'STATISTICS - INTRANUCLEAR CASCADE',/,
     &       22X,'---------------------------------',/,/,1X,
     &       'NO. OF EVENTS FOR NORMALIZATION: (ACCEPTED FINAL EVENTS,',
     &       ' EVT)',4X,I6,/,34X,'(EVENTS BEFORE EVAP.-STEP, EVT1)',I6,
     &       /,1X,'NO. OF REJECTED EVENTS DUE TO INTRANUCLEAR',
     &       ' CASCADE',15X,I6,/)
      ICEV  = MAX(ICEVT,1)
      ICEV1 = ICEV
      IF (LEVPRT) ICEV1 = MAX(NRESEV(2),1)
      WRITE(ErrorOut,3002)
     &     (DBLE(NINCWO(I))/DBLE(ICEV),I=1,2),
     &     ((DBLE(NINCST(I,J))/DBLE(ICEV),I=1,2),J=1,4),
     &     KTAUGE,DBLE(NINCGE)/DBLE(ICEV),
     &    (DBLE(NINCCO(I,1)+NINCCO(I,2)+NINCCO(I,3))/DBLE(ICEV1),I=1,2),
     &     (DBLE(NINCCO(I,2))/DBLE(ICEV1),I=1,2),
     &     (DBLE(NINCCO(I,3))/DBLE(ICEV1),I=1,2),
     &     (DBLE(NINCCO(I,1))/DBLE(ICEV1),I=1,2)
 3002 FORMAT(1X,'NO. OF WOUNDED NUCL. IN PROJ./ TARGET (MEAN PER EVT)',
     &       5X,F6.2,' /',F6.2,/,1X,'NO. OF PARTICLES UNABLE TO ESCAPE',
     &       ' PROJ./ TARGET (MEAN PER EVT)',/,8X,'BARYONS:  POS. ',
     &       F7.3,' /',F7.3,'   NEG. ',F7.3,' /',F7.3,/,8X,
     &       'MESONS:   POS. ',F7.3,' /',F7.3,'   NEG. ',F7.3,' /',F7.3,
     &       /,1X,'MAXIMUM NO. OF GENERATIONS TREATED (MAXIMUM ALLOWED:'
     &       ,I4,')',/,43X,'(MEAN PER EVT)',5X,F6.2,/,1X,'NO. OF SEC.',
     &       ' INTERACTIONS IN PROJ./ TARGET (MEAN PER EVT1)',
     &       F7.3,' /',F7.3,/,8X,'OUT OF WHICH BY INELASTIC',
     &       ' INTERACTIONS',12X,F7.3,' /',F7.3,/,21X,'BY ELASTIC ',
     &       'INTERACTIONS',14X,F7.3,' /',F7.3,/,21X,'BY ABSORPTION ',
     &       '(AP, K-, PI- ONLY)     ',F7.3,' /',F7.3,/)
      WRITE(ErrorOut,3003) NRESEV(2),NRESEV(4),IREXCI,
     &                 IREXCI(1)+IREXCI(2)+IREXCI(3)
 3003 FORMAT(/,1X,'HISTAT:',14X,'STATISTICS - RESIDUAL NUCLEI, ',
     &       'EVAPORATION',/,22X,'-----------------------------',
     &       '------------',/,/,1X,'NO. OF EVENTS FOR NORMAL.: ',
     &       '(EVENTS HANDLED BY FICONF, EVT)',7X,I6,/,28X,'(EVENTS',
     &       ' PASSING THE EVAP.-STEP, EVT1) ',I6,/,1X,'NO. OF',
     &       ' REJECTED EVENTS     (',I4,',',I4,',',I4,')',22X,I6,/)

      WRITE(ErrorOut,3004)
 3004 FORMAT(/,22X,'1) BEFORE EVAPORATION-STEP:',/)
      ICEV  = MAX(NRESEV(2),1)
      WRITE(ErrorOut,3005)
     &     (DBLE(NRESTO(I))/DBLE(ICEV),I=1,2),
     &     (DBLE(NRESPR(I))/DBLE(ICEV),I=1,2),
     &     (DBLE(NRESNU(I))/DBLE(ICEV),I=1,2),
     &     (DBLE(NRESBA(I))/DBLE(ICEV),I=1,2),
     &     (DBLE(NRESPB(I))/DBLE(ICEV),I=1,2),
     &     (DBLE(NRESCH(I))/DBLE(ICEV),I=1,2),
     &     (EXCDPM(I)/DBLE(ICEV),I=1,2),
     &     (EXCDPM(I+2)/DBLE(ICEV),I=1,2)
 3005    FORMAT(1X,'RESIDUAL NUCLEI:  (MEAN VALUES PER EVT)',12X,
     &       'PROJ. / TARGET',/,/,8X,'TOTAL NUMBER OF PARTICLES',15X,
     &       2F9.3,/,8X,'OUT OF WHICH: PROTONS',19X,2F9.3,/,22X,
     &       'NEUTRONS',18X,2F9.3,/,22X,'BARYONS',19X,2F9.3,/,22X,
     &       'POS. BARYONS',14X,2F9.3,/,8X,'TOTAL CHARGE',28X,2F9.3,/,
     &       /,8X,'EXCITATION ENERGY (BEF. EVAP.-STEP)   ',2E11.3,/,
     &       8X,'EXCITATION ENERGY PER NUCLEON         ',2E11.3,/,/)

c evaporation / fission / fragmentation statistics: output
      ICEV  = MAX(NRESEV(2),1)
      ICEV1 = MAX(NRESEV(4),1)
      NTEVA1 =
     &   NEVA(1,1)+NEVA(1,2)+NEVA(1,3)+NEVA(1,4)+NEVA(1,5)+NEVA(1,6)
      NTEVA2 =
     &   NEVA(2,1)+NEVA(2,2)+NEVA(2,3)+NEVA(2,4)+NEVA(2,5)+NEVA(2,6)
      IF (LEVPRT) THEN
         IF (IFISS.EQ.1) CMSG(1) = 'REQUESTED    '
         IF (LFRMBK)     CMSG(2) = 'REQUESTED    '
         IF (LDEEXG)     CMSG(3) = 'REQUESTED    '
         WRITE(ErrorOut,3006)
     &        CMSG,
     &        DBLE(NTEVA1)/DBLE(ICEV1),DBLE(NTEVA2)/DBLE(ICEV1),
     &        (DBLE(NEVA(I,1))/DBLE(ICEV1),I=1,2),
     &        (DBLE(NEVA(I,2))/DBLE(ICEV1),I=1,2),
     &        (DBLE(NEVA(I,3))/DBLE(ICEV1),I=1,2),
     &        (DBLE(NEVA(I,4))/DBLE(ICEV1),I=1,2),
     &        (DBLE(NEVA(I,5))/DBLE(ICEV1),I=1,2),
     &        (DBLE(NEVA(I,6))/DBLE(ICEV1),I=1,2),
     &        (DBLE(NEVAGA(I))/DBLE(ICEV1),I=1,2),
     &        (DBLE(NEVAHT(I))/DBLE(ICEV1),I=1,2)
 3006    FORMAT(22X,'2) AFTER  EVAPORATION-STEP:',/,/,1X,'FISSION:',
     &       13X,A13,/,1X,'FERMI-BREAK-UP:',6X,A13,/,1X,'GAMMA-',
     &       'DEEXCITATION:',2X,A13,/,/,
     &       1X,'EVAPORATION/DEEXCITATION:  (MEAN VALUES PER EVT1)  ',
     &       'PROJ. / TARGET',/,/,8X,'TOTAL NUMBER OF EVAP. PARTICLES',
     &       9X,2F9.3,/,8X,'OUT OF WHICH: PROTONS',19X,2F9.3,/,22X,
     &       'NEUTRONS',18X,2F9.3,/,22X,'DEUTERONS',17X,2F9.3,/,22X,
     &       '3-H',23X,2F9.3,/,22X,'3-HE',22X,2F9.3,/,22X,'4-HE',22X,
     &       2F9.3,/,8X,'NUCL. DEEXCIT. GAMMAS',19X,2F9.3,/,8X,
     &       'HEAVY FRAGMENTS',25X,2F9.3,/)
         IF (IFISS.EQ.1) THEN
            WRITE(ErrorOut,3007) NEVAFI(1,1),NEVAFI(1,2),
     &                       NEVAFI(2,1),NEVAFI(2,2),
     &             DBLE(NEVAFI(2,1))/DBLE(MAX(NEVAFI(1,1),1))*100.0D0,
     &             DBLE(NEVAFI(2,2))/DBLE(MAX(NEVAFI(1,2),1))*100.0D0
 3007       FORMAT(1X,'FISSION:   TOTAL NUMBER OF EVENTS',14X,2I9,/
     &             12X,'OUT OF WHICH FISSION OCCURED',8X,2I9,/,
     &             50X,'(',F5.2,'%) (',F5.2,'%)',/)
         ENDIF
C        IF ((LFRMBK).OR.(IFISS.EQ.1)) THEN
C           WRITE(LOUT,3008)
C3008       FORMAT(1X,'heavy fragments - statistics:',7X,'charge',
C    &             '       proj.   / target',/)
C           DO 31 I=1,210
C              IF ((NEVAHY(1,2,I).NE.0).OR.(NEVAHY(2,2,I).NE.0)) THEN
C                 WRITE(LOUT,3009) I,
C    &            (DBLE(NEVAHY(K,2,I))*XSPRO(1,1,1)/DBLE(ICEV1),K=1,2)
C3009             FORMAT(38X,I3,3X,2E12.3)
C              ENDIF
C  31       CONTINUE
C           WRITE(LOUT,3010)
C3010       FORMAT(1X,'heavy fragments - statistics:',7X,'mass  ',
C    &             '       proj.   / target',/)
C           DO 32 I=1,210
C              IF ((NEVAHY(1,1,I).NE.0).OR.(NEVAHY(2,1,I).NE.0)) THEN
C                 WRITE(LOUT,3011) I,
C    &            (DBLE(NEVAHY(K,1,I))*XSPRO(1,1,1)/DBLE(ICEV1),K=1,2)
C3011             FORMAT(38X,I3,3X,2E12.3)
C              ENDIF
C  32       CONTINUE
C           WRITE(LOUT,*)
C        ENDIF
      ELSE
         WRITE(ErrorOut,3012)
 3012    FORMAT(22X,'2) AFTER  EVAPORATION-STEP:',/,/,1X,
     &       'EVAPORATION:         NOT REQUESTED',/)
      ENDIF

      RETURN
c------------------------------------------------------------------
c filling of histogram with event-record
    4 CONTINUE
c  emulsion treatment
      IF (NCOMPO.GT.0) THEN
         DO 40 I=1,NCOMPO
            IF (IT.EQ.IEMUMA(I)) THEN
               EMUSAM(I) = EMUSAM(I)+ONE
            ENDIF
   40    CONTINUE
      ENDIF
      NINCGE = NINCGE+MAXGEN
      MAXGEN = 0
c*dble Po statistics.
      IF (IPOPO.EQ.1) KPOPO = KPOPO+1

      RETURN
c------------------------------------------------------------------
c filling of histogram with event-record
    5 CONTINUE
      IF ((ISTHKK(IDX).EQ.15).OR.(ISTHKK(IDX).EQ.16)) THEN
         IB = IIBAR(IDBAM(IDX))
         IC = IICH(IDBAM(IDX))
         J  = ISTHKK(IDX)-14
         IF ( ((ABS(IB).EQ.1).AND.(IC.EQ.1)).OR.(IC.EQ.0) ) THEN
            NINCST(J,1) = NINCST(J,1)+1
         ELSEIF ((ABS(IB).EQ.1).AND.(IC.EQ.-1)) THEN
            NINCST(J,2) = NINCST(J,2)+1
         ELSEIF ((ABS(IB).EQ.0).AND.(IC.EQ. 1)) THEN
            NINCST(J,3) = NINCST(J,3)+1
         ELSEIF ((ABS(IB).EQ.0).AND.(IC.EQ.-1)) THEN
            NINCST(J,4) = NINCST(J,4)+1
         ENDIF
      ELSEIF (ISTHKK(IDX).EQ.17) THEN
         NINCWO(1) = NINCWO(1)+1
      ELSEIF (ISTHKK(IDX).EQ.18) THEN
         NINCWO(2) = NINCWO(2)+1
      ELSEIF (ISTHKK(IDX).EQ.1001) THEN
         IB = IDRES(IDX)
         IC = IDXRES(IDX)
         IF (IC.GT.0) THEN
            NEVAHY(NOBAM(IDX),1,IB) = NEVAHY(NOBAM(IDX),1,IB)+1
            NEVAHY(NOBAM(IDX),2,IC) = NEVAHY(NOBAM(IDX),2,IC)+1
         ENDIF
         NEVAHT(NOBAM(IDX)) = NEVAHT(NOBAM(IDX))+1
      ENDIF

      RETURN
      END
c
c===newhgr=============================================================*
c
CDECK  ID>, DT_NEWHGR
      SUBROUTINE DT_NEWHGR(XLIM1,XLIM2,XLIM3,XLIMB,IBIN,IREFN)

c***********************************************************************
c                                                                      *
c     Histogram initialization.                                        *
c                                                                      *
c     input:  XLIM1/XLIM2  lower/upper edge of histogram-window        *
c             XLIM3        bin size                                    *
c             IBIN    > 0  number of bins in equidistant lin. binning  *
c                     = -1 reset histograms                            *
c                     < -1 |IBIN| number of bins in equidistant log.   *
c                          binning or log. binning in user def. struc. *
c             XLIMB(*)     user defined bin structure                  *
c                                                                      *
c     The bin structure is sensitive to                                *
c             XLIM1, XLIM3, IBIN     if     XLIM3 > 0   (lin.)         *
c             XLIM1, XLIM2, IBIN     if     XLIM3 = 0   (lin. & log.)  *
c             XLIMB, IBIN            if     XLIM3 < 0                  *
c                                                                      *
c                                                                      *
c     output: IREFN        histogram index                             *
c                          (= -1 for inconsistent histogr. request)    *
c                                                                      *
c This subroutine is based on a original version by R. Engel.          *
c This version dated 22.4.95 is written  by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6)

      LOGICAL LSTART

      PARAMETER (ZERO   =  0.0D0,
     &           TINY   =  1.0D-10)

      DIMENSION XLIMB(*)

c histograms

      PARAMETER (NHIS=150, NDIM=250)

      COMMON /DTHIS1/ HIST(7,NHIS,NDIM),DENTRY(2,NHIS),OVERF(NHIS),
     &                UNDERF(NHIS),IBINS(NHIS),ISWI(NHIS),IHISL

c auxiliary common for histograms
      COMMON /DTHIS2/ TMPHIS(3,NHIS,NDIM),TMPUFL(NHIS),TMPOFL(NHIS)


      DATA LSTART /.TRUE./

c reset histogram counter
      IF (LSTART.OR.(IBIN.EQ.-1)) THEN
         IHISL  = 0
         IF (IBIN.EQ.-1) RETURN
         LSTART = .FALSE.
      ENDIF

      IHIS  = IHISL+1
c check for maximum number of allowed histograms
      IF (IHIS.GT.NHIS) THEN
         WRITE(ErrorOut,1003) IHIS,NHIS,IHIS
 1003    FORMAT(1X,'NEWHGR:   WARNING!  NUMBER OF HISTOGRAMS (',
     &          I4,') EXCEEDS ARRAY SIZE (',I4,')',/,21X,
     &          'HISTOGRAM',I3,' SKIPPED!')
         GOTO 9999
      ENDIF

      IREFN = IHIS
      IBINS(IHIS) = ABS(IBIN)
c check requested number of bins
      IF (IBINS(IHIS).GE.NDIM) THEN
         WRITE(ErrorOut,1000) IBIN,NDIM,NDIM
 1000    FORMAT(1X,'NEWHGR:   WARNING!  NUMBER OF BINS (',
     &          I3,') EXCEEDS ARRAY SIZE (',I3,')',/,21X,
     &          'AND WILL BE RESET TO ',I3)
         IBINS(IHIS) = NDIM
      ENDIF
      IF (IBINS(IHIS).EQ.0) THEN
         WRITE(ErrorOut,1001) IBIN,IHIS
 1001    FORMAT(1X,'NEWHGR:   WARNING!  INCONSISTENT NUMBER OF',
     &          ' BINS (',I3,')',/,21X,'HISTOGRAM',I3,' SKIPPED!')
         GOTO 9999
      ENDIF

c initialize arrays
      DO 1 I=1,NDIM
         DO 2 K=1,3
            HIST(K,IHIS,I)   = ZERO
            HIST(K+3,IHIS,I) = ZERO
            TMPHIS(K,IHIS,I) = ZERO
    2    CONTINUE
         HIST(7,IHIS,I)   = ZERO
    1 CONTINUE
      DENTRY(1,IHIS)= ZERO
      DENTRY(2,IHIS)= ZERO
      OVERF(IHIS)   = ZERO
      UNDERF(IHIS)  = ZERO
      TMPUFL(IHIS)  = ZERO
      TMPOFL(IHIS)  = ZERO

c bin str. sensitive to lower edge, bin size, and numb. of bins
      IF (XLIM3.GT.ZERO) THEN
         DO 3 K=1,IBINS(IHIS)+1
            HIST(1,IHIS,K) = XLIM1+DBLE(K-1)*XLIM3
    3    CONTINUE
         ISWI(IHIS) = 1
c bin str. sensitive to lower/upper edge and numb. of bins
      ELSEIF (XLIM3.EQ.ZERO) THEN
c   linear binning
         IF (IBIN.GT.0) THEN
            XLOW = XLIM1
            XHI  = XLIM2
            IF (XLIM2.LE.XLIM1) THEN
               WRITE(ErrorOut,1002) XLIM1,XLIM2
 1002          FORMAT(1X,'NEWHGR:   WARNING!  INCONSISTENT X-RANGE',
     &                /,21X,'(XLIM1,XLIM2 = ',2E11.4,')')
               GOTO 9999
            ENDIF
            ISWI(IHIS) = 1
         ELSEIF (IBIN.LT.-1) THEN
c   logarithmic binning
            IF ((XLIM1.LE.ZERO).OR.(XLIM2.LE.ZERO)) THEN
               WRITE(ErrorOut,1004) XLIM1,XLIM2
 1004          FORMAT(1X,'NEWHGR:   WARNING!  INCONSISTENT LOG. ',
     &                'BINNING',/,21X,'(XLIM1,XLIM2 = ',2E11.4,')')
               GOTO 9999
            ENDIF
            IF (XLIM2.LE.XLIM1) THEN
               WRITE(ErrorOut,1005) XLIM1,XLIM2
 1005          FORMAT(1X,'NEWHGR:   WARNING!  INCONSISTENT X-RANGE',
     &                /,21X,'(XLIM1,XLIM2 = ',2E11.4,')')
               GOTO 9999
            ENDIF
            XLOW = LOG10(XLIM1)
            XHI  = LOG10(XLIM2)
            ISWI(IHIS) = 3
         ENDIF
         DX = ABS(XHI-XLOW)/DBLE(MAX(IBINS(IHIS),1))
         DO 4 K=1,IBINS(IHIS)+1
            HIST(1,IHIS,K) = XLOW+DBLE(K-1)*DX
    4    CONTINUE
      ELSE
c user defined bin structure
         DO 5 K=1,IBINS(IHIS)+1
            IF (IBIN.GT.0) THEN
               HIST(1,IHIS,K) = XLIMB(K)
               ISWI(IHIS) = 2
            ELSEIF (IBIN.LT.-1) THEN
               HIST(1,IHIS,K) = LOG10(XLIMB(K))
               ISWI(IHIS) = 4
            ENDIF
    5    CONTINUE
      ENDIF

c histogram accepted
      IHISL = IHIS

      RETURN

 9999 CONTINUE
      IREFN = -1
      RETURN
      END
c
c===filhgr=============================================================*
c
CDECK  ID>, DT_FILHGR
      SUBROUTINE DT_FILHGR(XI,YI,IHIS,NEVT)

c***********************************************************************
c                                                                      *
c     Scoring for histogram IHIS.                                      *
c                                                                      *
c This subroutine is based on a original version by R. Engel.          *
c This version dated 23.4.95 is written  by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6)

      PARAMETER (ZERO = 0.0D0,
     &           ONE  = 1.0D0,
     &           TINY = 1.0D-10)

c histograms

      PARAMETER (NHIS=150, NDIM=250)

      COMMON /DTHIS1/ HIST(7,NHIS,NDIM),DENTRY(2,NHIS),OVERF(NHIS),
     &                UNDERF(NHIS),IBINS(NHIS),ISWI(NHIS),IHISL

c auxiliary common for histograms
      COMMON /DTHIS2/ TMPHIS(3,NHIS,NDIM),TMPUFL(NHIS),TMPOFL(NHIS)


      DATA NCEVT /1/

      X = XI
      Y = YI

c dump content of temorary arrays into histograms
      IF ((NEVT.NE.NCEVT).OR.(NEVT.LT.0)) THEN
         CALL DT_EVTHIS(IDUM)
         NCEVT = NEVT
      ENDIF

c check histogram index
      IF (IHIS.EQ.-1) RETURN
      IF ((IHIS.LT.1).OR.(IHIS.GT.IHISL)) THEN
C        WRITE(LOUT,1000) IHIS,IHISL
 1000    FORMAT(1X,'FILHGR:   WARNING!  HISTOGRAM INDEX',I4,
     &          ' OUT OF RANGE (1..',I3,')')
         RETURN
      ENDIF

      IF ((ISWI(IHIS).EQ.1).OR.(ISWI(IHIS).EQ.3)) THEN
c bin structure not explicitly given
         IF ((ISWI(IHIS).EQ.3).AND.(X.GT.ZERO)) X = LOG10(X)
         DX = ABS(HIST(1,IHIS,2)-HIST(1,IHIS,1))
         IF (X.LT.HIST(1,IHIS,1)) THEN
            I1 = 0
         ELSE
            I1 = INT( (X-HIST(1,IHIS,1))/MAX(DX,TINY) )+1
         ENDIF

      ELSEIF ((ISWI(IHIS).EQ.2).OR.(ISWI(IHIS).EQ.4)) THEN
c user defined bin structure
         IF ((ISWI(IHIS).EQ.4).AND.(X.GT.ZERO)) X = LOG10(X)
         IF (X.LT.HIST(1,IHIS,1)) THEN
            I1 = 0
         ELSE IF (X.GT.HIST(1,IHIS,IBINS(IHIS)+1)) THEN
            I1 = IBINS(IHIS)+1
         ELSE
c   binary sort algorithm
            KMIN = 0
            KMAX = IBINS(IHIS)+1
    1       CONTINUE
            IF ((KMAX-KMIN).EQ.1) GOTO 2
            KK = (KMAX+KMIN)/2
            IF (X.LE.HIST(1,IHIS,KK)) THEN
               KMAX=KK
            ELSE
               KMIN=KK
            ENDIF
            GOTO 1
    2       CONTINUE
            I1 = KMIN
         ENDIF

      ELSE
         WRITE(ErrorOut,1001)
 1001    FORMAT(1X,'FILHGR:   WARNING!  HISTOGRAM NOT INITIALIZED')
         RETURN
      ENDIF

c scoring
      IF (I1.LE.0) THEN
         TMPUFL(IHIS) = TMPUFL(IHIS)+ONE
      ELSEIF (I1.LE.IBINS(IHIS)) THEN
         TMPHIS(1,IHIS,I1) = TMPHIS(1,IHIS,I1)+ONE
         IF ((ISWI(IHIS).EQ.3).OR.(ISWI(IHIS).EQ.4)) THEN
            TMPHIS(2,IHIS,I1) = TMPHIS(2,IHIS,I1)+10**X
         ELSE
            TMPHIS(2,IHIS,I1) = TMPHIS(2,IHIS,I1)+X
         ENDIF
         TMPHIS(3,IHIS,I1) = TMPHIS(3,IHIS,I1)+Y
      ELSE
         TMPOFL(IHIS) = TMPOFL(IHIS)+ONE
      ENDIF

      RETURN
      END
c
c===evthis=============================================================*
c
CDECK  ID>, DT_EVTHIS
      SUBROUTINE DT_EVTHIS(NEVT)

c***********************************************************************
c Dump content of temorary histograms into /DTHIS1/. This subroutine   *
c is called after each event and for the last event before any call    *
c to OUTHGR.                                                           *
c         NEVT   number of events dumped, this is only needed to       *
c                get the normalization after the last event            *
c This version dated 23.4.95 is written  by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6)

      LOGICAL LNOETY

      PARAMETER (ZERO = 0.0D0,
     &           ONE  = 1.0D0,
     &           TINY = 1.0D-10)

c histograms

      PARAMETER (NHIS=150, NDIM=250)

      COMMON /DTHIS1/ HIST(7,NHIS,NDIM),DENTRY(2,NHIS),OVERF(NHIS),
     &                UNDERF(NHIS),IBINS(NHIS),ISWI(NHIS),IHISL

c auxiliary common for histograms
      COMMON /DTHIS2/ TMPHIS(3,NHIS,NDIM),TMPUFL(NHIS),TMPOFL(NHIS)


      DATA NCEVT /0/

      NCEVT = NCEVT+1
      NEVT  = NCEVT

      DO 1 I=1,IHISL
         LNOETY = .TRUE.
         DO 2 J=1,IBINS(I)
            IF (TMPHIS(1,I,J).GT.ZERO) THEN
               LNOETY = .FALSE.
               HIST(2,I,J)   = HIST(2,I,J)+ONE
               HIST(7,I,J)   = HIST(7,I,J)+TMPHIS(1,I,J)
               DENTRY(2,I)   = DENTRY(2,I)+TMPHIS(1,I,J)
               AVX           = TMPHIS(2,I,J)/TMPHIS(1,I,J)
               HIST(3,I,J)   = HIST(3,I,J)+TMPHIS(3,I,J)*AVX
               HIST(4,I,J)   = HIST(4,I,J)+TMPHIS(3,I,J)*AVX**2
               HIST(5,I,J)   = HIST(5,I,J)+TMPHIS(3,I,J)
               HIST(6,I,J)   = HIST(6,I,J)+TMPHIS(3,I,J)**2
               TMPHIS(1,I,J) = ZERO
               TMPHIS(2,I,J) = ZERO
               TMPHIS(3,I,J) = ZERO
            ENDIF
    2    CONTINUE
         IF (LNOETY) THEN
            IF (TMPUFL(I).GT.ZERO) THEN
               UNDERF(I) = UNDERF(I)+ONE
               TMPUFL(I) = ZERO
            ELSEIF (TMPOFL(I).GT.ZERO) THEN
               OVERF(I)  = OVERF(I)+ONE
               TMPOFL(I) = ZERO
            ENDIF
         ELSE
            DENTRY(1,I) = DENTRY(1,I)+ONE
         ENDIF
    1 CONTINUE

      RETURN
      END
c
c===outhgr=============================================================*
c
CDECK  ID>, DT_OUTHGR
      SUBROUTINE DT_OUTHGR(I1,I2,I3,I4,I5,I6,CHEAD,IHEAD,NEVTS,FAC,
     &                  ILOGY,INORM,NMODE)

c***********************************************************************
c                                                                      *
c     Plot histogram(s) to standard output unit                        *
c                                                                      *
c         I1..6         indices of histograms to be plotted            *
c         CHEAD,IHEAD   header string,integer                          *
c         NEVTS         number of events                               *
c         FAC           scaling factor                                 *
c         ILOGY   = 1   logarithmic y-axis                             *
c         INORM         normalization                                  *
c                 = 0   no further normalization (FAC is obsolete)     *
c                 = 1   per event and bin width                        *
c                 = 2   per entry and bin width                        *
c                 = 3   per bin entry                                  *
c                 = 4   per event and "bin width" x1^2...x2^2          *
c                 = 5   per event and "log. bin width" ln x1..ln x2    *
c                 = 6   per event                                      *
c         MODE    = 0   no output but normalization applied            *
c                 = 1   all valid histograms separately (small frame)  *
c                       all valid histograms separately (small frame)  *
c                 = -1  and tables as histograms                       *
c                 = 2   all valid histograms (one plot, wide frame)    *
c                       all valid histograms (one plot, wide frame)    *
c                 = -2  and tables as histograms                       *
c                                                                      *
c                                                                      *
c     Note: All histograms to be plotted with one call to this         *
c           subroutine and |MODE|=2 must have the same bin structure!  *
c           There is no test included ensuring this fact.              *
c                                                                      *
c This version dated 23.4.95 is written  by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6)

      CHARACTER*72 CHEAD

      PARAMETER (ZERO   =  0.0D0,
     &           IZERO  =  0,
     &           ONE    =  1.0D0,
     &           TWO    =  2.0D0,
     &           OHALF  =  0.5D0,
     &           EPS    =  1.0D-5,
     &           TINY   =  1.0D-8,
     &           SMALL  =  -1.0D8,
     &           RLARGE =  1.0D8 )

c histograms

      PARAMETER (NHIS=150, NDIM=250)

      COMMON /DTHIS1/ HIST(7,NHIS,NDIM),DENTRY(2,NHIS),OVERF(NHIS),
     &                UNDERF(NHIS),IBINS(NHIS),ISWI(NHIS),IHISL


      PARAMETER (NDIM2 = 2*NDIM)
      DIMENSION XX(NDIM2),YY(NDIM2)

      PARAMETER (NHISTO = 6)
      DIMENSION YY1(NDIM,NHISTO),XX1(NDIM,NHISTO),IDX1(NHISTO),
     &          IDX(NHISTO)

      CHARACTER*43 CNORM(0:8)
      DATA CNORM /'NO FURTHER NORMALIZATION                   ',
     &            'PER EVENT AND BIN WIDTH                    ',
     &            'PER ENTRY1 AND BIN WIDTH                   ',
     &            'PER BIN ENTRY                              ',
     &            'PER EVENT AND "BIN WIDTH" X1^2...X2^2      ',
     &            'PER EVENT AND "LOG. BIN WIDTH" LN X1..LN X2',
     &            'PER EVENT                                  ',
     &            'PER BIN ENTRY1                             ',
     &            'PER ENTRY2 AND BIN WIDTH                   '/

      IDX1(1) = I1
      IDX1(2) = I2
      IDX1(3) = I3
      IDX1(4) = I4
      IDX1(5) = I5
      IDX1(6) = I6

      MODE = NMODE

c initialization if "wide frame" is requested
      IF (ABS(MODE).EQ.2) THEN
         DO 1 I=1,NHISTO
            DO 2 J=1,NDIM
               XX1(J,I) = ZERO
               YY1(J,I) = ZERO
    2       CONTINUE
    1    CONTINUE
      ENDIF

c plot header
      WRITE(ErrorOut,
     * '(/1X,A,I3,/,1X,70A1)') CHEAD,IHEAD,('=',II=1,70)

c check histogram indices
      NHI = 0
      DO 3 I=1,NHISTO
         IF ((IDX1(I).GE.1).AND.(IDX1(I).LE.IHISL)) THEN
            IF (ISWI(IDX1(I)).NE.0) THEN
               IF (DENTRY(1,IDX1(I)).LT.ONE) THEN
                  WRITE(ErrorOut,1000)
     &                 IDX1(I),UNDERF(IDX1(I)),OVERF(IDX1(I))
 1000             FORMAT(/,1X,'OUTHGR:   WARNING!  NO ENTRIES IN',
     &                   ' HISTOGRAM ',I3,/,21X,'UNDERFLOWS:',F10.0,
     &                   '   OVERFLOWS:  ',F10.0)
               ELSE
                  NHI = NHI+1
                  IDX(NHI) = IDX1(I)
               ENDIF
            ENDIF
         ENDIF
    3 CONTINUE
      IF (NHI.EQ.0) THEN
         WRITE(ErrorOut,1001)
 1001    FORMAT(/,1X,'OUTHGR:   WARNING!  HISTOGRAM INDICES NOT VALID')
         RETURN
      ENDIF

c check normalization request
      IF ( ((FAC.EQ.ZERO).AND.(INORM.NE.0)).OR.
     &     ((NEVTS.LT.1).AND.((INORM.EQ.1).OR.(INORM.EQ.4).OR.
     &                        (INORM.EQ.5).OR.(INORM.EQ.6))).OR.
     &     (INORM.LT.0).OR.(INORM.GT.8) ) THEN
         WRITE(ErrorOut,1002) NEVTS,INORM,FAC
 1002    FORMAT(/,1X,'OUTHGR:   WARNING!  NORMALIZATION REQUEST NOT ',
     &          'VALID',/,21X,'NEVTS = ',I7,4X,'INORM = ',I2,4X,
     &          'FAC = ',E11.4)
         RETURN
      ENDIF

      WRITE(ErrorOut,'(/,1X,A,I8)') 'number of events:',NEVTS

c apply normalization
      DO 4 N=1,NHI

         I = IDX(N)

         IF (ISWI(I).EQ.1) THEN
            WRITE(ErrorOut,
     * 1003) I,HIST(1,I,1),HIST(1,I,IBINS(I)+1),IBINS(I)
 1003       FORMAT(/,1X,'HISTO.',I4,', LINEAR BINNING FROM',2X,E10.4,
     &             ' TO',2X,E10.4,',',2X,I3,' BINS')
         ELSEIF (ISWI(I).EQ.2) THEN
            WRITE(ErrorOut,
     * 1003) I,HIST(1,I,1),HIST(1,I,IBINS(I)+1),IBINS(I)
            WRITE(ErrorOut,1007)
 1007       FORMAT(1X,'USER DEFINED BIN STRUCTURE')
         ELSEIF (ISWI(I).EQ.3) THEN
            WRITE(ErrorOut,1004)
     &         I,10**HIST(1,I,1),10**HIST(1,I,IBINS(I)+1),IBINS(I)
 1004       FORMAT(/,1X,'HISTO.',I4,', LOGAR. BINNING FROM',2X,E10.4,
     &             ' TO',2X,E10.4,',',2X,I3,' BINS')
         ELSEIF (ISWI(I).EQ.4) THEN
            WRITE(ErrorOut,1004)
     &         I,10**HIST(1,I,1),10**HIST(1,I,IBINS(I)+1),IBINS(I)
            WRITE(ErrorOut,1007)
         ELSE
            WRITE(ErrorOut,1008) ISWI(I)
 1008       FORMAT(/,1X,'WARNING!  INCONSISTENT BIN STRUCTURE FLAG ',I4)
         ENDIF
         WRITE(ErrorOut,
     * 1005) DENTRY(1,I),DENTRY(2,I),UNDERF(I),OVERF(I)
 1005    FORMAT(13X,'ENTRIES:',2F9.0,' UNDERFL.:',F8.0,
     &          ' OVERFL.:',F8.0)
         WRITE(ErrorOut,1009) CNORM(INORM)
 1009    FORMAT(1X,'NORMALIZATION: ',A,/)

         DO 5 K=1,IBINS(I)
            CALL DT_GETBIN(I,K,NEVTS,INORM,XLOW,XHI,XMEAN,YMEAN,YERR)
            YMEAN = FAC*YMEAN
            YERR  = FAC*YERR
            WRITE(ErrorOut,
     * 1006) XLOW,XMEAN,YMEAN,YERR,HIST(2,I,K)
            WRITE(ErrorOut,
     * 1006) XHI ,XMEAN,YMEAN,YERR,HIST(2,I,K)
 1006       FORMAT(1X,5E11.3)
c    small frame
            II = 2*K
            XX(II-1) = HIST(1,I,K)
            XX(II)   = HIST(1,I,K+1)
            YY(II-1) = YMEAN
            YY(II)   = YMEAN
c    wide frame
            XX1(K,N) = XMEAN
            IF ((ISWI(I).EQ.3).OR.(ISWI(I).EQ.4))
     &         XX1(K,N) = LOG10(XMEAN)
            YY1(K,N) = YMEAN
    5    CONTINUE

c plot small frame
         IF (ABS(MODE).EQ.1) THEN
            IBIN2 = 2*IBINS(I)
            WRITE(ErrorOut,'(/,1X,A)') 'Preview:'
            IF(ILOGY.EQ.1) THEN
              CALL DT_XGLOGY(IBIN2,1,XX,YY,YY)
            ELSE
              CALL DT_XGRAPH(IBIN2,1,XX,YY,YY)
            ENDIF
         ENDIF

    4 CONTINUE

c plot wide frame
      IF (ABS(MODE).EQ.2) THEN
         WRITE(ErrorOut,'(/,1X,A)') 'Preview:'
         NSIZE = NDIM*NHISTO
         DXLOW = HIST(1,IDX(1),1)
         DDX   = ABS(HIST(1,IDX(1),2)-HIST(1,IDX(1),1))
         YLOW  = RLARGE
         YHI   = SMALL
         DO 6 I=1,NHISTO
            DO 7 J=1,NDIM
               IF (YY1(J,I).LT.YLOW) THEN
                  IF (ILOGY.EQ.1) THEN
                     IF (YY1(J,I).GT.ZERO) YLOW = YY1(J,I)
                  ELSE
                     YLOW = YY1(J,I)
                  ENDIF
               ENDIF
               IF (YY1(J,I).GT.YHI) YHI = YY1(J,I)
    7       CONTINUE
    6    CONTINUE
         DY = (YHI-YLOW)/DBLE(NDIM)
         IF (DY.LE.ZERO) THEN
            WRITE(ErrorOut,'(1X,A,6I4,A,2E12.4)')
     &         'OUTHGR:   WARNING! ZERO BIN WIDTH FOR HISTOGRAMS ',
     &         IDX,': ',YLOW,YHI
            RETURN
         ENDIF
         IF (ILOGY.EQ.1) THEN
            YLOW = LOG10(YLOW)
            DY   = (LOG10(YHI)-YLOW)/100.0D0
            DO 8 I=1,NHISTO
               DO 9 J=1,NDIM
                  IF (YY1(J,I).LE.ZERO) THEN
                     YY1(J,I) = YLOW
                  ELSE
                     YY1(J,I) = LOG10(YY1(J,I))
                  ENDIF
    9          CONTINUE
    8       CONTINUE
         ENDIF
         CALL DT_SRPLOT(XX1,YY1,NSIZE,NHISTO,NDIM,DXLOW,DDX,YLOW,DY)
      ENDIF

      RETURN
      END
c
c===getbin=============================================================*
c
CDECK  ID>, DT_GETBIN
      SUBROUTINE DT_GETBIN(IHIS,IBIN,KEVT,NORM,XLOW,XHI,
     &                  XMEAN,YMEAN,YERR)

c***********************************************************************
c This version dated 23.4.95 is written  by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6)

      PARAMETER (ZERO   = 0.0D0,
     &           ONE    = 1.0D0,
     &           TINY35 = 1.0D-35)

c histograms

      PARAMETER (NHIS=150, NDIM=250)

      COMMON /DTHIS1/ HIST(7,NHIS,NDIM),DENTRY(2,NHIS),OVERF(NHIS),
     &                UNDERF(NHIS),IBINS(NHIS),ISWI(NHIS),IHISL


      XLOW = HIST(1,IHIS,IBIN)
      XHI  = HIST(1,IHIS,IBIN+1)
      IF ((ISWI(IHIS).EQ.3).OR.(ISWI(IHIS).EQ.4)) THEN
         XLOW = 10**XLOW
         XHI  = 10**XHI
      ENDIF
      IF (NORM.EQ.2) THEN
         DX   = XHI-XLOW
         NEVT = INT(DENTRY(1,IHIS))
      ELSEIF (NORM.EQ.3) THEN
         DX   = ONE
         NEVT = INT(HIST(2,IHIS,IBIN))
      ELSEIF (NORM.EQ.4) THEN
         DX   = XHI**2-XLOW**2
         NEVT = KEVT
      ELSEIF (NORM.EQ.5) THEN
         DX   = LOG(ABS(XHI))-LOG(ABS(XLOW))
         NEVT = KEVT
      ELSEIF (NORM.EQ.6) THEN
         DX   = ONE
         NEVT = KEVT
      ELSEIF (NORM.EQ.7) THEN
         DX   = ONE
         NEVT = INT(HIST(7,IHIS,IBIN))
      ELSEIF (NORM.EQ.8) THEN
         DX   = XHI-XLOW
         NEVT = INT(DENTRY(2,IHIS))
      ELSE
         DX   = ABS(XHI-XLOW)
         NEVT = KEVT
      ENDIF
      IF (ABS(DX).LT.TINY35) DX = ONE
      NEVT   = MAX(NEVT,1)
      YMEAN  = HIST(5,IHIS,IBIN)/DX/DBLE(NEVT)
      YMEAN2 = HIST(6,IHIS,IBIN)/DX**2/DBLE(NEVT)
      YERR   = SQRT(ABS(YMEAN2-YMEAN**2))/SQRT(DBLE(NEVT))
      YSUM   = HIST(5,IHIS,IBIN)
      IF (ABS(YSUM).LT.TINY35) YSUM = ONE
C     XMEAN  = HIST(3,IHIS,IBIN)/YSUM/MAX(HIST(2,IHIS,IBIN),ONE)
      XMEAN  = HIST(3,IHIS,IBIN)/YSUM
      IF (XMEAN.EQ.ZERO) XMEAN = XLOW

      RETURN
      END
c
c===joihis=============================================================*
c
CDECK  ID>, DT_JOIHIS
      SUBROUTINE DT_JOIHIS(IH1,IH2,COPER,FAC1,FAC2,KEVT,NORM,ILOGY,MODE)

c***********************************************************************
c                                                                      *
c     Operation on histograms.                                         *
c                                                                      *
c     input:  IH1,IH2      histogram indices to be joined              *
c             COPER        character defining the requested operation, *
c                          i.e. '+', '-', '*', '/'                     *
c             FAC1,FAC2    factors for joining, i.e.                   *
c                          FAC1*histo1 COPER FAC2*histo2               *
c                                                                      *
c This version dated 23.4.95 is written  by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6)

      CHARACTER COPER*1

      PARAMETER (ZERO   =  0.0D0,
     &           ONE    =  1.0D0,
     &           OHALF  =  0.5D0,
     &           TINY8  =  1.0D-8,
     &           SMALL  =  -1.0D8,
     &           RLARGE =  1.0D8 )

c histograms

      PARAMETER (NHIS=150, NDIM=250)

      COMMON /DTHIS1/ HIST(7,NHIS,NDIM),DENTRY(2,NHIS),OVERF(NHIS),
     &                UNDERF(NHIS),IBINS(NHIS),ISWI(NHIS),IHISL


      PARAMETER (NDIM2 = 2*NDIM)
      DIMENSION XX(NDIM2),YY(NDIM2),YY1(NDIM),XX1(NDIM)

      CHARACTER*43 CNORM(0:6)
      DATA CNORM /'NO FURTHER NORMALIZATION                   ',
     &            'PER EVENT AND BIN WIDTH                    ',
     &            'PER ENTRY AND BIN WIDTH                    ',
     &            'PER BIN ENTRY                              ',
     &            'PER EVENT AND "BIN WIDTH" X1^2...X2^2      ',
     &            'PER EVENT AND "LOG. BIN WIDTH" LN X1..LN X2',
     &            'PER EVENT                                  '/

c check histogram indices
      IF ((IH1.LT.    1).OR.(IH2.LT.    1).OR.
     &    (IH1.GT.IHISL).OR.(IH2.GT.IHISL)) THEN
         WRITE(ErrorOut,1000) IH1,IH2,IHISL
 1000    FORMAT(1X,'JOIHIS:   WARNING!  INCONSISTENT HISTOGRAM ',
     &          'INDICES (',I3,',',I3,'),',/,21X,'VALID RANGE:  1,',I3)
         GOTO 9999
      ENDIF

c check bin structure of histograms to be joined
      IF (IBINS(IH1).NE.IBINS(IH2)) THEN
         WRITE(ErrorOut,1001) IH1,IH2,IBINS(IH1),IBINS(IH2)
 1001    FORMAT(1X,'JOIHIS:   WARNING!  JOINING HISTOGRAMS ',I3,
     &          ' AND ',I3,' FAILED',/,21X,
     &          'DUE TO DIFFERENT NUMBERS OF BINS (',I3,',',I3,')')
         GOTO 9999
      ENDIF
      DO 1 K=1,IBINS(IH1)+1
         IF (ABS(HIST(1,IH1,K)-HIST(1,IH2,K)).GT.TINY8) THEN
            WRITE(ErrorOut,
     * 1002) IH1,IH2,K,HIST(1,IH1,K),HIST(1,IH2,K)
 1002       FORMAT(1X,'JOIHIS:   WARNING!  JOINING HISTOGRAMS ',I3,
     &             ' AND ',I3,' FAILED AT BIN EDGE ',I3,/,21X,
     &             'X1,X2 = ',2E11.4)
            GOTO 9999
         ENDIF
    1 CONTINUE

      WRITE(ErrorOut,1003) IH1,IH2,COPER,FAC1,FAC2
 1003 FORMAT(1X,'JOIHIS:   JOINING HISTOGRAMS ',I3,',',I3,' WITH ',
     &       'OPERATION ',A,/,11X,'AND FACTORS ',2E11.4)
      WRITE(ErrorOut,1004) CNORM(NORM)
 1004 FORMAT(1X,'NORMALIZATION: ',A,/)

      DO 2 K=1,IBINS(IH1)
         CALL DT_GETBIN(IH1,K,KEVT,NORM,XLOW1,XHI1,XMEAN1,YMEAN1,YERR1)
         CALL DT_GETBIN(IH2,K,KEVT,NORM,XLOW2,XHI2,XMEAN2,YMEAN2,YERR2)
         XLOW  = XLOW1
         XHI   = XHI1
         XMEAN = OHALF*(XMEAN1+XMEAN2)
         IF (COPER.EQ.'+') THEN
            YMEAN = FAC1*YMEAN1+FAC2*YMEAN2
         ELSEIF (COPER.EQ.'*') THEN
            YMEAN = FAC1*YMEAN1*FAC2*YMEAN2
         ELSEIF (COPER.EQ.'/') THEN
            IF (YMEAN2.EQ.ZERO) THEN
               YMEAN = ZERO
            ELSE
               IF (FAC2.EQ.ZERO) FAC2 = ONE
               YMEAN = FAC1*YMEAN1/(FAC2*YMEAN2)
            ENDIF
         ELSE
            GOTO 9998
         ENDIF
         WRITE(ErrorOut,
     * 1006) XLOW,XMEAN,YMEAN,HIST(2,IH1,K),HIST(2,IH2,K)
         WRITE(ErrorOut,
     * 1006) XHI ,XMEAN,YMEAN,HIST(2,IH1,K),HIST(2,IH2,K)
 1006    FORMAT(1X,5E11.3)
c    small frame
         II = 2*K
         XX(II-1) = HIST(1,IH1,K)
         XX(II)   = HIST(1,IH1,K+1)
         YY(II-1) = YMEAN
         YY(II)   = YMEAN
c    wide frame
         XX1(K) = XMEAN
         IF ((ISWI(IH1).EQ.3).OR.(ISWI(IH1).EQ.4)) XX1(K) = LOG10(XMEAN)
         YY1(K) = YMEAN
    2 CONTINUE

c plot small frame
      IF (ABS(MODE).EQ.1) THEN
         IBIN2 = 2*IBINS(IH1)
         WRITE(ErrorOut,'(/,1X,A)') 'Preview:'
         IF(ILOGY.EQ.1) THEN
           CALL DT_XGLOGY(IBIN2,1,XX,YY,YY)
         ELSE
           CALL DT_XGRAPH(IBIN2,1,XX,YY,YY)
         ENDIF
      ENDIF

c plot wide frame
      IF (ABS(MODE).EQ.2) THEN
         WRITE(ErrorOut,'(/,1X,A)') 'Preview:'
         NSIZE = NDIM
         DXLOW = HIST(1,IH1,1)
         DDX   = ABS(HIST(1,IH1,2)-HIST(1,IH1,1))
         YLOW  = RLARGE
         YHI   = SMALL
         DO 3 I=1,NDIM
            IF (YY1(I).LT.YLOW) THEN
               IF (ILOGY.EQ.1) THEN
                  IF (YY1(I).GT.ZERO) YLOW = YY1(I)
               ELSE
                  YLOW = YY1(I)
               ENDIF
            ENDIF
            IF (YY1(I).GT.YHI) YHI = YY1(I)
    3    CONTINUE
         DY = (YHI-YLOW)/DBLE(NDIM)
         IF (DY.LE.ZERO) THEN
            WRITE(ErrorOut,'(1X,A,2I4,A,2E12.4)')
     &         'JOIHIS:   WARNING! ZERO BIN WIDTH FOR HISTOGRAMS ',
     &         IH1,IH2,': ',YLOW,YHI
            RETURN
         ENDIF
         IF (ILOGY.EQ.1) THEN
            YLOW = LOG10(YLOW)
            DY   = (LOG10(YHI)-YLOW)/100.0D0
            DO 4 I=1,NDIM
               IF (YY1(I).LE.ZERO) THEN
                  YY1(I) = YLOW
               ELSE
                  YY1(I) = LOG10(YY1(I))
               ENDIF
    4       CONTINUE
         ENDIF
         CALL DT_SRPLOT(XX1,YY1,NSIZE,1,NDIM,DXLOW,DDX,YLOW,DY)
      ENDIF

      RETURN

 9998 CONTINUE
      WRITE(ErrorOut,1005) COPER
 1005 FORMAT(1X,'JOIHIS:   UNKNOWN OPERATION ',A)

 9999 CONTINUE
      RETURN
      END
c
c===qgraph=============================================================*
c
CDECK  ID>, DT_XGRAPH
      SUBROUTINE DT_XGRAPH(N,IARG,X,Y1,Y2)
C***********************************************************************
C
C     calculate quasi graphic picture with 25 lines and 79 columns
C     ranges will be chosen automatically
C
C     input     N          dimension of input fields
C               IARG       number of curves (fields) to plot
C               X          field of X
C               Y1         field of Y1
C               Y2         field of Y2
C
C This subroutine is written by R. Engel.
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
C
      DIMENSION X(N),Y1(N),Y2(N)
      PARAMETER (EPS=1.D-30)
      PARAMETER (IYRAST=5,IXRAST=10,IBREIT=79,IZEIL=20)
      CHARACTER SYMB(5)
      CHARACTER COL(0:149,0:49)
C
      DATA SYMB /'0','E','Z','#','X'/
C
      ISPALT=IBREIT-10
C
C***  automatic range fitting
C
      XMAX=X(1)
      XMIN=X(1)
      DO 600 I=1,N
         XMAX=MAX(X(I),XMAX)
         XMIN=MIN(X(I),XMIN)
 600  CONTINUE
      XZOOM=(XMAX-XMIN)/DBLE(ISPALT)
C
      ITEST=0
      DO 1100 K=0,IZEIL-1
         ITEST=ITEST+1
         IF (ITEST.EQ.IYRAST) THEN
            DO 1010 L=1,ISPALT-1
               COL(L,K)='-'
1010        CONTINUE
            COL(ISPALT,K)='+'
            ITEST=0
            DO 1020 L=0,ISPALT-1,IXRAST
               COL(L,K)='+'
1020        CONTINUE
         ELSE
            DO 1030 L=1,ISPALT-1
               COL(L,K)=' '
1030        CONTINUE
            DO 1040 L=0,ISPALT-1,IXRAST
               COL(L,K)='|'
1040        CONTINUE
            COL(ISPALT,K)='|'
         ENDIF
1100  CONTINUE
C
C***  plot curve Y1
C
      YMAX=Y1(1)
      YMIN=Y1(1)
      DO 500 I=1,N
         YMAX=MAX(Y1(I),YMAX)
         YMIN=MIN(Y1(I),YMIN)
500   CONTINUE
      IF(IARG.GT.1) THEN
        DO 550 I=1,N
           YMAX=MAX(Y2(I),YMAX)
           YMIN=MIN(Y2(I),YMIN)
550     CONTINUE
      ENDIF
      YMAX=(YMAX-YMIN)/40.0D0+YMAX
      YMIN=YMIN-(YMAX-YMIN)/40.0D0
      YZOOM=(YMAX-YMIN)/DBLE(IZEIL)
      IF(YZOOM.LT.EPS) THEN
        WRITE(ErrorOut,'(1X,A)')
     &    'XGRAPH:WARNING: MIN = MAX, OUTPUT SUPPRESSED'
        RETURN
      ENDIF
C
C***  plot curve Y1
C
      ILAST=-1
      LLAST=-1
      DO 1200 K=1,N
         L=NINT((X(K)-XMIN)/XZOOM)
         I=NINT((YMAX-Y1(K))/YZOOM)
         IF(ILAST.GE.0) THEN
           LD = L-LLAST
           ID = I-ILAST
           DO 55 II=0,LD,SIGN(1,LD)
             DO 66 KK=0,ID,SIGN(1,ID)
               COL(II+LLAST,KK+ILAST)=SYMB(1)
 66          CONTINUE
 55        CONTINUE
         ELSE
           COL(L,I)=SYMB(1)
         ENDIF
         ILAST = I
         LLAST = L
1200  CONTINUE
C
      IF(IARG.GT.1) THEN
C
C***  plot curve Y2
C
        DO 1250 K=1,N
           L=NINT((X(K)-XMIN)/XZOOM)
           I=NINT((YMAX-Y2(K))/YZOOM)
           COL(L,I)=SYMB(2)
1250    CONTINUE
      ENDIF
C
C***  write it
C
      WRITE(ErrorOut,'(1X,79A)') ('-',I=1,IBREIT)
C
C***  write range of X
C
      XZOOM = (XMAX-XMIN)/DBLE(7)
      WRITE(ErrorOut,120) (XZOOM*DBLE(I-1)+XMIN,I=1,7)
C
      DO 1300 K=0,IZEIL-1
         YPOS=YMAX-((DBLE(K)+0.5D0)*YZOOM)
         WRITE(ErrorOut,110) YPOS,(COL(I,K),I=0,ISPALT)
 110     FORMAT(1X,1PE9.2,70A1)
1300  CONTINUE
C
C***  write range of X
C
      XZOOM = (XMAX-XMIN)/DBLE(7)
      WRITE(ErrorOut,120) (XZOOM*DBLE(I-1)+XMIN,I=1,7)
      WRITE(ErrorOut,'(1X,79A)') ('-',I=1,IBREIT)
 120  FORMAT(6X,7(1PE10.3))
      END
c
c===qglogy=============================================================*
c
CDECK  ID>, DT_XGLOGY
      SUBROUTINE DT_XGLOGY(N,IARG,X,Y1,Y2)
C***********************************************************************
C
C     calculate quasi graphic picture with 25 lines and 79 columns
C     logarithmic y axis
C     ranges will be chosen automatically
C
C     input     N          dimension of input fields
C               IARG       number of curves (fields) to plot
C               X          field of X
C               Y1         field of Y1
C               Y2         field of Y2
C
C This subroutine is written by R. Engel.
C***********************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      DIMENSION X(N),Y1(N),Y2(N)
      PARAMETER (EPS=1.D-30)
      PARAMETER (IYRAST=5,IXRAST=10,IBREIT=79,IZEIL=20)
      CHARACTER SYMB(5)
      CHARACTER COL(0:149,0:49)
      PARAMETER (DEPS = 1.D-10)
C
      DATA SYMB /'0','E','Z','#','X'/
C
      ISPALT=IBREIT-10
C
C***  automatic range fitting
C
      XMAX=X(1)
      XMIN=X(1)
      DO 600 I=1,N
         XMAX=MAX(X(I),XMAX)
         XMIN=MIN(X(I),XMIN)
 600  CONTINUE
      XZOOM=(XMAX-XMIN)/DBLE(ISPALT)
C
      ITEST=0
      DO 1100 K=0,IZEIL-1
         ITEST=ITEST+1
         IF (ITEST.EQ.IYRAST) THEN
            DO 1010 L=1,ISPALT-1
               COL(L,K)='-'
1010        CONTINUE
            COL(ISPALT,K)='+'
            ITEST=0
            DO 1020 L=0,ISPALT-1,IXRAST
               COL(L,K)='+'
1020        CONTINUE
         ELSE
            DO 1030 L=1,ISPALT-1
               COL(L,K)=' '
1030        CONTINUE
            DO 1040 L=0,ISPALT-1,IXRAST
               COL(L,K)='|'
1040        CONTINUE
            COL(ISPALT,K)='|'
         ENDIF
1100  CONTINUE
C
C***  plot curve Y1
C
      YMAX=Y1(1)
      YMIN=MAX(Y1(1),EPS)
      DO 500 I=1,N
         YMAX =MAX(Y1(I),YMAX)
         IF(Y1(I).GT.EPS) THEN
           IF(YMIN.EQ.EPS) THEN
             YMIN = Y1(I)/10.D0
           ELSE
             YMIN = MIN(Y1(I),YMIN)
           ENDIF
         ENDIF
500   CONTINUE
      IF(IARG.GT.1) THEN
        DO 550 I=1,N
           YMAX=MAX(Y2(I),YMAX)
           IF(Y2(I).GT.EPS) THEN
             IF(YMIN.EQ.EPS) THEN
               YMIN = Y2(I)
             ELSE
               YMIN = MIN(Y2(I),YMIN)
             ENDIF
           ENDIF
550     CONTINUE
      ENDIF
C
      DO 560 I=1,N
        Y1(I) = MAX(Y1(I),YMIN)
 560  CONTINUE
      IF(IARG.GT.1) THEN
        DO 570 I=1,N
          Y2(I) = MAX(Y2(I),YMIN)
 570    CONTINUE
      ENDIF
C
      IF(YMAX.LE.YMIN) THEN
        WRITE(ErrorOut,
     * '(/1X,A,2E12.3,/)') 'XGLOGY:ERROR:YMIN,YMAX ',YMIN,YMAX
        WRITE(ErrorOut,'(1X,A)') 'MIN = MAX, OUTPUT SUPPRESSED'
        RETURN
      ENDIF
C
      YMA=(LOG10(YMAX)-LOG10(YMIN))/20.0D0+LOG10(YMAX)
      YMI=LOG10(YMIN)-(LOG10(YMAX)-LOG10(YMIN))/20.0D0
      YZOOM=(YMA-YMI)/DBLE(IZEIL)
      IF(YZOOM.LT.EPS) THEN
        WRITE(ErrorOut,'(1X,A)')
     &    'XGLOGY:WARNING: MIN = MAX, OUTPUT SUPPRESSED'
        RETURN
      ENDIF
C
C***  plot curve Y1
C
      ILAST=-1
      LLAST=-1
      DO 1200 K=1,N
         L=NINT((X(K)-XMIN)/XZOOM)
         I=NINT((YMA-LOG10(Y1(K)))/YZOOM)
         IF(ILAST.GE.0) THEN
           LD = L-LLAST
           ID = I-ILAST
           DO 55 II=0,LD,SIGN(1,LD)
             DO 66 KK=0,ID,SIGN(1,ID)
               COL(II+LLAST,KK+ILAST)=SYMB(1)
 66          CONTINUE
 55        CONTINUE
         ELSE
           COL(L,I)=SYMB(1)
         ENDIF
         ILAST = I
         LLAST = L
1200  CONTINUE
C
      IF(IARG.GT.1) THEN
C
C***  plot curve Y2
C
        DO 1250 K=1,N
           L=NINT((X(K)-XMIN)/XZOOM)
           I=NINT((YMA-LOG10(Y2(K)))/YZOOM)
           COL(L,I)=SYMB(2)
1250    CONTINUE
      ENDIF
C
C***  write it
C
      WRITE(ErrorOut,'(2X,A)') '(LOGARITHMIC Y AXIS)'
      WRITE(ErrorOut,'(1X,79A)') ('-',I=1,IBREIT)
C
C***  write range of X
C
      XZOOM1 = (XMAX-XMIN)/DBLE(7)
      WRITE(ErrorOut,120) (XZOOM1*DBLE(I-1)+XMIN,I=1,7)
C
      DO 1300 K=0,IZEIL-1
         YPOS=10.D0**(YMA-((DBLE(K)+0.5D0)*YZOOM))
         WRITE(ErrorOut,110) YPOS,(COL(I,K),I=0,ISPALT)
 110     FORMAT(1X,1PE9.2,70A1)
1300  CONTINUE
C
C***  write range of X
C
      WRITE(ErrorOut,120) (XZOOM1*DBLE(I-1)+XMIN,I=1,7)
      WRITE(ErrorOut,'(1X,79A)') ('-',I=1,IBREIT)
 120  FORMAT(6X,7(1PE10.3))
C
      END
c
c===plot===============================================================*
c
CDECK  ID>, DT_SRPLOT
      SUBROUTINE DT_SRPLOT(X,Y,N,M,MM,XO,DX,YO,DY)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
c
c     initial version
c     J. Ranft, (FORTRAN-Programmierung,J.R.,Teubner, Leipzig, 72)
c     This is a subroutine of fluka to plot Y across the page
c     as a function of X down the page. Up to 37 curves can be
c     plotted in the same picture with different plotting characters.
c     Output of first 10 overprinted characters addad by FB 88
c  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
c
c     Input Variables:
c        X   = array containing the values of X
c        Y   = array containing the values of Y
c        N   = number of values in X and in Y
c              can exceed the fixed number of lines
c        M   = number of different curves X,Y are containing
c        MM  = number of points in each curve i.e. N=M*MM
c        XO  = smallest value of X to be plotted
c        DX  = increment of X between subsequent lines
c        YO  = smallest value of Y to be plotted
c        DY  = increment of Y between subsequent character spaces
c
c        other variables used inside:
c        XX  = numbers along the X-coordinate axis
c        YY  = numbers along the Y-coordinate axis
c        LL  = ten lines temporary storage for the plot
c        L   = character set used to plot different curves
c        LOV = memorizes overprinted symbols
c              the first 10 overprinted symbols are printed on
c              the end of the line to avoid ambiguities
c              (added by FB as considered quite helpful)
c
c********************************************************************
c
      DIMENSION XX(61),YY(61),LL(101,10)
      DIMENSION X(N),Y(N),L(40),LOV(40,10)
      DATA  L/
     11H*,1H2,1H3,1H4,1H5,1H6,1H7,1H8,1H9,1HZ,
     21H+,1HA,1HO,1HB,1HC,1HD,1HE,1HF,1HG,1HH,
     31HI,1HJ,1HK,1HL,1HM,1HN,1HO,1HP,1HQ,1HR,
     41HS,1HT,1HU,1HV,1HW,1HX,1HY,1H1,1H-,1H  /
c
c
      MN=51
      DO 10 I=1,MN
        AI=I-1
   10 XX(I)=XO+AI*DX
      DO 20 I=1,11
        AI=I-1
   20 YY(I)=YO+10.0D0*AI*DY
      WRITE(ErrorOut, 500) (YY(I),I=1,11)
      MMN=MN-1
c
c
      DO 90 JJ=1,MMN,10
        JJJ=JJ-1
        DO 30 I=1,101
          DO 30 J=1,10
   30   LL(I,J)=L(40)
        DO 40 I=1,101
   40   LL(I,1)=L(39)
        DO 50 I=1,101,10
          DO 50 J=1,10
   50   LL(I,J)=L(38)
        DO 60 I=1,40
          DO 60 J=1,10
   60   LOV(I,J)=L(40)
c
c
        DO 70 I=1,M
          DO 70 J=1,MM
            II=J+(I-1)*MM
            AIX=(X(II)-(XO-DX/2.0D0))/DX+1.0D0
            AIY=(Y(II)-(YO-DY/2.0D0))/DY+1.0D0
            AIX=AIX-DBLE(JJJ)
c           changed Sept.88 by FB to avoid INTEGER OVERFLOW
            IF( AIX .GT. 1.D0.AND. AIX .LT. 11.D0.AND. AIY .GT. 1.D0.AND
     +      . AIY .LT. 102.D0) THEN
              IX=INT(AIX)
              IY=INT(AIY)
              IF( IX.GT. 0.AND. IX.LE. 10.AND. IY.GT. 0.AND. IY.LE. 101)
     +        THEN
                IF(LL(IY,IX).NE.L(38).AND.LL(IY,IX).NE.L(39)) LOV(I,IX)
     +          =LL(IY,IX)
                LL(IY,IX)=L(I)
              ENDIF
            ENDIF
   70   CONTINUE
c
c
        DO 80 I=1,10
          II=I+JJJ
          III=II+1
          WRITE(ErrorOut,
     * 510) XX(II),XX(III) , (LL(J,I),J=1,101) , (LOV(J,I),J
     +    =1,10)
   80   CONTINUE
   90 CONTINUE
c
c
      WRITE(ErrorOut, 520)
      WRITE(ErrorOut, 500) (YY(I),I=1,11)
      RETURN
c
  500 FORMAT(11X,11(1PE10.2),11HOVERPRINTED)
  510 FORMAT(1X,2(1PE10.2),101A1,1H ,10A1)
  520 FORMAT(20X,10('1---------'),'1')
      END
c
c===hadron=============================================================*
c
CDECK  ID>, DT_HADPRP
      BLOCK DATA DT_HADPRP

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c auxiliary common for reggeon exchange (DTUNUC 1.x)
      COMMON /DTQUAR/ IQECHR(-6:6),IQBCHR(-6:6),IQICHR(-6:6),
     &                IQSCHR(-6:6),IQCCHR(-6:6),IQUCHR(-6:6),
     &                IQTCHR(-6:6),MQUARK(3,39)

c hadron index conversion (BAMJET <--> PDG)
      COMMON /DTHAIC/ IPDG2(2,7),IBAM2(2,7),IPDG3(2,22),IBAM3(2,22),
     &                IPDG4(2,29),IBAM4(2,29),IPDG5(2,19),IBAM5(2,19),
     &                IAMCIN(210)

c names of hadrons used in input-cards
      CHARACTER*8 BTYPE
      COMMON /DTPAIN/ BTYPE(30)


c / DTQUAR /
c----------------------------------------------------------------------*
c                                                                      *
c     Quark content of particles:                                      *
c          index   quark   el. charge  bar. charge  isospin  isospin3  *
c              1 = u          2/3          1/3        1/2       1/2    *
c             -1 = ubar      -2/3         -1/3        1/2      -1/2    *
c              2 = d         -1/3          1/3        1/2      -1/2    *
c             -2 = dbar       1/3         -1/3        1/2       1/2    *
c              3 = s         -1/3          1/3         0         0     *
c             -3 = sbar       1/3         -1/3         0         0     *
c              4 = c          2/3          1/3         0         0     *
c             -4 = cbar      -2/3         -1/3         0         0     *
c              5 = b         -1/3          1/3         0         0     *
c             -5 = bbar       1/3         -1/3         0         0     *
c              6 = t          2/3          1/3         0         0     *
c             -6 = tbar      -2/3         -1/3         0         0     *
c                                                                      *
c         Mquark = particle quark composition (Paprop numbering)       *
c         Iqechr = electric charge ( in 1/3 unit )                     *
c         Iqbchr = baryonic charge ( in 1/3 unit )                     *
c         Iqichr = isospin ( in 1/2 unit ), z component                *
c         Iqschr = strangeness                                         *
c         Iqcchr = charm                                               *
c         Iquchr = beauty                                              *
c         Iqtchr = ......                                              *
c                                                                      *
c----------------------------------------------------------------------*
      DATA IQECHR / -2, 1, -2, 1, 1, -2, 0, 2, -1, -1, 2, -1, 2 /
      DATA IQBCHR / 6*-1, 0, 6*1 /
      DATA IQICHR / 4*0, 1, -1, 0, 1, -1, 4*0 /
      DATA IQSCHR / 3*0, 1, 5*0, -1, 3*0 /
      DATA IQCCHR / 2*0, -1, 7*0, 1, 2*0 /
      DATA IQUCHR / 0, 1, 9*0, -1, 0 /
      DATA IQTCHR / -1, 11*0, 1 /
      DATA MQUARK /
     &   2, 1, 1,   -2,-1,-1,    0, 0, 0,    0, 0, 0,    0, 0, 0,
     &   0, 0, 0,    0, 0, 0,    2, 2, 1,   -2,-2,-1,    0, 0, 0,
     &   0, 0, 0,    0, 0, 0,    1,-2, 0,    2,-1, 0,    1,-3, 0,
     &   3,-1, 0,    1, 2, 3,   -1,-2,-3,    0, 0, 0,    2, 2, 3,
     &   1, 1, 3,    1, 2, 3,    1,-1, 0,    2,-3, 0,    3,-2, 0,
     &   2,-2, 0,    3,-3, 0,    0, 0, 0,    0, 0, 0,    0, 0, 0,
     &  -1,-1,-3,   -1,-2,-3,   -2,-2,-3,    1, 3, 3,   -1,-3,-3,
     &   2, 3, 3,   -2,-3,-3,    3, 3, 3,   -3,-3,-3 /

c / DTHAIC /
c (renamed) (HAdron InDex COnversion)
c translation table version filled up by r.e. 25.01.94                 *
      DATA IAMCIN /
     &2212,-2212,11,-11,12,              -12,22,2112,-2112,-13,
     &13,130,211,-211,321,               -321,3122,-3122,310,3112,
     &3222,3212,111,311,-311,            0,0,0,0,0,
     &221,213,113,-213,223,              323,313,-323,-313,10323,
     &10313,-10323,-10313,30323,30313,   -30323,-30313,3224,3214,3114,
     &3216,3218,2224,2214,2114,          1114,12224,12214,12114,11114,
     &99999,99999,22212,22112,32124,     31214,-2224,-2214,-2114,-1114,
     &-12224,-12214,-12114,-11114,-2124, -1214,4*99999,
     &5*99999,                           5*99999,
     &4*99999,331,                       333,3322,3312,-3222,-3212,
     &-3112,-3322,-3312,3224,3214,       3114,3324,3314,3334,-3224,
     &-3214,-3114,-3324,-3314,-3334,     421,411,-411,-421,431,
     &-431,441,423,413,-413,             -423,433,-433,20443,443,
     &-15,15,16,-16,14,                  -14,4122,4232,4132,4222,
     &4212,4112,3*99999,                 3*99999,-4122,-4232,
     &-4132,-4222,-4212,-4112,99999,     5*99999,
     &5*99999,                           5*99999,
     &10*99999,
     &5*99999 , 20211,20111,-20211,99999,20321,
     &-20321,20311,-20311,7*99999 ,
     &7*99999,12212,12112,99999/

c / DTHAIC /
c (HAdron InDex COnversion)
      DATA (IPDG2(1,K),K=1,7)
     &   /   -11,   -12,   -13,   -15,   -16,   -14,     0/
      DATA (IBAM2(1,K),K=1,7)
     &   /     4,     6,    10,   131,   134,   136,     0/
      DATA (IPDG2(2,K),K=1,7)
     &   /    11,    12,    22,    13,    15,    16,    14/
      DATA (IBAM2(2,K),K=1,7)
     &   /     3,     5,     7,    11,   132,   133,   135/
      DATA (IPDG3(1,K),K=1,22)
     &   /  -211,  -321,  -311,  -213,  -323,  -313,  -411,  -421,
     &      -431,  -413,  -423,  -433,     0,     0,     0,     0,
     &         0,     0,     0,     0,     0,     0/
      DATA (IBAM3(1,K),K=1,22)
     &   /    14,    16,    25,    34,    38,    39,   118,   119,
     &       121,   125,   126,   128,     0,     0,     0,     0,
     &         0,     0,     0,     0,     0,     0/
      DATA (IPDG3(2,K),K=1,22)
     &   /   130,   211,   321,   310,   111,   311,   221,   213,
     &       113,   223,   323,   313,   331,   333,   421,   411,
     &       431,   441,   423,   413,   433,   443/
      DATA (IBAM3(2,K),K=1,22)
     &   /    12,    13,    15,    19,    23,    24,    31,    32,
     &        33,    35,    36,    37,    95,    96,   116,   117,
     &       120,   122,   123,   124,   127,   130/
      DATA (IPDG4(1,K),K=1,29)
     &   / -2212, -2112, -3122, -2224, -2214, -2114, -1114, -2124,
     &     -1214, -3222, -3212, -3112, -3322, -3312, -3224, -3214,
     &     -3114, -3324, -3314, -3334, -4122, -4232, -4132, -4222,
     &     -4212, -4112,     0,     0,     0/
      DATA (IBAM4(1,K),K=1,29)
     &   /     2,     9,    18,    67,    68,    69,    70,    75,
     &        76,    99,   100,   101,   102,   103,   110,   111,
     &       112,   113,   114,   115,   149,   150,   151,   152,
     &       153,   154,     0,     0,     0/
      DATA (IPDG4(2,K),K=1,29)
     &   /  2212,  2112,  3122,  3112,  3222,  3212,  3224,  3214,
     &      3114,  3216,  3218,  2224,  2214,  2114,  1114,  3322,
     &      3312,  3224,  3214,  3114,  3324,  3314,  3334,  4122,
     &      4232,  4132,  4222,  4212,  4112/
      DATA (IBAM4(2,K),K=1,29)
     &   /     1,     8,    17,    20,    21,    22,    48,    49,
     &        50,    51,    52,    53,    54,    55,    56,    97,
     &        98,   104,   105,   106,   107,   108,   109,   137,
     &       138,   139,   140,   141,   142/
      DATA (IPDG5(1,K),K=1,19)
     &   /-10323,-10313,-30323,-30313,-12224,-12214,-12114,-11114,
     &    -20211,-20321,-20311,     0,     0,     0,     0,     0,
     &         0,     0,     0/
      DATA (IBAM5(1,K),K=1,19)
     &   /    42,    43,    46,    47,    71,    72,    73,    74,
     &       188,   191,   193,     0,     0,     0,     0,     0,
     &         0,     0,     0/
      DATA (IPDG5(2,K),K=1,19)
     &   / 10323, 10313, 30323, 30313, 12224, 12214, 12114, 11114,
     &     22212, 22112, 32124, 31214, 20443, 20211, 20111, 20321,
     &     20311, 12212, 12112/
      DATA (IBAM5(2,K),K=1,19)
     &   /    40,    41,    44,    45,    57,    58,    59,    60,
     &        63,    64,    65,    66,   129,   186,   187,   190,
     &       192,   208,   209/

c / DTPAIN /
c internal particle names
      DATA BTYPE / 'PROTON  ' , 'APROTON ' , 'ELECTRON' , 'POSITRON' ,
     &'NEUTRIE ' , 'ANEUTRIE' , 'PHOTON  ' , 'NEUTRON ' , 'ANEUTRON' ,
     &'MUON+   ' , 'MUON-   ' , 'KAONLONG' , 'PION+   ' , 'PION-   ' ,
     &'KAON+   ' , 'KAON-   ' , 'LAMBDA  ' , 'ALAMBDA ' , 'KAONSHRT' ,
     &'SIGMA-  ' , 'SIGMA+  ' , 'SIGMAZER' , 'PIZERO  ' , 'KAONZERO' ,
     &'AKAONZER' , 'NEUTRIM ' , 'ANEUTRIM' , 'NEUTRIT ' , 'ANEUTRIT' ,
     &'BLANK   ' /

      END
c
c===blkd46=============================================================*
c
CDECK  ID>, DT_BLKD46
      BLOCK DATA DT_BLKD46

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)


c / DTPART /
c Particle  masses Engel version JETSET compatible
      DATA (AAM(K),K=1,85) /
     &   .9383D+00, .9383D+00,  AMELCT  ,  AMELCT  , .0000D+00,
     &   .0000D+00, .0000D+00, .9396D+00, .9396D+00, AMMUON   ,
     &   AMMUON   , .4977D+00, .1396D+00, .1396D+00, .4936D+00,
     &   .4936D+00, .1116D+01, .1116D+01, .4977D+00, .1197D+01,
     &   .1189D+01, .1193D+01, .1350D+00, .4977D+00, .4977D+00,
     &   .0000D+00, .0000D+00, .0000D+00, .0000D+00, .0000D+00,
     &   .5488D+00, .7669D+00, .7700D+00, .7669D+00, .7820D+00,
     &   .8921D+00, .8962D+00, .8921D+00, .8962D+00, .1300D+01,
     &   .1300D+01, .1300D+01, .1300D+01, .1421D+01, .1421D+01,
     &   .1421D+01, .1421D+01, .1383D+01, .1384D+01, .1387D+01,
     &   .1820D+01, .2030D+01, .1231D+01, .1232D+01, .1233D+01,
     &   .1234D+01, .1675D+01, .1675D+01, .1675D+01, .1675D+01,
     &   .1500D+01, .1500D+01, .1515D+01, .1515D+01, .1775D+01,
     &   .1775D+01, .1231D+01, .1232D+01, .1233D+01, .1234D+01,
     &   .1675D+01, .1675D+01, .1675D+01, .1675D+01, .1515D+01,
     &   .1515D+01, .2500D+01, .4890D+00, .4890D+00, .4890D+00,
     &   .1300D+01, .1300D+01, .1300D+01, .1300D+01, .2200D+01  /
      DATA (AAM(K),K=86,183) /
     &   .2200D+01, .2200D+01, .2200D+01, .1700D+01, .1700D+01,
     &   .1700D+01, .1700D+01, .1820D+01, .2030D+01, .9575D+00,
     &   .1019D+01, .1315D+01, .1321D+01, .1189D+01, .1193D+01,
     &   .1197D+01, .1315D+01, .1321D+01, .1383D+01, .1384D+01,
     &   .1387D+01, .1532D+01, .1535D+01, .1672D+01, .1383D+01,
     &   .1384D+01, .1387D+01, .1532D+01, .1535D+01, .1672D+01,
     &   .1865D+01, .1869D+01, .1869D+01, .1865D+01, .1969D+01,
     &   .1969D+01, .2980D+01, .2007D+01, .2010D+01, .2010D+01,
     &   .2007D+01, .2113D+01, .2113D+01, .3686D+01, .3097D+01,
     &   .1784D+01, .1784D+01, .0000D+00, .0000D+00, .0000D+00,
     &   .0000D+00, .2285D+01, .2460D+01, .2460D+01, .2452D+01,
     &   .2453D+01, .2454D+01, .2560D+01, .2560D+01, .2730D+01,
     &   .3610D+01, .3610D+01, .3790D+01, .2285D+01, .2460D+01,
     &   .2460D+01, .2452D+01, .2453D+01, .2454D+01, .2560D+01,
     &   .2560D+01, .2730D+01, .3610D+01, .3610D+01, .3790D+01,
     &   .2490D+01, .2490D+01, .2490D+01, .2610D+01, .2610D+01,
     &   .2770D+01, .3670D+01, .3670D+01, .3850D+01, .4890D+01,
     &   .2490D+01, .2490D+01, .2490D+01, .2610D+01, .2610D+01,
     &   .2770D+01, .3670D+01, .3670D+01, .3850D+01, .4890D+01,
     &   .1250D+01, .1250D+01, .1250D+01  /
      DATA (AAM ( I ), I = 184,210 ) /
     & 1.44000000000000D+00, 1.44000000000000D+00, 1.30000000000000D+00,
     & 1.30000000000000D+00, 1.30000000000000D+00, 1.40000000000000D+00,
     & 1.46000000000000D+00, 1.46000000000000D+00, 1.46000000000000D+00,
     & 1.46000000000000D+00, 1.60000000000000D+00, 1.60000000000000D+00,
     & 1.66000000000000D+00, 1.66000000000000D+00, 1.66000000000000D+00,
     & 1.66000000000000D+00, 1.66000000000000D+00, 1.66000000000000D+00,
     & 1.95000000000000D+00, 1.95000000000000D+00, 1.95000000000000D+00,
     & 1.95000000000000D+00, 2.25000000000000D+00, 2.25000000000000D+00,
     & 1.44000000000000D+00, 1.44000000000000D+00, 0.00000000000000D+00/
c Particle  mean lives
      DATA (TAU(K),K=1,183) /
     &   .1000D+19, .1000D+19, .1000D+19, .1000D+19, .1000D+19,
     &   .1000D+19, .1000D+19, .9180D+03, .9180D+03, .2200D-05,
     &   .2200D-05, .5200D-07, .2600D-07, .2600D-07, .1200D-07,
     &   .1200D-07, .2600D-09, .2600D-09, .9000D-10, .1500D-09,
     &   .8000D-10, .5000D-14, .8000D-16, .0000D+00, .0000D+00,
     &   70*.0000D+00,
     &   .0000D+00, .3000D-09, .1700D-09, .8000D-10, .1000D-13,
     &   .1500D-09, .3000D-09, .1700D-09, .0000D+00, .0000D+00,
     &   .0000D+00, .0000D+00, .0000D+00, .1000D-09, .0000D+00,
     &   .0000D+00, .0000D+00, .0000D+00, .0000D+00, .1000D-09,
     &   .0000D+00, .0000D+00, .0000D+00, .0000D+00, .0000D+00,
     &   .0000D+00, .0000D+00, .0000D+00, .0000D+00, .0000D+00,
     &   .0000D+00, .0000D+00, .0000D+00, .0000D+00, .0000D+00,
     &   .9000D-11, .9000D-11, .9000D-11, .9000D-11, .1000D+19,
     &   .1000D+19, .0000D+00, .0000D+00, .0000D+00, .0000D+00,
     &   40*.0000D+00,
     &   .0000D+00, .0000D+00, .0000D+00  /
      DATA ( TAU ( I ), I = 184,210 ) /
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00,
     & 0.00000000000000D+00, 0.00000000000000D+00, 0.00000000000000D+00/
c Resonance width Gamma in GeV
      DATA (GA(K),K=  1,85) /
     &    30*.0000D+00,
     &   .8500D-06, .1520D+00, .1520D+00, .1520D+00, .1000D-01,
     &   .7900D-01, .7900D-01, .7900D-01, .7900D-01, .4500D+00,
     &   .4500D+00, .4500D+00, .4500D+00, .1080D+00, .1080D+00,
     &   .1080D+00, .1080D+00, .5000D-01, .5000D-01, .5000D-01,
     &   .8500D-01, .1800D+00, .1150D+00, .1150D+00, .1150D+00,
     &   .1150D+00, .2000D+00, .2000D+00, .2000D+00, .2000D+00,
     &   .2000D+00, .2000D+00, .1000D+00, .1000D+00, .2000D+00,
     &   .2000D+00, .1150D+00, .1150D+00, .1150D+00, .1150D+00,
     &   .2000D+00, .2000D+00, .2000D+00, .2000D+00, .1000D+00,
     &   .1000D+00, .2000D+00, .1000D+00, .1000D+00, .1000D+00,
     &   .1000D+00, .1000D+00, .1000D+00, .1000D+00, .2000D+00  /
      DATA (GA(K),K= 86,183) /
     &   .2000D+00, .2000D+00, .2000D+00, .1500D+00, .1500D+00,
     &   .1500D+00, .1500D+00, .8500D-01, .1800D+00, .2000D-02,
     &   .4000D-02, .0000D+00, .0000D+00, .0000D+00, .0000D+00,
     &   .0000D+00, .0000D+00, .0000D+00, .3400D-01, .3400D-01,
     &   .3600D-01, .9000D-02, .9000D-02, .0000D+00, .3400D-01,
     &   .3400D-01, .3600D-01, .9000D-02, .9000D-02, .0000D+00,
     &   .0000D+00, .0000D+00, .0000D+00, .0000D+00, .0000D+00,
     &   .0000D+00, .0000D+00, .5000D-02, .2000D-02, .2000D-02,
     &   .5000D-02, .2000D-02, .2000D-02, .2000D-03, .7000D-03,
     &   50*.0000D+00,
     &   .3000D+00, .3000D+00, .3000D+00  /
      DATA ( GA ( I ), I = 184,210 ) /
     & 2.00000000000000D-01, 2.00000000000000D-01, 3.00000000000000D-01,
     & 3.00000000000000D-01, 3.00000000000000D-01, 2.70000000000000D-01,
     & 2.50000000000000D-01, 2.50000000000000D-01, 2.50000000000000D-01,
     & 2.50000000000000D-01, 1.50000000000000D-01, 1.50000000000000D-01,
     & 1.00000000000000D-01, 1.00000000000000D-01, 1.00000000000000D-01,
     & 1.00000000000000D-01, 1.00000000000000D-01, 1.00000000000000D-01,
     & 6.00000000000000D-02, 6.00000000000000D-02, 6.00000000000000D-02,
     & 6.00000000000000D-02, 5.50000000000000D-02, 5.50000000000000D-02,
     & 2.00000000000000D-01, 2.00000000000000D-01, 0.00000000000000D+00/
c Particle  names
c S+1385+Sigma+(1385)    L02030+Lambda0(2030)
c Rho77=Rho(770) Om783=Omega(783) K*14=K*(1420) and so on
c designation N*@@ means N*@1(@2)
      DATA (ANAME(K),K=1,85) /
     &  'P       ','AP      ','E-      ','E+      ','NUE     ',
     &  'ANUE    ','GAM     ','NEU     ','ANEU    ','MUE+    ',
     &  'MUE-    ','K0L     ','PI+     ','PI-     ','K+      ',
     &  'K-      ','LAM     ','ALAM    ','K0S     ','SIGM-   ',
     &  'SIGM+   ','SIGM0   ','PI0     ','K0      ','AK0     ',
     &  'BLANK   ','BLANK   ','BLANK   ','BLANK   ','BLANK   ',
     &  'ETA550  ','RHO+77  ','RHO077  ','RHO-77  ','OM0783  ',
     &  'K*+892  ','K*0892  ','K*-892  ','AK*089  ','KA+125  ',
     &  'KA0125  ','KA-125  ','AKA012  ','K*+142  ','K*0142  ',
     &  'K*-142  ','AK*014  ','S+1385  ','S01385  ','S-1385  ',
     &  'L01820  ','L02030  ','N*++12  ','N*+ 12  ','N*012   ',
     &  'N*-12   ','N*++16  ','N*+16   ','N*016   ','N*-16   ',
     &  'N*+14   ','N*014   ','N*+15   ','N*015   ','N*+18   ',
     &  'N*018   ','AN--12  ','AN*-12  ','AN*012  ','AN*+12  ',
     &  'AN--16  ','AN*-16  ','AN*016  ','AN*+16  ','AN*-15  ',
     &  'AN*015  ','DE*=24  ','RPI+49  ','RPI049  ','RPI-49  ',
     &  'PIN++   ','PIN+0   ','PIN+-   ','PIN-0   ','PPPI    ' /
      DATA (ANAME(K),K=86,183) /
     &  'PNPI    ','APPPI   ','APNPI   ','K+PPI   ','K-PPI   ',
     &  'K+NPI   ','K-NPI   ','S+1820  ','S-2030  ','ETA*    ',
     &  'PHI     ','TETA0   ','TETA-   ','ASIG-   ','ASIG0   ',
     &  'ASIG+   ','ATETA0  ','ATETA+  ','SIG*+   ','SIG*0   ',
     &  'SIG*-   ','TETA*0  ','TETA*   ','OMEGA-  ','ASIG*-  ',
     &  'ASIG*0  ','ASIG*+  ','ATET*0  ','ATET*+  ','OMEGA+  ',
     &  'D0      ','D+      ','D-      ','AD0     ','F+      ',
     &  'F-      ','ETAC    ','D*0     ','D*+     ','D*-     ',
     &  'AD*0    ','F*+     ','F*-     ','PSI     ','JPSI    ',
     &  'TAU+    ','TAU-    ','NUET    ','ANUET   ','NUEM    ',
     &  'ANUEM   ','C0+     ','A+      ','A0      ','C1++    ',
     &  'C1+     ','C10     ','S+      ','S0      ','T0      ',
     &  'XU++    ','XD+     ','XS+     ','AC0-    ','AA-     ',
     &  'AA0     ','AC1--   ','AC1-    ','AC10    ','AS-     ',
     &  'AS0     ','AT0     ','AXU--   ','AXD-    ','AXS     ',
     &  'C1*++   ','C1*+    ','C1*0    ','S*+     ','S*0     ',
     &  'T*0     ','XU*++   ','XD*+    ','XS*+    ','TETA++  ',
     &  'AC1*--  ','AC1*-   ','AC1*0   ','AS*-    ','AS*0    ',
     &  'AT*0    ','AXU*--  ','AXD*-   ','AXS*-   ','ATET--  ',
     &  'RO      ','R+      ','R-      '  /
      DATA (    ANAME ( I ), I = 184,210 ) /
     &'AN*-14  ','AN*014  ','PI+130  ','PI0130  ','PI-130  ','F01400  ',
     &'K*+146  ','K*-146  ','K*0146  ','AK0146  ','L01600  ','AL0160  ',
     &'S+1660  ','S01660  ','S-1660  ','AS-166  ','AS0166  ','AS+166  ',
     &'X01950  ','X-1950  ','AX0195  ','AX+195  ','OM-225  ','AOM+22  ',
     &'N*+14   ','N*014   ','BLANK   '/
c Charge of particles and resonances
      DATA (IICH ( I ), I =   1,210 ) /
     &  1, -1, -1,  1,  0,  0,  0,  0,  0,  1, -1,  0,  1, -1,  1,
     & -1,  0,  0,  0, -1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     &  0,  1,  0, -1,  0,  1,  0, -1,  0,  1,  0, -1,  0,  1,  0,
     & -1,  0,  1,  0, -1,  0,  0,  2,  1,  0, -1,  2,  1,  0, -1,
     &  1,  0,  1,  0,  1,  0, -2, -1,  0,  1, -2, -1,  0,  1, -1,
     &  0,  1,  1,  0, -1,  2,  1,  0, -1,  2,  1,  0, -1,  2,  0,
     &  1, -1,  1, -1,  0,  0,  0, -1, -1,  0,  1,  0,  1,  1,  0,
     & -1,  0, -1, -1, -1,  0,  1,  0,  1,  1,  0,  1, -1,  0,  1,
     & -1,  0,  0,  1, -1,  0,  1, -1,  0,  0,  1, -1,  0,  0,  0,
     &  0,  1,  1,  0,  2,  1,  0,  1,  0,  0,  2,  1,  1, -1, -1,
     &  0, -2, -1,  0, -1,  0,  0, -2, -1, -1,  2,  1,  0,  1,  0,
     &  0,  2,  1,  1,  2, -2, -1,  0, -1,  0,  0, -2, -1, -1, -2,
     &  0,  1, -1, -1,  0,  1,  0, -1,  0,  1, -1,  0,  0,  0,  0,
     &  1,  0, -1, -1,  0,  1,  0, -1,  0,  1, -1,  1,  1,  0,  0/
c Particle  baryonic charges
      DATA (IIBAR ( I ), I =   1,210 ) /
     &  1, -1,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0,
     &  0,  1, -1,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,
     &  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     &  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     &  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     & -1,  2,  0,  0,  0,  1,  1,  1,  1,  2,  2,  0,  0,  1,  1,
     &  1,  1,  1,  1,  0,  0,  1,  1, -1, -1, -1, -1, -1,  1,  1,
     &  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,
     &  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     &  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,
     & -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,
     &  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     &  0,  0,  0, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,
     &  1,  1,  1, -1, -1, -1,  1,  1, -1, -1,  1, -1,  1,  1,  0/
c First number of decay channels used for resonances
c and decaying particles
      DATA K1/   1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 16, 17,
     &  18, 24, 30, 34, 38, 40, 41, 43, 44, 136, 138, 330, 327, 328,
     &   2*330, 46, 51, 52, 54, 55, 58,
c                                                             50
     &  60, 62, 64, 66, 68, 70, 72, 74, 82, 90, 98, 106, 109, 112, 114,
     & 123, 140, 141, 143, 145, 146, 150, 157, 164, 168, 174, 180, 187,
     & 194, 202, 210, 211, 213, 215, 216, 220, 227, 234, 238, 245, 252,
c                                         85
     & 254, 255, 256, 257, 259, 262, 265, 267, 269, 272, 276, 279, 282,
     & 286, 290, 293, 299, 331, 335, 339, 340, 341, 343, 344, 345, 346,
     & 347, 350, 353, 356, 358, 360, 363, 366, 369, 372, 374, 376, 379,
     & 383, 385, 387, 391, 394, 397, 400, 402, 405, 408, 410, 412, 414,
     & 417, 420, 425, 430, 431, 432, 433, 434, 448, 452, 457, 458, 459,
     & 460, 461, 462, 466, 468, 470, 472, 486, 490, 495, 496, 497, 498,
     & 499, 500, 504, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517,
     & 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534,
     & 537, 539, 541, 547, 553, 558, 563, 568, 572, 573, 574, 575, 576,
     & 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
     & 590, 596, 602 /
c Last number of decay channels used for resonances
c and decaying particles
      DATA K2/   1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 15, 16, 17,
     & 23, 29, 31, 35, 39, 40, 42, 43, 45, 137, 139, 330, 327, 328,
     & 2* 330, 50, 51, 53, 54, 57,
c                                                                 50
     & 59, 61, 63, 65, 67, 69, 71, 73, 81, 89, 97, 105, 108, 111, 113,
     & 122, 135, 140, 142, 144, 145, 149, 156, 163, 167, 173, 179, 186,
     & 193, 201, 209, 210, 212, 214, 215, 219, 226, 233, 237, 244, 251,
c                                              85
     & 253, 254, 255, 256, 258, 261, 264, 266, 268, 271, 275, 278, 281,
     & 285, 289, 292, 298, 307, 334, 338, 339, 340, 342, 343, 344, 345,
     & 346, 349, 352, 355, 357, 359, 362, 365, 368, 371, 373, 375, 378,
     & 382, 384, 386, 390, 393, 396, 399, 401, 404, 407, 409, 411, 413,
     & 416, 419, 424, 429, 430, 431, 432, 433, 447, 451, 456, 457, 458,
     & 459, 460, 461, 465, 467, 469, 471, 485, 489, 494, 495, 496, 497,
     & 498, 499, 503, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516,
     & 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533,
     & 536, 538, 540, 546, 552, 557, 562, 567, 571, 572, 573, 574, 575,
     & 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
     & 589, 595, 601, 602 /

       END
c
c===blkd47=============================================================*
c
CDECK  ID>, DT_BLKD47
      BLOCK DATA DT_BLKD47

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c HADRIN: decay channel information
      PARAMETER (IDMAX9=602)
      CHARACTER*8 ZKNAME
      COMMON /HNDECH/ ZKNAME(IDMAX9),WT(IDMAX9),NZK(IDMAX9,3)


c Name of decay channel
c Designation N*@ means N*@1(1236)
c @1=# means ++,  @1 = = means --
c Designation  P+/0/- means Pi+/Pi0/Pi- , respectively
      DATA (ZKNAME(K),K=  1, 85) /
     &  'P       ','AP      ','E-      ','E+      ','NUE     ',
     &  'ANUE    ','GAM     ','PE-NUE  ','APEANU  ','EANUNU  ',
     &  'E-NUAN  ','3PI0    ','PI+-0   ','PIMUNU  ','PIE-NU  ',
     &  'MU+NUE  ','MU-NUE  ','MU+NUE  ','PI+PI0  ','PI++-   ',
     &  'PI+00   ','M+P0NU  ','E+P0NU  ','MU-NU   ','PI-0    ',
     &  'PI+--   ','PI-00   ','M-P0NU  ','E-P0NU  ','PPI-    ',
     &  'NPI0    ','PD-NUE  ','PM-NUE  ','APPI+   ','ANPI0   ',
     &  'APE+NU  ','APM+NU  ','PI+PI-  ','PI0PI0  ','NPI-    ',
     &  'PPI0    ','NPI+    ','LAGA    ','GAGA    ','GAE+E-  ',
     &  'GAGA    ','GAGAP0  ','PI000   ','PI+-0   ','PI+-GA  ',
     &  'PI+0    ','PI+-    ','PI00    ','PI-0    ','PI+-0   ',
     &  'PI+-    ','PI0GA   ','K+PI0   ','K0PI+   ','KOPI0   ',
     &  'K+PI-   ','K-PI0   ','AK0PI-  ','AK0PI0  ','K-PI+   ',
     &  'K+PI0   ','K0PI+   ','K0PI0   ','K+PI-   ','K-PI0   ',
     &  'K0PI-   ','AK0PI0  ','K-PI+   ','K+PI0   ','K0PI+   ',
     &  'K+89P0  ','K08PI+  ','K+RO77  ','K0RO+7  ','K+OM07  ',
     &  'K+E055  ','K0PI0   ','K+PI+   ','K089P0  ','K+8PI-  '  /
      DATA (ZKNAME(K),K= 86,170) /
     &  'K0R077  ','K+R-77  ','K+R-77  ','K0OM07  ','K0E055  ',
     &  'K-PI0   ','K0PI-   ','K-89P0  ','AK08P-  ','K-R077  ',
     &  'AK0R-7  ','K-OM07  ','K-E055  ','AK0PI0  ','K-PI+   ',
     &  'AK08P0  ','K-8PI+  ','AK0R07  ','AK0OM7  ','AK0E05  ',
     &  'LA0PI+  ','SI0PI+  ','SI+PI0  ','LA0PI0  ','SI+PI-  ',
     &  'SI-PI+  ','LA0PI-  ','SI0PI-  ','NEUAK0  ','PK-     ',
     &  'SI+PI-  ','SI0PI0  ','SI-PI+  ','LA0ET0  ','S+1PI-  ',
     &  'S-1PI+  ','SO1PI0  ','NEUAK0  ','PK-     ','LA0PI0  ',
     &  'LA0OM0  ','LA0RO0  ','SI+RO-  ','SI-RO+  ','SI0RO0  ',
     &  'LA0ET0  ','SI0ET0  ','SI+PI-  ','SI-PI+  ','SI0PI0  ',
     &  'K0S     ','K0L     ','K0S     ','K0L     ','P PI+   ',
     &  'P PI0   ','N PI+   ','P PI-   ','N PI0   ','N PI-   ',
     &  'P PI+   ','N*#PI0  ','N*+PI+  ','PRHO+   ','P PI0   ',
     &  'N PI+   ','N*#PI-  ','N*+PI0  ','N*0PI+  ','PRHO0   ',
     &  'NRHO+   ','P PI-   ','N PI0   ','N*+PI-  ','N*0PI0  ',
     &  'N*-PI+  ','PRHO-   ','NRHO0   ','N PI-   ','N*0PI-  ',
     &  'N*-PI0  ','NRHO-   ','PETA0   ','N*#PI-  ','N*+PI0  '  /
      DATA (ZKNAME(K),K=171,255) /
     &  'N*0PI+  ','PRHO0   ','NRHO+   ','NETA0   ','N*+PI-  ',
     &  'N*0PI0  ','N*-PI+  ','PRHO-   ','NRHO0   ','P PI0   ',
     &  'N PI+   ','N*#PI-  ','N*+PI0  ','N*0PI+  ','PRHO0   ',
     &  'NRHO+   ','P PI-   ','N PI0   ','N*+PI-  ','N*0PI0  ',
     &  'N*-PI+  ','PRHO-   ','NRHO0   ','P PI0   ','N PI+   ',
     &  'PRHO0   ','NRHO+   ','LAMK+   ','S+ K0   ','S0 K+   ',
     &  'PETA0   ','P PI-   ','N PI0   ','PRHO-   ','NRHO0   ',
     &  'LAMK0   ','S0 K0   ','S- K+   ','NETA/   ','APPI-   ',
     &  'APPI0   ','ANPI-   ','APPI+   ','ANPI0   ','ANPI+   ',
     &  'APPI-   ','AN*=P0  ','AN*-P-  ','APRHO-  ','APPI0   ',
     &  'ANPI-   ','AN*=P+  ','AN*-P0  ','AN*0P-  ','APRHO0  ',
     &  'ANRHO-  ','APPI+   ','ANPI0   ','AN*-P+  ','AN*0P0  ',
     &  'AN*+P-  ','APRHO+  ','ANRHO0  ','ANPI+   ','AN*0P+  ',
     &  'AN*+P0  ','ANRHO+  ','APPI0   ','ANPI-   ','AN*=P+  ',
     &  'AN*-P0  ','AN*0P-  ','APRHO0  ','ANRHO-  ','APPI+,  ',
     &  'ANPI0   ','AN*-P+  ','AN*0P0  ','AN*+P-  ','APRHO+  ',
     &  'ANRHO0  ','PN*014  ','NN*=14  ','PI+0    ','PI+-    '  /
      DATA (ZKNAME(K),K=256,340) /
     &  'PI-0    ','P+0     ','N++     ','P+-     ','P00     ',
     &  'N+0     ','N+-     ','N00     ','P-0     ','N-0     ',
     &  'P--     ','PPPI0   ','PNPI+   ','PNPI0   ','PPPI-   ',
     &  'NNPI+   ','APPPI0  ','APNPI+  ','ANNPI0  ','ANPPI-  ',
     &  'APNPI0  ','APPPI-  ','ANNPI-  ','K+PPI0  ','K+NPI+  ',
     &  'K0PPI0  ','K-PPI0  ','K-NPI+  ','AKPPI-  ','AKNPI0  ',
     &  'K+NPI0  ','K+PPI-  ','K0PPI0  ','K0NPI+  ','K-NPI0  ',
     &  'K-PPI-  ','AKNPI-  ','PAK0    ','SI+PI0  ','SI0PI+  ',
     &  'SI+ETA  ','S+1PI0  ','S01PI+  ','NEUK-   ','LA0PI-  ',
     &  'SI-OM0  ','LA0RO-  ','SI0RO-  ','SI-RO0  ','SI-ET0  ',
     &  'SI0PI-  ','SI-0    ','BLANC   ','BLANC   ','BLANC   ',
     &  'BLANC   ','BLANC   ','BLANC   ','BLANC   ','BLANC   ',
     &  'BLANC   ','BLANC   ','BLANC   ','BLANC   ','BLANC   ',
     &  'BLANC   ','BLANC   ','BLANC   ','BLANC   ','BLANC   ',
     &  'BLANC   ','BLANC   ','BLANC   ','BLANC   ','BLANC   ',
     &  'EPI+-   ','EPI00   ','GAPI+-  ','GAGA*   ','K+-     ',
     &  'KLKS    ','PI+-0   ','EGA     ','LPI0    ','LPI     '  /
      DATA (ZKNAME(K),K=341,425) /
     &  'APPI0   ','ANPI-   ','ALAGA   ','ANPI    ','ALPI0   ',
     &  'ALPI+   ','LAPI+   ','SI+PI0  ','SI0PI+  ','LAPI0   ',
     &  'SI+PI-  ','SI-PI+  ','LAPI-   ','SI-PI0  ','SI0PI-  ',
     &  'TE0PI0  ','TE-PI+  ','TE0PI-  ','TE-PI0  ','TE0PI   ',
     &  'TE-PI   ','LAK-    ','ALPI-   ','AS-PI0  ','AS0PI-  ',
     &  'ALPI0   ','AS+PI-  ','AS-PI+  ','ALPI+   ','AS+PI0  ',
     &  'AS0PI+  ','AT0PI0  ','AT+PI-  ','AT0PI+  ','AT+PI0  ',
     &  'AT0PI   ','AT+PI   ','ALK+    ','K-PI+   ','K-PI+0  ',
     &  'K0PI+-  ','K0PI0   ','K-PI++  ','AK0PI+  ','K+PI--  ',
     &  'K0PI-   ','K+PI-   ','K+PI-0  ','AKPI-+  ','AK0PI0  ',
     &  'ETAPIF  ','K++-    ','K+AK0   ','ETAPI-  ','K--+    ',
     &  'K-K0    ','PI00    ','PI+-    ','GAGA    ','D0PI0   ',
     &  'D0GA    ','D0PI+   ','D+PI0   ','DFGA    ','AD0PI-  ',
     &  'D-PI0   ','D-GA    ','AD0PI0  ','AD0GA   ','F+GA    ',
     &  'F+GA    ','F-GA    ','F-GA    ','PSPI+-  ','PSPI00  ',
     &  'PSETA   ','E+E-    ','MUE+-   ','PI+-0   ','M+NN    ',
     &  'E+NN    ','RHO+NT  ','PI+ANT  ','K*+ANT  ','M-NN    '  /
      DATA (ZKNAME(K),K=426,510) /
     &  'E-NN    ','RHO-NT  ','PI-NT   ','K*-NT   ','NUET    ',
     &  'ANUET   ','NUEM    ','ANUEM   ','SI+ETA  ','SI+ET*  ',
     &  'PAK0    ','TET0K+  ','SI*+ET  ','N*+AK0  ','N*++K-  ',
     &  'LAMRO+  ','SI0RO+  ','SI+RO0  ','SI+OME  ','PAK*0   ',
     &  'N*+AK*  ','N*++K*  ','SI+AK0  ','TET0PI  ','SI+AK*  ',
     &  'TET0RO  ','SI0AK*  ','SI+K*-  ','TET0OM  ','TET-RO  ',
     &  'SI*0AK  ','C0+PI+  ','C0+PI0  ','C0+PI-  ','A+GAM   ',
     &  'A0GAM   ','TET0AK  ','TET0K*  ','OM-RO+  ','OM-PI+  ',
     &  'C1++AK  ','A+PI+   ','C0+AK0  ','A0PI+   ','A+AK0   ',
     &  'T0PI+   ','ASI-ET  ','ASI-E*  ','APK0    ','ATET0K  ',
     &  'ASI*-E  ','AN*-K0  ','AN*--K  ','ALAMRO  ','ASI0RO  ',
     &  'ASI-RO  ','ASI-OM  ','APK*0   ','AN*-K*  ','AN*--K  ',
     &  'ASI-K0  ','ATETPI  ','ASI-K*  ','ATETRO  ','ASI0K*  ',
     &  'ASI-K*  ','ATE0OM  ','ATE+RO  ','ASI*0K  ','AC-PI-  ',
     &  'AC-PI0  ','AC-PI+  ','AA-GAM  ','AA0GAM  ','ATET0K  ',
     &  'ATE0K*  ','AOM+RO  ','AOM+PI  ','AC1--K  ','AA-PI-  ',
     &  'AC0-K0  ','AA0PI-  ','AA-K0   ','AT0PI-  ','C1++GA  '  /
      DATA (ZKNAME(K),K=511,540) /
     &  'C1++GA  ','C10GAM  ','S+GAM   ','S0GAM   ','T0GAM   ',
     &  'XU++GA  ','XD+GAM  ','XS+GAM  ','A+AKPI  ','T02PI+  ',
     &  'C1++2K  ','AC1--G  ','AC1-GA  ','AC10GA  ','AS-GAM  ',
     &  'AS0GAM  ','AT0GAM  ','AXU--G  ','AXD-GA  ','AXS-GA  ',
     &  'AA-KPI  ','AT02PI  ','AC1--K  ','RH-PI+  ','RH+PI-  ',
     &  'RH3PI0  ','RH0PI+  ','RH+PI0  ','RH0PI-  ','RH-PI0  '  /
      DATA (ZKNAME(I),I=541,602)/
     & 'APETA ','AN=P+ ','AN-PO ','ANOPO ','APRHO0','ANRHO-','ANETA ',
     & 'AN-P+ ','AN0PO ','AN+P- ','APRHO+','ANRHO0','RH0PI+','RH+PI0',
     & '3PI+00','3PI-++','F0PI+ ','RH+PI-','RH0PI0','3PI000','3PI0+-',
     & 'F0PI0 ','RH0PI-','RH-PI0','3PI-00','3PI--+','F0PI- ','PI0PI0',
     & 'PI+PI-','K+K-  ','K0AK0 ','L01600','AL0160','K*+146','K*-146',
     & 'K*0146','AK0146','S+1660','S01660','S-1660','AS-166','AS0166',
     & 'AS+166','X01690','X-1690','AX0169','AX+169','OM-225','AOM+22',
     & 'N*PPI0','N*NPI+','N*P2P0','N*PP+-','N*D+P0','N*D0P+','N*NPI0',
     & 'N*PPI-','N*N2P0','N*NP+-','N*D+P-','N*D0P0','BLANK '/
c Weight of decay channel
      DATA (WT(K),K=  1, 85) /
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .2100D+00, .1200D+00, .2700D+00, .4000D+00,
     &   .1000D+01, .1000D+01, .6400D+00, .2100D+00, .6000D-01,
     &   .2000D-01, .3000D-01, .4000D-01, .6400D+00, .2100D+00,
     &   .6000D-01, .2000D-01, .3000D-01, .4000D-01, .6400D+00,
     &   .3600D+00, .0000D+00, .0000D+00, .6400D+00, .3600D+00,
     &   .0000D+00, .0000D+00, .6900D+00, .3100D+00, .1000D+01,
     &   .5200D+00, .4800D+00, .1000D+01, .9900D+00, .1000D-01,
     &   .3800D+00, .3000D-01, .3000D+00, .2400D+00, .5000D-01,
     &   .1000D+01, .1000D+01, .0000D+00, .1000D+01, .9000D+00,
     &   .1000D-01, .9000D-01, .3300D+00, .6700D+00, .3300D+00,
     &   .6700D+00, .3300D+00, .6700D+00, .3300D+00, .6700D+00,
     &   .3300D+00, .6700D+00, .3300D+00, .6700D+00, .3300D+00,
     &   .6700D+00, .3300D+00, .6700D+00, .1900D+00, .3800D+00,
     &   .9000D-01, .2000D+00, .3000D-01, .4000D-01, .5000D-01,
     &   .2000D-01, .1900D+00, .3800D+00, .9000D-01, .2000D+00  /
      DATA (WT(K),K= 86,170) /
     &   .3000D-01, .4000D-01, .5000D-01, .2000D-01, .1900D+00,
     &   .3800D+00, .9000D-01, .2000D+00, .3000D-01, .4000D-01,
     &   .5000D-01, .2000D-01, .1900D+00, .3800D+00, .9000D-01,
     &   .2000D+00, .3000D-01, .4000D-01, .5000D-01, .2000D-01,
     &   .8800D+00, .6000D-01, .6000D-01, .8800D+00, .6000D-01,
     &   .6000D-01, .8800D+00, .1200D+00, .1900D+00, .1900D+00,
     &   .1600D+00, .1600D+00, .1700D+00, .3000D-01, .3000D-01,
     &   .3000D-01, .4000D-01, .1000D+00, .1000D+00, .2000D+00,
     &   .1200D+00, .1000D+00, .4000D-01, .4000D-01, .5000D-01,
     &   .7500D-01, .7500D-01, .3000D-01, .3000D-01, .4000D-01,
     &   .5000D+00, .5000D+00, .5000D+00, .5000D+00, .1000D+01,
     &   .6700D+00, .3300D+00, .3300D+00, .6700D+00, .1000D+01,
     &   .2500D+00, .2700D+00, .1800D+00, .3000D+00, .1700D+00,
     &   .8000D-01, .1800D+00, .3000D-01, .2400D+00, .2000D+00,
     &   .1000D+00, .8000D-01, .1700D+00, .2400D+00, .3000D-01,
     &   .1800D+00, .1000D+00, .2000D+00, .2500D+00, .1800D+00,
     &   .2700D+00, .3000D+00, .4000D+00, .2000D+00, .1250D+00  /
      DATA (WT(K),K=171,255) /
     &   .7500D-01, .7500D-01, .1250D+00, .4000D+00, .7500D-01,
     &   .1250D+00, .2000D+00, .1250D+00, .7500D-01, .1800D+00,
     &   .3700D+00, .1300D+00, .8000D-01, .4000D-01, .7000D-01,
     &   .1300D+00, .3700D+00, .1800D+00, .4000D-01, .8000D-01,
     &   .1300D+00, .1300D+00, .7000D-01, .7000D-01, .1300D+00,
     &   .2300D+00, .4700D+00, .5000D-01, .2000D-01, .1000D-01,
     &   .2000D-01, .1300D+00, .7000D-01, .4700D+00, .2300D+00,
     &   .5000D-01, .1000D-01, .2000D-01, .2000D-01, .1000D+01,
     &   .6700D+00, .3300D+00, .3300D+00, .6700D+00, .1000D+01,
     &   .2500D+00, .2700D+00, .1800D+00, .3000D+00, .1700D+00,
     &   .8000D-01, .1800D+00, .3000D-01, .2400D+00, .2000D+00,
     &   .1000D+00, .8000D-01, .1700D+00, .2400D+00, .3000D-01,
     &   .1800D+00, .1000D+00, .2000D+00, .2500D+00, .1800D+00,
     &   .2700D+00, .3000D+00, .1800D+00, .3700D+00, .1300D+00,
     &   .8000D-01, .4000D-01, .7000D-01, .1300D+00, .3700D+00,
     &   .1800D+00, .4000D-01, .8000D-01, .1300D+00, .1300D+00,
     &   .7000D-01, .5000D+00, .5000D+00, .1000D+01, .1000D+01  /
      DATA (WT(K),K=256,340) /
     &   .1000D+01, .8000D+00, .2000D+00, .6000D+00, .3000D+00,
     &   .1000D+00, .6000D+00, .3000D+00, .1000D+00, .8000D+00,
     &   .2000D+00, .3300D+00, .6700D+00, .6600D+00, .1700D+00,
     &   .1700D+00, .3200D+00, .1700D+00, .3200D+00, .1900D+00,
     &   .3300D+00, .3300D+00, .3400D+00, .3000D+00, .5000D-01,
     &   .6500D+00, .3800D+00, .1200D+00, .3800D+00, .1200D+00,
     &   .3800D+00, .1200D+00, .3800D+00, .1200D+00, .3000D+00,
     &   .5000D-01, .6500D+00, .3800D+00, .2500D+00, .2500D+00,
     &   .2000D-01, .5000D-01, .5000D-01, .2000D+00, .2000D+00,
     &   .1200D+00, .1000D+00, .7000D-01, .7000D-01, .1400D+00,
     &   .5000D-01, .5000D-01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .4800D+00, .2400D+00, .2600D+00, .2000D-01, .4700D+00,
     &   .3500D+00, .1500D+00, .3000D-01, .1000D+01, .1000D+01  /
      DATA (WT(K),K=341,425) /
     &   .5200D+00, .4800D+00, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .9000D+00, .5000D-01, .5000D-01, .9000D+00,
     &   .5000D-01, .5000D-01, .9000D+00, .5000D-01, .5000D-01,
     &   .3300D+00, .6700D+00, .6700D+00, .3300D+00, .2500D+00,
     &   .2500D+00, .5000D+00, .9000D+00, .5000D-01, .5000D-01,
     &   .9000D+00, .5000D-01, .5000D-01, .9000D+00, .5000D-01,
     &   .5000D-01, .3300D+00, .6700D+00, .6700D+00, .3300D+00,
     &   .2500D+00, .2500D+00, .5000D+00, .1000D+00, .5000D+00,
     &   .1600D+00, .2400D+00, .7000D+00, .3000D+00, .7000D+00,
     &   .3000D+00, .1000D+00, .5000D+00, .1600D+00, .2400D+00,
     &   .3000D+00, .4000D+00, .3000D+00, .3000D+00, .4000D+00,
     &   .3000D+00, .4900D+00, .4900D+00, .2000D-01, .5500D+00,
     &   .4500D+00, .6800D+00, .3000D+00, .2000D-01, .6800D+00,
     &   .3000D+00, .2000D-01, .5500D+00, .4500D+00, .9000D+00,
     &   .1000D+00, .9000D+00, .1000D+00, .6000D+00, .3000D+00,
     &   .1000D+00, .1000D+00, .1000D+00, .8000D+00, .2800D+00,
     &   .2800D+00, .3500D+00, .7000D-01, .2000D-01, .2800D+00  /
      DATA (WT(K),K=426,510) /
     &   .2800D+00, .3500D+00, .7000D-01, .2000D-01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .2000D-01, .3000D-01,
     &   .7000D-01, .2000D-01, .2000D-01, .4000D-01, .1300D+00,
     &   .7000D-01, .6000D-01, .6000D-01, .2000D+00, .1400D+00,
     &   .4000D-01, .1000D+00, .2500D+00, .3000D-01, .3000D+00,
     &   .4200D+00, .2200D+00, .3500D+00, .1900D+00, .1600D+00,
     &   .8000D-01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .3700D+00, .2000D+00, .3600D+00, .7000D-01,
     &   .5000D+00, .5000D+00, .5000D+00, .5000D+00, .5000D+00,
     &   .5000D+00, .2000D-01, .3000D-01, .7000D-01, .2000D-01,
     &   .2000D-01, .4000D-01, .1300D+00, .7000D-01, .6000D-01,
     &   .6000D-01, .2000D+00, .1400D+00, .4000D-01, .1000D+00,
     &   .2500D+00, .3000D-01, .3000D+00, .4200D+00, .2200D+00,
     &   .3500D+00, .1900D+00, .1600D+00, .8000D-01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .3700D+00,
     &   .2000D+00, .3600D+00, .7000D-01, .5000D+00, .5000D+00,
     &   .5000D+00, .5000D+00, .5000D+00, .5000D+00, .1000D+01  /
      DATA (WT(K),K=511,540) /
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .3000D+00, .3000D+00,
     &   .4000D+00, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .1000D+01, .1000D+01, .1000D+01, .1000D+01, .1000D+01,
     &   .3000D+00, .3000D+00, .4000D+00, .3300D+00, .3300D+00,
     &   .3400D+00, .5000D+00, .5000D+00, .5000D+00, .5000D+00  /
C
      DATA (WT(I),I=541,602) / .0D+00, .3334D+00, .2083D+00, 2*.125D+00,
     & .2083D+00, .0D+00, .125D+00, .2083D+00, .3334D+00, .2083D+00,
     & .125D+00,  0.2D+00, 0.2D+00, 0.3D+00, 0.3D+00, 0.0D+00, 0.2D+00,
     & 0.2D+00, 0.3D+00, 0.3D+00, 0.0D+00, 0.2D+00, 0.2D+00, 0.3D+00,
     & 0.3D+00, 0.0D+00, 0.31D+00, 0.62D+00, 0.035D+00, 0.035D+00,
     & 18*1.D+00, 0.5D+00, 0.16D+00, 2*0.12D+00, 2*0.05D+00, 0.5D+00,
     & 0.16D+00, 2*0.12D+00, 2*0.05D+00, 1.D+00 /
c Particle numbers in decay channel
      DATA (NZK(K,1),K=  1,170) /
     &     1,   2,   3,   4,   5,   6,   7,   1,   2,   4,
     &     3,  23,  13,  13,  13,  10,  11,  10,  13,  13,
     &    13,  10,   4,  11,  14,  14,  14,  11,   3,   1,
     &     8,   1,   1,   2,   9,   2,   2,  13,  23,   8,
     &     1,   8,  17,   7,   7,   7,  23,  23,  13,  13,
     &    13,  13,  23,  14,  13,  13,  23,  15,  24,  24,
     &    15,  16,  25,  25,  16,  15,  24,  24,  15,  16,
     &    24,  25,  16,  15,  24,  36,  37,  15,  24,  15,
     &    15,  24,  15,  37,  36,  24,  15,  24,  24,  16,
     &    24,  38,  39,  16,  25,  16,  16,  25,  16,  39,
     &    38,  25,  16,  25,  25,  17,  22,  21,  17,  21,
     &    20,  17,  22,   8,   1,  21,  22,  20,  17,  48,
     &    50,  49,   8,   1,  17,  17,  17,  21,  20,  22,
     &    17,  22,  21,  20,  22,  19,  12,  19,  12,   1,
     &     1,   8,   1,   8,   8,   1,  53,  54,   1,   1,
     &     8,  53,  54,  55,   1,   8,   1,   8,  54,  55,
     &    56,   1,   8,   8,  55,  56,   8,   1,  53,  54  /
      DATA (NZK(K,1),K=171,340) /
     &    55,   1,   8,   8,  54,  55,  56,   1,   8,   1,
     &     8,  53,  54,  55,   1,   8,   1,   8,  54,  55,
     &    56,   1,   8,   1,   8,   1,   8,  17,  21,  22,
     &     1,   1,   8,   1,   8,  17,  22,  20,   8,   2,
     &     2,   9,   2,   9,   9,   2,  67,  68,   2,   2,
     &     9,  67,  68,  69,   2,   9,   2,   9,  68,  69,
     &    70,   2,   9,   9,  69,  70,   9,   2,   9,  67,
     &    68,  69,   2,   9,   2,   9,  68,  69,  70,   2,
     &     9,   1,   8,  13,  13,  14,   1,   8,   1,   1,
     &     8,   8,   8,   1,   8,   1,   1,   1,   1,   1,
     &     8,   2,   2,   9,   9,   2,   2,   9,  15,  15,
     &    24,  16,  16,  25,  25,  15,  15,  24,  24,  16,
     &    16,  25,   1,  21,  22,  21,  48,  49,   8,  17,
     &    20,  17,  22,  20,  20,  22,  20,   0,   0,   0,
     &     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     &     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     &    31,  31,  13,   7,  15,  12,  13,  31,  17,  17  /
      DATA (NZK(K,1),K=341,510) /
     &     2,   9,  18,   9,  18,  18,  17,  21,  22,  17,
     &    21,  20,  17,  20,  22,  97,  98,  97,  98,  97,
     &    98,  17,  18,  99, 100,  18, 101,  99,  18, 101,
     &   100, 102, 103, 102, 103, 102, 103,  18,  16,  16,
     &    24,  24,  16,  25,  15,  24,  15,  15,  25,  25,
     &    31,  15,  15,  31,  16,  16,  23,  13,   7, 116,
     &   116, 116, 117, 117, 119, 118, 118, 119, 119, 120,
     &   120, 121, 121, 130, 130, 130,   4,  10,  13,  10,
     &     4,  32,  13,  36,  11,   3,  34,  14,  38, 133,
     &   134, 135, 136,  21,  21,   1,  97, 104,  54,  53,
     &    17,  22,  21,  21,   1,  54,  53,  21,  97,  21,
     &    97,  22,  21,  97,  98, 105, 137, 137, 137, 138,
     &   139,  97,  97, 109, 109, 140, 138, 137, 139, 138,
     &   145,  99,  99,   2, 102, 110,  68,  67,  18, 100,
     &    99,  99,   2,  68,  67,  99, 102,  99, 102, 100,
     &    99, 102, 103, 111, 149, 149, 149, 150, 151, 113,
     &   113, 115, 115, 152, 150, 149, 151, 150, 157, 140  /
      DATA (NZK(K,1),K=511,540) /
     &   141, 142, 143, 144, 145, 146, 147, 148, 138, 145,
     &   140, 152, 153, 154, 155, 156, 157, 158, 159, 160,
     &   150, 157, 152,  34,  32,  33,  33,  32,  33,  34  /
      DATA (NZK(I,1),I=541,602) /  2, 67, 68, 69,  2,  9,  9, 68, 69,
     & 70,  2,  9, 33, 32, 13, 14, 189, 32, 34, 23, 23, 189, 33, 34, 14,
     & 14, 189, 23, 13, 15, 24,  36,  38,  37,  39, 194, 195, 196, 197,
     & 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 1, 8, 1, 1, 54,
     & 55, 8, 1, 8, 8, 54, 55, 210/
      DATA (NZK(K,2),K=  1,170) /
     &     0,   0,   0,   0,   0,   0,   0,   3,   4,   6,
     &     5,  23,  14,  11,   3,   5,   5,   5,  23,  13,
     &    23,  23,  23,   5,  23,  13,  23,  23,  23,  14,
     &    23,   3,  11,  13,  23,   4,  10,  14,  23,  14,
     &    23,  13,   7,   7,   4,   7,   7,  23,  14,  14,
     &    23,  14,  23,  23,  14,  14,   7,  23,  13,  23,
     &    14,  23,  14,  23,  13,  23,  13,  23,  14,  23,
     &    14,  23,  13,  23,  13,  23,  13,  33,  32,  35,
     &    31,  23,  14,  23,  14,  33,  34,  35,  31,  23,
     &    14,  23,  14,  33,  34,  35,  31,  23,  13,  23,
     &    13,  33,  32,  35,  31,  13,  13,  23,  23,  14,
     &    13,  14,  14,  25,  16,  14,  23,  13,  31,  14,
     &    13,  23,  25,  16,  23,  35,  33,  34,  32,  33,
     &    31,  31,  14,  13,  23,   0,   0,   0,   0,  13,
     &    23,  13,  14,  23,  14,  13,  23,  13,  78,  23,
     &    13,  14,  23,  13,  79,  78,  14,  23,  14,  23,
     &    13,  80,  79,  14,  14,  23,  80,  31,  14,  23  /
      DATA (NZK(K,2),K=171,340) /
     &    13,  79,  78,  31,  14,  23,  13,  80,  79,  23,
     &    13,  14,  23,  13,  79,  78,  14,  23,  14,  23,
     &    13,  80,  79,  23,  13,  33,  32,  15,  24,  15,
     &    31,  14,  23,  34,  33,  24,  24,  15,  31,  14,
     &    23,  14,  13,  23,  13,  14,  23,  14,  80,  23,
     &    14,  13,  23,  14,  79,  80,  13,  23,  13,  23,
     &    14,  78,  79,  13,  13,  23,  78,  23,  14,  13,
     &    23,  14,  79,  80,  13,  23,  13,  23,  14,  78,
     &    79,  62,  61,  23,  14,  23,  13,  13,  13,  23,
     &    13,  13,  23,  14,  14,  14,   1,   8,   8,   1,
     &     8,   1,   8,   8,   1,   8,   1,   8,   1,   8,
     &     1,   1,   8,   1,   8,   8,   1,   1,   8,   8,
     &     1,   8,  25,  23,  13,  31,  23,  13,  16,  14,
     &    35,  34,  34,  33,  31,  14,  23,   0,   0,   0,
     &     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     &     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     &    13,  23,  14,   7,  16,  19,  14,   7,  23,  14  /
      DATA (NZK(K,2),K=341,510) /
     &    23,  14,   7,  13,  23,  13,  13,  23,  13,  23,
     &    14,  13,  14,  23,  14,  23,  13,  14,  23,  14,
     &    23,  16,  14,  23,  14,  23,  14,  13,  13,  23,
     &    13,  23,  14,  13,  23,  13,  23,  15,  13,  13,
     &    13,  23,  13,  13,  14,  14,  14,  14,  14,  23,
     &    13,  16,  25,  14,  15,  24,  23,  14,   7,  23,
     &     7,  13,  23,   7,  14,  23,   7,  23,   7,   7,
     &     7,   7,   7,  13,  23,  31,   3,  11,  14, 135,
     &     5, 134, 134, 134, 136,   6, 133, 133, 133,   0,
     &     0,   0,   0,  31,  95,  25,  15,  31,  95,  16,
     &    32,  32,  33,  35,  39,  39,  38,  25,  13,  39,
     &    32,  39,  38,  35,  32,  39,  13,  23,  14,   7,
     &     7,  25,  37,  32,  13,  25,  13,  25,  13,  25,
     &    13,  31,  95,  24,  16,  31,  24,  15,  34,  34,
     &    33,  35,  37,  37,  36,  24,  14,  37,  34,  37,
     &    36,  35,  34,  37,  14,  23,  13,   7,   7,  24,
     &    39,  34,  14,  24,  14,  24,  14,  24,  14,   7  /
      DATA (NZK(K,2),K=511,540) /
     &     7,   7,   7,   7,   7,   7,   7,   7,  25,  13,
     &    25,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     &    24,  14,  24,  13,  14,  23,  13,  23,  14,  23  /
      DATA (NZK(I,2),I=541,602) / 31, 13, 23, 14, 79, 80, 31, 13, 23,
     & 14, 78, 79, 13, 23, 23, 13, 13, 14, 13, 23, 13, 23, 14, 23, 23,
     & 14, 14, 23, 14, 16, 25,
     & 4*23, 14*0, 23, 13, 23, 13, 23, 13, 23, 14,
     & 23, 13, 14, 23,  0 /
      DATA (NZK(K,3),K=  1,170) /
     &     0,   0,   0,   0,   0,   0,   0,   5,   6,   5,
     &     6,  23,  23,   5,   5,   0,   0,   0,   0,  14,
     &    23,   5,   5,   0,   0,  14,  23,   5,   5,   0,
     &     0,   5,   5,   0,   0,   5,   5,   0,   0,   0,
     &     0,   0,   0,   0,   3,   0,   7,  23,  23,   7,
     &     0,   0,   0,   0,  23,   0,   0,   0,   0,   0,
     &     110*0   /
      DATA (NZK(K,3),K=171,340) /
     &     80*0,
     &     0,   0,   0,   0,   0,   0,  23,  13,  14,  23,
     &    23,  14,  23,  23,  23,  14,  23,  13,  23,  14,
     &    13,  23,  13,  23,  14,  23,  14,  14,  23,  13,
     &    13,  23,  13,  14,  23,  23,  14,  23,  13,  23,
     &    14,  14,   0,   0,   0,   0,   0,   0,   0,   0,
     &     30*0,
     &    14,  23,   7,   0,   0,   0,  23,   0,   0,   0  /
      DATA (NZK(K,3),K=341,510) /
     &     30*0,
     &     0,   0,   0,   0,   0,   0,   0,   0,   0,  23,
     &    14,   0,  13,   0,  14,   0,   0,  23,  13,   0,
     &     0,  15,   0,   0,  16,   0,   0,   0,   0,   0,
     &     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     &     0,   0,   0,  14,  23,   0,   0,   0,  23, 134,
     &   134,   0,   0,   0, 133, 133,   0,   0,   0,   0,
     &     80*0  /
      DATA (NZK(K,3),K=511,540) /
     &     0,   0,   0,   0,   0,   0,   0,   0,  13,  13,
     &    25,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     &    14,  14,  24,   0,   0,   0,   0,   0,   0,   0  /
      DATA (NZK(I,3),I=541,602) / 12*0, 2*0, 23, 13, 0, 2*0, 23, 14, 0,
     & 2*0, 23, 13, 0, 4*0, 18*0, 2*0, 23, 14, 2*0, 2*0, 23, 14, 2*0, 0/

      END
c*sr 20.4.98 nucdum ===================================================*
c
c===bamfra=============================================================*
c
C     SUBROUTINE XAMFRA(NNCH,I1,I2,IFB11,IFB22,IFB33,IFB44,
CDECK  ID>, DT_BAMFRA
      SUBROUTINE DT_BAMFRA(NNCH,I1,I2,IFB11,IFB22,IFB33,IFB44,
     &                                     AMCH,NOBAM,IHAD)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      WRITE(ErrorOut,1000)
 1000 FORMAT(1X,'BAMFRA:   BAMJET-FRAGMENTATION NOT SUPPORTED')
      STOP

      END
c
c====evevap============================================================*
c
CDECK  ID>, DT_XVEVAP
      SUBROUTINE DT_XVEVAP(WE)
C     SUBROUTINE DT_EVEVAP(WE)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME


      LEVAPO = .FALSE.

      RETURN
      END
c
c====frbkin============================================================*
c
CDECK  ID>, DT_XRBKIN
      SUBROUTINE DT_XRBKIN(LDUM1,LDUM2)
C     SUBROUTINE DT_FRBKIN(LDUM1,LDUM2)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      LOGICAL LDUM1,LDUM2

      RETURN
      END
c
c====phoini============================================================*
c
CDECK  ID>, DT_XHOINI
      SUBROUTINE DT_XHOINI
C     SUBROUTINE DT_PHOINI

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      RETURN
      END
c
c====eventb============================================================*
c
CDECK  ID>, DT_XVENTB
      SUBROUTINE DT_XVENTB(NCSY,IREJ)
C     SUBROUTINE DT_EVENTB(NCSY,IREJ)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

      WRITE(ErrorOut,1000)
 1000 FORMAT(1X,'EVENTB:   PHOJET-PACKAGE REQUESTED BUT NOT LINKED!')
      STOP

      END
c
c===event==============================================================*
c
CDECK  ID>, DT_XVENT
      SUBROUTINE DT_XVENT(IDUM,PP,PT,DUM,IREJ)
C     SUBROUTINE EVENT(IDUM,PP,PT,DUM,IREJ)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION PP(4),PT(4)

      RETURN
      END
c
c===pohisx=============================================================*
c
CDECK  ID>, DT_XOHISX
      SUBROUTINE DT_XOHISX(I,X)
C     SUBROUTINE POHISX(I,X)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      RETURN
      END
c
c===poluhi=============================================================*
c
c*PHOJET105a
C     SUBROUTINE XOLUHI(I,X)
c*PHOJET112

CDECK  ID>, PHO_LHIST
      SUBROUTINE PHO_LHIST(I,X)

c*

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      RETURN
      END
c
CDECK  ID>, PDFSET
C**********************************************************************
C
C   dummy subroutines, remove to link PDFLIB
C
C**********************************************************************
      SUBROUTINE PDFSET(PARAM,VALUE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION PARAM(20),VALUE(20)
      CHARACTER*20 PARAM
      END
CDECK  ID>, STRUCTM
      SUBROUTINE STRUCTM(XI,SCALE2,UV,DV,US,DS,SS,CS,BS,TS,GL)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      END
CDECK  ID>, STRUCTP
      SUBROUTINE STRUCTP(XI,SCALE2,P2,IP2,UV,DV,US,DS,SS,CS,BS,TS,GL)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      END
c
c===diqbrk=============================================================*
c
CDECK  ID>, DT_DIQBRK
      SUBROUTINE DT_XIQBRK
C     SUBROUTINE DT_DIQBRK

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      STOP 'DIQUARK-BREAKING NOT IMPLEMETED !'

      RETURN
      END
c
c===elhain=============================================================*
c
CDECK  ID>, DT_ELHAIN
      SUBROUTINE DT_ELHAIN(IP,PLA,ELAB,CX,CY,CZ,IT,IREJ)

c***********************************************************************
c Elastic hadron-hadron scattering.                                    *
c This is a revised version of the original.                           *
c This version dated 03.04.98 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TWO=2.0D0,ONE=1.0D0,OHALF=0.5D0,ZERO=0.0D0,
     &           TINY10=1.0D-10)

      PARAMETER (ENNTHR = 3.5D0)
      PARAMETER (PLOWH=0.01D0,PHIH=9.0D0,
     &           BLOWB=0.05D0,BHIB=0.2D0,
     &           BLOWM=0.1D0, BHIM=2.0D0)

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c final state from HADRIN interaction
      PARAMETER (MAXFIN=10)
      COMMON /HNFSPA/ ITRH(MAXFIN),CXRH(MAXFIN),CYRH(MAXFIN),
     &                CZRH(MAXFIN),ELRH(MAXFIN),PLRH(MAXFIN),IRH


C     DATA TSLOPE /10.0D0/

      IREJ = 0

    1 CONTINUE
c     ///////// added by K.K due to Hotta. 2002/Feb.25 
      IF( ELAB .le. AAM(IP) ) then
         IREJ = 1
         return
      ENDIF
c     /////////////////
      PLAB = SQRT( (ELAB-AAM(IP))*(ELAB+AAM(IP)) )
      EKIN = ELAB-AAM(IP)
c   kinematical quantities in cms of the hadrons
      AMP2 = AAM(IP)**2
      AMT2 = AAM(IT)**2
      S    = AMP2+AMT2+TWO*ELAB*AAM(IT)
      ECM  = SQRT(S)
      ECMP = OHALF*ECM+(AMP2-AMT2)/(TWO*ECM)
      PCM  = SQRT( (ECMP-AAM(IP))*(ECMP+AAM(IP)) )

c nucleon-nucleon scattering at E_kin<3.5: use DT_TSAMCS(HETC-KFA)
      IF ( ((IP.EQ.1).OR.(IP.EQ.8)).AND.
     &     ((IT.EQ.1).OR.(IT.EQ.8)).AND.(EKIN.LT.ENNTHR) ) THEN
c   TSAMCS treats pp and np only, therefore change pn into np and
c   nn into pp
         IF (IT.EQ.1) THEN
            KPROJ = IP
         ELSE
            KPROJ = 8
            IF (IP.EQ.8) KPROJ = 1
         ENDIF
         CALL DT_TSAMCS(KPROJ,EKIN,CTCMS)
         T = TWO*PCM**2*(CTCMS-ONE)

c very crude treatment otherwise: sample t from exponential dist.
      ELSE
c   momentum transfer t
         TMAX = TWO*TWO*PCM**2
         RR = (PLAB-PLOWH)/(PHIH-PLOWH)
         IF (IIBAR(IP).NE.0) THEN
            TSLOPE = BLOWB+RR*(BHIB-BLOWB)
         ELSE
            TSLOPE = BLOWM+RR*(BHIM-BLOWM)
         ENDIF
         FMAX = EXP(-TSLOPE*TMAX)-ONE
         R = DT_RNDM(RR)
         T = LOG(ONE+R*FMAX+TINY10)/TSLOPE
         IF (T.GT.ZERO) T = LOG(ONE+R*FMAX)/TSLOPE
      ENDIF

c   target hadron in Lab after scattering
      ELRH(2) = (TWO*AMT2-T)/(TWO*AAM(IT))
      PLRH(2) = SQRT( ABS(ELRH(2)-AAM(IT))*(ELRH(2)+AAM(IT)) )
      IF (PLRH(2).LE.TINY10) THEN
C        WRITE(*,*)'ELHAIN: T,PLRH(2) ',T,PLRH(2)
         GOTO 1
      ENDIF
c   projectile hadron in Lab after scattering
      ELRH(1) = ELAB+AAM(IT)-ELRH(2)
      PLRH(1) = SQRT( ABS(ELRH(1)-AAM(IP))*(ELRH(1)+AAM(IP)) )
c   scattering angle of projectile in Lab
      CTLABP = (T-TWO*AMP2+TWO*ELAB*ELRH(1))/(TWO*PLAB*PLRH(1))
      STLABP = SQRT( (ONE-CTLABP)*(ONE+CTLABP) )
      CALL DT_DSFECF(SPLABP,CPLABP)
c   direction cosines of projectile in Lab
      CALL DT_STTRAN(CX,CY,CZ,CTLABP,STLABP,SPLABP,CPLABP,
     &                          CXRH(1),CYRH(1),CZRH(1))
c   scattering angle of target in Lab
      PLLABT = PLAB-CTLABP*PLRH(1)
      CTLABT = PLLABT/PLRH(2)
      STLABT = SQRT( (ONE-CTLABT)*(ONE+CTLABT) )
c   direction cosines of target in Lab
      CALL DT_STTRAN(CX,CY,CZ,CTLABT,STLABT,-SPLABP,-CPLABP,
     &                            CXRH(2),CYRH(2),CZRH(2))
c   fill /HNFSPA/
      IRH = 2
      ITRH(1) = IP
      ITRH(2) = IT

      RETURN
      END
c
c===tsamcs=============================================================*
c
CDECK  ID>, DT_TSAMCS
      SUBROUTINE DT_TSAMCS(KPROJ,EKIN,CST)

c***********************************************************************
c Sampling of cos(theta) for nucleon-proton scattering according to    *
c hetkfa2/bertini parametrization.                                     *
c This is a revised version of the original (HJM 24/10/88)             *
c This version dated 28.10.95 is written by S. Roesler                 *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)
      PARAMETER (TWO=2.0D0,ONE=1.0D0,OHALF=0.5D0,ZERO=0.0D0,
     &           TINY10=1.0D-10)

      DIMENSION DCLIN(195),DCHN(143),DCHNA(36),DCHNB(60)
      DIMENSION PDCI(60),PDCH(55)

      DATA (DCLIN(I),I=1,80) /
     &     5.000D-01,  1.000D+00,  0.000D+00,  1.000D+00,  0.000D+00,
     &     4.993D-01,  9.881D-01,  5.963D-02,  9.851D-01,  5.945D-02,
     &     4.936D-01,  8.955D-01,  5.224D-01,  8.727D-01,  5.091D-01,
     &     4.889D-01,  8.228D-01,  8.859D-01,  7.871D-01,  8.518D-01,
     &     4.874D-01,  7.580D-01,  1.210D+00,  7.207D-01,  1.117D+00,
     &     4.912D-01,  6.969D-01,  1.516D+00,  6.728D-01,  1.309D+00,
     &     5.075D-01,  6.471D-01,  1.765D+00,  6.667D-01,  1.333D+00,
     &     5.383D-01,  6.054D-01,  1.973D+00,  7.059D-01,  1.176D+00,
     &     5.397D-01,  5.990D-01,  2.005D+00,  7.023D-01,  1.191D+00,
     &     5.336D-01,  6.083D-01,  1.958D+00,  6.959D-01,  1.216D+00,
     &     5.317D-01,  6.075D-01,  1.962D+00,  6.897D-01,  1.241D+00,
     &     5.300D-01,  6.016D-01,  1.992D+00,  6.786D-01,  1.286D+00,
     &     5.281D-01,  6.063D-01,  1.969D+00,  6.786D-01,  1.286D+00,
     &     5.280D-01,  5.960D-01,  2.020D+00,  6.667D-01,  1.333D+00,
     &     5.273D-01,  5.920D-01,  2.040D+00,  6.604D-01,  1.358D+00,
     &     5.273D-01,  5.862D-01,  2.069D+00,  6.538D-01,  1.385D+00/
      DATA (DCLIN(I),I=81,160) /
     &     5.223D-01,  5.980D-01,  2.814D+00,  6.538D-01,  1.385D+00,
     &     5.202D-01,  5.969D-01,  2.822D+00,  6.471D-01,  1.412D+00,
     &     5.183D-01,  5.881D-01,  2.883D+00,  6.327D-01,  1.469D+00,
     &     5.159D-01,  5.866D-01,  2.894D+00,  6.250D-01,  1.500D+00,
     &     5.133D-01,  5.850D-01,  2.905D+00,  6.170D-01,  1.532D+00,
     &     5.106D-01,  5.833D-01,  2.917D+00,  6.087D-01,  1.565D+00,
     &     5.084D-01,  5.801D-01,  2.939D+00,  6.000D-01,  1.600D+00,
     &     5.063D-01,  5.763D-01,  2.966D+00,  5.909D-01,  1.636D+00,
     &     5.036D-01,  5.730D-01,  2.989D+00,  5.814D-01,  1.674D+00,
     &     5.014D-01,  5.683D-01,  3.022D+00,  5.714D-01,  1.714D+00,
     &     4.986D-01,  5.641D-01,  3.051D+00,  5.610D-01,  1.756D+00,
     &     4.964D-01,  5.580D-01,  3.094D+00,  5.500D-01,  1.800D+00,
     &     4.936D-01,  5.573D-01,  3.099D+00,  5.431D-01,  1.827D+00,
     &     4.909D-01,  5.509D-01,  3.144D+00,  5.313D-01,  1.875D+00,
     &     4.885D-01,  5.512D-01,  3.142D+00,  5.263D-01,  1.895D+00,
     &     4.857D-01,  5.437D-01,  3.194D+00,  5.135D-01,  1.946D+00/
      DATA (DCLIN(I),I=161,195) /
     &     4.830D-01,  5.353D-01,  3.253D+00,  5.000D-01,  2.000D+00,
     &     4.801D-01,  5.323D-01,  3.274D+00,  4.915D-01,  2.034D+00,
     &     4.770D-01,  5.228D-01,  3.341D+00,  4.767D-01,  2.093D+00,
     &     4.738D-01,  5.156D-01,  3.391D+00,  4.643D-01,  2.143D+00,
     &     4.701D-01,  5.010D-01,  3.493D+00,  4.444D-01,  2.222D+00,
     &     4.672D-01,  4.990D-01,  3.507D+00,  4.375D-01,  2.250D+00,
     &     4.634D-01,  4.856D-01,  3.601D+00,  4.194D-01,  2.323D+00/

      DATA PDCI /
     &     4.400D+02,  1.896D-01,  1.931D-01,  1.982D-01,  1.015D-01,
     &     1.029D-01,  4.180D-02,  4.228D-02,  4.282D-02,  4.350D-02,
     &     2.204D-02,  2.236D-02,  5.900D+02,  1.433D-01,  1.555D-01,
     &     1.774D-01,  1.000D-01,  1.128D-01,  5.132D-02,  5.600D-02,
     &     6.158D-02,  6.796D-02,  3.660D-02,  3.820D-02,  6.500D+02,
     &     1.192D-01,  1.334D-01,  1.620D-01,  9.527D-02,  1.141D-01,
     &     5.283D-02,  5.952D-02,  6.765D-02,  7.878D-02,  4.796D-02,
     &     6.957D-02,  8.000D+02,  4.872D-02,  6.694D-02,  1.152D-01,
     &     9.348D-02,  1.368D-01,  6.912D-02,  7.953D-02,  9.577D-02,
     &     1.222D-01,  7.755D-02,  9.525D-02,  1.000D+03,  3.997D-02,
     &     5.456D-02,  9.804D-02,  8.084D-02,  1.208D-01,  6.520D-02,
     &     8.233D-02,  1.084D-01,  1.474D-01,  9.328D-02,  1.093D-01/

      DATA PDCH /
     &     1.000D+03,  9.453D-02,  9.804D-02,  8.084D-02,  1.208D-01,
     &     6.520D-02,  8.233D-02,  1.084D-01,  1.474D-01,  9.328D-02,
     &     1.093D-01,  1.400D+03,  1.072D-01,  7.450D-02,  6.645D-02,
     &     1.136D-01,  6.750D-02,  8.580D-02,  1.110D-01,  1.530D-01,
     &     1.010D-01,  1.350D-01,  2.170D+03,  4.004D-02,  3.013D-02,
     &     2.664D-02,  5.511D-02,  4.240D-02,  7.660D-02,  1.364D-01,
     &     2.300D-01,  1.670D-01,  2.010D-01,  2.900D+03,  1.870D-02,
     &     1.804D-02,  1.320D-02,  2.970D-02,  2.860D-02,  5.160D-02,
     &     1.020D-01,  2.400D-01,  2.250D-01,  3.370D-01,  4.400D+03,
     &     1.196D-03,  8.784D-03,  1.517D-02,  2.874D-02,  2.488D-02,
     &     4.464D-02,  8.330D-02,  2.008D-01,  2.360D-01,  3.567D-01/

      DATA (DCHN(I),I=1,90) /
     &     4.770D-01,  4.750D-01,  4.715D-01,  4.685D-01,  4.650D-01,
     &     4.610D-01,  4.570D-01,  4.550D-01,  4.500D-01,  4.450D-01,
     &     4.405D-01,  4.350D-01,  4.300D-01,  4.250D-01,  4.200D-01,
     &     4.130D-01,  4.060D-01,  4.000D-01,  3.915D-01,  3.840D-01,
     &     3.760D-01,  3.675D-01,  3.580D-01,  3.500D-01,  3.400D-01,
     &     3.300D-01,  3.200D-01,  3.100D-01,  3.000D-01,  2.900D-01,
     &     2.800D-01,  2.700D-01,  2.600D-01,  2.500D-01,  2.400D-01,
     &     2.315D-01,  2.240D-01,  2.150D-01,  2.060D-01,  2.000D-01,
     &     1.915D-01,  1.850D-01,  1.780D-01,  1.720D-01,  1.660D-01,
     &     1.600D-01,  1.550D-01,  1.500D-01,  1.450D-01,  1.400D-01,
     &     1.360D-01,  1.320D-01,  1.280D-01,  1.250D-01,  1.210D-01,
     &     1.180D-01,  1.150D-01,  1.120D-01,  1.100D-01,  1.070D-01,
     &     1.050D-01,  1.030D-01,  1.010D-01,  9.900D-02,  9.700D-02,
     &     9.550D-02,  9.480D-02,  9.400D-02,  9.200D-02,  9.150D-02,
     &     9.100D-02,  9.000D-02,  8.990D-02,  8.900D-02,  8.850D-02,
     &     8.750D-02,  8.700D-02,  8.650D-02,  8.550D-02,  8.500D-02,
     &     8.499D-02,  8.450D-02,  8.350D-02,  8.300D-02,  8.250D-02,
     &     8.150D-02,  8.100D-02,  8.030D-02,  8.000D-02,  7.990D-02/
      DATA (DCHN(I),I=91,143) /
     &     7.980D-02,  7.950D-02,  7.900D-02,  7.860D-02,  7.800D-02,
     &     7.750D-02,  7.650D-02,  7.620D-02,  7.600D-02,  7.550D-02,
     &     7.530D-02,  7.500D-02,  7.499D-02,  7.498D-02,  7.480D-02,
     &     7.450D-02,  7.400D-02,  7.350D-02,  7.300D-02,  7.250D-02,
     &     7.230D-02,  7.200D-02,  7.100D-02,  7.050D-02,  7.020D-02,
     &     7.000D-02,  6.999D-02,  6.995D-02,  6.993D-02,  6.991D-02,
     &     6.990D-02,  6.870D-02,  6.850D-02,  6.800D-02,  6.780D-02,
     &     6.750D-02,  6.700D-02,  6.650D-02,  6.630D-02,  6.600D-02,
     &     6.550D-02,  6.525D-02,  6.510D-02,  6.500D-02,  6.499D-02,
     &     6.498D-02,  6.496D-02,  6.494D-02,  6.493D-02,  6.490D-02,
     &     6.488D-02,  6.485D-02,  6.480D-02/

      DATA DCHNA /
     &     6.300D+02,  7.810D-02,  1.421D-01,  1.979D-01,  2.479D-01,
     &     3.360D-01,  5.400D-01,  7.236D-01,  1.000D+00,  1.540D+03,
     &     2.225D-01,  3.950D-01,  5.279D-01,  6.298D-01,  7.718D-01,
     &     9.405D-01,  9.835D-01,  1.000D+00,  2.560D+03,  2.625D-01,
     &     4.550D-01,  5.963D-01,  7.020D-01,  8.380D-01,  9.603D-01,
     &     9.903D-01,  1.000D+00,  3.520D+03,  4.250D-01,  6.875D-01,
     &     8.363D-01,  9.163D-01,  9.828D-01,  1.000D+00,  1.000D+00,
     &     1.000D+00/

      DATA DCHNB /
     &     6.300D+02,  3.800D-02,  7.164D-02,  1.275D-01,  2.171D-01,
     &     3.227D-01,  4.091D-01,  5.051D-01,  6.061D-01,  7.074D-01,
     &     8.434D-01,  1.000D+00,  2.040D+03,  1.200D-01,  2.115D-01,
     &     3.395D-01,  5.295D-01,  7.251D-01,  8.511D-01,  9.487D-01,
     &     9.987D-01,  1.000D+00,  1.000D+00,  1.000D+00,  2.200D+03,
     &     1.344D-01,  2.324D-01,  3.754D-01,  5.674D-01,  7.624D-01,
     &     8.896D-01,  9.808D-01,  1.000D+00,  1.000D+00,  1.000D+00,
     &     1.000D+00,  2.850D+03,  2.330D-01,  4.130D-01,  6.610D-01,
     &     9.010D-01,  9.970D-01,  1.000D+00,  1.000D+00,  1.000D+00,
     &     1.000D+00,  1.000D+00,  1.000D+00,  3.500D+03,  3.300D-01,
     &     5.450D-01,  7.950D-01,  1.000D+00,  1.000D+00,  1.000D+00,
     &     1.000D+00,  1.000D+00,  1.000D+00,  1.000D+00,  1.000D+00/

      CST = ONE
      IF (EKIN.GT.3.5D0) RETURN
C
      IF(KPROJ.EQ.8) GOTO 101
      IF(KPROJ.EQ.1) GOTO 102
C*                                             INVALID REACTION
      WRITE(ErrorOut,'(A,I5/A)')
     &        ' INVALID PARTICLE TYPE IN DNUPRE - KPROJ=',KPROJ,
     &        ' COS(THETA) = 1D0 RETURNED'
      RETURN
C-------------------------------- NP ELASTIC SCATTERING----------
101   CONTINUE
      IF (EKIN.GT.0.740D0)GOTO 1000
      IF (EKIN.LT.0.300D0)THEN
C                                 EKIN .LT. 300 MEV
         IDAT=1
      ELSE
C                                 300 MEV < EKIN < 740 MEV
         IDAT=6
      END IF
C
      ENER=EKIN
      IE=INT(ABS(ENER/0.020D0))
      UNIV=(ENER-DBLE(IE)*0.020D0)/0.020D0
C                                            FORWARD/BACKWARD DECISION
      K=IDAT+5*IE
      BWFW=(DCLIN(K+5)-DCLIN(K))*UNIV + DCLIN(K)
      IF (DT_RNDM(CST).LT.BWFW)THEN
         VALUE2=-1D0
         K=K+1
      ELSE
         VALUE2=1D0
         K=K+3
      END IF
C
      COEF=(DCLIN(K+5)-DCLIN(K))*UNIV + DCLIN(K)
      RND=DT_RNDM(COEF)
C
      IF(RND.LT.COEF)THEN
         CST=DT_RNDM(RND)
         CST=CST*VALUE2
      ELSE
         R1=DT_RNDM(CST)
         R2=DT_RNDM(R1)
         R3=DT_RNDM(R2)
         R4=DT_RNDM(R3)
C
         IF(VALUE2.GT.0.0)THEN
            CST=MAX(R1,R2,R3,R4)
            GOTO 1500
         ELSE
            R5=DT_RNDM(R4)
C
            IF (IDAT.EQ.1)THEN
               CST=-MAX(R1,R2,R3,R4,R5)
            ELSE
               R6=DT_RNDM(R5)
               R7=DT_RNDM(R6)
               CST=-MAX(R1,R2,R3,R4,R5,R6,R7)
            END IF
C
         END IF
C
      END IF
C
      GOTO 1500
C
C********                                EKIN  .GT.  0.74 GEV
C
1000  ENER=EKIN - 0.66D0
C     IE=ABS(ENER/0.02)
      IE=INT(ENER/0.02D0)
      EMEV=EKIN*1D3
C
      UNIV=(ENER-DBLE(IE)*0.020D0)/0.020D0
      K=IE
      BWFW=(DCHN(K+1)-DCHN(K))*UNIV + DCHN(K)
      RND=DT_RNDM(BWFW)
C                                        FORWARD NEUTRON
      IF (RND.GE.BWFW)THEN
         DO 1200 K=10,36,9
           IF (DCHNA(K).GT.EMEV) THEN
              UNIVE=(EMEV-DCHNA(K-9))/(DCHNA(K)-DCHNA(K-9))
              UNIV=DT_RNDM(UNIVE)
              DO 1100 I=1,8
                 II=K+I
                 P=(DCHNA(II)-DCHNA(II-9))*UNIVE + DCHNA(II-9)
C
                 IF (P.GT.UNIV)THEN
                    UNIV=DT_RNDM(UNIVE)
                    FLTI=DBLE(I)-UNIV
                    GOTO(290,290,290,290,330,340,350,360) I
                 END IF
 1100         CONTINUE
           END IF
 1200    CONTINUE
C
      ELSE
C                                        BACKWARD NEUTRON
         DO 1400 K=13,60,12
            IF (DCHNB(K).GT.EMEV) THEN
               UNIVE=(EMEV-DCHNB(K-12))/(DCHNB(K)-DCHNB(K-12))
               UNIV=DT_RNDM(UNIVE)
               DO 1300 I=1,11
                 II=K+I
                 P=(DCHNB(II)-DCHNB(II-12))*UNIVE + DCHNB(II-12)
C
                 IF (P.GT.UNIV)THEN
                   UNIV=DT_RNDM(P)
                   FLTI=DBLE(I)-UNIV
                   GOTO(120,120,140,150,160,160,180,190,200,210,220) I
                 END IF
 1300          CONTINUE
            END IF
 1400    CONTINUE
      END IF
C
120   CST=1.0D-2*FLTI-1.0D0
      GOTO 1500
140   CST=2.0D-2*UNIV-0.98D0
      GOTO 1500
150   CST=4.0D-2*UNIV-0.96D0
      GOTO 1500
160   CST=6.0D-2*FLTI-1.16D0
      GOTO 1500
180   CST=8.0D-2*UNIV-0.80D0
      GOTO 1500
190   CST=1.0D-1*UNIV-0.72D0
      GOTO 1500
200   CST=1.2D-1*UNIV-0.62D0
      GOTO 1500
210   CST=2.0D-1*UNIV-0.50D0
      GOTO 1500
220   CST=3.0D-1*(UNIV-1.0D0)
      GOTO 1500
C
290   CST=1.0D0-2.5D-2*FLTI
      GOTO 1500
330   CST=0.85D0+0.5D-1*UNIV
      GOTO 1500
340   CST=0.70D0+1.5D-1*UNIV
      GOTO 1500
350   CST=0.50D0+2.0D-1*UNIV
      GOTO 1500
360   CST=0.50D0*UNIV
C
1500  RETURN
C
C-----------------------------------  PP ELASTIC SCATTERING -------
C
 102  CONTINUE
      EMEV=EKIN*1D3
C
      IF (EKIN.LE.0.500D0) THEN
         RND=DT_RNDM(EMEV)
         CST=2.0D0*RND-1.0D0
         RETURN
C
      ELSEIF (EKIN.LT.1.0D0) THEN
         DO 2200 K=13,60,12
            IF (PDCI(K).GT.EMEV) THEN
               UNIVE=(EMEV-PDCI(K-12))/(PDCI(K)-PDCI(K-12))
               UNIV=DT_RNDM(UNIVE)
               SUM=0
               DO 2100 I=1,11
                 II=K+I
                 SUM=SUM + (PDCI(II)-PDCI(II-12))*UNIVE + PDCI(II-12)
C
                 IF (UNIV.LT.SUM)THEN
                   UNIV=DT_RNDM(SUM)
                   FLTI=DBLE(I)-UNIV
                   GOTO(55,55,55,60,60,65,65,65,65,70,70) I
                 END IF
 2100          CONTINUE
            END IF
 2200    CONTINUE
      ELSE
         DO 2400 K=12,55,11
            IF (PDCH(K).GT.EMEV) THEN
              UNIVE=(EMEV-PDCH(K-11))/(PDCH(K)-PDCH(K-11))
              UNIV=DT_RNDM(UNIVE)
              SUM=0.0D0
              DO 2300 I=1,10
                II=K+I
                SUM=SUM + (PDCH(II)-PDCH(II-11))*UNIVE + PDCH(II-11)
C
                IF (UNIV.LT.SUM)THEN
                  UNIV=DT_RNDM(SUM)
                  FLTI=UNIV+DBLE(I)
                  GOTO(50,55,60,60,65,65,65,65,70,70) I
                END IF
 2300         CONTINUE
            END IF
 2400    CONTINUE
      END IF
C
50    CST=0.4D0*UNIV
      GOTO 2500
55    CST=0.2D0*FLTI
      GOTO 2500
60    CST=0.3D0+0.1D0*FLTI
      GOTO 2500
65    CST=0.6D0+0.04D0*FLTI
      GOTO 2500
70    CST=0.78D0+0.02D0*FLTI
C
2500  CONTINUE
      IF (DT_RNDM(CST).GT.0.5D0) CST=-CST
C
      RETURN
      END
c
c===dhadri=============================================================*
c
CDECK  ID>, DT_DHADRI
      SUBROUTINE DT_DHADRI(N,PLAB,ELAB,CX,CY,CZ,ITTA)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE
C
C-----------------------------
C*** INPUT VARIABLES LIST:
C*** SAMPLING OF HADRON NUCLEON INTERACTION FOR (ABOUT) 0.1 LE PLAB LE 6
C*** GEV/C LABORATORY MOMENTUM REGION
C*** N    - PROJECTILE HADRON INDEX
C*** PLAB - LABORATORY MOMENTUM OF N (GEV/C)
C*** ELAB - LABORATORY ENERGY OF N (GEV)
C*** CX,CY,CZ - DIRECTION COSINES OF N IN THE LABORATORY SYSTEM
C*** ITTA - TARGET NUCLEON INDEX
C*** OUTPUT VARIABLES LIST OF PARTICLE CHARACTERISTICS IN /FINLSP/
C  IR COUNTS THE NUMBER OF PRODUCED PARTICLES
C*** ITR - PARTICLE INDEX, CXR,CYR,CZR - DIRECTION COSINES (LAB. SYST.)
C*** ELR,PLR LAB. ENERGY AND LAB. MOMENTUM OF THE SAMPLED PARTICLE
C*** RESPECT., UNITS (GEV/C AND GEV)
C----------------------------

      COMMON /HNGAMR/ REDU,AMO,AMM(15)

      COMMON /HNREDV/ THRESH(268),IRII(17),IKII(17),IEII(17)

      COMMON /HNREAC/ UMO(296),PLABF(296),SIIN(296),WK(5184),
     &                NRK(2,268),NURE(30,2)

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)

      COMMON /HNSPLI/ WTI(460),NZKI(460,3)

      COMMON /HNMETL/ CXS(149),CYS(149),CZS(149),ELS(149),PLS(149),
     &                ITS(149),IS

      COMMON /HNDRUN/ RUNTES,EFTES

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c final state from HADRIN interaction
      PARAMETER (MAXFIN=10)
      COMMON /HNFSPA/ ITRH(MAXFIN),CXRH(MAXFIN),CYRH(MAXFIN),
     &                CZRH(MAXFIN),ELRH(MAXFIN),PLRH(MAXFIN),IRH


      DIMENSION ITPRF(110)
      DATA NNN/0/
      DATA UMODA/0./
      DATA ITPRF/-1,-1,5*1,-1,-1,1,1,1,-1,-1,-1,-1,6*1,-1,-1,-1,85*1/
      LOWP=0
      IF (N.LE.0.OR.N.GE.111)N=1
      IF (ITPRF( N ).GT.0 .OR. ITTA.GT.8) THEN
        GOTO 280
c       WRITE (6,1000)
c    +  ' FALSE USE OF THE PARTICLE TYPE INDEX: N, ITTA', N, ITTA
c       STOP
c1000   FORMAT (3(5H ****/),A,2I4,3(5H ****/))
c    +  45H FALSE USE OF THE PARTICLE TYPE INDEX, N,LUE ,I4,3(5H ****/))
      ENDIF
      IATMPT=0
      IF (ABS(PLAB-5.0D0).LT.4.99999D0)                        GO TO 20
C     IF(IPRI.GE.1) WRITE (6,1010) PLAB
C     STOP
 1010 FORMAT ( '  PROJECTILE HADRON MOMENTUM OUTSIDE OF THE
     + ALLOWED REGION, PLAB=',1E15.5)

   20 CONTINUE
      UMODAT=N*1.11111D0+ITTA*2.19291D0
      IF(UMODAT.NE.UMODA) CALL DT_DCALUM(N,ITTA)
      UMODA=UMODAT
   30 IATMPT=0
      LOWP=LOWP+1
   40 CONTINUE
      IMACH=0
      REDU=2.0D0
      IF (LOWP.GT.20) THEN
C        WRITE(LOUT,*) ' jump 1'
         GO TO 280
      ENDIF
      NNN=N
      IF (NNN.EQ.N)                                             GO TO 50
      RUNTES=0.0D0
      EFTES=0.0D0
   50 CONTINUE
      IS=1
      IRH=0
      IST=1
      NSTAB=23
      IRE=NURE(N,1)
      IF(ITTA.GT.1) IRE=NURE(N,2)
C
C-----------------------------
C*** IE,AMT,ECM,SI DETERMINATION
C----------------------------
      CALL DT_DSIGIN(IRE,PLAB,N,IE,AMT ,AMN,ECM,SI,ITTA)
      IANTH=-1
c*sr
C     IF (AMH(1).NE.0.93828D0) IANTH=1
      IF (AMH(1).NE.0.9383D0) IANTH=1
c*
      IF (IANTH.GE.0) SI=1.0D0
      ECMMH=ECM
C
C-----------------------------
C    ENERGY INDEX
C  IRE CHARACTERIZES THE REACTION
C  IE IS THE ENERGY INDEX
C----------------------------
      IF (SI.LT.1.D-6) THEN
C        WRITE(LOUT,*) ' jump 2'
         GO TO 280
      ENDIF
      IF (N.LE.NSTAB)                                           GO TO 60
      RUNTES=RUNTES+1.0D0
      IF (RUNTES.LT.20.D0) WRITE(ErrorOut,1020)N
 1020 FORMAT(3H N=,I10,30H THE PROEKTILE IS A RESONANCE )
      IF(IBARH(N).EQ.1) N=8
      IF(IBARH(N).EQ.-1)  N=9
   60 CONTINUE
      IMACH=IMACH+1
c*sr 19.2.97: loop for direct channel suppression
C     IF (IMACH.GT.10) THEN
      IF (IMACH.GT.1000) THEN
c*
C        WRITE(LOUT,*) ' jump 3'
         GO TO 280
      ENDIF
      ECM =ECMMH
      AMN2=AMN**2
      AMT2=AMT**2
      ECMN=(ECM**2+AMN2-AMT2)/(2.0D0*ECM    )
      IF(ECMN.LE.AMN) ECMN=AMN
      PCMN=SQRT(ECMN**2-AMN2)
      GAM=(ELAB+AMT)/ECM
      BGAM=PLAB/ECM
      IF (IANTH.GE.0) ECM=2.1D0
C
C-----------------------------
C*** RANDOM CHOICE OF REACTION CHANNEL
C----------------------------
      IST=0
      VV=DT_RNDM(AMN2)
      VV=VV-1.D-17
C
C-----------------------------
C***  PLACE REDUCED VERSION
C----------------------------
      IIEI=IEII(IRE)
      IDWK=IEII(IRE+1)-IIEI
      IIWK=IRII(IRE)
      IIKI=IKII(IRE)
C
C-----------------------------
C***  SHRINKAGE TO THE CONSIDERED ENERGY REGION FOR THE USE OF WEIGHTS
C----------------------------
      HECM=ECM
      HUMO=2.0D0*UMO(IIEI+IDWK)-UMO(IIEI+IDWK-1)
      IF (HUMO.LT.ECM) ECM=HUMO
C
C-----------------------------
C*** INTERPOLATION PREPARATION
C----------------------------
      ECMO=UMO(IE)
      ECM1=UMO(IE-1)
      DECM=ECMO-ECM1
      DEC=ECMO-ECM
C
C-----------------------------
C*** RANDOM LOOP
C----------------------------
      IK=0
      WKK=0.0D0
      WICOR=0.0D0
   70 IK=IK+1
      IWK=IIWK+(IK-1)*IDWK+IE-IIEI
      WOK=WK(IWK)
      WDK=WOK-WK(IWK-1)
C
C-----------------------------
C*** TESTVARIABLE WICO/WICOR: IF CHANNEL IK HAS THE SAME WEIGHTS LIKE IK
C    GO TO NEXT CHANNEL, BECAUSE WKK((IK))-WKK((IK-1))=0, IK CAN NOT
C    CONTRIBUTE
C----------------------------
      IF (PLAB.LT.PLABF(IIEI+2)) WDK=0.0D0
      WICO=WOK*1.23459876D0+WDK*1.735218469D0
      IF (WICO.EQ.WICOR)                                        GO TO 70
      IF (UMO(IIEI+IDWK).LT.HECM) WDK=0.0D0
      WICOR=WICO
C
C-----------------------------
C*** INTERPOLATION IN CHANNEL WEIGHTS
C----------------------------
      EKLIM=-THRESH(IIKI+IK)
      IELIM=IDT_IEFUND(EKLIM,IRE)
      DELIM=UMO(IELIM)+EKLIM
     *+1.D-16
      DETE=(ECM-(ECMO-EKLIM)*0.5D0)*2.0D0
      IF (DELIM*DELIM-DETE*DETE) 90,90,80
   80 DECC=DELIM
                                                               GO TO 100
   90 DECC=DECM
  100 CONTINUE
      WKK=WOK-WDK*DEC/(DECC+1.D-9)
C
C-----------------------------
C*** RANDOM CHOICE
C----------------------------
C
      IF (VV.GT.WKK)                                            GO TO 70
C
C***IK IS THE REACTION CHANNEL
C----------------------------
      INRK=IKII(IRE)+IK
      ECM=HECM
      I1001 =0
C
  110 CONTINUE
      IT1=NRK(1,INRK)
      AM1=DT_DAMG(IT1)
      IT2=NRK(2,INRK)
      AM2=DT_DAMG(IT2)
      AMS=AM1+AM2
      I1001=I1001+1
      IF (I1001.GT.50)                                          GO TO 60
C
      IF (IT2*AMS.GT.IT2*ECM)                                  GO TO 110
      IT11=IT1
      IT22=IT2
      IF (IANTH.GE.0) ECM=ELAB+AMT+0.00001D0
      AM11=AM1
      AM22=AM2
      IF (IT2.GT.0)                                            GO TO 120
c*sr 19.2.97: supress direct channel for pp-collisions
      IF ((N.EQ.1).AND.(ITTA.EQ.1).AND.(IT2.LE.0)) THEN
         RR = DT_RNDM(AM11)
         IF (RR.LE.0.75D0) GOTO 60
      ENDIF
c*
C
C-----------------------------
C  INCLUSION OF DIRECT RESONANCES
C  RANDOM CHOICE OF DECAY CHANNELS OF THE DIRECT RESONANCE  IT1
C------------------------
      KZ1=K1H(IT1)
      IST=IST+1
      IECO=0
      ECO=ECM
      GAM=(ELAB+AMT)/ECO
      BGAM=PLAB/ECO
      CXS(1)=CX
      CYS(1)=CY
      CZS(1)=CZ
                                                               GO TO 170
  120 CONTINUE
      WW=DT_RNDM(ECO)
      IF(WW.LT. 0.5D0)                                         GO TO 130
      IT1=IT22
      IT2=IT11
      AM1=AM22
      AM2=AM11
  130 CONTINUE
C
C-----------------------------
C   THE FIRST PARTICLE IS DEFINED TO BE THE FORWARD GOING ONE AT SMALL T
      IBN=IBARH(N)
      IB1=IBARH(IT1)
      IT11=IT1
      IT22=IT2
      AM11=AM1
      AM22=AM2
      IF(IB1.EQ.IBN)                                           GO TO 140
      IT1=IT22
      IT2=IT11
      AM1=AM22
      AM2=AM11
  140 CONTINUE
C-----------------------------
C***IT1,IT2 ARE THE CREATED PARTICLES
C***MOMENTA AND DIRECTION COSINA IN THE CM - SYSTEM
C------------------------
      CALL DT_DTWOPA(ECM1,ECM2,PCM1,PCM2,COD1,COD2,COF1,COF2,SIF1,SIF2,
     *IT1,IT2,ECM,ECMN,PCMN,N,AM1,AM2)
      IST=IST+1
      ITS(IST)=IT1
      AMM(IST)=AM1
C
C-----------------------------
C***TRANSFORMATION INTO LAB SYSTEM AND ROTATION
C----------------------------
      CALL DT_DTRAFO(GAM,BGAM,CX,CY,CZ,COD1,COF1,SIF1,
     &PCM1,ECM1,PLS(IST),CXS(IST),CYS(IST),CZS(IST),ELS(IST))
      IST=IST+1
      ITS(IST)=IT2
      AMM(IST)=AM2
      CALL DT_DTRAFO(GAM,BGAM,CX,CY,CZ,COD2,COF2,SIF2,
     *PCM2,ECM2,PLS(IST),CXS(IST),CYS(IST),CZS(IST),ELS(IST))
  150 CONTINUE
C
C-----------------------------
C***TEST   STABLE OR UNSTABLE
C----------------------------
      IF(ITS(IST).GT.NSTAB)                                    GO TO 160
      IRH=IRH+1
C
C-----------------------------
C***IRH IS THE NUMBER OF THE FINAL STABLE PARTICLE
C----------------------------
C*    IF (REDU.LT.0.D0) GO TO 1009
      ITRH(IRH)=ITS(IST)
      PLRH(IRH)=PLS(IST)
      CXRH(IRH)=CXS(IST)
      CYRH(IRH)=CYS(IST)
      CZRH(IRH)=CZS(IST)
      ELRH(IRH)=ELS(IST)
      IST=IST-1
      IF(IST.GE.1)                                             GO TO 150
                                                               GO TO 260
  160 CONTINUE
C
C  RANDOM CHOICE OF DECAY CHANNELS
C----------------------------
C
      IT=ITS(IST)
      ECO=AMM(IST)
      GAM=ELS(IST)/ECO
      BGAM=PLS(IST)/ECO
      IECO=0
      KZ1=K1H(IT)
  170 CONTINUE
      IECO=IECO+1
      VV=DT_RNDM(GAM)
      VV=VV-1.D-17
      IIK=KZ1-1
  180 IIK=IIK+1
      IF (VV.GT.WTI(IIK))                                      GO TO 180
C
C  IIK IS THE DECAY CHANNEL
C----------------------------
      IT1=NZKI(IIK,1)
      I310=0
  190 CONTINUE
      I310=I310+1
      AM1=DT_DAMG(IT1)
      IT2=NZKI(IIK,2)
      AM2=DT_DAMG(IT2)
      IF (IT2-1.LT.0)                                          GO TO 240
      IT3=NZKI(IIK,3)
      AM3=DT_DAMG(IT3)
      AMS=AM1+AM2+AM3
C
C  IF  IIK-KIN.LIM.GT.ACTUAL TOTAL CM-ENERGY, DO AGAIN RANDOM IIK-CHOICE
C----------------------------
      IF (IECO.LE.10)                                          GO TO 200
      IATMPT=IATMPT+1
      IF(IATMPT.GT.3) THEN
C        WRITE(LOUT,*) ' jump 4'
         GO TO 280
      ENDIF
                                                                GO TO 40
  200 CONTINUE
      IF (I310.GT.50)                                          GO TO 170
      IF (AMS.GT.ECO)                                          GO TO 190
C
C  FOR THE DECAY CHANNEL
C  IT1,IT2, IT3 ARE THE PRODUCED PARTICLES FROM  IT
C----------------------------
      IF (REDU.LT.0.D0)                                        GO TO 30
      ITWTHC=0
      REDU=2.0D0
      IF(IT3.EQ.0)                                             GO TO 220
  210 CONTINUE
      ITWTH=1
      CALL DT_DTHREP(ECO,ECM1,ECM2,ECM3,PCM1,PCM2,PCM3,COD1,COF1,SIF1,
     *COD2,COF2,SIF2,COD3,COF3,SIF3,AM1,AM2,AM3)
                                                               GO TO 230
  220 CALL DT_DTWOPD(ECO,ECM1,ECM2,PCM1,PCM2,COD1,COF1,SIF1,
     &COD2,COF2,SIF2,AM1,AM2)
      ITWTH=-1
      IT3=0
  230 CONTINUE
      ITWTHC=ITWTHC+1
      IF (REDU.GT.0.D0)                                        GO TO 240
      REDU=2.0D0
      IF (ITWTHC.GT.100)                                        GO TO 30
      IF (ITWTH) 220,220,210
  240 CONTINUE
      ITS(IST  )=IT1
      IF (IT2-1.LT.0)                                          GO TO 250
      ITS(IST+1)  =IT2
      ITS(IST+2)=IT3
      RX=CXS(IST)
      RY=CYS(IST)
      RZ=CZS(IST)
      AMM(IST)=AM1
      CALL DT_DTRAFO(GAM,BGAM,RX,RY,RZ,COD1,COF1,SIF1,PCM1,ECM1,
     *PLS(IST),CXS(IST),CYS(IST),CZS(IST),ELS(IST))
      IST=IST+1
      AMM(IST)=AM2
      CALL DT_DTRAFO(GAM,BGAM,RX,RY,RZ,COD2,COF2,SIF2,PCM2,ECM2,
     *PLS(IST),CXS(IST),CYS(IST),CZS(IST),ELS(IST))
      IF (IT3.LE.0)                                            GO TO 250
      IST=IST+1
      AMM(IST)=AM3
      CALL DT_DTRAFO(GAM,BGAM,RX,RY,RZ,COD3,COF3,SIF3,PCM3,ECM3,
     *PLS(IST),CXS(IST),CYS(IST),CZS(IST),ELS(IST))
  250 CONTINUE
                                                               GO TO 150
  260 CONTINUE
  270 CONTINUE
      RETURN
  280 CONTINUE
C
C----------------------------
C
C   ZERO CROSS SECTION CASE
C----------------------------
C
      IRH=1
      ITRH(1)=N
      CXRH(1)=CX
      CYRH(1)=CY
      CZRH(1)=CZ
      ELRH(1)=ELAB
      PLRH(1)=PLAB
      RETURN
      END
c
c===runtt==============================================================*
c
CDECK  ID>, DT_RUNTT
      BLOCK DATA DT_RUNTT

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      COMMON /HNDRUN/ RUNTES,EFTES


      DATA RUNTES,EFTES /100.D0,100.D0/

      END
c
c===noname=============================================================*
c
CDECK  ID>, DT_NONAME
      BLOCK DATA DT_NONAME

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c slope parameters for HADRIN interactions
      COMMON /HNSLOP/ SM(25),BBM(25),BBB(25)

      COMMON /HNREDV/ THRESH(268),IRII(17),IKII(17),IEII(17)


C     DATAS     DATAS    DATAS      DATAS     DATAS
C******          *********
      DATA IKII/ 0, 15, 41, 67, 82, 93, 110, 133, 148, 159, 172, 183,
     &           207, 224, 241, 252, 268 /
      DATA IEII/ 0, 21, 46, 71, 92, 109, 126, 143, 160, 173, 186, 199,
     &           220, 241, 262, 279, 296 /
      DATA IRII/ 0, 315, 965, 1615, 1930, 2117, 2406, 2797, 3052, 3195,
     &           3364, 3507, 4011, 4368, 4725, 4912, 5184/

C
C     MASSES FOR THE SLOPE B(M) IN GEV
C     SLOPE B(M) FOR AN MESONIC SYSTEM
C     SLOPE B(M) FOR A BARYONIC SYSTEM

c
      DATA SM,BBM,BBB/  0.8D0, 0.85D0,  0.9D0, 0.95D0, 1.D0,
     &     1.05D0,  1.1D0, 1.15D0,  1.2D0, 1.25D0,
     &      1.3D0,  1.35D0, 1.4D0,  1.45D0,  1.5D0,
     &     1.55D0,  1.6D0,  1.65D0, 1.7D0,   1.75D0,
     &      1.8D0,  1.85D0, 1.9D0,  1.95D0,  2.D0,
     &     15.6D0, 14.95D0, 14.3D0, 13.65D0, 13.D0,
     &    12.35D0, 11.7D0, 10.85D0, 10.D0,  9.15D0,
     &      8.3D0,  7.8D0,  7.3D0,  7.25D0,  7.2D0,
     &     6.95D0,  6.7D0,  6.6D0,  6.5D0,   6.3D0,
     &      6.1D0,  5.85D0, 5.6D0,  5.35D0,  5.1D0,
     &      15.D0,   15.D0, 15.D0,  15.D0,   15.D0, 15.D0, 15.D0,
     &     14.2D0,  13.4D0, 12.6D0,
     &     11.8D0, 11.2D0, 10.6D0,  9.8D0,    9.D0,
     &     8.25D0,  7.5D0, 6.25D0,  5.D0,    4.5D0, 5*4.D0 /
c
      END
c
c===damg===============================================================*
c
CDECK  ID>, DT_DAMG
      DOUBLE PRECISION FUNCTION DT_DAMG(IT)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)


      DIMENSION GASUNI(14)
      DATA GASUNI/
     *-1.D0,-.98D0,-.95D0,-.87D0,-.72D0,-.48D0,
     *-.17D0,.17D0,.48D0,.72D0,.87D0,.95D0,.98D0,1.D0/
      DATA GAUNO/2.352D0/
      DATA GAUNON/2.4D0/
      DATA IO/14/
      DATA NSTAB/23/

      I=1
      IF (IT.LE.0)                                              GO TO 30
      IF (IT.LE.NSTAB)                                          GO TO 20
      DGAUNI=GAUNO*GAUNON/DBLE(IO-1)
      VV=DT_RNDM(DGAUNI)
      VV=VV*2.0D0-1.0D0+1.D-16
   10 CONTINUE
      VO=GASUNI(I)
      I=I+1
      V1=GASUNI(I)
      IF (VV.GT.V1)                                             GO TO 10
      UNIGA=DGAUNI*(DBLE(I)-2.0D0+(VV-VO+1.D-16)/
     &      (V1-VO)-(DBLE(IO)-1.0D0)*0.5D0)
      DAM=GAH(IT)*UNIGA/GAUNO
      AAM=AMH(IT)+DAM
      DT_DAMG=AAM
      RETURN
   20 CONTINUE
      DT_DAMG=AMH(IT)
      RETURN
   30 CONTINUE
      DT_DAMG=0.0D0
      RETURN
      END
c
c===dcalum=============================================================*
c
CDECK  ID>, DT_DCALUM
      SUBROUTINE DT_DCALUM(N,ITTA)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

C*** C.M.S.-ENERGY AND REACTION CHANNEL THRESHOLD CALCULATION

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)

      COMMON /HNREDV/ THRESH(268),IRII(17),IKII(17),IEII(17)

      COMMON /HNSPLI/ WTI(460),NZKI(460,3)

      COMMON /HNREAC/ UMO(296),PLABF(296),SIIN(296),WK(5184),
     &                NRK(2,268),NURE(30,2)


      IRE=NURE(N,ITTA/8+1)
      IEO=IEII(IRE)+1
      IEE=IEII(IRE +1)
      AM1=AMH(N   )
      AM12=AM1**2
      AM2=AMH(ITTA)
      AM22=AM2**2
      DO 10 IE=IEO,IEE
        PLAB2=PLABF(IE)**2
        ELAB=SQRT(AM12+AM22+2.0D0*SQRT(PLAB2+AM12)*AM2)
        UMO(IE)=ELAB
   10 CONTINUE
      IKO=IKII(IRE)+1
      IKE=IKII(IRE +1)
      UMOO=UMO(IEO)
      DO 30 IK=IKO,IKE
        IF(NRK(2,IK).GT.0)                                      GO TO 30
        IKI=NRK(1,IK)
        AMSS=5.0D0
        K11=K1H(IKI)
        K22=K2H(IKI)
        DO 20 IK1=K11,K22
          IN=NZKI(IK1,1)
          AMS=AMH(IN)
          IN=NZKI(IK1,2)
          IF(IN.GT.0)AMS=AMS+AMH(IN)
          IN=NZKI(IK1,3)
          IF(IN.GT.0) AMS=AMS+AMH(IN)
          IF (AMS.LT.AMSS) AMSS=AMS
   20   CONTINUE
        IF(UMOO.LT.AMSS) UMOO=AMSS
        THRESH(IK)=UMOO
   30 CONTINUE
      RETURN
      END
c
c===dchanh=============================================================*
c
CDECK  ID>, DT_DCHANH
      SUBROUTINE DT_DCHANH

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)

      COMMON /HNSPLI/ WTI(460),NZKI(460,3)

      COMMON /HNREDV/ THRESH(268),IRII(17),IKII(17),IEII(17)

      COMMON /HNREAC/ UMO(296),PLABF(296),SIIN(296),WK(5184),
     &                NRK(2,268),NURE(30,2)


      DIMENSION HWT(460),HWK(40),SI(5184)
      EQUIVALENCE (WK(1),SI(1))
C--------------------
C*** USE ONLY FOR DATAPREPARATION OF PURE HADRIN
C*** CALCULATION OF REACTION- AND DECAY-CHANNEL-WEIGHTS,
C*** THRESHOLD ENERGIES+MOMENTA OF REACTION CHNLS.
C*** CHANGE OF WT- AND WK-INPUTDATA INTO WEIGHTS FOR THE M.-C.-PROCEDURE
C*** (ADDED ONE TO EACH OTHER FOR CORRESPONDING CHANNELS)
C--------------------------
      IREG=16
      DO 90 IRE=1,IREG
        IWKO=IRII(IRE)
        IEE=IEII(IRE+1)-IEII(IRE)
        IKE=IKII(IRE+1)-IKII(IRE)
        IEO=IEII(IRE)+1
        IIKA=IKII(IRE)
c   modifications to suppress elestic scattering  24/07/91
        DO 80 IE=1,IEE
          SIS=1.D-14
          SINORC=0.0D0
          DO 10 IK=1,IKE
            IWK=IWKO+IEE*(IK-1)+IE
            IF(NRK(2,IIKA+IK).EQ.0) SINORC=1.0D0
            SIS=SIS+SI(IWK)*SINORC
   10     CONTINUE
          SIIN(IEO+IE-1)=SIS
          SIO=0.D0
          IF (SIS.GE.1.D-12)                                    GO TO 20
          SIS=1.D0
          SIO=1.D0
   20     CONTINUE
          SINORC=0.0D0
          DO 30 IK=1,IKE
            IWK=IWKO+IEE*(IK-1)+IE
            IF(NRK(2,IIKA+IK).EQ.0) SINORC=1.0D0
            SIO=SIO+SI(IWK)*SINORC/SIS
            HWK(IK)=SIO
   30     CONTINUE
          DO 40 IK=1,IKE
            IWK=IWKO+IEE*(IK-1)+IE
   40     WK(IWK)=HWK(IK)
          IIKI=IKII(IRE)
          DO 70 IK=1,IKE
            AM111=0.D0
            INRK1=NRK(1,IIKI+IK)
            IF (INRK1.GT.0) AM111=AMH(INRK1)
            AM222=0.D0
            INRK2=NRK(2,IIKI+IK)
            IF (INRK2.GT.0) AM222=AMH(INRK2)
            THRESH(IIKI+IK)=AM111 +AM222
            IF (INRK2-1.GE.0)                                   GO TO 60
            INRKK=K1H(INRK1)
            AMSS=5.D0
            INRKO=K2H(INRK1)
            DO 50 INRK1=INRKK,INRKO
              INZK1=NZKI(INRK1,1)
              INZK2=NZKI(INRK1,2)
              INZK3=NZKI(INRK1,3)
              IF (INZK1.LE.0.OR.INZK1.GT.110)                   GO TO 50
              IF (INZK2.LE.0.OR.INZK2.GT.110)                   GO TO 50
              IF (INZK3.LE.0.OR.INZK3.GT.110)                   GO TO 50
C     WRITE (6,310)INRK1,INZK1,INZK2,INZK3
 1000 FORMAT (4I10)
              AMS=AMH(INZK1)+AMH(INZK2)
              IF (INZK3-1.GE.0) AMS=AMS+AMH(INZK3)
              IF (AMSS.GT.AMS) AMSS=AMS
   50       CONTINUE
            AMS=AMSS
            IF (AMS.LT.UMO(IEO)) AMS=UMO(IEO)
            THRESH(IIKI+IK)=AMS
   60       CONTINUE
   70     CONTINUE
   80   CONTINUE
   90 CONTINUE
      DO 100 J=1,460
  100 HWT(J)=0.D0
      DO 120 I=1,110
        IK1=K1H(I)
        IK2=K2H(I)
        HV=0.D0
        IF (IK2.GT.460)IK2=460
        IF (IK1.LE.0)IK1=1
        DO 110 J=IK1,IK2
          HV=HV+WTI(J)
          HWT(J)=HV
          JI=J
  110   CONTINUE
        IF (ABS(HV-1.0D0).GT.1.D-4) WRITE(ErrorOut,1010)I,JI,HV
 1010 FORMAT (35H ERROR IN HWT, FALSE USE OF CHANWH ,2I6,F10.2)
  120 CONTINUE
      DO 130 J=1,460
  130 WTI(J)=HWT(J)
      RETURN
      END
c
c===dhadde=============================================================*
c
CDECK  ID>, DT_DHADDE
      SUBROUTINE DT_DHADDE

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c particle properties (BAMJET index convention)
      CHARACTER*8  ANAME
      COMMON /DTPART/ ANAME(210),AAM(210),GA(210),TAU(210),
     &                IICH(210),IIBAR(210),K1(210),K2(210)

c HADRIN: decay channel information
      PARAMETER (IDMAX9=602)
      CHARACTER*8 ZKNAME
      COMMON /HNDECH/ ZKNAME(IDMAX9),WT(IDMAX9),NZK(IDMAX9,3)

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)

      COMMON /HNSPLI/ WTI(460),NZKI(460,3)

c decay channel information for HADRIN
      COMMON /HNADDH/ AMZ(16),GAZ(16),TAUZ(16),ICHZ(16),IBARZ(16),
     &                K1Z(16),K2Z(16),WTZ(153),II22,
     &                NZK1(153),NZK2(153),NZK3(153)


      DATA IRETUR/0/

      IRETUR=IRETUR+1
      AMH(31)=0.48D0
      IF (IRETUR.GT.1) RETURN
      DO 10 I=1,94
        AMH(I)   = AAM(I)
        GAH(I)   = GA(I)
        TAUH(I)  = TAU(I)
        ICHH(I)  = IICH(I)
        IBARH(I) = IIBAR(I)
        K1H(I)   = K1(I)
        K2H(I)   = K2(I)
   10 CONTINUE
c*sr
C     AMH(1)=0.93828D0
      AMH(1)=0.9383D0
c*
      AMH(2)=AMH(1)
      DO 20 I=26,30
        K1H(I)=452
        K2H(I)=452
   20 CONTINUE
      DO 30 I=1,307
        WTI(I)    = WT(I)
        NZKI(I,1) = NZK(I,1)
        NZKI(I,2) = NZK(I,2)
        NZKI(I,3) = NZK(I,3)
   30 CONTINUE
      DO 40 I=1,16
        L=I+94
        AMH(L)=AMZ(I)
        GAH( L)=GAZ(I)
        TAUH( L)=TAUZ(I)
        ICHH( L)=ICHZ(I)
        IBARH( L)=IBARZ(I)
        K1H( L)=K1Z(I)
        K2H( L)=K2Z(I)
   40 CONTINUE
      DO 50 I=1,153
        L=I+307
        WTI(L)    = WTZ(I)
        NZKI(L,3) = NZK3(I)
        NZKI(L,2) = NZK2(I)
        NZKI(L,1) = NZK1(I)
   50 CONTINUE
      RETURN
      END
c
c===iefund=============================================================*
c
CDECK  ID>, IDT_IEFUND
      INTEGER FUNCTION IDT_IEFUND(PL,IRE)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

C*****IEFUN CALCULATES A MOMENTUM INDEX

      COMMON /HNDRUN/ RUNTES,EFTES

      COMMON /HNREDV/ THRESH(268),IRII(17),IKII(17),IEII(17)

      COMMON /HNREAC/ UMO(296),PLABF(296),SIIN(296),WK(5184),
     &                NRK(2,268),NURE(30,2)


      IPLA=IEII(IRE)+1
     *+1
      IPLE=IEII(IRE+1)
      IF (PL.LT.0.)                                             GO TO 30
      DO 10 I=IPLA,IPLE
        J=I-IPLA+1
        IF (PL.LE.PLABF(I))                                     GO TO 60
   10 CONTINUE
      I=IPLE
      IF ( EFTES.GT.40.D0)                                      GO TO 20
      EFTES=EFTES+1.0D0
      WRITE(ErrorOut,1000)PL,J
   20 CONTINUE
                                                                GO TO 70
   30 CONTINUE
      DO 40 I=IPLA,IPLE
        J=I-IPLA+1
        IF (-PL.LE.UMO(I))                                      GO TO 60
   40 CONTINUE
      I=IPLE
      IF ( EFTES.GT.40.D0)                                      GO TO 50
      EFTES=EFTES+1.0D0
      WRITE(ErrorOut,1000)PL,I
   50 CONTINUE
   60 CONTINUE
   70 CONTINUE
      IDT_IEFUND=I
      RETURN
 1000 FORMAT(14H PLAB OR -ECM=,E12.4,27H IS OUT OF CONSIDERED RANGE ,
     +7H IEFUN=,I5)
      END
c
c===dsigin=============================================================*
c
CDECK  ID>, DT_DSIGIN
      SUBROUTINE DT_DSIGIN(IRE ,PLAB,N,IE ,AMT ,AMN,ECM ,SI ,ITAR)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)

      COMMON /HNREDV/ THRESH(268),IRII(17),IKII(17),IEII(17)

      COMMON /HNREAC/ UMO(296),PLABF(296),SIIN(296),WK(5184),
     &                NRK(2,268),NURE(30,2)


      IE=IDT_IEFUND(PLAB,IRE)
      IF (IE.LE.IEII(IRE)) IE=IE+1
      AMT=AMH(ITAR)
      AMN=AMH(N)
      AMN2=AMN*AMN
      AMT2=AMT*AMT
      ECM=SQRT(AMN2+AMT2+2.0D0*AMT*SQRT(AMN2+PLAB**2))
C*** INTERPOLATION PREPARATION
      ECMO=UMO(IE)
      ECM1=UMO(IE-1)
      DECM=ECMO-ECM1
      DEC=ECMO-ECM
      IIKI=IKII(IRE)+1
      EKLIM=-THRESH(IIKI)
      WOK=SIIN(IE)
      WDK=WOK-SIIN(IE-1)
      IF (ECM.GT.ECMO) WDK=0.0D0
C*** INTERPOLATION IN CHANNEL WEIGHTS
      IELIM=IDT_IEFUND(EKLIM,IRE)
      DELIM=UMO(IELIM)+EKLIM
     *+1.D-16
      DETE=(ECM-(ECMO-EKLIM)*0.5D0)*2.0D0
      IF (DELIM*DELIM-DETE*DETE) 20,20,10
   10 DECC=DELIM
                                                                GO TO 30
   20 DECC=DECM
   30 CONTINUE
      WKK=WOK-WDK*DEC/(DECC+1.D-9)
      IF (WKK.LT.0.0D0) WKK=0.0D0
      SI=WKK+1.D-12
      IF (-EKLIM.GT.ECM) SI=1.D-14
      RETURN
      END
c
c===dtchoi=============================================================*
c
CDECK  ID>, DT_DTCHOI
      SUBROUTINE DT_DTCHOI(T,P,PP,E,EE,I,II,N,AM1,AM2)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

C     ****************************
C     TCHOIC CALCULATES A RANDOM VALUE
C     FOR THE FOUR-MOMENTUM-TRANSFER T
C     ****************************

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)

c slope parameters for HADRIN interactions
      COMMON /HNSLOP/ SM(25),BBM(25),BBB(25)


      AMA=AM1
      AMB=AM2
      IF (I.GT.30.AND.II.GT.30)                                 GO TO 20
      III=II
      AM3=AM2
      IF (I.LE.30)                                              GO TO 10
      III=I
      AM3=AM1
   10 CONTINUE
                                                                GO TO 30
   20 CONTINUE
      III=II
      AM3=AM2
      IF (AMA.LE.AMB)                                           GO TO 30
      III=I
      AM3=AM1
   30 CONTINUE
      IB=IBARH(III)
      AMA=AM3
      K=INT((AMA-0.75D0)/0.05D0)
      IF (K-2.LT.0) K=1
      IF (K-26.GE.0) K=25
      IF (IB)50,40,50
   40 BM=BBM(K)
                                                                GO TO 60
   50 BM=BBB(K)
   60 CONTINUE
C     NORMALIZATION
      TMIN=-2.0D0*(E*EE-P*PP)+AMH(N)**2+AM1  **2
      TMAX=-2.0D0*(E*EE+P*PP)+AMH(N)**2+AM1  **2
      VB=DT_RNDM(TMIN)
c*sr test
C     IF (VB.LT.0.2D0) BM=BM*0.1
C    **0.5
      BM = BM*5.05D0
c*
      TMI=BM*TMIN
      TMA=BM*TMAX
      ETMA=0.D0
      IF (ABS(TMA).GT.120.D0)                                   GO TO 70
      ETMA=EXP(TMA)
   70 CONTINUE
      AN=(1.0D0/BM)*(EXP(TMI)-ETMA)
C*** RANDOM CHOICE OF THE T - VALUE
      R=DT_RNDM(TMI)
      T=(1.0D0/BM)*LOG(ETMA+R*AN*BM)
      RETURN
      END
c
c===dtwopa=============================================================*
c
CDECK  ID>, DT_DTWOPA
      SUBROUTINE DT_DTWOPA(E1,E2,P1,P2,COD1,COD2,COF1,COF2,SIF1,SIF2,
     &IT1,IT2,UMOO,ECM,P,N,AM1,AM2)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

C     ******************************************************
C     QUASI TWO PARTICLE PRODUCTION
C     TWOPAR CALCULATES THE ENERGYS AND THE MOMENTA
C     FOR THE CREATED PARTICLES OR RESONANCES IT1 AND IT2
C     IN THE CM - SYSTEM
C     COD1,COD2,COF1,COF2,SIF1,SIF2 ARE THE ANGLES FOR
C     SPHERICAL COORDINATES
C     ******************************************************

c particle properties (BAMJET index convention),
c (dublicate of DTPART for HADRIN)
      COMMON /HNABLT/ AMH(110),GAH(110),TAUH(110),ICHH(110),IBARH(110),
     &                K1H(110),K2H(110)


      AMA=AM1
      AMB=AM2
      AMA2=AMA*AMA
      E1=((UMOO-AMB)*(UMOO+AMB) + AMA2)/(2.0D0*UMOO)
      E2=UMOO - E1
      IF (E1.LT.AMA*1.00001D0) E1=AMA*1.00001D0
      AMTE=(E1-AMA)*(E1+AMA)
      AMTE=AMTE+1.D-18
      P1=SQRT(AMTE)
      P2=P1
C     / P2 / = / P1 /  BUT OPPOSITE DIRECTIONS
C     DETERMINATION  OF  THE ANGLES
C     COS(THETA1)=COD1      COS(THETA2)=COD2
C     SIN(PHI1)=SIF1        SIN(PHI2)=SIF2
C     COS(PHI1)=COF1        COS(PHI2)=COF2
C     PHI IS UNIFORMLY DISTRIBUTED IN ( 0,2*PI )
      CALL DT_DSFECF(COF1,SIF1)
      COF2=-COF1
      SIF2=-SIF1
C     CALCULATION OF THETA1
      CALL DT_DTCHOI(TR,P,P1,ECM,E1,IT1,IT2,N,AM1,AM2)
      COD1=(TR-AMA2-AMH(N)*AMH(N)+2.0D0*ECM*E1)/(2.0D0*P*P1+1.D-18)
      IF (COD1.GT.0.9999999D0) COD1=0.9999999D0
      COD2=-COD1
      RETURN
      END
c
c===zk=================================================================*
c
CDECK  ID>, DT_ZK
      BLOCK DATA DT_ZK

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c decay channel information for HADRIN
      COMMON /HNADDH/ AMZ(16),GAZ(16),TAUZ(16),ICHZ(16),IBARZ(16),
     &                K1Z(16),K2Z(16),WTZ(153),II22,
     &                NZK1(153),NZK2(153),NZK3(153)

c decay channel information for HADRIN
      CHARACTER*8 ANAMZ,ZKNAM4,ZKNAM5,ZKNAM6
      COMMON /HNADDN/ ANAMZ(16),ZKNAM4(9),ZKNAM5(90),ZKNAM6(54)


c     Particle masses in GeV                                           *
      DATA AMZ/ 3*2.2D0, 0.9576D0, 3*1.887D0, 2.4D0, 2.03D0, 2*1.44D0,
     &          2*1.7D0, 3*0.D0/
c     Resonance width Gamma in GeV                                     *
      DATA GAZ/ 3*.2D0, .1D0, 4*.2D0, .18D0, 2*.2D0, 2*.15D0, 3*0.D0 /
c     Mean life time in seconds                                        *
      DATA TAUZ / 16*0.D0 /
c     Charge of particles and resonances                               *
      DATA ICHZ/ 0, 1, 3*0, 1, -1, 0, 1, -1, 0, 0, 1 , 3*0 /
c     Baryonic charge                                                  *
      DATA IBARZ/ 2, 7*0, 1, -1, -1, 1, 1, 3*0 /
c     First number of decay channels used for resonances               *
c     and decaying particles                                           *
      DATA K1Z/ 308,310,313,317,322,365,393,421,425,434,440,446,449,
     &          3*460/
c     Last number of decay channels used for resonances                *
c     and decaying particles                                           *
      DATA K2Z/ 309,312,316,321,364,392,420,424,433,439,445,448,451,
     &          3*460/
c     Weight of decay channel                                          *
      DATA WTZ/ .17D0, .83D0, 2*.33D0, .34D0, .17D0, 2*.33D0, .17D0,
     & .01D0, .13D0, .36D0, .27D0, .23D0, .0014D0, .0029D0, .0014D0,
     & .0029D0, 4*.0007D0, .0517D0, .0718D0, .0144D0, .0431D0, .0359D0,
     & .0718D0, .0014D0, .0273D0, .0014D0, .0431D0, 2*.0129D0, .0259D0,
     & .0517D0, .0359D0, .0014D0, 2*.0144D0, .0129D0, .0014D0, .0259D0,
     & .0359D0, .0072D0, .0474D0, .0948D0, .0259D0, .0072D0, .0144D0,
     & .0287D0, .0431D0, .0144D0, .0287D0, .0474D0, .0144D0, .0075D0,
     & .0057D0, .0019D0, .0038D0, .0095D0, 2*.0014D0, .0191D0, .0572D0,
     & .1430D0, 2*.0029D0, 5*.0477D0, .0019D0, .0191D0, .0686D0,.0172D0,
     & .0095D0, .1888D0, .0172D0, .0191D0, .0381D0, 2*.0571D0, .0190D0,
     & .0057D0, .0019D0, .0038D0, .0095D0, .0014D0, .0014D0, .0191D0,
     & .0572D0, .1430D0, 2*.0029D0, 5*.0477D0, .0019D0, .0191D0,.0686D0,
     & .0172D0, .0095D0, .1888D0, .0172D0, .0191D0, .0381D0, 2*.0571D0,
     & .0190D0, 4*.25D0, 2*.2D0, .12D0, .1D0, .07D0, .07D0, .14D0,
     & 2*.05D0, .0D0, .3334D0, .2083D0, 2*.125D0, .2083D0, .0D0, .125D0,
     & .2083D0, .3334D0, .2083D0, .125D0, .3D0, .05D0, .65D0, .3D0,
     & .05D0, .65D0, 9*1.D0 /
c     Particle numbers in decay channel                                *
      DATA NZK1/ 8, 1, 2, 9, 1, 2, 9, 2, 9, 7, 13, 31, 15, 24, 23, 13,
     & 23, 13, 2*23, 14, 13, 23, 31, 98, 2*33, 32, 23, 14, 13, 35, 2*23,
     & 14, 13, 33, 23, 98, 31, 23, 14, 13, 35, 2*33, 32, 23, 35, 33, 32,
     & 98, 5*35, 4*13, 23, 13, 98, 32, 33, 23, 13, 23, 13, 14, 13, 32,
     & 13, 98, 23, 13, 2*32, 13, 33, 32, 98, 2*35, 4*14, 23, 14, 98,
     & 2*34, 23, 14, 23, 2*14, 13, 34, 14, 98, 23, 14, 2*34, 14, 33, 32,
     & 98, 2*35, 104, 61, 105, 62, 1, 17, 21, 17, 22, 2*21, 22, 21, 2,
     & 67, 68, 69, 2, 2*9, 68, 69, 70, 2, 9, 2*24, 15, 2*25, 16, 9*0/
      DATA NZK2/ 2*8, 1, 8, 9, 2*8, 2*1, 7, 14, 13, 16, 25, 23, 14, 23,
     & 14, 31, 33, 32, 34, 35, 31, 23, 31, 33, 34, 31, 32, 34, 31, 33,
     & 32, 2*33, 35, 31, 33, 31, 33, 32, 34, 35, 31, 33, 34, 35, 31,
     & 4*33, 32, 3*35,  2*23, 13, 31, 32, 33, 13, 31, 32, 2*31, 32, 33,
     & 32, 32, 35, 31, 2*32, 33, 31, 33, 35, 33, 3*32, 35, 2*23, 14,
     & 31, 34, 33, 14, 31, 33, 2*31, 34, 32, 33, 34, 35, 31, 2*34, 33,
     & 31, 33, 35, 33, 2*34, 33, 35, 1, 2, 8, 9, 25, 13, 35, 2*32, 33,
     & 31, 13, 23, 31, 13, 23, 14, 79, 80, 31, 13, 23, 14, 78, 79, 8,
     & 1, 8, 1, 8, 1, 9*0 /
      DATA NZK3/ 23, 14, 2*13, 23, 13, 2*23, 14, 0, 7, 14, 4*0, 2*23,
     & 10*0, 33, 2*31, 0, 33, 34, 32, 34, 0, 35, 0, 31, 3*35, 0, 3*31,
     & 35, 31, 33, 34, 31, 33, 34, 31, 33, 35, 0, 23, 14, 6*0, 32, 3*33,
     & 32, 34, 0, 35, 0, 2*35, 2*31, 35, 32, 34, 31, 33, 32, 0, 23, 13,
     & 6*0, 34, 2*33, 34, 33, 34, 0, 35, 0,2*35, 2*31, 35, 2*34, 31,
     & 2*34, 25*0, 23, 2*14, 23, 2*13, 9*0 /
c     Particle  names                                                  *
      DATA ANAMZ / 'NNPI', 'ANPPI', 'ANNPI', ' ETS  ',' PAP  ',' PAN  ',
     & 'APN', 'DEO   ', 'S+2030', 'AN*-14', 'AN*014','KONPI ','AKOPPI',
     & 3*'BLANK' /
c     Name of decay channel                                            *
      DATA ZKNAM4/'NNPI0','PNPI-','APPPI+','ANNPI+','ANPPI0','APNPI+',
     & 'ANNPI0','APPPI0','ANPPI-'/
      DATA ZKNAM5/' GAGA ','P+P-GA','ETP+P-','K+K-  ','K0AK0 ',
     & ' POPO ',' P+P- ','POPOPO','P+P0P-','P0ET  ','&0R0  ','P-R+  ',
     & 'P+R-  ','POOM  ',' ETET ','ETSP0 ','R0ET  ',' R0R0 ','R+R-  ',
     & 'P0ETR0','P-ETR+','P+ETR-',' OMET ','P0R0R0','P0R+R-','P-R+R0',
     & 'P+R-R0','R0OM  ','P0ETOM','ETSR0 ','ETETET','P0R0OM','P-R+OM',
     & 'P+R-OM','OMOM  ','R0ETET','R0R0ET','R+R-ET','P0OMOM','OMETET',
     & 'R0R0R0','R+R0R-','ETSRET','OMR0R0','OMR+R-','OMOMET','OMOMR0',
     & 'OMOMOM',
     & ' P+PO ','P+POPO','P+P+P-','P+ET  ','P0R+  ','P+R0  ','ETSP+ ',
     & 'R+ET  ',' R0R+ ','POETR+','P+ETR0','POR+R-','P+R0R0','P-R+R+',
     & 'P+R-R+','R+OM  ','P+ETOM','ETSR+ ','POR+OM','P+R0OM','R+ETET',
     & 'R+R0ET','P+OMOM','R0R0R+','R+R+R-','ETSR+E','OMR+R0','OMOMR+',
     & 'P-PO  ','P-POPO','P-P-P+','P-ET  ','POR-  ','P-R0  ','ETSP- ',
     & 'R-ET  ','R-R0  ','POETR-','P-ETR0','POR-R0','P-R+R-','P-R0R0'/
      DATA ZKNAM6/'P+R-R-','R-OM  ','P-ETOM','ETSR- ','POR-OM','P-R0OM',
     & 'R-ETET','R-R0ET','P-OMOM','R0R0R-','R+R-R-','ETSR-E','OMR0R-',
     & 'OMOMR-', 'PAN-14','APN+14','NAN014','ANN014','PAKO  ','LPI+  ',
     & 'SI+OM','LAMRO+','SI0RO+','SI+RO0','SI+ETA','SI0PI+','SI+PI0',
     & 'APETA ','AN=P+ ','AN-PO ','ANOPO ','APRHOO','ANRHO-','ANETA ',
     & 'AN-P+ ','AN0PO ','AN+P- ','APRHO+','ANRHO0',
     & 'KONPIO','KOPPI-','K+NPI-','AKOPPO','AKONP+','K-PPI+',
     & 9*'BLANK'/
c=                                               end*block.zk      *
      END
c
c===blkd43=============================================================*
c
CDECK  ID>, DT_BLKD43
      BLOCK DATA DT_BLKD43

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c$ CREATE REAC.ADD
cCOPY REAC
c
c=== reac =============================================================*
c
c----------------------------------------------------------------------*
c                                                                      *
c     Created on 10 december 1991  by    Alfredo Ferrari & Paola Sala  *
c                                                   Infn - Milan       *
c                                                                      *
c     Last change on 10-dec-91     by    Alfredo Ferrari               *
c                                                                      *
c     This is the original common reac of Hadrin                       *
c                                                                      *
c----------------------------------------------------------------------*
c
      COMMON /HNREAC/ UMO(296),PLABF(296),SIIN(296),WK(5184),
     &                NRK(2,268),NURE(30,2)


      DIMENSION
     & UMOPI(92), UMOKC(68), UMOP(39), UMON(63), UMOK0(34),
     & PLAPI(92), PLAKC(68), PLAP(39), PLAN(63), PLAK0(34),
     & SPIKP1(315), SPIKPU(278), SPIKPV(372),
     & SPIKPW(278), SPIKPX(372), SPIKP4(315),
     & SPIKP5(187), SPIKP6(289),
     & SKMPEL(102), SPIKP7(289), SKMNEL(68), SPIKP8(187),
     & SPIKP9(143), SPIKP0(169), SPKPV(143),
     & SAPPEL(105), SPIKPE(399), SAPNEL(84), SPIKPZ(273),
     & SANPEL(84) , SPIKPF(273),
     & SPKP15(187), SPKP16(272),
     & NRKPI(164), NRKKC(132), NRKP(70), NRKN(116), NRKK0(54),
     & NURELN(60)
c
       DIMENSION NRKLIN(532)
       EQUIVALENCE (NRK(1,1), NRKLIN(1))
       EQUIVALENCE (   UMO(  1),  UMOPI(1)), (   UMO( 93),  UMOKC(1))
       EQUIVALENCE (   UMO(161),   UMOP(1)), (   UMO(200),   UMON(1))
       EQUIVALENCE (   UMO(263),  UMOK0(1))
       EQUIVALENCE ( PLABF(  1),  PLAPI(1)), ( PLABF( 93),  PLAKC(1))
       EQUIVALENCE ( PLABF(161),   PLAP(1)), ( PLABF(200),   PLAN(1))
       EQUIVALENCE ( PLABF(263),  PLAK0(1))
       EQUIVALENCE (   WK(   1), SPIKP1(1)), (   WK( 316), SPIKPU(1))
       EQUIVALENCE (   WK( 594), SPIKPV(1)), (   WK( 966), SPIKPW(1))
       EQUIVALENCE (   WK(1244), SPIKPX(1)), (   WK(1616), SPIKP4(1))
       EQUIVALENCE (   WK(1931), SPIKP5(1)), (   WK(2118), SPIKP6(1))
       EQUIVALENCE (   WK(2407), SKMPEL(1)), (   WK(2509), SPIKP7(1))
       EQUIVALENCE (   WK(2798), SKMNEL(1)), (   WK(2866), SPIKP8(1))
       EQUIVALENCE (   WK(3053), SPIKP9(1)), (   WK(3196), SPIKP0(1))
       EQUIVALENCE (   WK(3365),  SPKPV(1)), (   WK(3508), SAPPEL(1))
       EQUIVALENCE (   WK(3613), SPIKPE(1)), (   WK(4012), SAPNEL(1))
       EQUIVALENCE (   WK(4096), SPIKPZ(1)), (   WK(4369), SANPEL(1))
       EQUIVALENCE (   WK(4453), SPIKPF(1)), (   WK(4726), SPKP15(1))
       EQUIVALENCE (   WK(4913), SPKP16(1))
       EQUIVALENCE (NRK(1,1), NRKLIN(1))
       EQUIVALENCE (NRKLIN(   1), NRKPI(1)), (NRKLIN( 165), NRKKC(1))
       EQUIVALENCE (NRKLIN( 297),  NRKP(1)), (NRKLIN( 367),  NRKN(1))
       EQUIVALENCE (NRKLIN( 483), NRKK0(1))
       EQUIVALENCE (NURE(1,1), NURELN(1))
c
c*** pi- p data                                                        *
c*** pi+ n data                                                        *
      DATA PLAPI / 0.D0, .3D0, .5D0, .6D0, .7D0, .8D0, .9D0, .95D0,1.D0,
     & 1.15D0, 1.3D0, 1.5D0, 1.6D0, 1.8D0, 2.D0, 2.3D0, 2.5D0, 2.8D0,
     & 3.D0, 3.5D0, 4.D0, 0.D0, .285D0, .4D0, .45D0, .5D0, .6D0, .7D0,
     & .75D0, .8D0, .85D0, .9D0, 1.D0, 1.15D0, 1.3D0, 1.5D0, 1.6D0,
     & 1.8D0, 2.D0, 2.3D0, 2.5D0, 2.8D0, 3.D0, 3.5D0, 4.D0, 4.5D0, 0.D0,
     & .285D0, .4D0, .45D0, .5D0, .6D0, .7D0, .75D0, .8D0, .85D0, .9D0,
     & 1.D0, 1.15D0, 1.3D0, 1.5D0, 1.6D0, 1.8D0, 2.D0, 2.3D0, 2.5D0,
     & 2.8D0, 3.D0, 3.5D0, 4.D0, 4.5D0, 0.D0, .3D0, .5D0, .6D0, .7D0,
     & .8D0, .9D0, .95D0, 1.D0, 1.15D0, 1.3D0, 1.5D0, 1.6D0, 1.8D0,
     & 2.D0, 2.3D0, 2.5D0, 2.8D0, 3.D0, 3.5D0, 4.D0 /
      DATA PLAKC /
     &   0.D0,  .58D0,   .8D0, 1.01D0, 1.23D0, 1.45D0, 1.68D0, 1.94D0,
     & 2.18D0, 2.42D0, 2.68D0, 2.96D0, 3.24D0,
     & 3.51D0, 3.84D0, 4.16D0, 4.49D0,
     &   0.D0,  .58D0,   .8D0, 1.01D0, 1.23D0, 1.45D0, 1.68D0, 1.94D0,
     & 2.18D0, 2.42D0, 2.68D0, 2.96D0, 3.24D0,
     & 3.51D0, 3.84D0, 4.16D0, 4.49D0,
     &   0.D0,  .58D0,   .8D0, 1.01D0, 1.23D0, 1.45D0, 1.68D0, 1.94D0,
     & 2.18D0, 2.42D0, 2.68D0, 2.96D0, 3.24D0,
     & 3.51D0, 3.84D0, 4.16D0, 4.49D0,
     &   0.D0,  .58D0,   .8D0, 1.01D0, 1.23D0, 1.45D0, 1.68D0, 1.94D0,
     & 2.18D0, 2.42D0, 2.68D0, 2.96D0, 3.24D0,
     & 3.51D0, 3.84D0, 4.16D0, 4.49D0/
      DATA PLAK0 /
     &   0.D0,  .58D0,   .8D0, 1.01D0, 1.23D0, 1.45D0, 1.68D0, 1.94D0,
     & 2.18D0, 2.42D0, 2.68D0, 2.96D0, 3.24D0,
     & 3.51D0, 3.84D0, 4.16D0, 4.49D0,
     &   0.D0,  .58D0,   .8D0, 1.01D0, 1.23D0, 1.45D0, 1.68D0, 1.94D0,
     & 2.18D0, 2.42D0, 2.68D0, 2.96D0, 3.24D0,
     & 3.51D0, 3.84D0, 4.16D0, 4.49D0/
c                 pp   pn   np   nn                                    *
      DATA PLAP /
     &   0.D0, 1.06D0, 1.34D0, 1.63D0, 1.92D0, 2.2D0, 2.5D0,2.8D0,3.1D0,
     & 3.43D0, 3.75D0, 4.07D0, 4.43D0,
     &   0.D0, 1.06D0, 1.34D0, 1.63D0, 1.92D0, 2.2D0, 2.5D0,2.8D0,3.1D0,
     & 3.43D0, 3.75D0, 4.07D0, 4.43D0,
     &   0.D0, 1.06D0, 1.34D0, 1.63D0, 1.92D0, 2.2D0, 2.5D0,2.8D0,3.1D0,
     & 3.43D0, 3.75D0, 4.07D0, 4.43D0 /
c    app   apn   anp   ann                                             *
      DATA PLAN /
     &  0.D0,   1.D-3,   .1D0,   .2D0,   .3D0,  .4D0,  .5D0, .6D0,
     & .74D0,  1.06D0, 1.34D0, 1.63D0, 1.92D0, 2.2D0, 2.5D0,2.8D0,3.1D0,
     & 3.43D0, 3.75D0, 4.07D0, 4.43D0,
     &  0.D0,   1.D-3,   .1D0,   .2D0,   .3D0,  .4D0,  .5D0, .6D0,
     & .74D0,  1.06D0, 1.34D0, 1.63D0, 1.92D0, 2.2D0, 2.5D0,2.8D0,3.1D0,
     & 3.43D0, 3.75D0, 4.07D0, 4.43D0,
     &  0.D0,   1.D-3,   .1D0,   .2D0,   .3D0,  .4D0,  .5D0, .6D0,
     & .74D0,  1.06D0, 1.34D0, 1.63D0, 1.92D0, 2.2D0, 2.5D0,2.8D0,3.1D0,
     & 3.43D0, 3.75D0, 4.07D0, 4.43D0  /
      DATA SIIN / 296*0.D0 /
      DATA UMOPI/ 1.08D0,1.233D0,1.302D0,1.369D0,1.496D0,
     & 1.557D0,1.615D0,1.6435D0,
     & 1.672D0,1.753D0,1.831D0,1.930D0,1.978D0,2.071D0,2.159D0,
     & 2.286D0,2.366D0,2.482D0,2.56D0,
     & 2.735D0,2.90D0,
     &             1.08D0,1.222D0,1.302D0,1.3365D0,1.369D0,1.434D0,
     & 1.496D0,1.527D0,1.557D0,
     & 1.586D0,1.615D0,1.672D0,1.753D0,1.831D0,1.930D0,1.978D0,
     & 2.071D0,2.159D0,2.286D0,2.366D0,
     & 2.482D0,2.560D0,2.735D0,2.90D0,3.06D0,
     &             1.08D0,1.222D0,1.302D0,1.3365D0,1.369D0,1.434D0,
     & 1.496D0,1.527D0,1.557D0,
     & 1.586D0,1.615D0,1.672D0,1.753D0,1.831D0,1.930D0,1.978D0,
     & 2.071D0,2.159D0,2.286D0,2.366D0,
     & 2.482D0,2.560D0,2.735D0,2.90D0,3.06D0,
     &                   1.08D0,1.233D0,1.302D0,1.369D0,1.496D0,
     & 1.557D0,1.615D0,1.6435D0,
     & 1.672D0,1.753D0,1.831D0,1.930D0,1.978D0,2.071D0,2.159D0,
     & 2.286D0,2.366D0,2.482D0,2.56D0,
     &  2.735D0, 2.90D0/
      DATA UMOKC/ 1.44D0,
     &  1.598D0,1.7D0,1.8D0,1.9D0,2.0D0,2.1D0,2.2D0,2.3D0,2.4D0,2.5D0,
     & 2.6D0,2.7D0,2.8D0,2.9D0,3.0D0,
     & 3.1D0,1.44D0,
     &  1.598D0,1.7D0,1.8D0,1.9D0,2.0D0,2.1D0,2.2D0,2.3D0,2.4D0,2.5D0,
     & 2.6D0,2.7D0,2.8D0,2.9D0,3.0D0,
     & 3.1D0,1.44D0,
     &  1.598D0,1.7D0,1.8D0,1.9D0,2.0D0,2.1D0,2.2D0,2.3D0,2.4D0,2.5D0,
     & 2.6D0,2.7D0,2.8D0,2.9D0,3.0D0,
     & 3.1D0,1.44D0,
     &  1.598D0,1.7D0,1.8D0,1.9D0,2.0D0,2.1D0,2.2D0,2.3D0,2.4D0,2.5D0,
     & 2.6D0,2.7D0,2.8D0,2.9D0,3.0D0,
     &  3.1D0/
      DATA UMOK0/ 1.44D0,
     &  1.598D0,1.7D0,1.8D0,1.9D0,2.0D0,2.1D0,2.2D0,2.3D0,2.4D0,2.5D0,
     & 2.6D0,2.7D0,2.8D0,2.9D0,3.0D0,
     & 3.1D0,1.44D0,
     &  1.598D0,1.7D0,1.8D0,1.9D0,2.0D0,2.1D0,2.2D0,2.3D0,2.4D0,2.5D0,
     & 2.6D0,2.7D0,2.8D0,2.9D0,3.0D0,
     &  3.1D0/
c                 pp   pn   np   nn                                    *
      DATA UMOP/
     & 1.88D0,2.102D0,2.2D0,2.3D0,2.4D0,2.5D0,2.6D0,2.7D0,2.8D0,2.9D0,
     & 3.D0,3.1D0,3.2D0,
     & 1.88D0,2.102D0,2.2D0,2.3D0,2.4D0,2.5D0,2.6D0,2.7D0,2.8D0,2.9D0,
     & 3.D0,3.1D0,3.2D0,
     & 1.88D0,2.102D0,2.2D0,2.3D0,2.4D0,2.5D0,2.6D0,2.7D0,2.8D0,2.9D0,
     & 3.D0,3.1D0,3.2D0/
c    app   apn   anp   ann                                             *
      DATA UMON /
     & 1.877D0,1.87701D0,1.879D0,1.887D0,1.9D0,1.917D0,1.938D0,1.962D0,
     & 2.D0,2.102D0,2.2D0,2.3D0,2.4D0,2.5D0,2.6D0,2.7D0,2.8D0,2.9D0,
     & 3.D0,3.1D0,3.2D0,
     & 1.877D0,1.87701D0,1.879D0,1.887D0,1.9D0,1.917D0,1.938D0,1.962D0,
     & 2.D0,2.102D0,2.2D0,2.3D0,2.4D0,2.5D0,2.6D0,2.7D0,2.8D0,2.9D0,
     & 3.D0,3.1D0,3.2D0,
     & 1.877D0,1.87701D0,1.879D0,1.887D0,1.9D0,1.917D0,1.938D0,1.962D0,
     & 2.D0,2.102D0,2.2D0,2.3D0,2.4D0,2.5D0,2.6D0,2.7D0,2.8D0,2.9D0,
     &  3.D0,3.1D0,3.2D0/
c*** reaction channel state particles                                  *
      DATA NRKPI / 13, 1, 15, 21, 81, 0, 13, 54, 23, 53, 13, 63, 13, 58,
     & 23, 57, 13, 65, 1, 32, 53, 31, 54, 32, 53, 33, 53, 35, 63, 32,
     & 13, 8, 23, 1, 17, 15, 21, 24, 22, 15, 82, 0, 61, 0, 13, 55, 23,
     & 54, 14, 53, 13, 64, 23, 63, 13, 59, 23, 58, 14, 57, 13, 66, 23,
     & 65, 1, 31, 8, 32, 1, 33, 1, 35, 54, 31, 55, 32, 54, 33, 53, 34,
     & 54, 35, 14, 1, 23, 8, 17, 24, 20, 15, 22, 24, 83, 0, 62, 0, 14,
     & 54, 23, 55, 13, 56, 14, 63, 23, 64, 14, 58, 23, 59, 13, 60, 14,
     & 65, 23, 66, 8, 31, 1, 34, 8, 33, 8, 35, 55, 31, 54, 34, 55, 33,
     & 56, 32, 55, 35, 14, 8, 24, 20, 84, 0, 14, 55, 23, 56, 14, 64, 14,
     & 59, 23, 60, 14, 66, 8, 34, 56, 31, 55, 34, 56, 33, 56, 35, 64,34/
      DATA NRKKC/ 15, 1, 89, 0, 24, 53, 15, 54, 1, 36, 1, 40, 1, 44, 36,
     & 63, 15, 63, 45, 53, 44, 54, 15, 8, 24, 1, 91, 0, 24, 54, 15, 55,
     & 8, 36, 1, 37, 8, 40, 1, 41, 8, 44, 1, 45, 36, 64, 37, 63, 15, 64,
     & 24, 63, 45, 54, 44, 55, 16, 1, 25, 8, 17, 23, 21, 14, 20,
     & 13, 22, 23, 90, 0, 38, 1, 39, 8, 16, 54, 25, 55, 1, 42, 8, 43,
     & 16, 63, 25, 64, 39, 64, 38, 63, 46, 54, 47, 55, 8, 47, 1, 46, 52,
     & 0, 51, 0, 16, 8, 17, 14, 20, 23, 22, 14, 92, 0, 8, 38, 16, 55,
     & 25, 56, 8, 42, 16, 64, 38, 64, 46, 55, 47, 56, 8, 46, 94, 0 /
c                                                                      *
c   k0 p   k0 n   ak0 p   ak/ n                                        *
c                                                                      *
      DATA NRKK0 / 24, 8, 106, 0, 15, 56, 24, 55, 37, 8, 41, 8, 45, 8,
     & 37, 64, 24, 64, 44, 56, 45, 55, 25, 1, 17, 13,   22, 13, 21, 23,
     & 107, 0, 39, 1, 25, 54, 16, 53, 43, 1, 25, 63, 39, 63, 47, 54, 46,
     & 53, 47, 1, 103, 0, 93, 0/
c   pp  pn   np   nn                                                   *
      DATA NRKP / 1, 1, 85, 0, 8, 53, 1, 54, 1, 63, 8, 57, 1, 58, 2*54,
     & 53, 55, 63, 54, 64, 53, 1, 8, 86, 0, 8, 54, 1, 55, 8, 63, 1, 64,
     & 8, 58, 1, 59, 64, 54, 63, 55, 54, 55, 53, 56, 77, 0, 2*8, 95, 0,
     & 8, 55, 1, 56, 8, 64, 8, 59, 1, 60, 2*55, 54, 56, 64, 55, 63, 56 /
c     app   apn   anp   ann                                            *
      DATA NRKN/ 1, 2, 17, 18, 15, 16, 8, 9, 13, 14, 99, 0, 87, 0, 1,
     & 68, 8, 69, 2, 54, 9, 55, 102, 0, 2, 63, 9, 64, 1, 75, 8, 76, 53,
     & 67, 54, 68, 55, 69, 56, 70, 63, 68, 64, 69, 75, 54, 76, 55, 2, 8,
     & 18, 20, 16, 24, 14, 23, 101, 0, 88, 0, 2, 55, 9, 56, 1, 67, 8,
     & 68, 2, 64, 8, 75, 2, 59, 8, 72, 68, 55, 67, 54, 69, 56, 1, 9, 18,
     & 21, 15, 25, 13, 23, 100, 0, 96, 0, 2, 53, 9, 54, 1, 69, 8, 70, 1,
     & 76, 9, 63, 1, 73, 9, 58, 55, 70, 53, 68, 54, 69 /
c*** channel cross section                                             *
      DATA SPIKP1/ 0.D0, 300.D0, 40.D0, 20.D0, 13.D0,8.5D0,8.D0, 9.5D0,
     & 12.D0,14.D0,15.5D0,20.D0,17.D0,13.D0,10.D0,9.D0,8.5D0,8.D0,7.8D0,
     & 7.3D0, 6.7D0, 9*0.D0,.23D0,.35D0,.7D0,.52D0,.4D0,.3D0,.2D0,.15D0,
     & .13D0, .11D0, .09D0, .07D0, 0.D0, .033D0,.8D0,1.35D0,1.35D0,.5D0,
     & 15*0.D0, 3*0.D0,.00D0,0.80D0,2.2D0,3.6D0,4.6D0,4.7D0,3.5D0,2.4D0,
     &1.8D0,1.4D0,.75D0,.47D0,.25D0,.13D0,.08D0,6*0.D0,0.D0,1.2D0,3.3D0,
     & 5.4D0,6.9D0,7.3D0,5.3D0,3.6D0,2.7D0,2.2D0,1.1D0,.73D0,.4D0,.22D0,
     & .12D0,9*0.D0,.0D0,0.D0,2.0D0,4.4D0,6.8D0,9.9D0,7.9D0,6.0D0,3.8D0,
     &2.5D0,2.D0,1.4D0,1.D0,.6D0,.35D0,10*0.D0,.25D0,.55D0,.75D0,1.25D0,
     & 1.9D0,2.D0,1.8D0,1.5D0,1.25D0,1.D0,.8D0,6*0.D0,4*0.D0,.4D0,.85D0,
     & 1.1D0, 1.85D0, 2.8D0, 3.D0,2.7D0,2.2D0,1.85D0,1.5D0,1.2D0,6*0.D0,
     & 6*0.D0, .5D0, 1.2D0, 1.7D0, 3.4D0, 5.2D0, 6.4D0, 6.1D0, 5.6D0,
     & 5.2D0, 6*0.D0, 2*0.D0, .0D0, 1.D0, 3.3D0, 5.2D0, 4.45D0, 3.6D0,
     & 2.75D0, 1.9D0, 1.65D0, 1.3D0, .95D0, .6D0, .45D0, 6*0.D0, 3*0.D0,
     & .0D0, .45D0, 1.4D0, 1.5D0, 1.1D0, .85D0, .5D0, .3D0, .2D0, .15D0,
     & 8*0.D0, 5*0.D0, .0D0, .0D0, .6D0, .8D0, .95D0, .8D0, .7D0, .6D0,
     & .5D0, .4D0, 6*0.D0, 5*0.D0, .0D0, .00D0, .85D0, 1.2D0, 1.4D0,
     & 1.2D0, 1.05D0, .9D0, .7D0, .55D0, 6*0.D0, 5*0.D0, .0D0, .00D0,
     & 1.D0, 1.5D0, 3.5D0, 4.15D0, 3.7D0, 2.7D0, 2.3D0, 1.75D0, 6*0.D0,
     & 10*0.D0, .5D0, 2.0D0, 3.3D0, 5.4D0, 7.D0 /
c*** pi+ n data                                                        *
      DATA SPIKPU/   0.D0, 25.D0, 13.D0,  11.D0, 10.5D0, 14.D0,  20.D0,
     & 20.D0, 16.D0, 14.D0, 19.D0, 28.D0, 17.5D0, 13.5D0, 12.D0, 10.5D0,
     & 10.D0, 10.D0, 9.5D0,  9.D0, 8.D0, 7.5D0, 7.D0, 6.5D0, 6.D0, 0.D0,
     & 48.D0, 19.D0, 15.D0, 11.5D0, 10.D0, 8.D0, 6.5D0,   5.5D0,  4.8D0,
     & 4.2D0, 7.5D0, 3.4D0,  2.5D0, 2.5D0, 2.1D0, 1.4D0,   1.D0,   .8D0,
     &  .6D0, .46D0,  .3D0, .2D0, .15D0, .13D0, 11*0.D0,  .95D0,  .65D0,
     & .48D0, .35D0,  .2D0, .18D0, .17D0, .16D0,  .15D0,   .1D0,  .09D0,
     & .065D0, .05D0, .04D0, 12*0.D0, .2D0, .25D0, .25D0,  .2D0,   .1D0,
     & .08D0, .06D0, .045D0,   .03D0, .02D0, .01D0,      .005D0, .003D0,
     & 12*0.D0, .3D0, .24D0,   .18D0, .15D0, .13D0,  .12D0, .11D0, .1D0,
     & .09D0,  .08D0, .05D0,   .04D0, .03D0,  0.D0, 0.16D0, .7D0, 1.3D0,
     & 3.1D0,  4.5D0,  2.D0, 18*0.D0, 3*.0D0,  0.D0, 0.D0, 4.0D0, 11.D0,
     & 11.4D0, 10.3D0, 7.5D0, 6.8D0, 4.75D0, 2.5D0,  1.5D0, .9D0, .55D0,
     &  .35D0, 13*0.D0, .1D0, .34D0, .5D0, .8D0, 1.1D0,   2.25D0, 3.3D0,
     & 2.3D0, 1.6D0, .95D0, .45D0, .28D0, .15D0, 10*0.D0, 2*0.D0, .17D0,
     & .64D0,  1.D0, 1.5D0, 2.1D0, 4.25D0, 6.2D0,  4.4D0,   3.D0, 1.8D0,
     &  .9D0, .53D0, .28D0,      10*0.D0, 2*0.D0,  .25D0,  .82D0,
     & 1.3D0, 1.9D0, 2.8D0, 5.5D0 , 8.D0,  5.7D0, 3.9D0, 2.35D0, 1.15D0,
     & .69D0, .37D0, 10*0.D0,     7*0.D0,   .0D0, .34D0,  1.5D0, 3.47D0,
     & 5.87D0, 6.23D0, 4.27D0, 2.6D0, 1.D0, .6D0,  .3D0,  .15D0, 6*0.D0/
c
      DATA SPIKPV/ 7*0.D0, .00D0, .16D0, .75D0, 1.73D0, 2.93D0, 3.12D0,
     & 2.13D0, 1.3D0, .5D0, .3D0, .15D0, .08D0, 6*0.D0, 10*0.D0, .2D0,
     & .6D0, .92D0, 2.4D0, 4.9D0, 6.25D0, 5.25D0, 3.5D0, 2.15D0, 1.4D0,
     & 1.D0, .7D0, 13*0.D0, .13D0, .4D0, .62D0, 1.6D0, 3.27D0, 4.17D0,
     & 3.5D0, 2.33D0, 1.43D0, .93D0, .66D0, .47D0, 13*0.D0, .07D0, .2D0,
     & .31D0, .8D0, 1.63D0, 2.08D0, 1.75D0, 1.17D0, .72D0, .47D0, .34D0,
     & .23D0, 17*0.D0, .33D0, 1.D0, 1.8D0, 2.67D0, 5.33D0, 6.D0, 5.53D0,
     & 5.D0, 17*0.D0, .17D0, .5D0, .9D0, 1.83D0, 2.67D0, 3.0D0, 2.77D0,
     & 2.5D0, 3*0.D0, 3*0.D0, 1.D0, 3.3D0, 2.8D0, 2.5D0, 2.3D0, 1.8D0,
     & 1.5D0, 1.1D0, .8D0, .7D0, .55D0, .3D0, 10*0.D0, 9*0.D0, .1D0,
     & .4D0, 1.D0, 1.4D0, 2.2D0, 2.5D0, 2.2D0, 1.65D0, 1.35D0, 1.1D0,
     & .8D0, .6D0, .4D0, 12*0.D0, .15D0, .6D0, 1.5D0, 2.1D0, 3.3D0,
     & 3.8D0, 3.3D0, 2.45D0, 2.05D0, 1.65D0, 1.2D0, .9D0, .6D0, 3*0.D0,
     & 9*0.D0, .10D0, .2D0, .5D0, .7D0, 1.3D0, 1.55D0, 1.9D0, 1.8D0,
     & 1.55D0, 1.35D0, 1.15D0, .95D0, .7D0, 13*0.D0, .2D0, .5D0, .7D0,
     & 1.3D0, 1.55D0, 1.9D0, 1.8D0, 1.55D0, 1.35D0, 1.15D0, .95D0, .7D0,
     & 17*0.D0, .2D0, .5D0, .85D0, 2.D0, 2.15D0, 2.05D0, 1.75D0, 1.D0,
     & 17*0.D0, .13D0, .33D0, .57D0, 1.33D0, 1.43D0, 1.36D0, 1.17D0,
     & .67D0, 17*0.D0, .07D0, .17D0, .28D0, .67D0, .72D0, .69D0, .58D0,
     & .33D0,17*0.D0,.4D0, .7D0, 1.D0, 1.6D0, 1.8D0, 2.3D0,1.9D0,1.7D0 /
c*** pi- p data                                                        *
      DATA SPIKPW/ 0.D0, 25.D0, 13.D0, 11.D0, 10.5D0, 14.D0, 2*20.D0,
     & 16.D0, 14.D0, 19.D0, 28.D0, 17.5D0, 13.5D0, 12.D0, 10.5D0,
     & 2*10.D0, 9.5D0, 9.D0, 8.D0, 7.5D0, 7.D0, 6.5D0, 6.D0, 0.D0,
     & 48.D0, 19.D0, 15.D0, 11.5D0, 10.D0, 8.D0, 6.5D0, 5.5D0, 4.8D0,
     & 4.2D0, 7.5D0, 3.4D0, 2*2.5D0, 2.1D0, 1.4D0, 1.D0, .8D0, .6D0,
     & .46D0, .3D0, .2D0, .15D0, .13D0, 11*0.D0, .95D0, .65D0, .48D0,
     & .35D0, .2D0, .18D0, .17D0, .16D0, .15D0, .1D0, .09D0, .065D0,
     & .05D0, .04D0, 12*0.D0, .2D0, 2*.25D0, .2D0, .1D0, .08D0, .06D0,
     & .045D0, .03D0, .02D0, .01D0, .005D0, .003D0, 12*0.D0, .3D0,
     & .24D0, .18D0, .15D0, .13D0, .12D0, .11D0, .1D0, .09D0, .08D0,
     & .05D0, .04D0, .03D0, 0.D0, 0.16D0, .7D0, 1.3D0, 3.1D0, 4.5D0,
     & 2.D0, 23*0.D0, 4.0D0, 11.D0, 11.4D0, 10.3D0, 7.5D0, 6.8D0,
     & 4.75D0, 2.5D0, 1.5D0, .9D0, .55D0, .35D0, 13*0.D0, .1D0, .34D0,
     & .5D0, .8D0, 1.1D0, 2.25D0, 3.3D0, 2.3D0, 1.6D0, .95D0, .45D0,
     & .28D0, .15D0, 12*0.D0, .17D0, .64D0, 1.D0, 1.5D0, 2.1D0, 4.25D0,
     & 6.2D0, 4.4D0, 3.D0, 1.8D0, .9D0, .53D0, .28D0, 12*0.D0, .25D0,
     & .82D0, 1.3D0, 1.9D0, 2.8D0, 5.5D0, 8.D0, 5.7D0, 3.9D0, 2.35D0,
     & 1.15D0, .69D0, .37D0, 18*0.D0, .34D0, 1.5D0, 3.47D0, 5.87D0,
     & 6.23D0, 4.27D0, 2.6D0, 1.D0, .6D0, .3D0, .15D0, 6*0.D0/
c
      DATA SPIKPX/ 8*0.D0, .16D0, .75D0, 1.73D0, 2.93D0, 3.12D0,
     & 2.13D0, 1.3D0, .5D0, .3D0, .15D0, .08D0, 16*0.D0, .2D0, .6D0,
     & .92D0, 2.4D0, 4.9D0, 6.25D0, 5.25D0, 3.5D0, 2.15D0, 1.4D0, 1.D0,
     & .7D0, 13*0.D0, .13D0, .4D0, .62D0, 1.6D0, 3.27D0, 4.17D0, 3.5D0,
     & 2.33D0, 1.43D0, .93D0, .66D0, .47D0, 13*0.D0, .07D0, .2D0, .31D0,
     & .8D0, 1.63D0, 2.08D0, 1.75D0, 1.17D0, .72D0, .47D0, .34D0, .23D0,
     & 17*0.D0, .33D0, 1.D0, 1.8D0, 2.67D0, 5.33D0, 6.D0, 5.53D0, 5.D0,
     & 17*0.D0, .17D0, .5D0, .9D0, 1.83D0, 2.67D0, 3.0D0, 2.77D0, 2.5D0,
     & 6*0.D0, 1.D0, 3.3D0, 2.8D0, 2.5D0, 2.3D0, 1.8D0, 1.5D0, 1.1D0,
     & .8D0, .7D0, .55D0, .3D0, 19*0.D0, .1D0, .4D0, 1.D0, 1.4D0, 2.2D0,
     & 2.5D0, 2.2D0, 1.65D0, 1.35D0, 1.1D0, .8D0, .6D0, .4D0, 12*0.D0,
     & .15D0, .6D0, 1.5D0, 2.1D0, 3.3D0, 3.8D0, 3.3D0, 2.45D0, 2.05D0,
     & 1.65D0, 1.2D0, .9D0, .6D0, 12*0.D0, .10D0, .2D0, .5D0, .7D0,
     & 1.3D0, 1.55D0, 1.9D0, 1.8D0, 1.55D0, 1.35D0, 1.15D0, .95D0, .7D0,
     & 13*0.D0, .2D0, .5D0, .7D0, 1.3D0, 1.55D0, 1.9D0, 1.8D0, 1.55D0,
     & 1.35D0, 1.15D0, .95D0, .7D0, 17*0.D0, .2D0, .5D0, .85D0, 2.D0,
     & 2.15D0, 2.05D0, 1.75D0, 1.D0, 17*0.D0, .13D0, .33D0, .57D0,
     & 1.33D0, 1.43D0, 1.36D0, 1.17D0, .67D0, 17*0.D0, .07D0, .17D0,
     & .28D0, .67D0, .72D0, .69D0, .58D0, .33D0, 17*0.D0, .4D0, .7D0,
     & 1.D0, 1.6D0, 1.8D0, 2.3D0, 1.9D0, 1.7D0 /
c*** pi- n data                                                        *
      DATA SPIKP4 / 0.D0, 300.D0, 40.D0, 20.D0, 13.D0, 8.5D0, 8.D0,
     & 9.5D0, 12.D0, 14.D0, 15.5D0, 20.D0, 17.D0, 13.D0, 10.D0, 9.D0,
     & 8.5D0, 8.D0, 7.8D0, 7.3D0, 6.7D0, 9*0.D0, .23D0, .35D0, .7D0,
     & .52D0, .4D0, .3D0, .2D0, .15D0, .13D0, .11D0, .09D0, .07D0, 0.D0,
     & .033D0, .8D0, 2*1.35D0, .5D0, 19*0.D0, 0.8D0, 2.2D0, 3.6D0,
     & 4.6D0, 4.7D0, 3.5D0, 2.4D0, 1.8D0, 1.4D0, .75D0, .47D0, .25D0,
     & .13D0, .08D0, 7*0.D0, 1.2D0, 3.3D0, 5.4D0, 6.9D0, 7.3D0, 5.3D0,
     & 3.6D0, 2.7D0, 2.2D0, 1.1D0, .73D0, .4D0, .22D0, .12D0, 11*0.D0,
     & 2.0D0, 4.4D0, 6.8D0, 9.9D0, 7.9D0, 6.0D0, 3.8D0, 2.5D0, 2.D0,
     & 1.4D0, 1.D0, .6D0, .35D0, 10*0.D0, .25D0, .55D0, .75D0, 1.25D0,
     & 1.9D0, 2.D0, 1.8D0, 1.5D0, 1.25D0, 1.D0, .8D0, 10*0.D0, .4D0,
     & .85D0, 1.1D0, 1.85D0, 2.8D0, 3.D0, 2.7D0, 2.2D0, 1.85D0, 1.5D0,
     & 1.2D0, 12*0.D0, .5D0, 1.2D0, 1.7D0, 3.4D0, 5.2D0, 6.4D0, 6.1D0,
     & 5.6D0, 5.2D0, 9*0.D0, 1.D0, 3.3D0, 5.2D0, 4.45D0, 3.6D0, 2.75D0,
     & 1.9D0, 1.65D0, 1.3D0, .95D0, .6D0, .45D0, 10*0.D0, .45D0, 1.4D0,
     & 1.5D0, 1.1D0, .85D0, .5D0, .3D0, .2D0, .15D0, 15*0.D0, .6D0,
     & .8D0, .95D0, .8D0, .7D0, .6D0, .5D0, .4D0, 13*0.D0, .85D0, 1.2D0,
     & 1.4D0, 1.2D0, 1.05D0, .9D0, .7D0, .55D0, 13*0.D0, 1.D0, 1.5D0,
     & 3.5D0, 4.15D0, 3.7D0, 2.7D0, 2.3D0, 1.75D0, 16*0.D0, .5D0, 2.0D0,
     & 3.3D0, 5.4D0, 7.D0 /
c*** k+  p data                                                        *
      DATA SPIKP5/ 0.D0, 20.D0, 14.D0, 12.D0, 11.5D0, 10.D0, 8.D0,
     & 7.D0, 6.D0, 5.5D0, 5.3D0, 5.D0, 4.5D0, 4.4D0, 3.8D0, 3.D0, 2.8D0,
     & 0.D0, .5D0, 1.15D0, 2.D0, 1.3D0, .8D0, .45D0, 13*0.D0, 0.9D0,
     & 2.5D0, 3.D0, 2.5D0, 2.3D0, 2.D0, 1.7D0, 1.5D0, 1.2D0, .9D0, .6D0,
     & .45D0, .21D0, .2D0, 3*0.D0, .9D0, 2.5D0, 3.D0, 2.5D0, 2.3D0,
     & 2.D0, 1.7D0, 1.5D0, 1.2D0, .9D0, .6D0, .45D0, .21D0, .2D0,
     & 4*0.D0, 1.D0, 2.1D0, 2.6D0, 2.3D0, 2.1D0, 1.8D0, 1.7D0, 1.4D0,
     & 1.2D0, 1.05D0, .9D0, .66D0, .5D0, 7*0.D0, .3D0, 2*1.D0, .9D0,
     & .7D0, .4D0, .3D0, .2D0, 11*0.D0, .1D0, 1.D0, 2.2D0, 3.5D0, 4.2D0,
     & 4.55D0, 4.85D0, 4.9D0, 10*0.D0, .2D0, .7D0, 1.6D0, 2.5D0, 2.2D0,
     & 1.71D0, 1.6D0, 6*0.D0, 1.4D0, 3.8D0, 5.D0, 4.7D0, 4.4D0, 4.D0,
     & 3.5D0, 2.85D0, 2.35D0, 2.01D0, 1.8D0, 12*0.D0, .1D0, .8D0,2.05D0,
     & 3.31D0, 3.5D0, 12*0.D0, .034D0, .2D0, .75D0, 1.04D0, 1.24D0 /
c*** k+  n data                                                        *
      DATA SPIKP6/ 0.D0, 6.D0, 11.D0, 13.D0, 6.D0, 5.D0, 3.D0, 2.2D0,
     & 1.5D0, 1.2D0, 1.D0, .7D0, .6D0, .5D0, .45D0, .35D0, .3D0, 0.D0,
     & 6.D0, 11.D0, 13.D0, 6.D0, 5.D0, 3.D0, 2.2D0, 1.5D0, 1.2D0, 1.D0,
     & .7D0, .6D0, .5D0, .45D0, .35D0, .3D0, 0.D0, .5D0, 1.3D0, 2.8D0,
     & 2.3D0, 1.6D0, .9D0, 13*0.D0, 0.9D0, 2.5D0, 3.D0, 2.5D0, 2.3D0,
     & 2.D0, 1.7D0, 1.5D0,1.2D0,.9D0,.6D0,.45D0,.21D0,.2D0,3*0.D0,0.9D0,
     & 2.5D0, 3.D0, 2.5D0, 2.3D0,2.D0,1.7D0,1.5D0,1.2D0,.9D0,.6D0,.45D0,
     & .21D0, .2D0,4*0.D0,1.D0,2.1D0,2.6D0,2.3D0,2.D0,1.8D0,1.7D0,1.4D0,
     & 1.2D0,1.15D0,.9D0,.66D0,.5D0,4*0.D0,1.D0,2.1D0,2.6D0,2.3D0,2.1D0,
     & 1.8D0,1.7D0,1.4D0,1.2D0, 1.15D0, .9D0, .66D0, .5D0, 7*0.D0, .3D0,
     & 2*1.D0, .9D0, .7D0, .4D0, .35D0, .2D0, 9*0.D0, .3D0, 2*1.D0,.9D0,
     & .7D0, .4D0, .35D0, .2D0, 11*0.D0, .1D0, 1.D0, 2.4D0,3.5D0,4.25D0,
     & 4.55D0, 4.85D0, 4.9D0, 9*0.D0, .1D0, 1.D0, 2.4D0, 3.5D0, 4.25D0,
     & 4.55D0, 4.85D0, 4.9D0, 10*0.D0, .2D0, .7D0, 1.6D0, 2.5D0, 2.2D0,
     & 1.71D0, 1.6D0, 10*0.D0, .2D0, .7D0, 1.6D0, 2.5D0, 2.2D0, 1.71D0,
     & 1.6D0, 6*0.D0, 1.4D0, 3.8D0, 5.D0, 4.7D0,4.4D0,4.D0,3.5D0,2.85D0,
     & 2.35D0, 2.01D0, 1.8D0, 6*0.D0, 1.4D0,3.8D0,5.D0,4.7D0,4.4D0,4.D0,
     & 3.5D0,2.85D0,2.35D0,2.01D0,1.8D0,12*0.D0,.1D0,.8D0,2.05D0,3.31D0,
     & 3.5D0, 12*0.D0, .034D0,.2D0,.75D0,1.04D0,1.24D0 /
c*** k-  p data                                                        *
      DATA SKMPEL/ 0.D0, 35.D0, 22.D0, 25.D0, 17.D0, 9.D0, 9.5D0, 8.D0,
     &     7.D0, 6.5D0, 6.1D0, 5.D0, 4.8D0, 4.6D0, 4.45D0, 4.3D0, 4.2D0,
     &    0.D0, 8.D0, 3.5D0, 8.D0, 3.D0, 1.9D0, 1.7D0, 1.D0, .9D0, .8D0,
     &    .75D0, .5D0, .42D0, .38D0, .34D0, .25D0, .2D0,
     &    0.D0, 3.D0, 3.2D0, 3.5D0, 1.5D0, 1.4D0, 1.1D0, .6D0, .5D0,
     &    .35D0, .28D0, .25D0, .18D0, .12D0, .1D0, .08D0, .04D0,
     &    0.D0, 8.5D0, 2.4D0, 1.7D0, 1.3D0, 1.3D0, 1.1D0, .5D0,
     &    .4D0, .4D0, .35D0, .3D0, .28D0, .2D0, .16D0, .13D0, .11D0,
     &    0.D0, 7.D0, 4.8D0, 1.4D0, 1.9D0, .9D0, .4D0, .2D0, .13D0,
     &    .1D0, .08D0, .06D0, .04D0, .02D0, .015D0, .01D0, .01D0,
     &    0.D0, 5.5D0, 1.D0, .8D0, .75D0, .32D0, .2D0, .1D0, .09D0,
     &    .08D0, .065D0, .05D0, .04D0, .022D0, .017D0, 2*.01D0/
      DATA SPIKP7 / 0.D0, .56D0, 1.46D0, 3.16D0, 2.01D0, 1.28D0, .74D0,
     & 14*0.D0, 1.13D0, 2.61D0, 2.91D0, 2.58D0, 2.35D0, 2.02D0,
     & 1.91D0, 1.57D0, 1.35D0, 1.29D0, 1.01D0, .74D0, .65D0, 4*0.D0,
     & 1.13D0, 2.61D0, 2.91D0, 2.58D0, 2.35D0, 2.02D0, 1.91D0, 1.57D0,
     & 1.35D0, 1.29D0, 1.01D0, .74D0, .65D0,  3*0.D0, 1.0D0, 3.03D0,
     & 3.36D0, 2.8D0, 2.58D0, 2.24D0, 1.91D0, 1.68D0, 1.35D0, 1.01D0,
     & .67D0, .5D0, .24D0, .23D0, 3*0.D0, 1.0D0, 3.03D0, 3.36D0, 2.8D0,
     & 2.58D0, 2.24D0, 1.91D0, 1.68D0, 1.35D0, 1.01D0, .67D0, .5D0,
     & .24D0, .23D0, 7*0.D0, .34D0, 1.12D0, 1.12D0, 1.01D0, .78D0,
     & .45D0, .39D0, .22D0, .07D0, 0.D0, 7*0.D0, .34D0, 1.12D0, 1.12D0,
     & 1.01D0, .78D0, .45D0, .39D0, .22D0, .07D0, 0.D0, 6*0.D0, 1.71D0,
     & 4.26D0, 5.6D0, 5.57D0, 4.93D0, 4.48D0, 3.92D0, 3.19D0, 2.63D0,
     & 2.25D0, 2.D0, 6*0.D0, 1.71D0, 4.26D0, 5.6D0, 5.57D0, 4.93D0,
     & 4.48D0, 3.92D0, 3.19D0, 2.63D0, 2.25D0, 2.D0, 10*0.D0, .22D0,
     & .8D0, .75D0, 1.D0, 1.3D0, 1.5D0, 1.3D0, 10*0.D0, .22D0, .8D0,
     & .75D0, 1.D0, 1.3D0, 1.5D0, 1.3D0, 13*0.D0, .1D0, .3D0, .7D0,1.D0,
     & 13*0.D0, .1D0, .3D0, .7D0, 1.D0, 9*0.D0, .11D0, 1.72D0, 2.69D0,
     & 3.92D0, 4.76D0, 5.10D0, 5.44D0, 5.3D0, 9*0.D0, .11D0, 1.72D0,
     & 2.69D0, 3.92D0, 4.76D0, 5.1D0, 5.44D0, 5.3D0, 5*0.D0,9.2D0,4.7D0,
     & 1.9D0, 10*0.D0, 2.5D0, 15.D0, 21.5D0, 15.3D0, 3.D0, 1.5D0,
     & 10*0.D0/
c**** k- n data                                                        *
      DATA SKMNEL/0.D0, 4.D0, 9.5D0, 20.D0, 13.D0, 9.5D0, 6.D0, 4.4D0,
     &        3.D0, 2.4D0, 2.D0, 1.4D0, 1.2D0, 1.D0, .9D0, .7D0, .6D0,
     &        0.D0, 4.5D0, 6.D0, 5.D0, 2.5D0, 2.D0, 1.7D0, 2.1D0,
     &        1.9D0, .9D0, .5D0, .3D0, .24D0, .2D0, .18D0, .1D0, .09D0,
     &        0.D0, 1.8D0, 2.D0, 1.1D0, .9D0, .5D0, .5D0, .4D0, .4D0,
     &        .2D0, .1D0, .06D0, .05D0, .04D0, .03D0, .02D0, .02D0,
     &        0.D0, 1.5D0, 2.D0, .9D0, 1.1D0, .4D0, .6D0, .7D0, .65D0,
     &       .3D0, .17D0, .1D0, .08D0, .07D0, .06D0, .04D0, .03D0/
      DATA SPIKP8/0.D0, .56D0, 1.29D0, 2.26D0, 1.01D0, .64D0, .37D0,
     &  14*0.D0, 1.13D0, 2.61D0, 2.91D0, 2.58D0, 2.35D0, 2.02D0,
     &  1.91D0, 1.57D0, 1.35D0, 1.29D0, 1.01D0, .74D0, .65D0,
     &  3*0.D0, 1.D0, 3.03D0, 3.36D0, 2.8D0, 2.58D0, 2.24D0,
     &  1.91D0, 1.68D0, 1.35D0, 1.01D0, .67D0, .5D0, .24D0, .23D0,
     &  3*0.D0, 1.D0, 3.03D0, 3.36D0, 2.8D0, 2.58D0, 2.24D0,
     &  1.91D0, 1.68D0, 1.35D0, 1.01D0, .67D0, .5D0, .24D0, .23D0,
     &  7*0.D0, .34D0, 1.12D0, 1.12D0, 1.01D0, .78D0, .45D0,
     &  .39D0, .22D0, .07D0, 0.D0,
     &  6*0.D0, 1.71D0, 4.26D0, 5.6D0, 5.57D0, 4.93D0,
     &  4.48D0, 3.92D0, 3.19D0, 2.63D0, 2.25D0, 2.D0,
     &  10*0.D0, .22D0, .8D0, .75D0, 1.D0, 1.3D0, 1.5D0, 1.3D0,
     &  13*0.D0, .1D0, .3D0, .7D0, 1.D0,
     &  13*0.D0, .1D0, .3D0, .7D0, 1.D0,
     &  9*0.D0, .11D0, 1.72D0, 2.69D0, 3.92D0, 4.76D0,
     &  5.10D0, 5.44D0, 5.3D0,
     &  4*0.D0, 0.00D0, 9.2D0, 4.7D0, 1.9D0, 9*0.D0/
c****  p p data                                                        *
      DATA SPIKP9/ 0.D0, 24.D0, 25.D0, 27.D0, 23.D0, 21.D0, 20.D0,
     &              19.D0, 17.D0, 15.5D0, 14.D0, 13.5D0, 13.D0,
     &              0.D0, 3.6D0, 1.7D0, 10*0.D0,
     &              .0D0, 0.D0, 8.7D0, 17.7D0, 18.8D0, 15.9D0,
     &              11.7D0, 8.D0, 6.D0, 5.3D0, 4.5D0, 3.9D0, 3.5D0,
     &              .0D0, .0D0, 2.8D0, 5.8D0, 6.2D0, 5.1D0, 3.8D0,
     &              2.7D0, 2.1D0, 1.8D0, 1.5D0, 1.3D0, 1.1D0,
     &              5*0.D0, 4.6D0, 10.2D0, 15.1D0,
     &              16.9D0, 16.5D0, 11.D0, 5.5D0, 3.5D0,
     &              10*0.D0, 4.3D0, 7.6D0, 9.D0,
     &              10*0.D0, 1.7D0, 2.6D0, 3.D0,
     &              6*0.D0, .3D0, .6D0, 1.D0, 1.6D0, 1.3D0, .8D0, .6D0,
     &              6*0.D0, .7D0, 1.2D0, 1.8D0, 2.5D0, 1.8D0, 1.3D0,
     &              1.2D0, 10*0.D0, .6D0, 1.4D0, 1.7D0,
     &              10*0.D0, 1.9D0, 4.1D0, 5.2D0/
c****  p n data                                                        *
      DATA SPIKP0/ 0.D0, 24.D0, 25.D0, 27.D0, 23.D0, 21.D0, 20.D0,
     &              19.D0, 17.D0, 15.5D0, 14.D0, 13.5D0, 13.D0,
     &              0.D0, 1.8D0, .2D0,  12*0.D0,
     &              3.2D0, 6.05D0, 9.9D0, 5.1D0,
     &              3.8D0, 2.7D0, 1.9D0, 1.5D0, 1.4D0, 1.3D0, 1.1D0,
     &              2*.0D0, 3.2D0, 6.05D0, 9.9D0, 5.1D0,
     &              3.8D0, 2.7D0, 1.9D0, 1.5D0, 1.4D0, 1.3D0, 1.1D0,
     &              5*0.D0, 4.6D0, 10.2D0, 15.1D0,
     &              16.4D0, 15.2D0, 11.D0, 5.4D0, 3.5D0,
     &              5*0.D0, 4.6D0, 10.2D0, 15.1D0,
     &              16.4D0, 15.2D0, 11.D0, 5.4D0, 3.5D0,
     &              10*0.D0, .7D0, 5.1D0, 8.D0,
     &              10*0.D0, .7D0, 5.1D0, 8.D0,
     &              10*.0D0, .3D0, 2.8D0, 4.7D0,
     &              10*.0D0, .3D0, 2.8D0, 4.7D0,
     &              7*0.D0, 1.2D0, 2.5D0, 3.5D0, 6.D0, 5.3D0, 2.9D0,
     &              7*0.D0, 1.7D0, 3.6D0, 5.4D0, 9.D0, 7.6D0, 4.2D0,
     &              5*0.D0, 7.7D0, 6.1D0, 2.9D0, 5*0.D0/
c   nn - data                                                          *
c                                                                      *
      DATA SPKPV/  0.D0, 24.D0, 25.D0, 27.D0, 23.D0, 21.D0, 20.D0,
     &              19.D0, 17.D0, 15.5D0, 14.D0, 13.5D0, 13.D0,
     &              0.D0, 3.6D0, 1.7D0, 12*0.D0,
     &              8.7D0, 17.7D0, 18.8D0, 15.9D0,
     &              11.7D0, 8.D0, 6.D0, 5.3D0, 4.5D0, 3.9D0, 3.5D0,
     &              .0D0, .0D0, 2.8D0, 5.8D0, 6.2D0, 5.1D0, 3.8D0,
     &              2.7D0, 2.1D0, 1.8D0, 1.5D0, 1.3D0, 1.1D0,
     &              5*0.D0, 4.6D0, 10.2D0, 15.1D0, 16.9D0, 16.5D0,
     &              11.D0, 5.5D0, 3.5D0,
     &              10*0.D0, 4.3D0, 7.6D0, 9.D0,
     &              10*0.D0, 1.7D0, 2.6D0, 3.D0,
     &              6*0.D0, .3D0, .6D0, 1.D0, 1.6D0, 1.3D0, .8D0, .6D0,
     &              6*0.D0, .7D0, 1.2D0, 1.8D0, 2.5D0, 1.8D0, 1.3D0,
     &              1.2D0, 10*0.D0, .6D0, 1.4D0, 1.7D0,
     &              10*0.D0, 1.9D0, 4.1D0, 5.2D0/
c***************   ap - p - data                                       *
      DATA SAPPEL/ 0.D0,  176.D0, 160.D0, 105.D0, 75.D0, 68.D0, 65.D0,
     &  50.D0,  50.D0, 43.D0, 42.D0, 40.5D0, 35.D0, 30.D0, 28.D0,
     &  25.D0,  22.D0, 21.D0, 20.D0, 18.D0, 17.D0,  11*0.D0,
     &  .05D0,  .15D0, .18D0, .2D0, .2D0, .3D0, .4D0, .6D0, .7D0, .85D0,
     &  0.D0,  1.D0, .9D0, .46D0, .3D0, .23D0, .18D0, .16D0, .14D0,
     &  .1D0,  .08D0, .05D0, .02D0, .015D0, 4*.011D0, 3*.005D0,
     &  0.D0,  55.D0, 50.D0, 25.D0, 15.D0, 15.D0, 14.D0, 12.D0,
     &  10.D0,  7.D0, 6.D0, 4.D0, 3.3D0, 2.8D0, 2.4D0, 2.D0, 1.8D0,
     &  1.55D0,  1.3D0, .95D0, .75D0,
     &  0.D0,  3.3D0, 3.D0, 1.5D0, 1.D0, .7D0, .4D0, .35D0, .4D0,
     &  .25D0,  .18D0, .08D0, .04D0, .03D0, .023D0, .016D0, .014D0,
     & .01D0,  .008D0, .006D0, .005D0/
      DATA SPIKPE/0.D0, 215.D0, 193.D0, 170.D0, 148.D0, 113.D0, 97.D0,
     & 84.D0, 78.D0, 68.D0, 64.D0, 61.D0, 46.D0, 36.D0, 31.3D0, 28.5D0,
     & 25.7D0, 22.6D0, 21.4D0, 20.7D0, 19.9D0,
     & 9*0.D0, 2.D0, 2.5D0, .2D0, 19*0.D0, .3D0, 1.4D0, 2.2D0, 1.2D0,
     & 1.1D0, 1.D0, .8D0, .6D0, .5D0, .4D0, .3D0, 10*0.D0, .3D0, 1.4D0,
     & 2.2D0, 1.2D0, 1.1D0, 1.D0, .8D0, .6D0, .5D0, .4D0, .3D0, 10*0.D0,
     & .3D0, 1.4D0, 2.2D0, 1.2D0, 1.1D0, 1.D0, .8D0, .6D0, .5D0, .4D0,
     & .3D0, 10*0.D0, .3D0, 1.4D0, 2.2D0, 1.2D0, 1.1D0, 1.D0, .8D0,
     & .6D0, .5D0, .4D0, .3D0, 9*0.D0, .6D0, 2.5D0, 5.D0, 5.2D0, 5.1D0,
     & 5.4D0, 5.8D0, 2.8D0, 2.1D0, 1.8D0, 1.6D0, 1.2D0, 13*0.D0, 1.3D0,
     & 1.5D0, 2.D0, 2.5D0, 2.5D0, 2.3D0, 1.8D0, 1.4D0, 13*0.D0, 1.3D0,
     & 1.5D0, 2.D0, 2.5D0, 2.5D0, 2.3D0, 1.8D0, 1.4D0, 13*0.D0, 1.3D0,
     & 1.5D0, 2.D0, 2.5D0, 2.5D0, 2.3D0, 1.8D0, 1.4D0, 13*0.D0, 1.3D0,
     & 1.5D0, 2.D0, 2.5D0, 2.5D0, 2.3D0, 1.8D0, 1.4D0, 14*0.D0, .2D0,
     & .5D0, 1.1D0, 1.6D0, 1.4D0, 1.1D0, .9D0, 14*0.D0, .2D0, .5D0,
     & 1.1D0, 1.6D0, 1.4D0, 1.1D0, .9D0, 14*0.D0, .2D0, .5D0, 1.1D0,
     & 1.6D0, 1.4D0, 1.1D0, .9D0, 14*0.D0, .2D0, .5D0, 1.1D0, 1.6D0,
     & 1.4D0, 1.1D0, .9D0, 17*0.D0, .3D0, 1.6D0, 2.6D0, 3.6D0, 17*0.D0,
     & .3D0, 1.6D0, 2.6D0, 3.6D0, 17*0.D0, .3D0, 1.6D0, 2.6D0,
     & 3.6D0, 17*0.D0, .3D0, 1.6D0, 2.6D0, 3.6D0 /
c***************   ap - n - data                                       *
      DATA SAPNEL/
     & 0.D0,  176.D0, 160.D0, 105.D0, 75.D0,  68.D0, 65.D0,
     & 50.D0, 50.D0,  43.D0,  42.D0,  40.5D0, 35.D0, 30.D0,  28.D0,
     & 25.D0, 22.D0,  21.D0,  20.D0,  18.D0,  17.D0, 11*0.D0,
     & .05D0, .15D0, .18D0,  .2D0,    .2D0,  .3D0,  .4D0,   .6D0,  .7D0,
     & .85D0,  0.D0,  1.D0,  .9D0,    .46D0, .3D0,  .23D0, .18D0, .16D0,
     & .14D0,  .1D0, .08D0, .05D0,    .02D0, .015D0, 4*.011D0, 3*.005D0,
     & 0.D0,  3.3D0,  3.D0, 1.5D0,     1.D0, .7D0,  .4D0,  .35D0, .4D0,
     & .25D0, .18D0, .08D0, .04D0,    .03D0, .023D0, .016D0, .014D0,
     & .01D0, .008D0, .006D0, .005D0 /
       DATA SPIKPZ/ 0.D0, 215.D0, 193.D0, 170.D0, 148.D0, 113.D0, 97.D0,
     &  84.D0, 78.D0, 68.D0, 64.D0, 61.D0, 46.D0, 36.D0, 31.3D0, 28.5D0,
     & 25.7D0, 22.6D0, 21.4D0, 20.7D0, 19.9D0, 9*0.D0, 2.4D0, .2D0,
     & 20*0.D0, 1.8D0, 2.8D0, 3.6D0, 2.3D0, 1.8D0, 1.5D0, 1.3D0, 1.D0,
     & .7D0, .5D0, .3D0, 10*0.D0, 1.8D0, 2.8D0, 3.6D0, 2.3D0, 1.8D0,
     & 1.5D0, 1.3D0, 1.D0, .7D0, .5D0, .3D0, 10*0.D0, 1.8D0, 2.8D0,
     & 3.6D0, 2.3D0, 1.8D0, 1.5D0, 1.3D0, 1.D0, .7D0, .5D0, .3D0,
     & 10*0.D0, 1.8D0, 2.8D0, 3.6D0, 2.3D0, 1.8D0, 1.5D0, 1.3D0, 1.D0,
     & .7D0, .5D0, .3D0, 13*0.D0, 5.2D0, 8.7D0, 11.4D0, 14.D0, 11.9D0,
     & 7.6D0, 6.D0, 5.D0, 13*0.D0, 5.2D0, 8.7D0, 11.4D0, 14.D0, 11.9D0,
     & 7.6D0, 6.D0, 5.D0, 18*0.D0, 1.D0, 4.9D0, 8.5D0, 18*0.D0, 1.D0,
     & 4.9D0, 8.5D0,  15*0.D0, 1.9D0, 2.3D0, 4.D0, 6.5D0, 5.2D0, 3.4D0,
     & 15*0.D0, 1.9D0, 2.3D0, 4.D0, 6.5D0, 5.2D0, 3.4D0, 15*0.D0, 1.9D0,
     & 2.3D0, 4.D0, 6.5D0, 5.2D0, 3.4D0 /
c                                                                      *
c                                                                      *
c***************   an - p - data                                       *
c                                                                      *
      DATA SANPEL/
     & 0.D0,  176.D0, 160.D0, 105.D0, 75.D0, 68.D0, 65.D0, 50.D0,
     & 50.D0, 43.D0,  42.D0,  40.5D0, 35.D0, 30.D0, 28.D0,
     & 25.D0, 22.D0,  21.D0,  20.D0,  18.D0, 17.D0, 11*0.D0, .05D0,
     & .15D0, .18D0,   .2D0,   .2D0,   .3D0,  .4D0, .6D0,   .7D0, .85D0,
     & 0.D0,   1.D0,   .9D0,  .46D0,  .3D0,  .23D0, .18D0, .16D0, .14D0,
     & .1D0,  .08D0,  .05D0,  .02D0, .015D0, 4*.011D0, 3*.005D0,
     & 0.D0,  3.3D0,  3.D0, 1.5D0, 1.D0, .7D0, .4D0, .35D0, .4D0, .25D0,
     & .18D0, .08D0, .04D0, .03D0, .023D0, .016D0, .014D0,
     & .01D0, .008D0, .006D0, .005D0 /
      DATA SPIKPF/ 0.D0, 215.D0, 193.D0, 170.D0, 148.D0, 113.D0, 97.D0,
     & 84.D0, 78.D0, 68.D0, 64.D0, 61.D0, 46.D0, 36.D0, 31.3D0, 28.5D0,
     & 25.7D0, 22.6D0, 21.4D0, 20.7D0, 19.9D0, 9*0.D0, 2.4D0, .2D0,
     & 20*0.D0, 1.8D0, 2.8D0, 3.6D0, 2.3D0, 1.8D0, 1.5D0, 1.3D0, 1.D0,
     & .7D0, .5D0, .3D0, 10*0.D0, 1.8D0, 2.8D0, 3.6D0, 2.3D0, 1.8D0,
     & 1.5D0, 1.3D0, 1.D0, .7D0, .5D0, .3D0, 10*0.D0, 1.8D0, 2.8D0,
     & 3.6D0, 2.3D0, 1.8D0, 1.5D0, 1.3D0, 1.D0, .7D0, .5D0, .3D0,
     & 10*0.D0, 1.8D0, 2.8D0, 3.6D0, 2.3D0, 1.8D0, 1.5D0, 1.3D0, 1.D0,
     & .7D0, .5D0, .3D0, 13*0.D0, 5.2D0, 8.7D0, 11.4D0, 14.D0, 11.9D0,
     & 7.6D0, 6.D0, 5.D0, 13*0.D0, 5.2D0, 8.7D0, 11.4D0, 14.D0, 11.9D0,
     & 7.6D0, 6.D0, 5.D0, 18*0.D0, 1.D0, 4.9D0, 8.5D0, 18*0.D0, 1.D0,
     & 4.9D0, 8.5D0, 15*0.D0, 1.9D0, 2.3D0, 4.D0, 6.5D0, 5.2D0, 3.4D0,
     & 15*0.D0, 1.9D0, 2.3D0, 4.D0, 6.5D0, 5.2D0, 3.4D0, 15*0.D0, 1.9D0,
     & 2.3D0, 4.D0, 6.5D0, 5.2D0, 3.4D0 /
c***  ko - n - data                                                    *
      DATA SPKP15/0.D0, 20.D0, 14.D0, 12.D0, 11.5D0, 10.D0, 8.D0, 7.D0,
     &      6.D0, 5.5D0, 5.3D0, 5.D0, 4.5D0, 4.4D0, 3.8D0, 3.D0, 2.8D0,
     &      0.D0, .5D0, 1.15D0, 2.D0, 1.3D0, .8D0, .45D0, 10*0.D0,
     &    3*0.D0, 0.9D0, 2.5D0, 3.D0, 2.5D0, 2.3D0, 2.D0, 1.7D0,
     &     1.5D0, 1.2D0, .9D0, .6D0, .45D0, .21D0, .2D0,
     &    3*0.D0, 0.9D0, 2.5D0, 3.D0, 2.5D0, 2.3D0, 2.D0, 1.7D0,
     &     1.5D0, 1.2D0, .9D0, .6D0, .45D0, .21D0, .2D0,
     &    4*0.D0, 1.D0, 2.1D0, 2.6D0, 2.3D0, 2.1D0, 1.8D0, 1.7D0,
     &     1.4D0, 1.2D0, 1.05D0, .9D0, .66D0,  .5D0,
     &    7*0.D0, .3D0, 1.D0, 1.D0, .9D0, .7D0, .4D0, .30D0, .2D0,
     &   11*0.D0, .1D0, 1.D0, 2.2D0, 3.5D0, 4.20D0, 4.55D0,
     &    4.85D0, 4.9D0,
     &   10*0.D0, .2D0, .7D0, 1.6D0, 2.5D0, 2.2D0, 1.71D0, 1.6D0,
     &    6*0.D0, 1.4D0, 3.8D0, 5.D0, 4.7D0, 4.4D0, 4.D0, 3.5D0,
     &    2.85D0, 2.35D0, 2.01D0, 1.8D0,
     &   12*0.D0, .1D0, .8D0, 2.05D0, 3.31D0, 3.5D0,
     &   12*0.D0, .034D0, .20D0, .75D0, 1.04D0, 1.24D0  /
c*** ako - p - data                                                    *
      DATA SPKP16/ 0.D0, 4.D0, 9.5D0, 20.D0, 13.D0, 9.5D0, 6.D0, 4.4D0,
     & 3.D0, 2.4D0, 2.D0, 1.4D0, 1.2D0, 1.D0, .9D0, .7D0, .6D0, 0.D0,
     & 4.5D0, 6.D0, 5.D0, 2.5D0, 2.D0, 1.7D0, 2.1D0, 1.9D0, .9D0, .5D0,
     & .3D0, .24D0, .2D0, .18D0, .1D0, .09D0, 0.D0, 1.8D0, 2.D0, 1.1D0,
     & .9D0, .5D0, .5D0, .4D0, .4D0, .2D0, .1D0, .06D0, .05D0, .04D0,
     & .03D0, .02D0, .02D0, 0.D0, 1.5D0, 2.D0, .9D0, 1.1D0, .4D0, .6D0,
     & .7D0, .65D0, .3D0, .17D0, .1D0, .08D0, .07D0, .06D0, .04D0,
     & .03D0, 0.D0, .56D0, 1.29D0, 2.26D0, 1.01D0, .64D0, .37D0,
     & 14*0.D0, 1.13D0, 2.61D0, 2.91D0, 2.58D0, 2.35D0, 2.02D0, 1.91D0,
     & 1.57D0, 1.35D0, 1.29D0, 1.01D0, .74D0, .65D0, 3*0.D0, 1.0D0,
     & 3.03D0, 3.36D0, 2.8D0, 2.58D0, 2.24D0, 1.91D0, 1.68D0, 1.35D0,
     & 1.01D0, .67D0, .5D0, .24D0, .23D0, 3*0.D0, 1.0D0, 3.03D0, 3.36D0,
     & 2.8D0, 2.58D0, 2.24D0, 1.91D0, 1.68D0, 1.35D0, 1.01D0, .67D0,
     & .5D0, .24D0, .23D0, 7*0.D0, .34D0, 1.12D0, 1.12D0, 1.01D0, .78D0,
     & .45D0, .39D0, .22D0, .07D0, 7*0.D0, 1.71D0, 4.26D0, 5.6D0,5.57D0,
     & 4.93D0, 4.48D0, 3.92D0, 3.19D0, 2.63D0, 2.25D0, 2.D0, 10*0.D0,
     & .22D0, .8D0, .75D0, 1.D0, 1.3D0, 1.5D0, 1.3D0, 13*0.D0, .1D0,
     & .3D0, .7D0, 1.D0, 13*0.D0, .1D0, .3D0, .7D0, 1.D0, 9*0.D0, .11D0,
     & 1.72D0, 2.69D0, 3.92D0, 4.76D0, 5.10D0, 5.44D0, 5.3D0, 5*0.D0,
     & 9.2D0, 4.7D0, 1.9D0, 9*0.D0, .0D0,2.5D0,15.D0,
     & 21.5D0, 15.3D0, 3.D0, 1.5D0, 10*0.D0 /
      DATA NURELN/9, 12, 5*0, 10, 14, 3*0, 1, 3, 5, 7, 6*0, 2, 6, 16,
     & 5*0, 10, 13, 5*0, 11, 12, 3*0, 2, 4, 6, 8, 6*0, 3, 15, 7, 5*0 /
c=                                               end*block.blkdt3      *
      END
c
c===qel_pol============================================================*
c
CDECK  ID>, DT_QEL_POL
      SUBROUTINE DT_QEL_POL(ENU,LTYP,P21,P22,P23,P24,P25)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      CALL DT_MASS_INI
      CALL DT_GEN_QEL(ENU,LTYP,P21,P22,P23,P24,P25)

      RETURN
      END

C==================================================================
C   Generation of  a Quasi-Elastic neutrino scattering
C==================================================================
c
c===gen_qel============================================================*
c
CDECK  ID>, DT_GEN_QEL
      SUBROUTINE DT_GEN_QEL(ENU,LTYP,P21,P22,P23,P24,P25)

C...Generate a quasi-elastic   neutrino/antineutrino
C.  Interaction on a nuclear target
C.  INPUT  : LTYP = neutrino type (1,...,6)
C.           ENU (GeV) = neutrino energy
C----------------------------------------------------

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE


      PARAMETER (MAXLND=4000)
      COMMON/PYJETS/N,NPAD,K(MAXLND,5),P(MAXLND,5),V(MAXLND,5)


c nuclear potential
      LOGICAL LFERMI
      COMMON /DTNPOT/ PFERMP(2),PFERMN(2),FERMOD,
     &                EBINDP(2),EBINDN(2),EPOT(2,210),
     &                ETACOU(2),ICOUL,LFERMI

c steering flags for qel neutrino scattering modules
      COMMON /QNEUTO/ DSIGSU,DSIGMC,NDSIG,NEUTYP,NEUDEC

c*sr - removed (not needed)
C     COMMON /CBAD/  LBAD, NBAD
C     COMMON /CNUC/ XMN,XMN2,PFERMI,EFERMI,EBIND,EB2,C0
c*

      DIMENSION PI(3),PO(3)
CJR+
      DATA ININU/0/
CJR-
C     REAL*8 DBETA(3)
C     REAL*8 MN(2), ML0(6), ML, ML2, MI, MI2, MF, MF2
      DIMENSION DBETA(3),DBETB(3),AMN(2),AML0(6)
      DATA AMN  /0.93827231D0, 0.93956563D0/
      DATA AML0 /2*0.51100D-03,2*0.105659D0, 2*1.777D0/
      DATA INIPRI/0/

C     DATA PFERMI/0.22D0/
CGB+...Binding Energy
      DATA EBIND/0.008D0/
CGB-...

      ININU=ININU+1
      IF(ININU.EQ.1)NDSIG=0
      LBAD = 0
      ENU0=ENU
c      write(*,*) enu0
C...Lepton mass
      AML = AML0(LTYP)       !  MASSA LEPTONI
      AML2 = AML**2          !  MASSA LEPTONI **2
C...Particle labels (LUND)
      N = 5
      K(1,1) = 21
      K(2,1) = 21
      K(3,1) = 21
      K(3,3) = 1
      K(4,1) = 1
      K(4,3) = 1
      K(5,1) = 1
      K(5,3) = 2
      K0 = (LTYP-1)/2          !  2
      K1 = LTYP/2              !  2
      KA = 12 + 2*K0           !  16
      IS = -1 + 2*LTYP - 4*K1  !  -1 +10 -8 = 1
      K(1,2) = IS*KA
      K(4,2) = IS*(KA-1)
      K(3,2) = IS*24
      LNU = 2 - LTYP + 2*K1    !  2 - 5 + 2 = - 1
      IF (LNU .EQ. 2)  THEN
        K(2,2) = 2212
        K(5,2) = 2112
        AMI = AMN(1)
        AMF = AMN(2)
CJR+
	PFERMI=PFERMN(2)
CJR-
      ELSE
        K(2,2) = 2112
        K(5,2) = 2212
        AMI = AMN(2)
        AMF = AMN(1)
CJR+
	PFERMI=PFERMP(2)
CJR-
      ENDIF
      AMI2 = AMI**2
      AMF2 = AMF**2

      DO IGB=1,5
        P(3,IGB) = 0.
        P(4,IGB) = 0.
        P(5,IGB) = 0.
      END DO

      NTRY = 0
CGB+...
      EFMAX  = SQRT(PFERMI**2 + AMI2) -AMI             ! MAX. FERMI ENERGY
      ENWELL = EFMAX + EBIND ! DEPTH OF NUCLEAR POTENTIAL WELL
CGB-...

  100 CONTINUE

C...4-momentum initial lepton
      P(1,5) = 0.     ! MASSA
      P(1,4) = ENU0    ! ENERGIA
      P(1,1) = 0.     ! PX
      P(1,2) = 0.     ! PY
      P(1,3) = ENU0    ! PZ

C     PF = PFERMI*PYR(0)**(1./3.)
c       write(23,*) PYR(0)
c      write(*,*) 'Pfermi=',PF
c      PF = 0.
      NTRY=NTRY+1
C     IF(ntry.GT.2) WRITE(*,*) ntry,enu0,k2
      IF (NTRY .GT. 500)  THEN
        LBAD = 1
        WRITE (   6,1001)  NBAD, ENU
        RETURN
      ENDIF
C     CT = -1. + 2.*PYR(0)
c      CT = -1.
C     ST =  SQRT(1.-CT*CT)
C     F = 2.*3.1415926*PYR(0)
c      F = 0.

C     P(2,4) = SQRT(PF*PF + MI2) - EBIND  ! energia
C     P(2,1) = PF*ST*COS(F)               ! px
C     P(2,2) = PF*ST*SIN(F)               ! py
C     P(2,3) = PF*CT                      ! pz
C     P(2,5) = SQRT(P(2,4)**2-PF*PF)      ! massa
       P(2,1) = P21
       P(2,2) = P22
       P(2,3) = P23
       P(2,4) = P24
       P(2,5) = P25
      BETA1=-P(2,1)/P(2,4)
      BETA2=-P(2,2)/P(2,4)
      BETA3=-P(2,3)/P(2,4)
      N=2
C      WRITE(6,*)' before transforming into target rest frame'

      CALL PYROBO(0,0,0.0D0,0.0D0,BETA1,BETA2,BETA3)

C      print*,' nucl. rest fram ( fermi incl.) prima della rotazione'
      N=5

      PHI11=ATAN(P(1,2)/P(1,3))
      PI(1)=P(1,1)
      PI(2)=P(1,2)
      PI(3)=P(1,3)

      CALL DT_TESTROT(PI,PO,PHI11,1)
      DO LL=1,3
        IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
      END DO
c        WRITE(*,*) po
      P(1,1)=PO(1)
      P(1,2)=PO(2)
      P(1,3)=PO(3)
      PHI12=ATAN(P(1,1)/P(1,3))

      PI(1)=P(1,1)
      PI(2)=P(1,2)
      PI(3)=P(1,3)
      CALL DT_TESTROT(PI,PO,PHI12,2)
      DO LL=1,3
        IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
      END DO
c        WRITE(*,*) po
      P(1,1)=PO(1)
      P(1,2)=PO(2)
      P(1,3)=PO(3)

      ENU=P(1,4)

C...Kinematical limits in Q**2
c      S = P(2,5)**2 + 2.*ENU*(P(2,4)-P(2,3)) !            ????
      S = P(2,5)**2 + 2.*ENU*P(2,5)
      SQS = SQRT(S)                          ! E CENTRO MASSA
      IF (SQS .LT. (AML + AMF + 3.E-03)) GOTO 100
      ELF = (S-AMF2+AML2)/(2.*SQS)           ! ENERGIA LEPTONE FINALE P
      PSTAR = (S-P(2,5)**2)/(2.*SQS)       ! P* NEUTRINO NEL C.M.
      PLF = SQRT(ELF**2-AML2)               ! 3-MOMENTO LEPTONE FINALE
      Q2MIN = -AML2 + 2.*PSTAR*(ELF-PLF)    ! + O -
      Q2MAX = -AML2 + 2.*PSTAR*(ELF+PLF)    ! ACCORDING CON COS(THETA)
      IF (Q2MIN .LT. 0.)   Q2MIN = 0.      ! ??? NON FISICO

C...Generate Q**2
      DSIGMAX = DT_DSQEL_Q2 (LTYP,ENU, Q2MIN)
  200 Q2 = Q2MIN + (Q2MAX-Q2MIN)*PYR(0)
      DSIG = DT_DSQEL_Q2 (LTYP,ENU, Q2)
      IF (DSIG .LT.  DSIGMAX*PYR(0)) GOTO 200
      CALL DT_QGAUS(Q2MIN,Q2MAX,DSIGEV,ENU,LTYP)
      NDSIG=NDSIG+1
C     WRITE(6,*)' Q2,Q2min,Q2MAX,DSIGEV',
C    &Q2,Q2min,Q2MAX,DSIGEV


C...c.m. frame. Neutrino along z axis
      DETOT = (P(1,4)) + (P(2,4)) ! E TOTALE
      DBETA(1) = ((P(1,1)) + (P(2,1)))/DETOT ! PX1+PX2/ETOT = BETA_X
      DBETA(2) = ((P(1,2)) + (P(2,2)))/DETOT !
      DBETA(3) = ((P(1,3)) + (P(2,3)))/DETOT !
c      WRITE(*,*)
c      WRITE(*,*)
C      WRITE(*,*) 'Input values laboratory frame'
      N=2

      CALL PYROBO(0,0,0.0D0,0.0D0,-DBETA(1),-DBETA(2),-DBETA(3))

      N=5
c      STHETA = ULANGL(P(1,3),P(1,1))
c      write(*,*) 'stheta' ,stheta
c      stheta=0.
c      CALL PYROBO (0,0,-STHETA,0.,0.D0,0.D0,0.D0)
c      WRITE(*,*)
c      WRITE(*,*)
C      WRITE(*,*) 'Output values cm frame'
C...Kinematic in c.m. frame
      CTSTAR = ELF/PLF - (Q2 + AML2)/(2.*PSTAR*PLF) ! COS(THETA) CM
      STSTAR = SQRT(1.-CTSTAR**2)
      PHI = 6.28319*PYR(0) ! RANDOM PHI TRA 0 E 2*PI
      P(4,5) = AML                  ! MASSA LEPTONE
      P(4,4) = ELF                 ! E LEPTONE
      P(4,3) = PLF*CTSTAR          ! PX
      P(4,1) = PLF*STSTAR*COS(PHI) ! PY
      P(4,2) = PLF*STSTAR*SIN(PHI) ! PZ


      P(5,5) = AMF                  ! BARIONE
      P(5,4) = (S+AMF2-AML2)/(2.*SQS)! E BARIONE
      P(5,3) = -P(4,3)             ! PX
      P(5,1) = -P(4,1)             ! PY
      P(5,2) = -P(4,2)             ! PZ


      P(3,5) = -Q2
      P(3,1) = P(1,1)-P(4,1)
      P(3,2) = P(1,2)-P(4,2)
      P(3,3) = P(1,3)-P(4,3)
      P(3,4) = P(1,4)-P(4,4)

C...Transform back to laboratory  frame
C      WRITE(*,*) 'before going back to nucl rest frame'
c      CALL PYROBO (0,0,STHETA,0.,0.D0,0.D0,0.D0)
      N=5

      CALL PYROBO(0,0,0.0D0,0.0D0,DBETA(1),DBETA(2),DBETA(3))

C      WRITE(*,*) 'Now back in nucl rest frame'
      IF(LTYP.GE.3) CALL DT_PREPOLA(Q2,LTYP,ENU)

c********************************************

      DO KW=1,5
        PI(1)=P(KW,1)
        PI(2)=P(KW,2)
        PI(3)=P(KW,3)
        CALL DT_TESTROT(PI,PO,PHI12,3)
        DO LL=1,3
          IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
        END DO
        P(KW,1)=PO(1)
        P(KW,2)=PO(2)
        P(KW,3)=PO(3)
      END DO
c********************************************

      DO KW=1,5
        PI(1)=P(KW,1)
        PI(2)=P(KW,2)
        PI(3)=P(KW,3)
        CALL DT_TESTROT(PI,PO,PHI11,4)
        DO LL=1,3
          IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
        END DO
        P(KW,1)=PO(1)
        P(KW,2)=PO(2)
        P(KW,3)=PO(3)
      END DO

c********************************************

C      WRITE(*,*) 'Now back in lab frame'

      CALL PYROBO(1,5,0.0D0,0.0D0,-BETA1,-BETA2,-BETA3)

CGB+...
C...test (on final momentum of nucleon) if Fermi-blocking
C...is operating
      ENUCL = SQRT(P(5,1)**2 + P(5,2)**2 + P(5,3)**2 + P(5,5)**2)
     &  - P(5,5)
      IF (ENUCL.LT. EFMAX) THEN
	IF(INIPRI.LT.10)THEN
	  INIPRI=INIPRI+1
C         WRITE(6,*)' qel: Pauli ENUCL.LT.EFMAX ', ENUCL,EFMAX
C...the interaction is not possible due to Pauli-Blocking and
C...it must be resampled
	ENDIF
        GOTO 100
      ELSE IF (ENUCL.LT.ENWELL.AND.ENUCL.GE.EFMAX) THEN
        IF(INIPRI.LT.10)THEN
          INIPRI=INIPRI+1
C     WRITE(6,*)' qel: inside ENUCL.LT.ENWELL ', ENUCL,ENWELL
        ENDIF
C                      Reject (J:R) here all these events
C                      are otherwise rejected in dpmjet
        GOTO 100
C...the interaction is possible, but the nucleon remains inside
C...the nucleus. The nucleus is therefore left excited.
C...We treat this case as a nucleon with 0 kinetic energy.
C       P(5,5) = AMF
C       P(5,4) = AMF
C       P(5,1) = 0.
C       P(5,2) = 0.
C       P(5,3) = 0.
      ELSE IF (ENUCL.GE.ENWELL) THEN
C     WRITE(6,*)' qel ENUCL.GE.ENWELL ',ENUCL,ENWELL
C...the interaction is possible, the nucleon can exit the nucleus
C...but the nuclear well depth must be subtracted. The nucleus could be
C...left in an excited state.
        PSTART = SQRT(P(5,1)**2 + P(5,2)**2 + P(5,3)**2)
C       P(5,4) = ENUCL-ENWELL + AMF
        PNUCL = SQRT(P(5,4)**2-AMF**2)
C...The 3-momentum is scaled assuming that the direction remains
C...unaffected
        P(5,1) = P(5,1) * PNUCL/PSTART
        P(5,2) = P(5,2) * PNUCL/PSTART
        P(5,3) = P(5,3) * PNUCL/PSTART
C     WRITE(6,*)' qel new P(5,4) ',P(5,4)
      ENDIF
CGB-...
      DSIGSU=DSIGSU+DSIGEV

	 GA=P(4,4)/P(4,5)
	 BGX=P(4,1)/P(4,5)
	 BGY=P(4,2)/P(4,5)
	 BGZ=P(4,3)/P(4,5)
c
         DBETB(1)=BGX/GA
         DBETB(2)=BGY/GA
         DBETB(3)=BGZ/GA
	 IF(NEUDEC.EQ.1.OR.NEUDEC.EQ.2) THEN

            CALL PYROBO(6,8,0.0D0,0.0D0,DBETB(1),DBETB(2),DBETB(3))

	 ENDIF
c
C      PRINT*,' FINE   EVENTO '
      ENU=ENU0
      RETURN

 1001 FORMAT(2X, 'DT_GEN_QEL   : EVENT REJECTED ', I5,  G10.3)
      END


C====================================================================
C.  Masses
C====================================================================

c
c===mass_ini===========================================================*
c
CDECK  ID>, DT_MASS_INI
      SUBROUTINE DT_MASS_INI
C...Initialize  the kinematics for the quasi-elastic cross section

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c particle masses used in qel neutrino scattering modules
      COMMON /QNMASS/ EML(6),EMLSQ(6),EMN1(6),EMN2(6),ETQE(6),
     &                EMN1SQ(6),EMN2SQ(6),EMPROT,EMNEUT,EMN,
     &                EMPROTSQ,EMNEUTSQ,EMNSQ


      EML(1) = 0.51100D-03   ! E-
      EML(2) = EML(1)        ! E+
      EML(3) = 0.105659D0      ! MU-
      EML(4) = EML(3)        ! MU+
      EML(5) = 1.7777D0        ! TAU-
      EML(6) = EML(5)        ! TAU+
      EMPROT = 0.93827231D0    ! P
      EMNEUT = 0.93956563D0    ! N
      EMPROTSQ = EMPROT**2
      EMNEUTSQ = EMNEUT**2
      EMN = (EMPROT + EMNEUT)/2.
      EMNSQ = EMN**2
      DO J=1,3
        J0 = 2*(J-1)
        EMN1(J0+1) = EMNEUT
        EMN1(J0+2) = EMPROT
        EMN2(J0+1) = EMPROT
        EMN2(J0+2) = EMNEUT
      ENDDO
      DO J=1,6
        EMLSQ(J) = EML(J)**2
        ETQE(J)  = ((EMN2(J)+ EML(J))**2-EMN1(J)**2)/(2.*EMN1(J))
      ENDDO
      RETURN
      END
c
c===dsqel_q2===========================================================*
c
CDECK  ID>, DT_DSQEL_Q2
      DOUBLE PRECISION FUNCTION DT_DSQEL_Q2 (JTYP,ENU, Q2)

C...differential cross section for  Quasi-Elastic scattering
C.       nu + N -> l + N'
C.  From Llewellin Smith  Phys.Rep.  3C, 261, (1971).
C.
C.  INPUT :  JTYP = 1,...,6    nu_e, ...., nubar_tau
C.           ENU (GeV) =  Neutrino energy
C.           Q2  (GeV**2) =  (Transfer momentum)**2
C.
C.  OUTPUT : DSQEL_Q2  = differential  cross section :
C.                       dsigma/dq**2  (10**-38 cm+2/GeV**2)
C------------------------------------------------------------------

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c particle masses used in qel neutrino scattering modules
      COMMON /QNMASS/ EML(6),EMLSQ(6),EMN1(6),EMN2(6),ETQE(6),
     &                EMN1SQ(6),EMN2SQ(6),EMPROT,EMNEUT,EMN,
     &                EMPROTSQ,EMNEUTSQ,EMNSQ

c*sr - removed (not needed)
C     COMMON /CAXIAL/ FA0, AXIAL2
c*

      DIMENSION SS(6)
      DATA C0 /0.17590D0 /  ! G_F**2 COS(THETA_C)**2 M**2 /(8 PI) 10**-38 CM+2
      DATA SS /1.D0, -1.D0, 1.D0, -1.D0, 1.D0, -1.D0/
      DATA AXIAL2 /1.03D0/  ! TO BE CHECKED

      FA0=-1.253D0
      CSI = 3.71D0                   !  ???
      GVE = 1.D0/ (1.D0 + Q2/0.84D0**2)**2   ! G_E(Q**2)
      GVM = (1.D0+CSI)*GVE           ! G_M (Q**2)
      X = Q2/(EMN*EMN)     ! EMN=MASSA BARIONE
      XA = X/4.D0
      FV1 = 1.D0/(1.D0+XA)*(GVE+XA*GVM)
      FV2 = 1.D0/(1.D0+XA)*(GVM-GVE)
      FA = FA0/(1.D0 + Q2/AXIAL2)**2
      FFA = FA*FA
      FFV1 = FV1*FV1
      FFV2 = FV2*FV2
      RM = EMLSQ(JTYP)/(EMN*EMN)            ! EMLSQ(JTYP)
      A1 = (4.D0+X)*FFA - (4.D0-X)*FFV1 + X*FFV2*(1.D0-XA)+4*X*FV1*FV2
      A2 = -RM * ((FV1 + FV2)**2 +  FFA)
      AA = (XA+0.25D0*RM)*(A1 + A2)
      BB = -X*FA*(FV1 + FV2)
      CC = 0.25D0*(FFA + FFV1 + XA*FFV2)
      SU = (4.D0*ENU*EMN - Q2 - EMLSQ(JTYP))/(EMN*EMN)
      DT_DSQEL_Q2 = C0*(AA + SS(JTYP)*BB*SU + CC*SU*SU) / (ENU*ENU)  !
      IF(DT_DSQEL_Q2 .LT. 0.D0) DT_DSQEL_Q2 = 0.D0

      RETURN
      END
c
c===prepola============================================================*
c
CDECK  ID>, DT_PREPOLA
      SUBROUTINE DT_PREPOLA(Q2,JTYP,ENU)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
c
c By G. Battistoni and E. Scapparone (sept. 1997)
c According to:
c     Albright & Jarlskog, Nucl Phys B84 (1975) 467
c
c

      PARAMETER (MAXLND=4000)
      COMMON/PYJETS/N,NPAD,K(MAXLND,5),P(MAXLND,5),V(MAXLND,5)


      COMMON /QNPOL/ POLARX(4),PMODUL

c particle masses used in qel neutrino scattering modules
      COMMON /QNMASS/ EML(6),EMLSQ(6),EMN1(6),EMN2(6),ETQE(6),
     &                EMN1SQ(6),EMN2SQ(6),EMPROT,EMNEUT,EMN,
     &                EMPROTSQ,EMNEUTSQ,EMNSQ

c steering flags for qel neutrino scattering modules
      COMMON /QNEUTO/ DSIGSU,DSIGMC,NDSIG,NEUTYP,NEUDEC

c*sr - removed (not needed)
C     COMMON /CAXIAL/ FA0, AXIAL2
C     COMMON /TAUTAU/Q(4,5),ETL,PXL,PYL,PZL,
C    &        ETB,PXB,PYB,PZB,ETN,PXN,PYN,PZN
c*
      REAL*8 POL(4,4),BB2(3)
      DIMENSION SS(6)
C     DATA C0 /0.17590D0 /  ! G_F**2 cos(theta_c)**2 M**2 /(8 pi) 10**-38 cm+2
      DATA SS /1.D0, -1.D0, 1.D0, -1.D0, 1.D0, -1.D0/
c*sr uncommented since common block CAXIAL is now commented
      DATA AXIAL2 /1.03D0/  ! TO BE CHECKED
c*

      RML=P(4,5)
      RMM=0.93960D+00
      FM2 = RMM**2
      MPI = 0.135D+00
      OLDQ2=Q2
      FA0=-1.253D+00
      CSI = 3.71D+00                      !
      GVE = 1.D0/ (1.D0 + Q2/(0.84D+00)**2)**2   ! G_E(Q**2)
      GVM = (1.D0+CSI)*GVE           ! G_M (Q**2)
      X = Q2/(EMN*EMN)     ! EMN=MASSA BARIONE
      XA = X/4.D0
      FV1 = 1.D0/(1.D0+XA)*(GVE+XA*GVM)
      FV2 = 1.D0/(1.D0+XA)*(GVM-GVE)
      FA = FA0/(1.D0 + Q2/AXIAL2**2)**2
      FFA = FA*FA
      FFV1 = FV1*FV1
      FFV2 = FV2*FV2
      FP=2.D0*FA*RMM/(MPI**2 + Q2)
      RM = EMLSQ(JTYP)/(EMN*EMN)            ! EMLSQ(JTYP)
      A1 = (4.D0+X)*FFA-(4.D0-X)*FFV1+X*FFV2*(1.D0-XA)+4.D0*X*FV1*FV2
      A2 = -RM * ((FV1 + FV2)**2 +  FFA)
      AA = (XA+0.25D+00*RM)*(A1 + A2)
      BB = -X*FA*(FV1 + FV2)
      CC = 0.25D+00*(FFA + FFV1 + XA*FFV2)
      SU = (4.D+00*ENU*EMN - Q2 - EMLSQ(JTYP))/(EMN*EMN)

      OMEGA1=FFA+XA*(FFA+(FV1+FV2)**2   )  ! ARTICOLO DI LL...-SMITH
      OMEGA2=4.D+00*CC
      OMEGA3=2.D+00*FA*(FV1+FV2)
      OMEGA4P=(-(FV1+FV2)**2-(FA+2*FP)**2+(4.0D+00+
     1     (Q2/FM2))*FP**2)
      OMEGA5=OMEGA2
      OMEGA4=(OMEGA4P-OMEGA2+2*OMEGA5)/4.D+00
      WW1=2.D+00*OMEGA1*EMN**2
      WW2=2.D+00*OMEGA2*EMN**2
      WW3=2.D+00*OMEGA3*EMN**2
      WW4=2.D+00*OMEGA4*EMN**2
      WW5=2.D+00*OMEGA5*EMN**2

      DO I=1,3
        BB2(I)=-P(4,I)/P(4,4)
      END DO
c      WRITE(*,*)
c      WRITE(*,*)
c      WRITE(*,*) 'Prepola: ready to transform to lepton rest frame'
      N=5

      CALL PYROBO(0,0,0.0D0,0.0D0,BB2(1),BB2(2),BB2(3))

c NOW PARTICLES ARE IN THE SCATTERED LEPTON  REST FRAME
c      WRITE(*,*)
c      WRITE(*,*)
c      WRITE(*,*) 'Prepola: now in lepton rest frame'
      EE=ENU
      QM2=Q2+RML**2
      U=Q2/(2.*RMM)
      FRAC=QM2*WW1 + (2.D+00*EE*(EE-U) - 0.5D+00*QM2)*WW2 - SS(JTYP)*
     +     (0.5D+00/(RMM**2))*(2.D+00*RMM*EE*Q2 - U*QM2)*WW3 +
     +     ((RML**2)/(2.D+00*FM2))*(QM2*WW4-2.D+00*RMM*EE*WW5) !<=FM2 INV DI RMM!!

      FACTK=2.D+00*WW1 -WW2 -SS(JTYP)*(EE/RMM)*WW3 +((EE-U)/RMM)*WW5
     +     - ((RML**2)/FM2)*WW4                        !<=FM2 INV DI RMM!!

      FACTP=2.D+00*EE/RMM*WW2 - (QM2/(2.D+00*RMM**2))*(SS(JTYP)*WW3+WW5)

      DO I=1,3
        POL(4,I)=RML*SS(JTYP)*(FACTK*P(1,I)+FACTP*P(2,I))/FRAC
        POLARX(I)=POL(4,I)
      END DO


      PMODUL=0.D0
      DO I=1,3
        PMODUL=PMODUL+POL(4,I)**2
      END DO

      IF(JTYP.GT.4.AND.NEUDEC.GT.0) THEN
         IF(NEUDEC.EQ.1) THEN
            CALL DT_LEPDCYP(EML(JTYP),EML(JTYP-2),POLARX(3),
     +        ETL,PXL,PYL,PZL,
     +        ETB,PXB,PYB,PZB,ETN,PXN,PYN,PZN)
c
c     Tau has decayed in muon
c
         ENDIF
         IF(NEUDEC.EQ.2) THEN
            CALL DT_LEPDCYP(EML(JTYP),EML(JTYP-4),POLARX(3),
     +        ETL,PXL,PYL,PZL,
     +        ETB,PXB,PYB,PZB,ETN,PXN,PYN,PZN)
c
c     Tau has decayed in electron
c
         ENDIF
         K(4,1)=15
         K(4,4) = 6
         K(4,5) = 8
         N=N+3
c
c     fill common for muon(electron)
c
         P(6,1)=PXL
         P(6,2)=PYL
         P(6,3)=PZL
         P(6,4)=ETL
         K(6,1)=1
         IF(JTYP.EQ.5) THEN
            IF(NEUDEC.EQ.1) THEN
               P(6,5)=EML(JTYP-2)
               K(6,2)=13
            ELSEIF(NEUDEC.EQ.2) THEN
               P(6,5)=EML(JTYP-4)
               K(6,2)=11
            ENDIF
         ELSEIF(JTYP.EQ.6) THEN
            IF(NEUDEC.EQ.1) THEN
               K(6,2)=-13
            ELSEIF(NEUDEC.EQ.2) THEN
               K(6,2)=-11
            ENDIF
         END IF
         K(6,3)=4
         K(6,4)=0
         K(6,5)=0
c
c     fill common for tau_(anti)neutrino
c
         P(7,1)=PXB
         P(7,2)=PYB
         P(7,3)=PZB
         P(7,4)=ETB
         P(7,5)=0.
         K(7,1)=1
         IF(JTYP.EQ.5) THEN
            K(7,2)=16
         ELSEIF(JTYP.EQ.6) THEN
            K(7,2)=-16
         END IF
         K(7,3)=4
         K(7,4)=0
         K(7,5)=0
c
c     Fill common for muon(electron)_(anti)neutrino
c
         P(8,1)=PXN
         P(8,2)=PYN
         P(8,3)=PZN
         P(8,4)=ETN
         P(8,5)=0.
         K(8,1)=1
         IF(JTYP.EQ.5) THEN
            IF(NEUDEC.EQ.1) THEN
               K(8,2)=-14
            ELSEIF(NEUDEC.EQ.2) THEN
               K(8,2)=-12
            ENDIF
         ELSEIF(JTYP.EQ.6) THEN
            IF(NEUDEC.EQ.1) THEN
               K(8,2)=14
            ELSEIF(NEUDEC.EQ.2) THEN
               K(8,2)=12
            ENDIF
         END IF
         K(8,3)=4
         K(8,4)=0
         K(8,5)=0
      ENDIF
c      WRITE(*,*)
c      WRITE(*,*)

c      IF(PMODUL.GE.1.D+00) THEN
c        WRITE(*,*) 'Pol',(POLARX(I),I=1,3)
c        write(*,*) pmodul
c        DO I=1,3
c          POL(4,I)=POL(4,I)/PMODUL
c          POLARX(I)=POL(4,I)
c        END DO
c        PMODUL=0.
c        DO I=1,3
c          PMODUL=PMODUL+POL(4,I)**2
c        END DO
c        WRITE(*,*) 'Pol',(POLARX(I),I=1,3)
c
c      ENDIF

c      WRITE(*,*) 'PMODUL = ',PMODUL

c      WRITE(*,*)
c      WRITE(*,*)
c      WRITE(*,*) 'prepola: Now back to nucl rest frame'

      CALL PYROBO(1,5,0.0D0,0.0D0,-BB2(1),-BB2(2),-BB2(3))

      XDC = V(4,1)+V(4,5)*P(4,1)/P(4,5)
      YDC = V(4,2)+V(4,5)*P(4,2)/P(4,5)
      ZDC = V(4,3)+V(4,5)*P(4,3)/P(4,5)
      DO NDC =6,8
         V(NDC,1) = XDC
         V(NDC,2) = YDC
         V(NDC,3) = ZDC
      END DO

      RETURN
      END
c
c===testrot============================================================*
c
CDECK  ID>, DT_TESTROT
      SUBROUTINE DT_TESTROT(PI,PO,PHI,MODE)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION ROT(3,3),PI(3),PO(3)

      IF (MODE.EQ.1) THEN
         ROT(1,1) = 1.D0
         ROT(1,2) = 0.D0
         ROT(1,3) = 0.D0
         ROT(2,1) = 0.D0
         ROT(2,2) = COS(PHI)
         ROT(2,3) = -SIN(PHI)
         ROT(3,1) = 0.D0
         ROT(3,2) = SIN(PHI)
         ROT(3,3) = COS(PHI)
      ELSEIF (MODE.EQ.2) THEN
         ROT(1,1) = 0.D0
         ROT(1,2) = 1.D0
         ROT(1,3) = 0.D0
         ROT(2,1) = COS(PHI)
         ROT(2,2) = 0.D0
         ROT(2,3) = -SIN(PHI)
         ROT(3,1) = SIN(PHI)
         ROT(3,2) = 0.D0
         ROT(3,3) = COS(PHI)
      ELSEIF (MODE.EQ.3) THEN
         ROT(1,1) = 0.D0
         ROT(2,1) = 1.D0
         ROT(3,1) = 0.D0
         ROT(1,2) = COS(PHI)
         ROT(2,2) = 0.D0
         ROT(3,2) = -SIN(PHI)
         ROT(1,3) = SIN(PHI)
         ROT(2,3) = 0.D0
         ROT(3,3) = COS(PHI)
      ELSEIF (MODE.EQ.4) THEN
         ROT(1,1) = 1.D0
         ROT(2,1) = 0.D0
         ROT(3,1) = 0.D0
         ROT(1,2) = 0.D0
         ROT(2,2) = COS(PHI)
         ROT(3,2) = -SIN(PHI)
         ROT(1,3) = 0.D0
         ROT(2,3) = SIN(PHI)
         ROT(3,3) = COS(PHI)
      ELSE
         STOP ' TESTROT: MODE NOT SUPPORTED!'
      ENDIF
      DO 1 J=1,3
        PO(J) = ROT(J,1)*PI(1)+ROT(J,2)*PI(2)+ROT(J,3)*PI(3)
    1 CONTINUE

      RETURN
      END
c
c===lepdcyp============================================================*
c
CDECK  ID>, DT_LEPDCYP
      SUBROUTINE DT_LEPDCYP(AMA,AML,POL,ETL,PXL,PYL,PZL,
     &                      ETB,PXB,PYB,PZB,ETN,PXN,PYN,PZN)
C
C-----------------------------------------------------------------
C
C   Author   :- G. Battistoni         10-NOV-1995
C
C=================================================================
C
C   Purpose   : performs decay of polarized lepton in
C               its rest frame: a => b + l + anti-nu
C               (Example: mu- => nu-mu + e- + anti-nu-e)
C               Polarization is assumed along Z-axis
C               WARNING:
C               1) b AND anti-nu ARE ASSUMED TO BE NEUTRINOS
C                  OF NEGLIGIBLE MASS
C               2) RADIATIVE CORRECTIONS ARE NOT CONSIDERED
C                  IN THIS VERSION
C
C   Method    : modifies phase space distribution obtained
C               by routine EXPLOD using a rejection against the
C               matrix element for unpolarized lepton decay
C
C   Inputs    : Mass of a :  AMA
C               Mass of l :  AML
C               Polar. of a: POL
C               (Example: fully polar. mu- decay: AMA=AMMUON, AML=AMELCT,
C                                                 POL = -1)
C
C   Outputs   : kinematic variables in the rest frame of decaying lepton
C               ETL,PXL,PYL,PZL 4-moment of l
C               ETB,PXB,PYB,PZB 4-moment of b
C               ETN,PXN,PYN,PZN 4-moment of anti-nu
C
C============================================================
C +
C Declarations.
C -
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

      PARAMETER ( KALGNM = 2 )
      PARAMETER ( ANGLGB = 5.0D-16 )
      PARAMETER ( ANGLSQ = 2.5D-31 )
      PARAMETER ( AXCSSV = 0.2D+16 )
      PARAMETER ( ANDRFL = 1.0D-38 )
      PARAMETER ( AVRFLW = 1.0D+38 )
      PARAMETER ( AINFNT = 1.0D+30 )
      PARAMETER ( AZRZRZ = 1.0D-30 )
      PARAMETER ( EINFNT = +69.07755278982137 D+00 )
      PARAMETER ( EZRZRZ = -69.07755278982137 D+00 )
      PARAMETER ( ONEMNS = 0.999999999999999  D+00 )
      PARAMETER ( ONEPLS = 1.000000000000001  D+00 )
      PARAMETER ( CSNNRM = 2.0D-15 )
      PARAMETER ( DMXTRN = 1.0D+08 )
      PARAMETER ( ZERZER = 0.D+00 )
      PARAMETER ( ONEONE = 1.D+00 )
      PARAMETER ( TWOTWO = 2.D+00 )
      PARAMETER ( THRTHR = 3.D+00 )
      PARAMETER ( FOUFOU = 4.D+00 )
      PARAMETER ( FIVFIV = 5.D+00 )
      PARAMETER ( SIXSIX = 6.D+00 )
      PARAMETER ( SEVSEV = 7.D+00 )
      PARAMETER ( EIGEIG = 8.D+00 )
      PARAMETER ( ANINEN = 9.D+00 )
      PARAMETER ( TENTEN = 10.D+00 )
      PARAMETER ( HLFHLF = 0.5D+00 )
      PARAMETER ( ONETHI = ONEONE / THRTHR )
      PARAMETER ( TWOTHI = TWOTWO / THRTHR )
      PARAMETER ( PIPIPI = 3.1415926535897932270 D+00 )
      PARAMETER ( ENEPER = 2.7182818284590452354 D+00 )
      PARAMETER ( SQRENT = 1.6487212707001281468 D+00 )
      PARAMETER ( CLIGHT = 2.99792458         D+10 )
      PARAMETER ( AVOGAD = 6.0221367          D+23 )
      PARAMETER ( AMELGR = 9.1093897          D-28 )
      PARAMETER ( PLCKBR = 1.05457266         D-27 )
      PARAMETER ( ELCCGS = 4.8032068          D-10 )
      PARAMETER ( ELCMKS = 1.60217733         D-19 )
      PARAMETER ( AMUGRM = 1.6605402          D-24 )
      PARAMETER ( AMMUMU = 0.113428913        D+00 )
      PARAMETER ( ALPFSC = 7.2973530791728595 D-03 )
      PARAMETER ( FSCTO2 = 5.3251361962113614 D-05 )
      PARAMETER ( FSCTO3 = 3.8859399018437826 D-07 )
      PARAMETER ( FSCTO4 = 2.8357075508200407 D-09 )
      PARAMETER ( PLABRC = 0.197327053        D+00 )
      PARAMETER ( AMELCT = 0.51099906         D-03 )
      PARAMETER ( AMUGEV = 0.93149432         D+00 )
      PARAMETER ( AMMUON = 0.105658389        D+00 )
      PARAMETER ( RCLSEL = 2.8179409183694872 D-13 )
      PARAMETER ( GEVMEV = 1.0                D+03 )
      PARAMETER ( EMVGEV = 1.0                D-03 )
      PARAMETER ( ALGVMV = 6.90775527898214   D+00 )
      PARAMETER ( RADDEG = 180.D+00 / PIPIPI )
      PARAMETER ( DEGRAD = PIPIPI / 180.D+00 )
C +
C    variables for EXPLOD
C -
      PARAMETER ( KPMX = 10 )
      DIMENSION AMEXPL (KPMX), PXEXPL (KPMX), PYEXPL (KPMX),
     &          PZEXPL (KPMX), ETEXPL (KPMX)
C +
C      test variables
C -
c*sr - removed (not needed)
C     COMMON /GBATNU/ ELERAT,NTRY
c*
C +
C     Initializes test variables
C -
      NTRY = 0
      ELERAT = 0.D+00
C +
C     Maximum value for matrix element
C -
      ELEMAX = ( AMA**2 + AML**2 )**2 / AMA**2 * ( AMA**2 - AML**2 +
     &  SQRT( AMA**4 + AML**4 - 3.D+00 * AMA**2 * AML**2 ) )
C + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
C     Inputs for EXPLOD
C part. no. 1 is l       (e- in mu- decay)
C part. no. 2 is b       (nu-mu in mu- decay)
C part. no. 3 is anti-nu (anti-nu-e in mu- decay)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      NPEXPL = 3
      ETOTEX = AMA
      AMEXPL(1) = AML
      AMEXPL(2) = 0.D+00
      AMEXPL(3) = 0.D+00
C +
C     phase space distribution
C -
  100 CONTINUE
      NTRY = NTRY + 1
      CALL DT_EXPLOD ( NPEXPL, AMEXPL, ETOTEX, ETEXPL, PXEXPL,
     &                 PYEXPL, PZEXPL )
C +
C  Calculates matrix element:
C  64*GF**2{[P(a)-ama*S(a)]*P(anti-nu)}{P(l)*P(b)}
C  Here CTH is the cosine of the angle between anti-nu and Z axis
C -
      CTH = PZEXPL(3) / SQRT ( PXEXPL(3)**2 + PYEXPL(3)**2 +
     &  PZEXPL(3)**2 )
      PROD1 = ETEXPL(3) * AMA * (1.D+00 - POL * CTH)
      PROD2 = ETEXPL(1) * ETEXPL(2) - PXEXPL(1)*PXEXPL(2) -
     &     PYEXPL(1)*PYEXPL(2) - PZEXPL(1)*PZEXPL(2)
      ELEMAT = 16.D+00 * PROD1 * PROD2
      IF(ELEMAT.GT.ELEMAX) THEN
        WRITE(ErrorOut,*) 'Problems in LEPDCY',ELEMAX,ELEMAT
        STOP
      ENDIF
C +
C     Here performs the rejection
C -
      TEST = DT_RNDM(ETOTEX) * ELEMAX
      IF ( TEST .GT. ELEMAT ) GO TO 100
C +
C     final assignment of variables
C -
      ELERAT = ELEMAT/ELEMAX
      ETL = ETEXPL(1)
      PXL = PXEXPL(1)
      PYL = PYEXPL(1)
      PZL = PZEXPL(1)
      ETB = ETEXPL(2)
      PXB = PXEXPL(2)
      PYB = PYEXPL(2)
      PZB = PZEXPL(2)
      ETN = ETEXPL(3)
      PXN = PXEXPL(3)
      PYN = PYEXPL(3)
      PZN = PZEXPL(3)
  999 RETURN
      END

C==================================================================
C.  Generation of  Delta resonance events
C==================================================================
c
c===gen_delta==========================================================*
c
CDECK  ID>, DT_GEN_DELTA
      SUBROUTINE DT_GEN_DELTA(ENU,LLEP,LTARG,JINT,P21,P22,P23,P24,P25)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

C...Generate a Delta-production neutrino/antineutrino
C.  CC-interaction on a nucleon
C
C.  INPUT  ENU (GeV) = Neutrino Energy
C.         LLEP = neutrino type
C.         LTARG = nucleon target type 1=p, 2=n.
C.         JINT = 1:CC, 2::NC
C.
C.  OUTPUT PPL(4)  4-monentum of final lepton
C----------------------------------------------------

      PARAMETER (MAXLND=4000)
      COMMON/PYJETS/N,NPAD,K(MAXLND,5),P(MAXLND,5),V(MAXLND,5)


c*sr - removed (not needed)
C     COMMON /CBAD/  LBAD, NBAD
c*

      DIMENSION PI(3),PO(3)
C     REAL*4 AMD0, AMD, AMN(2), AML0(6), AML, AML2, AMDMIN
      DIMENSION AML0(6),AMN(2)
      DATA AMD0 /1.231/, GAMD /0.12/, DELD/0.169/, AMDMIN/1.084/
      DATA AMN  /0.93827231, 0.93956563/
      DATA AML0 /2*0.51100E-03,2*0.105659, 2*1.777/

c     WRITE(6,*)' GEN_DEL',ENU,LLEP,LTARG,JINT,P21,P22,P23,P24,P25
      LBAD = 0
C...Final lepton mass
      IF (JINT.EQ.1) THEN
	AML = AML0(LLEP)
      ELSE
	AML = 0.
      ENDIF
      AML2 = AML**2

C...Particle labels (LUND)
      N = 5
      K(1,1) = 21
      K(2,1) = 21
      K(3,1) = 21
      K(4,1) = 1
      K(3,3) = 1
      K(4,3) = 1
      IF (LTARG .EQ. 1)  THEN
	 K(2,2) = 2212
      ELSE
	 K(2,2) = 2112
      ENDIF
      K0 = (LLEP-1)/2
      K1 = LLEP/2
      KA = 12 + 2*K0
      IS = -1 + 2*LLEP - 4*K1
      LNU = 2 - LLEP + 2*K1
      K(1,2) = IS*KA
      K(5,1) = 1
      K(5,3) = 2
      IF (JINT .EQ. 1)  THEN                    ! CC INTERACTIONS
	 K(3,2) = IS*24
	 K(4,2) = IS*(KA-1)
	IF(LNU.EQ.1) THEN
	  IF (LTARG .EQ. 1)  THEN
	      K(5,2) = 2224
	  ELSE
	      K(5,2) = 2214
	  ENDIF
	ELSE
	  IF (LTARG .EQ. 1)  THEN
	      K(5,2) = 2114
	  ELSE
	      K(5,2) = 1114
	  ENDIF
	ENDIF
      ELSE
	 K(3,2) = 23                           ! NC (Z0) INTERACTIONS
	 K(4,2) = K(1,2)
c*sr 7.5.00: swop Delta's (bug), Delta+ for proton (LTARG=1),
c                                Delta0 for neutron (LTARG=2)
C        IF (LTARG .EQ. 1)  THEN
C           K(5,2) = 2114
C        ELSE
C           K(5,2) = 2214
C        ENDIF
         IF (LTARG .EQ. 1)  THEN
            K(5,2) = 2214
         ELSE
            K(5,2) = 2114
         ENDIF
c*
      ENDIF

C...4-momentum initial lepton
      P(1,5) = 0.
      P(1,4) = ENU
      P(1,1) = 0.
      P(1,2) = 0.
      P(1,3) = ENU
C...4-momentum initial nucleon
      P(2,5) = AMN(LTARG)
C     P(2,4) = P(2,5)
C     P(2,1) = 0.
C     P(2,2) = 0.
C     P(2,3) = 0.
       P(2,1) = P21
       P(2,2) = P22
       P(2,3) = P23
       P(2,4) = P24
       P(2,5) = P25
      N=2
      BETA1=-P(2,1)/P(2,4)
      BETA2=-P(2,2)/P(2,4)
      BETA3=-P(2,3)/P(2,4)
      N=2

      CALL PYROBO(0,0,0.0D0,0.0D0,BETA1,BETA2,BETA3)

C     print*,' nucl. rest fram ( fermi incl.) prima della rotazione'

      PHI11=ATAN(P(1,2)/P(1,3))
      PI(1)=P(1,1)
      PI(2)=P(1,2)
      PI(3)=P(1,3)

      CALL DT_TESTROT(PI,PO,PHI11,1)
      DO LL=1,3
       IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
      END DO
      P(1,1)=PO(1)
      P(1,2)=PO(2)
      P(1,3)=PO(3)
      PHI12=ATAN(P(1,1)/P(1,3))

      PI(1)=P(1,1)
      PI(2)=P(1,2)
      PI(3)=P(1,3)
      CALL DT_TESTROT(PI,PO,PHI12,2)
      DO LL=1,3
        IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
      END DO
      P(1,1)=PO(1)
      P(1,2)=PO(2)
      P(1,3)=PO(3)

      ENUU=P(1,4)

C...Generate the Mass of the Delta
      NTRY = 0
100   R = PYR(0)
      AMD=AMD0+0.5*GAMD*TAN((2.*R-1.)*ATAN(2.*DELD/GAMD))
      NTRY = NTRY + 1
      IF (NTRY .GT. 1000)  THEN
	 LBAD = 1
	 WRITE (   6,1001)  NBAD, ENUU,AMD,AMDMIN,AMD0,GAMD,ET
	 RETURN
      ENDIF
      IF (AMD .LT. AMDMIN)  GOTO 100
      ET = ((AMD+AML)**2 - AMN(LTARG)**2)/(2.*AMN(LTARG))
      IF (ENUU .LT. ET) GOTO 100

C...Kinematical  limits in Q**2
      S = AMN(LTARG)**2 + 2.*AMN(LTARG)*ENUU
      SQS = SQRT(S)
      PSTAR = (S - AMN(LTARG)**2)/(2.*SQS)
      ELF = (S - AMD**2 + AML2)/(2.*SQS)
      PLF = SQRT(ELF**2 - AML2)
      Q2MIN = -AML2 + 2.*PSTAR*(ELF-PLF)
      Q2MAX = -AML2 + 2.*PSTAR*(ELF+PLF)
      IF (Q2MIN .LT. 0.)   Q2MIN = 0.

      DSIGMAX = DT_DSIGMA_DELTA(LNU,-Q2MIN, S, AML, AMD)
200   Q2 = Q2MIN + (Q2MAX-Q2MIN)*PYR(0)
      DSIG = DT_DSIGMA_DELTA(LNU,-Q2, S, AML, AMD)
      IF (DSIG .LT.  DSIGMAX*PYR(0)) GOTO 200


C...Generate the kinematics of the final particles
      EISTAR = (S + AMN(LTARG)**2)/(2.*SQS)
      GAM = EISTAR/AMN(LTARG)
      BET = PSTAR/EISTAR
      CTSTAR = ELF/PLF - (Q2 + AML2)/(2.*PSTAR*PLF)
      EL  = GAM*(ELF + BET*PLF*CTSTAR)
      PLZ = GAM*(PLF*CTSTAR + BET*ELF)
      PL  = SQRT(EL**2 - AML2)
      PLT = SQRT(MAX(1.D-06,(PL*PL - PLZ*PLZ)))
      PHI = 6.28319*PYR(0)
      P(4,1) = PLT*COS(PHI)
      P(4,2) = PLT*SIN(PHI)
      P(4,3) = PLZ
      P(4,4) = EL
      P(4,5) = AML

C...4-momentum of Delta
      P(5,1) = -P(4,1)
      P(5,2) = -P(4,2)
      P(5,3) = ENUU-P(4,3)
      P(5,4) = ENUU+AMN(LTARG)-P(4,4)
      P(5,5) = AMD

C...4-momentum  of intermediate boson
      P(3,5) = -Q2
      P(3,4) = P(1,4)-P(4,4)
      P(3,1) = P(1,1)-P(4,1)
      P(3,2) = P(1,2)-P(4,2)
      P(3,3) = P(1,3)-P(4,3)
      N=5

      DO KW=1,5
        PI(1)=P(KW,1)
        PI(2)=P(KW,2)
        PI(3)=P(KW,3)
        CALL DT_TESTROT(PI,PO,PHI12,3)
        DO LL=1,3
          IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
        END DO
        P(KW,1)=PO(1)
        P(KW,2)=PO(2)
        P(KW,3)=PO(3)
      END DO

c********************************************

        DO KW=1,5
          PI(1)=P(KW,1)
          PI(2)=P(KW,2)
          PI(3)=P(KW,3)
          CALL DT_TESTROT(PI,PO,PHI11,4)
          DO LL=1,3
            IF(ABS(PO(LL)).LT.1.D-07) PO(LL)=0.
          END DO
          P(KW,1)=PO(1)
          P(KW,2)=PO(2)
          P(KW,3)=PO(3)
       END DO
c********************************************
C         transform back into Lab.

      CALL PYROBO(0,0,0.0D0,0.0D0,-BETA1,-BETA2,-BETA3)

C     WRITE(6,*)' Lab fram ( fermi incl.) '
      N=5
      CALL PYEXEC


      RETURN
1001  FORMAT(2X, 'DT_GEN_DELTA : EVENT REJECTED ', I5,  6G10.3)
      END
c
c===dsigma_delta=======================================================*
c
CDECK  ID>, DT_DSIGMA_DELTA
      DOUBLE PRECISION FUNCTION DT_DSIGMA_DELTA (LNU, QQ, S, AML, MD)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

C...Reaction nu + N -> lepton + Delta
C.  returns the  cross section
C.  dsigma/dt
C.  INPUT  LNU = 1, 2  (neutrino-antineutrino)
C.         QQ = t (always negative)  GeV**2
C.         S  = (c.m energy)**2      GeV**2
C.  OUTPUT =  10**-38 cm+2/GeV**2
C-----------------------------------------------------
      REAL*8 MN, MN2, MN4, MD,MD2, MD4
      DATA MN /0.938/
      DATA PI /3.1415926/

      GF = (1.1664 * 1.97)
      GF2 = GF*GF
      MN2 = MN*MN
      MN4 = MN2*MN2
      MD2 = MD*MD
      MD4 = MD2*MD2
      AML2 = AML*AML
      AML4 = AML2*AML2
      VQ  = (MN2 - MD2 - QQ)/2.
      VPI = (MN2 + MD2 - QQ)/2.
      VK  = (S + QQ - MN2 - AML2)/2.
      PIK = (S - MN2)/2.
      QK = (AML2 - QQ)/2.
      PIQ = (QQ + MN2 - MD2)/2.
      Q = SQRT(-QQ)
      C3V = 2.07*SQRT(EXP(-6.3*Q)*(1.+9*Q))
      C3 = SQRT(3.)*C3V/MN
      C4 = -C3/MD             ! ATTENZIONE AL SEGNO
      C5A = 1.18/(1.-QQ/0.4225)**2
      C32 = C3**2
      C42 = C4**2
      C5A2 = C5A**2

      IF (LNU .EQ. 1)  THEN
      ANS3=-MD2*VPI*QK*QQ*C32+MD2*VPI*QK*C5A2+2.*MD2*VQ*
     . PIK*QK*C32+2.*MD2*VQ*QK*PIQ*C32+MD4*VPI*QK*QQ*C42-
     . 2.*VK**2*VPI*QQ*C32+2.*VK**2*VPI*C5A2+4.*VK*VPI*VQ*
     . QK*C32+2.*VK*VPI*VQ*C5A2+2.*VPI*VQ**2*QK*C32
      ANS2=2.*MN*MD*MD2*VK**2*QQ*C42-4.*MN*MD*MD2*VK*VQ*QK
     . *C42-2.*MN*MD*MD2*VQ**2*QK*C42-2.*MN*MD*MD2*QK**2*
     . C32-3.*MN*MD*MD2*QK*QQ*C32+MN*MD*MD2*QK*C5A2-MN*MD*
     . MD4*QK*QQ*C42+2.*MN*MD*VK**2*C5A2+2.*MN*MD*VK*VQ*
     . C5A2+4.*MN*C3*C4*MD2*VK**2*QQ-8.*MN*C3*C4*MD2*VK*VQ
     . *QK-4.*MN*C3*C4*MD2*VQ**2*QK-2.*MN*C3*C4*MD4*QK*QQ-
     . 4.*MN*C3*C5A*MD2*VK*QQ+4.*MN*C3*C5A*MD2*VQ*QK-2.*MD*
     . C3*C4*MD2*VK*PIK*QQ+2.*MD*C3*C4*MD2*VK*QK*PIQ+2.*MD
     . *C3*C4*MD2*VPI*QK*QQ+2.*MD*C3*C4*MD2*VQ*PIK*QK+2.*
     . MD*C3*C4*MD2*VQ*QK*PIQ-2.*MD*C3*C4*VK**2*VPI*QQ+4.*
     . MD*C3*C4*VK*VPI*VQ*QK+2.*MD*C3*C4*VPI*VQ**2*QK-MD*
     . C3*C5A*MD2*PIK*QQ+MD*C3*C5A*MD2*QK*PIQ-3.*MD*C3*C5A
     . *VK*VPI*QQ+MD*C3*C5A*VK*VQ*PIQ+3.*MD*C3*C5A*VPI*VQ*
     . QK-MD*C3*C5A*VQ**2*PIK+C4*C5A*MD2*VK*VPI*QQ+C4*C5A*
     . MD2*VK*VQ*PIQ-C4*C5A*MD2*VPI*VQ*QK-C4*C5A*MD2*VQ**2
     . *PIK-C4*C5A*MD4*PIK*QQ+C4*C5A*MD4*QK*PIQ-2.*MD2*VK
     . **2*VPI*QQ*C42+4.*MD2*VK*VPI*VQ*QK*C42-2.*MD2*VK*
     . PIK*QQ*C32+2.*MD2*VK*QK*PIQ*C32+2.*MD2*VPI*VQ**2*QK
     . *C42-2.*MD2*VPI*QK**2*C32+ANS3
      ELSE
      ANS3=-MD2*VPI*QK*QQ*C32+MD2*VPI*QK*C5A2+2.*MD2*VQ*
     . PIK*QK*C32+2.*MD2*VQ*QK*PIQ*C32+MD4*VPI*QK*QQ*C42-
     . 2.*VK**2*VPI*QQ*C32+2.*VK**2*VPI*C5A2+4.*VK*VPI*VQ*
     . QK*C32+2.*VK*VPI*VQ*C5A2+2.*VPI*VQ**2*QK*C32
      ANS2=2.*MN*MD*MD2*VK**2*QQ*C42-4.*MN*MD*MD2*VK*VQ*QK
     . *C42-2.*MN*MD*MD2*VQ**2*QK*C42-2.*MN*MD*MD2*QK**2*
     . C32-3.*MN*MD*MD2*QK*QQ*C32+MN*MD*MD2*QK*C5A2-MN*MD*
     . MD4*QK*QQ*C42+2.*MN*MD*VK**2*C5A2+2.*MN*MD*VK*VQ*
     . C5A2+4.*MN*C3*C4*MD2*VK**2*QQ-8.*MN*C3*C4*MD2*VK*VQ
     . *QK-4.*MN*C3*C4*MD2*VQ**2*QK-2.*MN*C3*C4*MD4*QK*QQ+
     . 4.*MN*C3*C5A*MD2*VK*QQ-4.*MN*C3*C5A*MD2*VQ*QK-2.*MD*
     . C3*C4*MD2*VK*PIK*QQ+2.*MD*C3*C4*MD2*VK*QK*PIQ+2.*MD
     . *C3*C4*MD2*VPI*QK*QQ+2.*MD*C3*C4*MD2*VQ*PIK*QK+2.*
     . MD*C3*C4*MD2*VQ*QK*PIQ-2.*MD*C3*C4*VK**2*VPI*QQ+4.*
     . MD*C3*C4*VK*VPI*VQ*QK+2.*MD*C3*C4*VPI*VQ**2*QK+MD*
     . C3*C5A*MD2*PIK*QQ-MD*C3*C5A*MD2*QK*PIQ+3.*MD*C3*C5A
     . *VK*VPI*QQ-MD*C3*C5A*VK*VQ*PIQ-3.*MD*C3*C5A*VPI*VQ*
     . QK+MD*C3*C5A*VQ**2*PIK-C4*C5A*MD2*VK*VPI*QQ-C4*C5A*
     . MD2*VK*VQ*PIQ+C4*C5A*MD2*VPI*VQ*QK+C4*C5A*MD2*VQ**2
     . *PIK+C4*C5A*MD4*PIK*QQ-C4*C5A*MD4*QK*PIQ-2.*MD2*VK
     . **2*VPI*QQ*C42+4.*MD2*VK*VPI*VQ*QK*C42-2.*MD2*VK*
     . PIK*QQ*C32+2.*MD2*VK*QK*PIQ*C32+2.*MD2*VPI*VQ**2*QK
     . *C42-2.*MD2*VPI*QK**2*C32+ANS3
      ENDIF
      ANS1=32.*ANS2
      ANS=ANS1/(3.*MD2)
      P1CM = (S-MN2)/(2.*SQRT(S))
      DT_DSIGMA_DELTA  = GF2/2. * ANS/(64.*PI*S*P1CM**2)

      RETURN
      END
c
c===qgaus==============================================================*
c
CDECK  ID>, DT_QGAUS
      SUBROUTINE DT_QGAUS(A,B,SS,ENU,LTYP)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

      DIMENSION X(5),W(5)
      DATA X/.1488743389D0,.4333953941D0,
     & .6794095682D0,.8650633666D0,.9739065285D0
     */
      DATA W/.2955242247D0,.2692667193D0,
     & .2190863625D0,.1494513491D0,.0666713443D0
     */
      XM=0.5D0*(B+A)
      XR=0.5D0*(B-A)
      SS=0
      DO 11 J=1,5
        DX=XR*X(J)
        SS=SS+W(J)*(DT_DSQEL_Q2(LTYP,ENU,XM+DX)+
     *	DT_DSQEL_Q2(LTYP,ENU,XM-DX))
11    CONTINUE
      SS=XR*SS

      RETURN
      END
c
c===diqbrk=============================================================*
c
CDECK  ID>, DT_DIQBRK
      SUBROUTINE DT_DIQBRK

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c event flag
      COMMON /DTEVNO/ NEVENT,ICASCA


C     IF(DT_RNDM(VV).LE.0.5D0)THEN
C       CALL GSQBS1(NHKK)
C       CALL GSQBS2(NHKK)
C       CALL USQBS1(NHKK)
C       CALL USQBS2(NHKK)
C       CALL GSABS1(NHKK)
C       CALL GSABS2(NHKK)
C       CALL USABS1(NHKK)
C       CALL USABS2(NHKK)
C     ELSE
C       CALL GSQBS2(NHKK)
C       CALL GSQBS1(NHKK)
C       CALL USQBS2(NHKK)
C       CALL USQBS1(NHKK)
C       CALL GSABS2(NHKK)
C       CALL GSABS1(NHKK)
C       CALL USABS2(NHKK)
C       CALL USABS1(NHKK)
C     ENDIF

      IF(DT_RNDM(VV).LE.0.5D0) THEN
        CALL DT_DBREAK(1)
        CALL DT_DBREAK(2)
        CALL DT_DBREAK(3)
        CALL DT_DBREAK(4)
        CALL DT_DBREAK(5)
        CALL DT_DBREAK(6)
        CALL DT_DBREAK(7)
        CALL DT_DBREAK(8)
      ELSE
        CALL DT_DBREAK(2)
        CALL DT_DBREAK(1)
        CALL DT_DBREAK(4)
        CALL DT_DBREAK(3)
        CALL DT_DBREAK(6)
        CALL DT_DBREAK(5)
        CALL DT_DBREAK(8)
        CALL DT_DBREAK(7)
      ENDIF

      RETURN
      END
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      SUBROUTINE MUSQBS2(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
     *              IP1,IP21,IP22,IPP1,IPP2,IPIP,ISQ,IGCOUN)
C
C                  USQBS-2 diagram (split target diquark)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3


C
      PARAMETER (NTMHKK= 300)
      COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
     +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
     +(4,NTMHKK)
cKEEP,XSEADI.
      COMMON /XSEADI/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     +SSMIMQ,VVMTHR
cKEEP,DPRIN.
      COMMON /DPRIN/ IPRI,IPEV,IPPA,IPCO,INIT,IPHKK,ITOPD,IPAUPR
      COMMON /EVFLAG/ NUMEV
C
C                  USQBS-2 diagram (split target diquark)
C
C
C     Input chain 1(NC1) valence-quark(NC1P)-valence-diquark(NC1T)
C     Input chain 2(NC2) sea-antiquark(NC2P)-sea-quark(NC2T)
C
C     Create antiquark(aqsP)-quark(qsT) pair, energy from NC1P and NC1T
C     Split remaining valence diquark(NC1T) into quarks vq1T and vq2T
C
C     Create chains 3 sea antiquark(NC2P 1)-valence-quark(vq1T 2)
C                   6 sea-antiquark(aqsP 4)-valence-quark(vq2T 5)
C                   9 valence-quark(NC1P 7)-diquark(NC2T+qsT 8)
C
C
C       Put new chains into COMMON /HKKTMP/
C
      IIGLU1=NC1T-NC1P-1
      IIGLU2=NC2T-NC2P-1
      IGCOUN=0
C     WRITE(6,*)'MUSQBS2: IIGLU1,IIGLU2 ',IIGLU1,IIGLU2
      CVQ=1.D0
      IREJ=0
      IF(IPIP.EQ.2)THEN
C     IF(NUMEV.EQ.-324)THEN
C     WRITE(6,*)' MUSQBS2(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,',
C    *             'IP1,IP21,IP22,IPP1,IPP2,IPIP,IGCOUN)',
C    *NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
C    *              IP1,IP21,IP22,IPP1,IPP2,IPIP,IGCOUN
      ENDIF
C
C
C
C     determine x-values of NC1T diquark
      XDIQT=PHKK(4,NC1T)*2.D0/UMO
      XVQP=PHKK(4,NC1P)*2.D0/UMO
C
C     determine x-values of sea quark pair
C
      IPCO=1
      ICOU=0
 2234 CONTINUE
      ICOU=ICOU+1
      IF(ICOU.GE.500)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MUSQBS2 Rejection 2234 ICOU. GT.500'
        IPCO=0
        RETURN
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MUSQBS2 call  XSEAPA: UMO,XDIQT,XVQP ',
     * UMO, XDIQT,XVQP
      XSQ=0.D0
      XSAQ=0.D0
c*NEW
C     CALL XSEAPA(UMO,XDIQT/2.D0,ISQ,ISAQ,XSQ,XSAQ,IREJ)
      IF (IPIP.EQ.1) THEN
         XQMAX  = XDIQT/2.0D0
         XAQMAX = 2.D0*XVQP/3.0D0
      ELSE
         XQMAX  = 2.D0*XVQP/3.0D0
         XAQMAX = XDIQT/2.0D0
      ENDIF
      CALL DT_CQPAIR(XQMAX,XAQMAX,XSQ,XSAQ,ISQ,IREJ)
      ISAQ = 6+ISQ
C     write(*,*) 'MUSQBS2: ',ISQ,XSQ,XDIQT,XSAQ,XVQP
c*
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MUSQBS2 after XSEAPA',ISQ,ISAQ,XSQ,XSAQ
      IF(IREJ.GE.1)THEN
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MUSQBS2 reject XSEAPA',ISQ,ISAQ,XSQ,XSAQ
        IPCO=0
        RETURN
      ENDIF
      IF(IPIP.EQ.1)THEN
        IF(XSAQ.GE.2.D0*XVQP/3.D0)GO TO 2234
      ELSEIF(IPIP.EQ.2)THEN
        IF(XSQ.GE.2.D0*XVQP/3.D0)GO TO 2234
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,4E12.4)')' MUSQBS2 XDIQT,XVQP,XSQ,XSAQ ',
     *	XDIQT,XVQP,XSQ,XSAQ
      ENDIF
C
C     subtract xsq,xsaq from NC1T diquark and NC1P quark
C
C     XSQ=0.D0
      IF(IPIP.EQ.1)THEN
        XDIQT=XDIQT-XSQ
        XVQP =XVQP -XSAQ
      ELSEIF(IPIP.EQ.2)THEN
        XDIQT=XDIQT-XSAQ
        XVQP =XVQP -XSQ
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'XDIQT,XVQP after subtraction',XDIQT,XVQP
C
C     Split remaining valence diquark(NC1T) into quarks vq1T and vq2T
C
      XVTHRO=CVQ/UMO
      IVTHR=0
 3466 CONTINUE
      IF(IVTHR.EQ.10)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MUSQBS2 3466 reject IVTHR 10'
      IPCO=0
        RETURN
      ENDIF
      IVTHR=IVTHR+1
      XVTHR=XVTHRO/(201-IVTHR)
      UNOPRV=UNON
 380  CONTINUE
      IF(XVTHR.GT.0.66D0*XDIQT)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
	IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MUSQBS2 Rejection 380 XVTHR  large ',
     *  XVTHR
      IPCO=0
        RETURN
      ENDIF
      IF(DT_RNDM(V).LT.0.5D0)THEN
        XVTQI=DT_SAMPEX(XVTHR,0.66D0*XDIQT)
        XVTQII=XDIQT-XVTQI
      ELSE
        XVTQII=DT_SAMPEX(XVTHR,0.66D0*XDIQT)
        XVTQI=XDIQT-XVTQII
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,2E12.4)')'  MUSQBS2:XVTQI,XVTQII ',XVTQI,XVTQII
      ENDIF
C
C     Prepare 4 momenta of new chains and chain ends
C
C     COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
C    +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
C    +(4,NTMHKK)
C
C     Create chains 3 sea antiquark(NC2P 1)-valence-quark(vq1T 2)
C                   6 sea-antiquark(aqsP 4)-valence-quark(vq2T 5)
C                   9 valence-quark(NC1P 7)-diquark(NC2T+qsT 8)
C
C     SUBROUTINE MUSQBS2(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
C    *              IP1,IP21,IP22,IPP1,IPP2)
C
      IF(IPIP.EQ.1)THEN
        XSQ1=XSQ
        XSAQ1=XSAQ
        ISQ1=ISQ
        ISAQ1=ISAQ
      ELSEIF(IPIP.EQ.2)THEN
        XSQ1=XSAQ
        XSAQ1=XSQ
        ISQ1=ISAQ
        ISAQ1=ISQ
      ENDIF
      IDHKT(1)   =IPP1
      ISTHKT(1)  =951
      JMOHKT(1,1)=NC2P
      JMOHKT(2,1)=0
      JDAHKT(1,1)=3+IIGLU1
      JDAHKT(2,1)=0
C     Create chains 3 sea antiquark(NC2P 1)-valence-quark(vq1T 2)
      PHKT(1,1)  =PHKK(1,NC2P)
      PHKT(2,1)  =PHKK(2,NC2P)
      PHKT(3,1)  =PHKK(3,NC2P)
      PHKT(4,1)  =PHKK(4,NC2P)
C     PHKT(5,1)  =PHKK(5,NC2P)
      XMIST  =(PHKT(4,1)**2-
     * PHKT(3,1)**2-PHKT(2,1)**2-
     *PHKT(1,1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,1)  =SQRT(PHKT(4,1)**2- PHKT(3,1)**2-PHKT(2,1)**2-
     *PHKT(1,1)**2)
      ELSE
C     WRITE(6,*)'MUSQBS2 parton 1 mass square LT.0 ',XMIST
      PHKT(5,1)=0.D0
      ENDIF
      VHKT(1,1)  =VHKK(1,NC2P)
      VHKT(2,1)  =VHKK(2,NC2P)
      VHKT(3,1)  =VHKK(3,NC2P)
      VHKT(4,1)  =VHKK(4,NC2P)
      WHKT(1,1)  =WHKK(1,NC2P)
      WHKT(2,1)  =WHKK(2,NC2P)
      WHKT(3,1)  =WHKK(3,NC2P)
      WHKT(4,1)  =WHKK(4,NC2P)
C     Add here IIGLU1 gluons to this chaina
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU1.GE.1)THEN
      JJG=NC1P
      DO 61 IIG=2,2+IIGLU1-1
        KKG=JJG+IIG-1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=3+IIGLU1
        JDAHKT(2,IIG)=0
        PHKT(1,IIG)=PHKK(1,KKG)
        PG1=PG1+ PHKT(1,IIG)
        PHKT(2,IIG)=PHKK(2,KKG)
        PG2=PG2+ PHKT(2,IIG)
        PHKT(3,IIG)=PHKK(3,KKG)
        PG3=PG3+ PHKT(3,IIG)
        PHKT(4,IIG)=PHKK(4,KKG)
        PG4=PG4+ PHKT(4,IIG)
	PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG) =WHKK(1,KKG)
        WHKT(2,IIG) =WHKK(2,KKG)
        WHKT(3,IIG) =WHKK(3,KKG)
	WHKT(4,IIG) =WHKK(4,KKG)
   61 CONTINUE
      ENDIF
      IDHKT(2+IIGLU1)   =IP21
      ISTHKT(2+IIGLU1)  =952
      JMOHKT(1,2+IIGLU1)=NC1T
      JMOHKT(2,2+IIGLU1)=0
      JDAHKT(1,2+IIGLU1)=3+IIGLU1
      JDAHKT(2,2+IIGLU1)=0
      PHKT(1,2+IIGLU1)  =PHKK(1,NC1T)*XVTQI/(XDIQT+XSQ1)
      PHKT(2,2+IIGLU1)  =PHKK(2,NC1T)*XVTQI/(XDIQT+XSQ1)
      PHKT(3,2+IIGLU1)  =PHKK(3,NC1T)*XVTQI/(XDIQT+XSQ1)
      PHKT(4,2+IIGLU1)  =PHKK(4,NC1T)*XVTQI/(XDIQT+XSQ1)
C     PHKT(5,2)  =PHKK(5,NC1T)
      XMIST  =(PHKT(4,2+IIGLU1)**2-
     * PHKT(3,2+IIGLU1)**2-PHKT(2,2+IIGLU1)**2-
     *PHKT(1,2+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,2+IIGLU1)  =SQRT(PHKT(4,2+IIGLU1)**2-
     * PHKT(3,2+IIGLU1)**2-PHKT(2,2+IIGLU1)**2-
     *PHKT(1,2+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
      VHKT(1,2+IIGLU1)  =VHKK(1,NC1T)
      VHKT(2,2+IIGLU1)  =VHKK(2,NC1T)
      VHKT(3,2+IIGLU1)  =VHKK(3,NC1T)
      VHKT(4,2+IIGLU1)  =VHKK(4,NC1T)
      WHKT(1,2+IIGLU1)  =WHKK(1,NC1T)
      WHKT(2,2+IIGLU1)  =WHKK(2,NC1T)
      WHKT(3,2+IIGLU1)  =WHKK(3,NC1T)
      WHKT(4,2+IIGLU1)  =WHKK(4,NC1T)
      IDHKT(3+IIGLU1)   =88888
      ISTHKT(3+IIGLU1)  =95
      JMOHKT(1,3+IIGLU1)=1
      JMOHKT(2,3+IIGLU1)=2+IIGLU1
      JDAHKT(1,3+IIGLU1)=0
      JDAHKT(2,3+IIGLU1)=0
      PHKT(1,3+IIGLU1)  =PHKT(1,1)+PHKT(1,2+IIGLU1)+PG1
      PHKT(2,3+IIGLU1)  =PHKT(2,1)+PHKT(2,2+IIGLU1)+PG2
      PHKT(3,3+IIGLU1)  =PHKT(3,1)+PHKT(3,2+IIGLU1)+PG3
      PHKT(4,3+IIGLU1)  =PHKT(4,1)+PHKT(4,2+IIGLU1)+PG4
      XMIST
     * =(PHKT(4,3+IIGLU1)**2-PHKT(1,3+IIGLU1)**2-PHKT(2,3+IIGLU1)**2
     *            -PHKT(3,3+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,3+IIGLU1)
     * =SQRT(PHKT(4,3+IIGLU1)**2-PHKT(1,3+IIGLU1)**2-PHKT(2,3+IIGLU1)**2
     *            -PHKT(3,3+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
      IF(IPIP.GE.2)THEN
C     IF(NUMEV.EQ.-324)THEN
C     WRITE(6,*)1,ISTHKT(1),IDHKT(1),JMOHKT(1,1),JMOHKT(2,1),
C    * JDAHKT(1,1),
C    *JDAHKT(2,1),(PHKT(III,1),III=1,5)
      DO 71 IIG=2,2+IIGLU1-1
C     WRITE(6,*)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
C    * JDAHKT(1,IIG),
C    *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
   71 CONTINUE
C     WRITE(6,*)2+IIGLU1,ISTHKT(2+IIGLU1),IDHKT(2+IIGLU1),
C    * JMOHKT(1,2+IIGLU1),JMOHKT(2,2+IIGLU1),JDAHKT(1,2+IIGLU1),
C    *JDAHKT(2,2+IIGLU1),(PHKT(III,2+IIGLU1),III=1,5)
C     WRITE(6,*)3+IIGLU1,ISTHKT(3+IIGLU1),IDHKT(3+IIGLU1),
C    * JMOHKT(1,3+IIGLU1),JMOHKT(2,3+IIGLU1),JDAHKT(1,3+IIGLU1),
C    *JDAHKT(2,3+IIGLU1),(PHKT(III,3+IIGLU1),III=1,5)
      ENDIF
      CHAMAL=CHAM1
      IF(IPIP.EQ.1)THEN
        IF(IPP1.LE.-3.OR.IP21.GE.3)CHAMAL=CHAM3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IPP1.GE.3.OR.IP21.LE.-3)CHAMAL=CHAM3
      ENDIF
      IF(PHKT(5,3+IIGLU1).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MUSQBS1 jump back from chain 3'
	GO TO 3466
      ENDIF
      VHKT(1,3+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,3+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,3+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,3+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,3+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,3+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,3+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,3+IIGLU1)  =WHKK(4,NC1)
      IF(IPIP.EQ.1)THEN
        IDHKT(4+IIGLU1)   =-(ISAQ1-6)
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(4+IIGLU1)   =ISAQ1
      ENDIF
      ISTHKT(4+IIGLU1)  =951
      JMOHKT(1,4+IIGLU1)=NC1P
      JMOHKT(2,4+IIGLU1)=0
      JDAHKT(1,4+IIGLU1)=6+IIGLU1
      JDAHKT(2,4+IIGLU1)=0
C     create chain    6 sea-antiquark(aqsP 4)-valence-quark(vq2T 5)
      PHKT(1,4+IIGLU1)  =PHKK(1,NC1P)*XSAQ1/(XVQP+XSAQ1)
      PHKT(2,4+IIGLU1)  =PHKK(2,NC1P)*XSAQ1/(XVQP+XSAQ1)
      PHKT(3,4+IIGLU1)  =PHKK(3,NC1P)*XSAQ1/(XVQP+XSAQ1)
      PHKT(4,4+IIGLU1)  =PHKK(4,NC1P)*XSAQ1/(XVQP+XSAQ1)
C     PHKT(5,4+IIGLU1)  =PHKK(5,NC1P)
      XMIST  =(PHKT(4,4+IIGLU1)**2-
     * PHKT(3,4+IIGLU1)**2-PHKT(2,4+IIGLU1)**2-
     *PHKT(1,4+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,4+IIGLU1)  =SQRT(PHKT(4,4+IIGLU1)**2-
     * PHKT(3,4+IIGLU1)**2-PHKT(2,4+IIGLU1)**2-
     *PHKT(1,4+IIGLU1)**2)
      ELSE
C     WRITE(6,*)'MUSQBS2 parton 4 mass square LT.0 ',XMIST
      PHKT(5,4+IIGLU1)=0.D0
      ENDIF
      VHKT(1,4+IIGLU1)  =VHKK(1,NC1P)
      VHKT(2,4+IIGLU1)  =VHKK(2,NC1P)
      VHKT(3,4+IIGLU1)  =VHKK(3,NC1P)
      VHKT(4,4+IIGLU1)  =VHKK(4,NC1P)
      WHKT(1,4+IIGLU1)  =WHKK(1,NC1P)
      WHKT(2,4+IIGLU1)  =WHKK(2,NC1P)
      WHKT(3,4+IIGLU1)  =WHKK(3,NC1P)
      WHKT(4,4+IIGLU1)  =WHKK(4,NC1P)
      IDHKT(5+IIGLU1)   =IP22
      ISTHKT(5+IIGLU1)  =952
      JMOHKT(1,5+IIGLU1)=NC1T
      JMOHKT(2,5+IIGLU1)=0
      JDAHKT(1,5+IIGLU1)=6+IIGLU1
      JDAHKT(2,5+IIGLU1)=0
      PHKT(1,5+IIGLU1)  =PHKK(1,NC1T)*XVTQII/(XDIQT+XSQ1)
      PHKT(2,5+IIGLU1)  =PHKK(2,NC1T)*XVTQII/(XDIQT+XSQ1)
      PHKT(3,5+IIGLU1)  =PHKK(3,NC1T)*XVTQII/(XDIQT+XSQ1)
      PHKT(4,5+IIGLU1)  =PHKK(4,NC1T)*XVTQII/(XDIQT+XSQ1)
C     PHKT(5,5+IIGLU1)  =PHKK(5,NC1T)
      XMIST  =(PHKT(4,5+IIGLU1)**2-
     * PHKT(3,5+IIGLU1)**2-PHKT(2,5+IIGLU1)**2-
     *PHKT(1,5+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,5+IIGLU1)  =SQRT(PHKT(4,5+IIGLU1)**2-
     * PHKT(3,5+IIGLU1)**2-PHKT(2,5+IIGLU1)**2-
     *PHKT(1,5+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
      VHKT(1,5+IIGLU1)  =VHKK(1,NC1T)
      VHKT(2,5+IIGLU1)  =VHKK(2,NC1T)
      VHKT(3,5+IIGLU1)  =VHKK(3,NC1T)
      VHKT(4,5+IIGLU1)  =VHKK(4,NC1T)
      WHKT(1,5+IIGLU1)  =WHKK(1,NC1T)
      WHKT(2,5+IIGLU1)  =WHKK(2,NC1T)
      WHKT(3,5+IIGLU1)  =WHKK(3,NC1T)
      WHKT(4,5+IIGLU1)  =WHKK(4,NC1T)
      IDHKT(6+IIGLU1)   =88888
      ISTHKT(6+IIGLU1)  =95
      JMOHKT(1,6+IIGLU1)=4+IIGLU1
      JMOHKT(2,6+IIGLU1)=5+IIGLU1
      JDAHKT(1,6+IIGLU1)=0
      JDAHKT(2,6+IIGLU1)=0
      PHKT(1,6+IIGLU1)  =PHKT(1,4+IIGLU1)+PHKT(1,5+IIGLU1)
      PHKT(2,6+IIGLU1)  =PHKT(2,4+IIGLU1)+PHKT(2,5+IIGLU1)
      PHKT(3,6+IIGLU1)  =PHKT(3,4+IIGLU1)+PHKT(3,5+IIGLU1)
      PHKT(4,6+IIGLU1)  =PHKT(4,4+IIGLU1)+PHKT(4,5+IIGLU1)
      XMIST
     * =(PHKT(4,6+IIGLU1)**2-PHKT(1,6+IIGLU1)**2-PHKT(2,6+IIGLU1)**2
     *            -PHKT(3,6+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,6+IIGLU1)
     * =SQRT(PHKT(4,6+IIGLU1)**2-PHKT(1,6+IIGLU1)**2-PHKT(2,6+IIGLU1)**2
     *            -PHKT(3,6+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
C     IF(IPIP.GE.2)THEN
C     IF(NUMEV.EQ.-324)THEN
C     WRITE(6,*)4+IIGLU1,ISTHKT(4+IIGLU1),IDHKT(4+IIGLU1),
C    * JMOHKT(1,4+IIGLU1),JMOHKT(2,4+IIGLU1),JDAHKT(1,4+IIGLU1),
C    *JDAHKT(2,4+IIGLU1),(PHKT(III,4+IIGLU1),III=1,5)
C     WRITE(6,*)5+IIGLU1,ISTHKT(5+IIGLU1),IDHKT(5+IIGLU1),
C    * JMOHKT(1,5+IIGLU1),JMOHKT(2,5+IIGLU1),JDAHKT(1,5+IIGLU1),
C    *JDAHKT(2,5+IIGLU1),(PHKT(III,5+IIGLU1),III=1,5)
C     WRITE(6,*)6+IIGLU1,ISTHKT(6+IIGLU1),IDHKT(6+IIGLU1),
C    * JMOHKT(1,6+IIGLU1),JMOHKT(2,6+IIGLU1),JDAHKT(1,6+IIGLU1),
C    *JDAHKT(2,6+IIGLU1),(PHKT(III,6+IIGLU1),III=1,5)
C     ENDIF
      CHAMAL=CHAM1
      IF(IPIP.EQ.1)THEN
        IF(IP22.GE.3.OR.ISAQ1.GE.9)CHAMAL=CHAM3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP22.LE.-3.OR.ISAQ1.GE.3)CHAMAL=CHAM3
      ENDIF
      IF(PHKT(5,6+IIGLU1).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MUSQBS1 jump back from chain 6',
C    *  CHAMAL,PHKT(5,6+IIGLU1)
	GO TO 3466
      ENDIF
      VHKT(1,6+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,6+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,6+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,6+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,6+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,6+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,6+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,6+IIGLU1)  =WHKK(4,NC1)
C     IDHKT(7)   =1000*IPP1+100*ISQ+1
      IDHKT(7+IIGLU1)   =IP1
      ISTHKT(7+IIGLU1)  =951
      JMOHKT(1,7+IIGLU1)=NC1P
      JMOHKT(2,7+IIGLU1)=0
c*NEW
C     JDAHKT(1,7+IIGLU1)=9+IIGLU1
      JDAHKT(1,7+IIGLU1)=9+IIGLU1+IIGLU2
c*
      JDAHKT(2,7+IIGLU1)=0
      PHKT(1,7+IIGLU1)  =PHKK(1,NC1P)*XVQP/(XVQP+XSAQ1)
      PHKT(2,7+IIGLU1)  =PHKK(2,NC1P)*XVQP/(XVQP+XSAQ1)
      PHKT(3,7+IIGLU1)  =PHKK(3,NC1P)*XVQP/(XVQP+XSAQ1)
      PHKT(4,7+IIGLU1)  =PHKK(4,NC1P)*XVQP/(XVQP+XSAQ1)
C     PHKT(5,7+IIGLU1)  =PHKK(5,NC1P)
      XMIST  =(PHKT(4,7+IIGLU1)**2-
     * PHKT(3,7+IIGLU1)**2-PHKT(2,7+IIGLU1)**2-
     *PHKT(1,7+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,7+IIGLU1)  =SQRT(PHKT(4,7+IIGLU1)**2-
     * PHKT(3,7+IIGLU1)**2-PHKT(2,7+IIGLU1)**2-
     *PHKT(1,7+IIGLU1)**2)
      ELSE
C     WRITE(6,*)'MUSQBS2 parton 7 mass square LT.0 ',XMIST
      PHKT(5,7+IIGLU1)=0.D0
      ENDIF
      VHKT(1,7+IIGLU1)  =VHKK(1,NC1P)
      VHKT(2,7+IIGLU1)  =VHKK(2,NC1P)
      VHKT(3,7+IIGLU1)  =VHKK(3,NC1P)
      VHKT(4,7+IIGLU1)  =VHKK(4,NC1P)
      WHKT(1,7+IIGLU1)  =WHKK(1,NC1P)
      WHKT(2,7+IIGLU1)  =WHKK(2,NC1P)
      WHKT(3,7+IIGLU1)  =WHKK(3,NC1P)
      WHKT(4,7+IIGLU1)  =WHKK(4,NC2P)
C     Insert here the IIGLU2 gluons
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU2.GE.1)THEN
      JJG=NC2P
      DO 81 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
        KKG=JJG+IIG-7-IIGLU1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=9+IIGLU1+IIGLU2
        JDAHKT(2,IIG)=0
        PHKT(1,IIG)=PHKK(1,KKG)
        PG1=PG1+ PHKT(1,IIG)
        PHKT(2,IIG)=PHKK(2,KKG)
        PG2=PG2+ PHKT(2,IIG)
        PHKT(3,IIG)=PHKK(3,KKG)
        PG3=PG3+ PHKT(3,IIG)
        PHKT(4,IIG)=PHKK(4,KKG)
        PG4=PG4+ PHKT(4,IIG)
        PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG)  =WHKK(1,KKG)
        WHKT(2,IIG) =WHKK(2,KKG)
        WHKT(3,IIG) =WHKK(3,KKG)
	WHKT(4,IIG) =WHKK(4,KKG)
   81 CONTINUE
      ENDIF
      IF(IPIP.EQ.1)THEN
        IDHKT(8+IIGLU1+IIGLU2)   =1000*IPP2+100*ISQ1+3
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.1203)IDHKT(8+IIGLU1+IIGLU2)=2103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.1303)IDHKT(8+IIGLU1+IIGLU2)=3103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.2303)IDHKT(8+IIGLU1+IIGLU2)=3203
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(8+IIGLU1+IIGLU2)   =1000*IPP2+100*(-ISQ1+6)-3
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.-1203)IDHKT(8+IIGLU1+IIGLU2)=-2103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.-1303)IDHKT(8+IIGLU1+IIGLU2)=-3103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.-2303)IDHKT(8+IIGLU1+IIGLU2)=-3203
      ENDIF
      ISTHKT(8+IIGLU1+IIGLU2)  =952
      JMOHKT(1,8+IIGLU1+IIGLU2)=NC2T
      JMOHKT(2,8+IIGLU1+IIGLU2)=0
      JDAHKT(1,8+IIGLU1+IIGLU2)=9+IIGLU1+IIGLU2
      JDAHKT(2,8+IIGLU1+IIGLU2)=0
      PHKT(1,8+IIGLU1+IIGLU2)  =PHKK(1,NC2T)+
     * PHKK(1,NC1T)*XSQ1/(XDIQT+XSQ1)
      PHKT(2,8+IIGLU1+IIGLU2)  =PHKK(2,NC2T)+
     * PHKK(2,NC1T)*XSQ1/(XDIQT+XSQ1)
      PHKT(3,8+IIGLU1+IIGLU2)  =PHKK(3,NC2T)+
     * PHKK(3,NC1T)*XSQ1/(XDIQT+XSQ1)
      PHKT(4,8+IIGLU1+IIGLU2)  =PHKK(4,NC2T)+
     * PHKK(4,NC1T)*XSQ1/(XDIQT+XSQ1)
C     WRITE(6,*)'PHKK(4,NC1T),PHKK(4,NC2T), PHKT(4,7)',
C    * PHKK(4,NC1T),PHKK(4,NC2T), PHKT(4,7)
      IF(PHKT(4,8+IIGLU1+IIGLU2).GE. PHKK(4,NC1T))THEN
C       IREJ=1
C	WRITE(6,*)'reject PHKT(4,8+IIGLU1+IIGLU2).GE. PHKK(4,NC1T)'
C    *  ,PHKT(4,8+IIGLU1+IIGLU2), PHKK(4,NC2T),NC2T
	IPCO=0
C	RETURN
	GO TO 3466
      ENDIF
C     PHKT(5,8)  =PHKK(5,NC2T)
      XMIST  =(PHKT(4,8+IIGLU1+IIGLU2)**2-
     * PHKT(3,8+IIGLU1+IIGLU2)**2-PHKT(2,8+IIGLU1+IIGLU2)**2-
     *PHKT(1,8+IIGLU1+IIGLU2)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,8+IIGLU1+IIGLU2)  =SQRT(PHKT(4,8+IIGLU1+IIGLU2)**2-
     * PHKT(3,8+IIGLU1+IIGLU2)**2-PHKT(2,8+IIGLU1+IIGLU2)**2-
     *PHKT(1,8+IIGLU1+IIGLU2)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
      VHKT(1,8+IIGLU1+IIGLU2)  =VHKK(1,NC2T)
      VHKT(2,8+IIGLU1+IIGLU2)  =VHKK(2,NC2T)
      VHKT(3,8+IIGLU1+IIGLU2)  =VHKK(3,NC2T)
      VHKT(4,8+IIGLU1+IIGLU2)  =VHKK(4,NC2T)
      WHKT(1,8+IIGLU1+IIGLU2)  =WHKK(1,NC2T)
      WHKT(2,8+IIGLU1+IIGLU2)  =WHKK(2,NC2T)
      WHKT(3,8+IIGLU1+IIGLU2)  =WHKK(3,NC2T)
      WHKT(4,8+IIGLU1+IIGLU2)  =WHKK(4,NC2T)
      IDHKT(9+IIGLU1+IIGLU2)   =88888
      ISTHKT(9+IIGLU1+IIGLU2)  =95
      JMOHKT(1,9+IIGLU1+IIGLU2)=7+IIGLU1
      JMOHKT(2,9+IIGLU1+IIGLU2)=8+IIGLU1+IIGLU2
      JDAHKT(1,9+IIGLU1+IIGLU2)=0
      JDAHKT(2,9+IIGLU1+IIGLU2)=0
c*NEW
C     PHKT(1,9+IIGLU1+IIGLU2)
C    * =PHKT(1,7+IIGLU1+IIGLU2)+PHKT(1,8+IIGLU1+IIGLU2)+PG1
C     PHKT(2,9+IIGLU1+IIGLU2)
C    * =PHKT(2,7+IIGLU1+IIGLU2)+PHKT(2,8+IIGLU1+IIGLU2)+PG2
C     PHKT(3,9+IIGLU1+IIGLU2)
C    * =PHKT(3,7+IIGLU1+IIGLU2)+PHKT(3,8+IIGLU1+IIGLU2)+PG3
C     PHKT(4,9+IIGLU1+IIGLU2)
C    * =PHKT(4,7+IIGLU1+IIGLU2)+PHKT(4,8+IIGLU1+IIGLU2)+PG4
      PHKT(1,9+IIGLU1+IIGLU2)
     * =PHKT(1,7+IIGLU1)+PHKT(1,8+IIGLU1+IIGLU2)+PG1
      PHKT(2,9+IIGLU1+IIGLU2)
     * =PHKT(2,7+IIGLU1)+PHKT(2,8+IIGLU1+IIGLU2)+PG2
      PHKT(3,9+IIGLU1+IIGLU2)
     * =PHKT(3,7+IIGLU1)+PHKT(3,8+IIGLU1+IIGLU2)+PG3
      PHKT(4,9+IIGLU1+IIGLU2)
     * =PHKT(4,7+IIGLU1)+PHKT(4,8+IIGLU1+IIGLU2)+PG4
c*
      XMIST
     * =(PHKT(4,9+IIGLU1+IIGLU2)**2-PHKT(1,9+IIGLU1+IIGLU2)**2
     * -PHKT(2,9+IIGLU1+IIGLU2)**2
     *            -PHKT(3,9+IIGLU1+IIGLU2)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,9+IIGLU1+IIGLU2)
     * =SQRT(PHKT(4,9+IIGLU1+IIGLU2)**2-PHKT(1,9+IIGLU1+IIGLU2)**2
     * -PHKT(2,9+IIGLU1+IIGLU2)**2
     *            -PHKT(3,9+IIGLU1+IIGLU2)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
      IF(IPIP.GE.2)THEN
C     IF(NUMEV.EQ.-324)THEN
C     WRITE(6,*)7+IIGLU1,ISTHKT(7+IIGLU1),IDHKT(7+IIGLU1),
C    * JMOHKT(1,7+IIGLU1),JMOHKT(2,7+IIGLU1),JDAHKT(1,7+IIGLU1),
C    *JDAHKT(2,7+IIGLU1),(PHKT(III,7+IIGLU1),III=1,5)
C     DO 91 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
C     WRITE(6,*)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
C    * JDAHKT(1,IIG),
C    *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
C  91 CONTINUE
C     WRITE(6,*)8+IIGLU1+IIGLU2,ISTHKT(8+IIGLU1+IIGLU2),
C    * IDHKT(8+IIGLU1+IIGLU2),JMOHKT(1,8+IIGLU1+IIGLU2),
C    *JMOHKT(2,8+IIGLU1+IIGLU2),JDAHKT(1,8+IIGLU1+IIGLU2),
C    *JDAHKT(2,8+IIGLU1+IIGLU2),(PHKT(III,8+IIGLU1+IIGLU2),III=1,5)
C     WRITE(6,*)9+IIGLU1+IIGLU2,ISTHKT(9+IIGLU1+IIGLU2),
C    * IDHKT(9+IIGLU1+IIGLU2),JMOHKT(1,9+IIGLU1+IIGLU2),
C    *JMOHKT(2,9+IIGLU1+IIGLU2),JDAHKT(1,9+IIGLU1+IIGLU2),
C    *JDAHKT(2,9+IIGLU1+IIGLU2),(PHKT(III,9+IIGLU1+IIGLU2),III=1,5)
      ENDIF
      CHAMAL=CHAB1
      IF(IPIP.EQ.1)THEN
        IF(IP1.GE.3.OR.IPP2.GE.3.OR.ISQ1.GE.3)CHAMAL=CHAB3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP1.LE.-3.OR.IPP2.LE.-3.OR.ISQ1.GE.9)CHAMAL=CHAB3
      ENDIF
      IF(PHKT(5,9+IIGLU1+IIGLU2).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MUSQBS1 jump back from chain 9',
C    *  'CHAMAL,PHKT(5,9+IIGLU1+IIGLU2)',CHAMAL,PHKT(5,9+IIGLU1+IIGLU2)
	GO TO 3466
      ENDIF
      VHKT(1,9+IIGLU1+IIGLU2)  =VHKK(1,NC1)
      VHKT(2,9+IIGLU1+IIGLU2)  =VHKK(2,NC1)
      VHKT(3,9+IIGLU1+IIGLU2)  =VHKK(3,NC1)
      VHKT(4,9+IIGLU1+IIGLU2)  =VHKK(4,NC1)
      WHKT(1,9+IIGLU1+IIGLU2)  =WHKK(1,NC1)
      WHKT(2,9+IIGLU1+IIGLU2)  =WHKK(2,NC1)
      WHKT(3,9+IIGLU1+IIGLU2)  =WHKK(3,NC1)
      WHKT(4,9+IIGLU1+IIGLU2)  =WHKK(4,NC1)
C
      IPCO=0
      IGCOUN=9+IIGLU1+IIGLU2
       RETURN
       END
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      SUBROUTINE MGSQBS2(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
     *              IP1,IP21,IP22,IPP11,IPP12,IPP2,IPIP,ISQ,IGCOUN)
C
C                  GSQBS-2 diagram (split target diquark)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3


C
      PARAMETER (NTMHKK= 300)
      COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
     +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
     +(4,NTMHKK)

cKEEP,XSEADI.
      COMMON /XSEADI/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     +SSMIMQ,VVMTHR
cKEEP,DPRIN.
      COMMON /DPRIN/ IPRI,IPEV,IPPA,IPCO,INIT,IPHKK,ITOPD,IPAUPR
C
C                  GSQBS-2 diagram (split target diquark)
C
C
C     Input chain 1(NC1) valence-quark(NC1P)-valence-diquark(NC1T)
C     Input chain 2(NC2) valence-diquark(NC2P)-sea-quark(NC2T)
C
C     Create antiquark(aqsP)-quark(qsT) pair, energy from NC1P and NC1T
C     Split remaining valence diquark(NC1T) into quarks vq1T and vq2T
C
C     Create chains 3 valence-diquark(NC2P 1)-valence-quark(vq1T 2)
C                   6 sea-antiquark(aqsP 4)-valence-quark(vq2T 5)
C                   9 valence-quark(NC1P 7)-diquark(NC2T+qsT 8)
C
C
C
C       Put new chains into COMMON /HKKTMP/
C
      IIGLU1=NC1T-NC1P-1
      IIGLU2=NC2T-NC2P-1
      IGCOUN=0
C     WRITE(6,*)' IIGLU1,IIGLU2 ',IIGLU1,IIGLU2
      CVQ=1.D0
      IREJ=0
C     IF(IPIP.EQ.2)THEN
C     WRITE(6,*)' MGSQBS2(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,',
C    *             'IP1,IP21,IP22,IPP11,IPP12,IPP2,IPIP,IGCOUN)',
C    *NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
C    *              IP1,IP21,IP22,IPP11,IPP12,IPP2,IPIP,IGCOUN
C     ENDIF
C
C
C
C     determine x-values of NC1T diquark
      XDIQT=PHKK(4,NC1T)*2.D0/UMO
      XVQP=PHKK(4,NC1P)*2.D0/UMO
C
C     determine x-values of sea quark pair
C
      IPCO=1
      ICOU=0
 2234 CONTINUE
      ICOU=ICOU+1
      IF(ICOU.GE.500)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MGSQBS2 Rejection 2234 ICOU. GT.500'
        IPCO=0
        RETURN
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MGSQBS2 call  XSEAPA: UMO,XDIQT,XVQP ',
     * UMO, XDIQT,XVQP
      XSQ=0.D0
      XSAQ=0.D0
c*NEW
C     CALL XSEAPA(UMO,XDIQT/2.D0,ISQ,ISAQ,XSQ,XSAQ,IREJ)
      IF (IPIP.EQ.1) THEN
         XQMAX  = XDIQT/2.0D0
         XAQMAX = 2.D0*XVQP/3.0D0
      ELSE
         XQMAX  = 2.D0*XVQP/3.0D0
         XAQMAX = XDIQT/2.0D0
      ENDIF
      CALL DT_CQPAIR(XQMAX,XAQMAX,XSQ,XSAQ,ISQ,IREJ)
      ISAQ = 6+ISQ
C     write(*,*) 'MGSQBS2: ',ISQ,XSQ,XDIQT,XSAQ,XVQP
c*
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MGSQBS2 after XSEAPA',ISQ,ISAQ,XSQ,XSAQ
      IF(IREJ.GE.1)THEN
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MGSQBS2 reject XSEAPA',ISQ,ISAQ,XSQ,XSAQ
        IPCO=0
        RETURN
      ENDIF
      IF(IPIP.EQ.1)THEN
        IF(XSAQ.GE.2.D0*XVQP/3.D0)GO TO 2234
      ELSEIF(IPIP.EQ.2)THEN
        IF(XSQ.GE.2.D0*XVQP/3.D0)GO TO 2234
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,4E12.4)')' MGSQBS2 XDIQT,XVQP,XSQ,XSAQ ',
     *	XDIQT,XVQP,XSQ,XSAQ
      ENDIF
C
C     subtract xsq,xsaq from NC1T diquark and NC1P quark
C
C     XSQ=0.D0
      IF(IPIP.EQ.1)THEN
        XDIQT=XDIQT-XSQ
        XVQP =XVQP -XSAQ
      ELSEIF(IPIP.EQ.2)THEN
        XDIQT=XDIQT-XSAQ
        XVQP =XVQP -XSQ
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'XDIQT,XVQP after subtraction',XDIQT,XVQP
C
C     Split remaining valence diquark(NC1T) into quarks vq1T and vq2T
C
      XVTHRO=CVQ/UMO
      IVTHR=0
 3466 CONTINUE
      IF(IVTHR.EQ.10)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MGSQBS2 3466 reject IVTHR 10'
        IPCO=0
        RETURN
      ENDIF
      IVTHR=IVTHR+1
      XVTHR=XVTHRO/(201-IVTHR)
      UNOPRV=UNON
 380  CONTINUE
      IF(XVTHR.GT.0.66D0*XDIQT)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
	IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MGSQBS2 Rejection 380 XVTHR  large ',
     *  XVTHR
        IPCO=0
        RETURN
      ENDIF
      IF(DT_RNDM(V).LT.0.5D0)THEN
        XVTQI=DT_SAMPEX(XVTHR,0.66D0*XDIQT)
        XVTQII=XDIQT-XVTQI
      ELSE
        XVTQII=DT_SAMPEX(XVTHR,0.66D0*XDIQT)
        XVTQI=XDIQT-XVTQII
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,2E12.4)')'  MGSQBS2:XVTQI,XVTQII ',XVTQI,XVTQII
      ENDIF
C
C     Prepare 4 momenta of new chains and chain ends
C
C     COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
C    +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
C    +(4,NTMHKK)
C
C     Create chains 3 valence-diquark(NC2P 1)-valence-quark(vq1T 2)
C                   6 sea-antiquark(aqsP 4)-valence-quark(vq2T 5)
C                   9 valence-quark(NC1P 7)-diquark(NC2T+qsT 8)
C
C     SUBROUTINE MGSQBS2(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
C    *              IP1,IP21,IP22,IPP11,IPP12,IPP2,IGCOUN)
C
      IF(IPIP.EQ.1)THEN
        XSQ1=XSQ
        XSAQ1=XSAQ
        ISQ1=ISQ
        ISAQ1=ISAQ
      ELSEIF(IPIP.EQ.2)THEN
        XSQ1=XSAQ
        XSAQ1=XSQ
        ISQ1=ISAQ
        ISAQ1=ISQ
      ENDIF
      KK11=IP21
C     IDHKT(1)   =1000*IPP11+100*IPP12+1
      KK21=IPP11
      KK22=IPP12
      XGIVE=0.D0
      IF(IPIP.EQ.1)THEN
        IDHKT(4+IIGLU1)   =-(ISAQ1-6)
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(4+IIGLU1)   =ISAQ1
      ENDIF
      ISTHKT(4+IIGLU1)  =961
      JMOHKT(1,4+IIGLU1)=NC1P
      JMOHKT(2,4+IIGLU1)=0
      JDAHKT(1,4+IIGLU1)=6+IIGLU1
      JDAHKT(2,4+IIGLU1)=0
C     create chain    6 sea-antiquark(aqsP 4)-valence-quark(vq2T 5)
      PHKT(1,4+IIGLU1)  =PHKK(1,NC1P)*XSAQ1/(XVQP+XSAQ1)
      PHKT(2,4+IIGLU1)  =PHKK(2,NC1P)*XSAQ1/(XVQP+XSAQ1)
      PHKT(3,4+IIGLU1)  =PHKK(3,NC1P)*XSAQ1/(XVQP+XSAQ1)
      PHKT(4,4+IIGLU1)  =PHKK(4,NC1P)*XSAQ1/(XVQP+XSAQ1)
C     PHKT(5,4+IIGLU1)  =PHKK(5,NC1P)
      XXMIST=(PHKT(4,4+IIGLU1)**2-
     * PHKT(3,4+IIGLU1)**2-PHKT(2,4+IIGLU1)**2-
     *PHKT(1,4+IIGLU1)**2)
      IF(XXMIST.GT.0.D0)THEN
        PHKT(5,4+IIGLU1)  =SQRT(XXMIST)
      ELSE
        WRITE(ErrorOut,*)'MGSQBS2 XXMIST',XXMIST
        XXMIST=ABS(XXMIST)
        PHKT(5,4+IIGLU1)  =SQRT(XXMIST)
      ENDIF
      VHKT(1,4+IIGLU1)  =VHKK(1,NC1P)
      VHKT(2,4+IIGLU1)  =VHKK(2,NC1P)
      VHKT(3,4+IIGLU1)  =VHKK(3,NC1P)
      VHKT(4,4+IIGLU1)  =VHKK(4,NC1P)
      WHKT(1,4+IIGLU1)  =WHKK(1,NC1P)
      WHKT(2,4+IIGLU1)  =WHKK(2,NC1P)
      WHKT(3,4+IIGLU1)  =WHKK(3,NC1P)
      WHKT(4,4+IIGLU1)  =WHKK(4,NC1P)
      IDHKT(5+IIGLU1)   =IP22
      ISTHKT(5+IIGLU1)  =962
      JMOHKT(1,5+IIGLU1)=NC1T
      JMOHKT(2,5+IIGLU1)=0
      JDAHKT(1,5+IIGLU1)=6+IIGLU1
      JDAHKT(2,5+IIGLU1)=0
      PHKT(1,5+IIGLU1)  =PHKK(1,NC1T)*XVTQII/(XDIQT+XSQ1)
      PHKT(2,5+IIGLU1)  =PHKK(2,NC1T)*XVTQII/(XDIQT+XSQ1)
      PHKT(3,5+IIGLU1)  =PHKK(3,NC1T)*XVTQII/(XDIQT+XSQ1)
      PHKT(4,5+IIGLU1)  =PHKK(4,NC1T)*XVTQII/(XDIQT+XSQ1)
C     PHKT(5,5+IIGLU1)  =PHKK(5,NC1T)
      XXMIST=(PHKT(4,5+IIGLU1)**2-
     * PHKT(3,5+IIGLU1)**2-PHKT(2,5+IIGLU1)**2-
     *PHKT(1,5+IIGLU1)**2)
      IF(XXMIST.GT.0.D0)THEN
        PHKT(5,5+IIGLU1)  =SQRT(XXMIST)
      ELSE
        WRITE(ErrorOut,*)' MGSQBS2 XXMIST', XXMIST
        XXMIST=ABS(XXMIST)
        PHKT(5,5+IIGLU1)  =SQRT(XXMIST)
      ENDIF
      VHKT(1,5+IIGLU1)  =VHKK(1,NC1T)
      VHKT(2,5+IIGLU1)  =VHKK(2,NC1T)
      VHKT(3,5+IIGLU1)  =VHKK(3,NC1T)
      VHKT(4,5+IIGLU1)  =VHKK(4,NC1T)
      WHKT(1,5+IIGLU1)  =WHKK(1,NC1T)
      WHKT(2,5+IIGLU1)  =WHKK(2,NC1T)
      WHKT(3,5+IIGLU1)  =WHKK(3,NC1T)
      WHKT(4,5+IIGLU1)  =WHKK(4,NC1T)
      IDHKT(6+IIGLU1)   =88888
      ISTHKT(6+IIGLU1)  =96
      JMOHKT(1,6+IIGLU1)=4+IIGLU1
      JMOHKT(2,6+IIGLU1)=5+IIGLU1
      JDAHKT(1,6+IIGLU1)=0
      JDAHKT(2,6+IIGLU1)=0
      PHKT(1,6+IIGLU1)  =PHKT(1,4+IIGLU1)+PHKT(1,5+IIGLU1)
      PHKT(2,6+IIGLU1)  =PHKT(2,4+IIGLU1)+PHKT(2,5+IIGLU1)
      PHKT(3,6+IIGLU1)  =PHKT(3,4+IIGLU1)+PHKT(3,5+IIGLU1)
      PHKT(4,6+IIGLU1)  =PHKT(4,4+IIGLU1)+PHKT(4,5+IIGLU1)
      PHKT(5,6+IIGLU1)
     * =SQRT(PHKT(4,6+IIGLU1)**2-PHKT(1,6+IIGLU1)**2-PHKT(2,6+IIGLU1)**2
     *            -PHKT(3,6+IIGLU1)**2)
      CHAMAL=CHAM1
      IF(IPIP.EQ.1)THEN
        IF(IP22.GE.3.OR.ISAQ1.GE.9)CHAMAL=CHAM3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP22.LE.-3.OR.ISAQ1.GE.3)CHAMAL=CHAM3
      ENDIF
C---------------------------------------------------
      IF(PHKT(5,6+IIGLU1).LT.CHAMAL)THEN
        IF(IDHKT(5+IIGLU1).EQ.-IDHKT(4+IIGLU1))THEN
C                    we drop chain 6 and give the energy to chain 3
          IDHKT(6+IIGLU1)=22888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1'
	  GO TO 7788
        ELSEIF(IDHKT(4+IIGLU1).EQ.-IP21)THEN
C                    we drop chain 6 and give the energy to chain 3
C                    and change KK11 to IDHKT(5)
          IDHKT(6+IIGLU1)=22888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1 KK11=IDHKT(5)'
	  KK11=IDHKT(5+IIGLU1)
	  GO TO 7788
	ELSEIF(IDHKT(4+IIGLU1).EQ.-IPP11)THEN
C                    we drop chain 6 and give the energy to chain 3
C                    and change KK21 to IDHKT(5+IIGLU1)
C     IDHKT(1)   =1000*IPP11+100*IPP12+1
          IDHKT(6+IIGLU1)=22888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1 KK21=IDHKT(5+IIGLU1)'
	  KK21=IDHKT(5+IIGLU1)
	  GO TO 7788
	ELSEIF(IDHKT(4+IIGLU1).EQ.-IPP12)THEN
C                    we drop chain 6 and give the energy to chain 3
C                    and change KK22 to IDHKT(5)
C     IDHKT(1)   =1000*IPP11+100*IPP12+1
          IDHKT(6+IIGLU1)=22888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1 KK22=IDHKT(5+IIGLU1)'
	  KK22=IDHKT(5+IIGLU1)
	  GO TO 7788
	ENDIF
C       IREJ=1
	IPCO=0
C	RETURN
        GO TO 3466
      ENDIF
 7788 CONTINUE
C---------------------------------------------------
      IF(IPIP.GE.3)THEN
      WRITE(ErrorOut,
     * *)4+IIGLU1,ISTHKT(4+IIGLU1),IDHKT(4+IIGLU1),
     * JMOHKT(1,4+IIGLU1),JMOHKT(2,4+IIGLU1),JDAHKT(1,4+IIGLU1),
     *JDAHKT(2,4+IIGLU1),(PHKT(III,4+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)5+IIGLU1,ISTHKT(5+IIGLU1),IDHKT(5+IIGLU1),
     * JMOHKT(1,5+IIGLU1),JMOHKT(2,5+IIGLU1),JDAHKT(1,5+IIGLU1),
     *JDAHKT(2,5+IIGLU1),(PHKT(III,5+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)6+IIGLU1,ISTHKT(6+IIGLU1),IDHKT(6+IIGLU1),
     * JMOHKT(1,6+IIGLU1),JMOHKT(2,6+IIGLU1),JDAHKT(1,6+IIGLU1),
     *JDAHKT(2,6+IIGLU1),(PHKT(III,6+IIGLU1),III=1,5)
      ENDIF
      VHKT(1,6+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,6+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,6+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,6+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,6+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,6+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,6+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,6+IIGLU1)  =WHKK(4,NC1)
C     IDHKT(1)   =1000*IPP11+100*IPP12+1
      IF(IPIP.EQ.1)THEN
        IDHKT(1)   =1000*KK21+100*KK22+3
	IF(IDHKT(1).EQ.1203)IDHKT(1)=2103
	IF(IDHKT(1).EQ.1303)IDHKT(1)=3103
	IF(IDHKT(1).EQ.2303)IDHKT(1)=3203
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(1)   =1000*KK21+100*KK22-3
	IF(IDHKT(1).EQ.-1203)IDHKT(1)=-2103
	IF(IDHKT(1).EQ.-1303)IDHKT(1)=-3103
	IF(IDHKT(1).EQ.-2303)IDHKT(1)=-3203
      ENDIF
      ISTHKT(1)  =961
      JMOHKT(1,1)=NC2P
      JMOHKT(2,1)=0
      JDAHKT(1,1)=3+IIGLU1
      JDAHKT(2,1)=0
C     Create chains 3 valence-diquark(NC2P 1)-valence-quark(vq1T 2)
      PHKT(1,1)  =PHKK(1,NC2P)
     *+XGIVE*PHKT(1,4+IIGLU1)
      PHKT(2,1)  =PHKK(2,NC2P)
     *+XGIVE*PHKT(2,4+IIGLU1)
      PHKT(3,1)  =PHKK(3,NC2P)
     *+XGIVE*PHKT(3,4+IIGLU1)
      PHKT(4,1)  =PHKK(4,NC2P)
     *+XGIVE*PHKT(4,4+IIGLU1)
C     PHKT(5,1)  =PHKK(5,NC2P)
      XXMIST=PHKT(4,1)**2- PHKT(3,1)**2-PHKT(2,1)**2-
     *PHKT(1,1)**2
      IF(XXMIST.GT.0.D0)THEN
        PHKT(5,1)  =SQRT(XXMIST)
      ELSE
        WRITE(ErrorOut,*)'MGSQBS2',XXMIST
        XXMIST=ABS(XXMIST)
        PHKT(5,1)  =SQRT(XXMIST)
      ENDIF
      VHKT(1,1)  =VHKK(1,NC2P)
      VHKT(2,1)  =VHKK(2,NC2P)
      VHKT(3,1)  =VHKK(3,NC2P)
      VHKT(4,1)  =VHKK(4,NC2P)
      WHKT(1,1)  =WHKK(1,NC2P)
      WHKT(2,1)  =WHKK(2,NC2P)
      WHKT(3,1)  =WHKK(3,NC2P)
      WHKT(4,1)  =WHKK(4,NC2P)
C     Add here IIGLU1 gluons to this chaina
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU1.GE.1)THEN
      JJG=NC1P
      DO 61 IIG=2,2+IIGLU1-1
        KKG=JJG+IIG-1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=3+IIGLU1
        JDAHKT(2,IIG)=0
        PHKT(1,IIG)=PHKK(1,KKG)
        PG1=PG1+ PHKT(1,IIG)
        PHKT(2,IIG)=PHKK(2,KKG)
        PG2=PG2+ PHKT(2,IIG)
        PHKT(3,IIG)=PHKK(3,KKG)
        PG3=PG3+ PHKT(3,IIG)
        PHKT(4,IIG)=PHKK(4,KKG)
        PG4=PG4+ PHKT(4,IIG)
	PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG)  =WHKK(1,KKG)
        WHKT(2,IIG)  =WHKK(2,KKG)
        WHKT(3,IIG)  =WHKK(3,KKG)
        WHKT(4,IIG)  =WHKK(4,KKG)
   61 CONTINUE
      ENDIF
C     IDHKT(2)   =IP21
      IDHKT(2+IIGLU1)   =KK11
      ISTHKT(2+IIGLU1)  =962
      JMOHKT(1,2+IIGLU1)=NC1T
      JMOHKT(2,2+IIGLU1)=0
      JDAHKT(1,2+IIGLU1)=3+IIGLU1
      JDAHKT(2,2+IIGLU1)=0
      PHKT(1,2+IIGLU1)  =PHKK(1,NC1T)*XVTQI/(XDIQT+XSQ1)
C    * +0.5D0*PHKK(1,NC2T)
     *+XGIVE*PHKT(1,5+IIGLU1)
      PHKT(2,2+IIGLU1)  =PHKK(2,NC1T)*XVTQI/(XDIQT+XSQ1)
C    *+0.5D0*PHKK(2,NC2T)
     *+XGIVE*PHKT(2,5+IIGLU1)
      PHKT(3,2+IIGLU1)  =PHKK(3,NC1T)*XVTQI/(XDIQT+XSQ1)
C    *+0.5D0*PHKK(3,NC2T)
     *+XGIVE*PHKT(3,5+IIGLU1)
      PHKT(4,2+IIGLU1)  =PHKK(4,NC1T)*XVTQI/(XDIQT+XSQ1)
C    *+0.5D0*PHKK(4,NC2T)
     *+XGIVE*PHKT(4,5+IIGLU1)
C     PHKT(5,2)  =PHKK(5,NC1T)
      XXMIST=(PHKT(4,2+IIGLU1)**2-
     * PHKT(3,2+IIGLU1)**2-PHKT(2,2+IIGLU1)**2-
     *PHKT(1,2+IIGLU1)**2)
      IF(XXMIST.GT.0.D0)THEN
        PHKT(5,2+IIGLU1)  =SQRT(XXMIST)
      ELSE
        WRITE(ErrorOut,*)'MGSQBS2 XXMIST',XXMIST
        XXMIST=ABS(XXMIST)
        PHKT(5,2+IIGLU1)  =SQRT(XXMIST)
      ENDIF
      VHKT(1,2+IIGLU1)  =VHKK(1,NC1T)
      VHKT(2,2+IIGLU1)  =VHKK(2,NC1T)
      VHKT(3,2+IIGLU1)  =VHKK(3,NC1T)
      VHKT(4,2+IIGLU1)  =VHKK(4,NC1T)
      WHKT(1,2+IIGLU1)  =WHKK(1,NC1T)
      WHKT(2,2+IIGLU1)  =WHKK(2,NC1T)
      WHKT(3,2+IIGLU1)  =WHKK(3,NC1T)
      WHKT(4,2+IIGLU1)  =WHKK(4,NC1T)
      IDHKT(3+IIGLU1)   =88888
      ISTHKT(3+IIGLU1)  =96
      JMOHKT(1,3+IIGLU1)=1
      JMOHKT(2,3+IIGLU1)=2+IIGLU1
      JDAHKT(1,3+IIGLU1)=0
      JDAHKT(2,3+IIGLU1)=0
      PHKT(1,3+IIGLU1)  =PHKT(1,1)+PHKT(1,2+IIGLU1)+PG1
      PHKT(2,3+IIGLU1)  =PHKT(2,1)+PHKT(2,2+IIGLU1)+PG2
      PHKT(3,3+IIGLU1)  =PHKT(3,1)+PHKT(3,2+IIGLU1)+PG3
      PHKT(4,3+IIGLU1)  =PHKT(4,1)+PHKT(4,2+IIGLU1)+PG4
      PHKT(5,3+IIGLU1)
     * =SQRT(PHKT(4,3+IIGLU1)**2-PHKT(1,3+IIGLU1)**2-PHKT(2,3+IIGLU1)**2
     *            -PHKT(3,3+IIGLU1)**2)
      IF(IPIP.EQ.3)THEN
      WRITE(ErrorOut,
     * *)1,ISTHKT(1),IDHKT(1),JMOHKT(1,1),JMOHKT(2,1),
     * JDAHKT(1,1),
     *JDAHKT(2,1),(PHKT(III,1),III=1,5)
      DO 71 IIG=2,2+IIGLU1-1
      WRITE(ErrorOut,
     * *)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
     * JDAHKT(1,IIG),
     *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
   71 CONTINUE
      WRITE(ErrorOut,
     * *)2+IIGLU1,ISTHKT(2+IIGLU1),IDHKT(2+IIGLU1),
     * JMOHKT(1,2+IIGLU1),JMOHKT(2,2+IIGLU1),JDAHKT(1,2+IIGLU1),
     *JDAHKT(2,2+IIGLU1),(PHKT(III,2+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)3+IIGLU1,ISTHKT(3+IIGLU1),IDHKT(3+IIGLU1),
     * JMOHKT(1,3+IIGLU1),JMOHKT(2,3+IIGLU1),JDAHKT(1,3+IIGLU1),
     *JDAHKT(2,3+IIGLU1),(PHKT(III,3+IIGLU1),III=1,5)
      ENDIF
      CHAMAL=CHAB1
      IF(IPIP.EQ.1)THEN
        IF(IPP11.GE.3.OR.IPP12.GE.3.OR.IP21.GE.3)CHAMAL=CHAB3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IPP11.LE.-3.OR.IPP12.LE.-3.OR.IP21.LE.-3)CHAMAL=CHAB3
      ENDIF
      IF(PHKT(5,3+IIGLU1).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
	GO TO 3466
      ENDIF
      VHKT(1,3+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,3+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,3+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,3+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,3+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,3+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,3+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,3+IIGLU1)  =WHKK(4,NC1)
C     IDHKT(7+IIGLU1)   =1000*IPP1+100*ISQ+1
      IDHKT(7+IIGLU1)   =IP1
      ISTHKT(7+IIGLU1)  =961
      JMOHKT(1,7+IIGLU1)=NC1P
      JMOHKT(2,7+IIGLU1)=0
      JDAHKT(1,7+IIGLU1)=9+IIGLU1+IIGLU2
      JDAHKT(2,7+IIGLU1)=0
      PHKT(1,7+IIGLU1)  =PHKK(1,NC1P)*XVQP/(XVQP+XSAQ1)
      PHKT(2,7+IIGLU1)  =PHKK(2,NC1P)*XVQP/(XVQP+XSAQ1)
      PHKT(3,7+IIGLU1)  =PHKK(3,NC1P)*XVQP/(XVQP+XSAQ1)
      PHKT(4,7+IIGLU1)  =PHKK(4,NC1P)*XVQP/(XVQP+XSAQ1)
C     PHKT(5,7+IIGLU1)  =PHKK(5,NC1P)
      XXMIST=(PHKT(4,7+IIGLU1)**2-
     * PHKT(3,7+IIGLU1)**2-PHKT(2,7+IIGLU1)**2-
     *PHKT(1,7+IIGLU1)**2)
      IF(XXMIST.GT.0.D0)THEN
        PHKT(5,7+IIGLU1)  =SQRT(XXMIST)
      ELSE
        WRITE(ErrorOut,*)' MGSQBS2, XXMIST',XXMIST
        XXMIST=ABS(XXMIST)
        PHKT(5,7+IIGLU1)  =SQRT(XXMIST)
      ENDIF
      VHKT(1,7+IIGLU1)  =VHKK(1,NC1P)
      VHKT(2,7+IIGLU1)  =VHKK(2,NC1P)
      VHKT(3,7+IIGLU1)  =VHKK(3,NC1P)
      VHKT(4,7+IIGLU1)  =VHKK(4,NC1P)
      WHKT(1,7+IIGLU1)  =WHKK(1,NC1P)
      WHKT(2,7+IIGLU1)  =WHKK(2,NC1P)
      WHKT(3,7+IIGLU1)  =WHKK(3,NC1P)
      WHKT(4,7+IIGLU1)  =WHKK(4,NC2P)
C     IDHKT(7)   =1000*IPP1+100*ISQ+1
C     Insert here the IIGLU2 gluons
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU2.GE.1)THEN
      JJG=NC2P
      DO 81 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
        KKG=JJG+IIG-7-IIGLU1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=9+IIGLU1+IIGLU2
        JDAHKT(2,IIG)=0
        PHKT(1,IIG)=PHKK(1,KKG)
        PG1=PG1+ PHKT(1,IIG)
        PHKT(2,IIG)=PHKK(2,KKG)
        PG2=PG2+ PHKT(2,IIG)
        PHKT(3,IIG)=PHKK(3,KKG)
        PG3=PG3+ PHKT(3,IIG)
        PHKT(4,IIG)=PHKK(4,KKG)
        PG4=PG4+ PHKT(4,IIG)
	PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG)  =WHKK(1,KKG)
        WHKT(2,IIG)  =WHKK(2,KKG)
        WHKT(3,IIG)  =WHKK(3,KKG)
        WHKT(4,IIG)  =WHKK(4,KKG)
   81 CONTINUE
      ENDIF
      IF(IPIP.EQ.1)THEN
        IDHKT(8+IIGLU1+IIGLU2)   =1000*IPP2+100*ISQ1+3
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.1203)IDHKT(8+IIGLU1+IIGLU2)=2103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.1303)IDHKT(8+IIGLU1+IIGLU2)=3103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.2303)IDHKT(8+IIGLU1+IIGLU2)=3203
      ELSEIF(IPIP.EQ.2)THEN
c*NEW
C       IDHKT(8)   =1000*IPP2+100*(-ISQ1+6)-3
        IDHKT(8+IIGLU1+IIGLU2)   =1000*IPP2+100*(-ISQ1+6)-3
c*
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.-1203)IDHKT(8+IIGLU1+IIGLU2)=-2103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.-1303)IDHKT(8+IIGLU1+IIGLU2)=-3103
	IF(IDHKT(8+IIGLU1+IIGLU2).EQ.-2303)IDHKT(8+IIGLU1+IIGLU2)=-3203
      ENDIF
      ISTHKT(8+IIGLU1+IIGLU2)  =962
      JMOHKT(1,8+IIGLU1+IIGLU2)=NC2T
      JMOHKT(2,8+IIGLU1+IIGLU2)=0
      JDAHKT(1,8+IIGLU1+IIGLU2)=9+IIGLU1+IIGLU2
      JDAHKT(2,8+IIGLU1+IIGLU2)=0
C     PHKT(1,8)  =0.5D0*PHKK(1,NC2T)+PHKK(1,NC1T)*XSQ/(XDIQT+XSQ)
C     PHKT(2,8)  =0.5D0*PHKK(2,NC2T)+PHKK(2,NC1T)*XSQ/(XDIQT+XSQ)
C     PHKT(3,8)  =0.5D0*PHKK(3,NC2T)+PHKK(3,NC1T)*XSQ/(XDIQT+XSQ)
C     PHKT(4,8)  =0.5D0*PHKK(4,NC2T)+PHKK(4,NC1T)*XSQ/(XDIQT+XSQ)
      PHKT(1,8+IIGLU1+IIGLU2)  =
     * PHKK(1,NC2T)+PHKK(1,NC1T)*XSQ1/(XDIQT+XSQ1)
      PHKT(2,8+IIGLU1+IIGLU2)  =
     * PHKK(2,NC2T)+PHKK(2,NC1T)*XSQ1/(XDIQT+XSQ1)
      PHKT(3,8+IIGLU1+IIGLU2)  =
     * PHKK(3,NC2T)+PHKK(3,NC1T)*XSQ1/(XDIQT+XSQ1)
      PHKT(4,8+IIGLU1+IIGLU2)  =
     * PHKK(4,NC2T)+PHKK(4,NC1T)*XSQ1/(XDIQT+XSQ1)
C     WRITE(6,*)'PHKK(4,NC1T),PHKK(4,NC2T), PHKT(4,7)',
C    * PHKK(4,NC1T),PHKK(4,NC2T), PHKT(4,7)
      IF(PHKT(4,8+IIGLU1+IIGLU2).GE. PHKK(4,NC1T))THEN
C       IREJ=1
C	WRITE(6,*)'reject PHKT(4,8+IIGLU1+IIGLU2).GE. PHKK(4,NC1T)'
	IPCO=0
C	RETURN
	GO TO 3466
      ENDIF
C     PHKT(5,8)  =PHKK(5,NC2T)
      PHKT(5,8+IIGLU1+IIGLU2)  =SQRT(PHKT(4,8+IIGLU1+IIGLU2)**2-
     * PHKT(3,8+IIGLU1+IIGLU2)**2-PHKT(2,8+IIGLU1+IIGLU2)**2-
     *PHKT(1,8+IIGLU1+IIGLU2)**2)
      VHKT(1,8+IIGLU1+IIGLU2)  =VHKK(1,NC2T)
      VHKT(2,8+IIGLU1+IIGLU2)  =VHKK(2,NC2T)
      VHKT(3,8+IIGLU1+IIGLU2)  =VHKK(3,NC2T)
      VHKT(4,8+IIGLU1+IIGLU2)  =VHKK(4,NC2T)
      WHKT(1,8+IIGLU1+IIGLU2)  =WHKK(1,NC2T)
      WHKT(2,8+IIGLU1+IIGLU2)  =WHKK(2,NC2T)
      WHKT(3,8+IIGLU1+IIGLU2)  =WHKK(3,NC2T)
      WHKT(4,8+IIGLU1+IIGLU2)  =WHKK(4,NC2T)
      IDHKT(9+IIGLU1+IIGLU2)   =88888
      ISTHKT(9+IIGLU1+IIGLU2)  =96
      JMOHKT(1,9+IIGLU1+IIGLU2)=7+IIGLU1
      JMOHKT(2,9+IIGLU1+IIGLU2)=8+IIGLU1+IIGLU2
      JDAHKT(1,9+IIGLU1+IIGLU2)=0
      JDAHKT(2,9+IIGLU1+IIGLU2)=0
      PHKT(1,9+IIGLU1+IIGLU2)
     * =PHKT(1,7+IIGLU1)+PHKT(1,8+IIGLU1+IIGLU2)+PG1
      PHKT(2,9+IIGLU1+IIGLU2)
     * =PHKT(2,7+IIGLU1)+PHKT(2,8+IIGLU1+IIGLU2)+PG2
      PHKT(3,9+IIGLU1+IIGLU2)
     * =PHKT(3,7+IIGLU1)+PHKT(3,8+IIGLU1+IIGLU2)+PG3
      PHKT(4,9+IIGLU1+IIGLU2)
     * =PHKT(4,7+IIGLU1)+PHKT(4,8+IIGLU1+IIGLU2)+PG4
      PHKT(5,9+IIGLU1+IIGLU2)
     * =SQRT(PHKT(4,9+IIGLU1+IIGLU2)**2-PHKT(1,9+IIGLU1+IIGLU2)**2-
     * PHKT(2,9+IIGLU1+IIGLU2)**2
     *            -PHKT(3,9+IIGLU1+IIGLU2)**2)
      IF(IPIP.GE.3)THEN
      WRITE(ErrorOut,
     * *)7+IIGLU1,ISTHKT(7+IIGLU1),IDHKT(7+IIGLU1),
     * JMOHKT(1,7+IIGLU1),JMOHKT(2,7+IIGLU1),JDAHKT(1,7+IIGLU1),
     *JDAHKT(2,7+IIGLU1),(PHKT(III,7+IIGLU1),III=1,5)
      DO 91 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
      WRITE(ErrorOut,
     * *)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
     * JDAHKT(1,IIG),
     *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
   91 CONTINUE
      WRITE(ErrorOut,*)8+IIGLU1+IIGLU2,ISTHKT(8+IIGLU1+IIGLU2),
     * IDHKT(8+IIGLU1+IIGLU2),JMOHKT(1,8+IIGLU1+IIGLU2),
     *JMOHKT(2,8+IIGLU1+IIGLU2),JDAHKT(1,8+IIGLU1+IIGLU2),
     *JDAHKT(2,8+IIGLU1+IIGLU2),(PHKT(III,8+IIGLU1+IIGLU2),III=1,5)
      WRITE(ErrorOut,*)9+IIGLU1+IIGLU2,ISTHKT(9+IIGLU1+IIGLU2),
     * IDHKT(9+IIGLU1+IIGLU2),JMOHKT(1,9+IIGLU1+IIGLU2),
     *JMOHKT(2,9+IIGLU1+IIGLU2),JDAHKT(1,9+IIGLU1+IIGLU2),
     *JDAHKT(2,9+IIGLU1+IIGLU2),(PHKT(III,9+IIGLU1+IIGLU2),III=1,5)
      ENDIF
      CHAMAL=CHAB1
      IF(IPIP.EQ.1)THEN
        IF(IP1.GE.3.OR.IPP2.GE.3.OR.ISQ1.GE.3)CHAMAL=CHAB3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP1.LE.-3.OR.IPP2.LE.-3.OR.ISQ1.GE.9)CHAMAL=CHAB3
      ENDIF
      IF(PHKT(5,9+IIGLU1+IIGLU2).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
	GO TO 3466
      ENDIF
      VHKT(1,9+IIGLU1+IIGLU2)  =VHKK(1,NC1)
      VHKT(2,9+IIGLU1+IIGLU2)  =VHKK(2,NC1)
      VHKT(3,9+IIGLU1+IIGLU2)  =VHKK(3,NC1)
      VHKT(4,9+IIGLU1+IIGLU2)  =VHKK(4,NC1)
      WHKT(1,9+IIGLU1+IIGLU2)  =WHKK(1,NC1)
      WHKT(2,9+IIGLU1+IIGLU2)  =WHKK(2,NC1)
      WHKT(3,9+IIGLU1+IIGLU2)  =WHKK(3,NC1)
      WHKT(4,9+IIGLU1+IIGLU2)  =WHKK(4,NC1)
C
      IPCO=0
      IGCOUN=9+IIGLU1+IIGLU2
       RETURN
       END
C
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      SUBROUTINE MUSQBS1(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
     *              IP11,IP12,IP2,IPP1,IPP2,IPIP,ISQ,IGCOUN)
C
C                  USQBS-1 diagram (split projectile diquark)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3


C
      PARAMETER (NTMHKK= 300)
      COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
     +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
     +(4,NTMHKK)
cKEEP,XSEADI.
      COMMON /XSEADI/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     +SSMIMQ,VVMTHR
cKEEP,DPRIN.
      COMMON /DPRIN/ IPRI,IPEV,IPPA,IPCO,INIT,IPHKK,ITOPD,IPAUPR
      COMMON /EVFLAG/ NUMEV
C
C                  USQBS-1 diagram (split projectile diquark)
C
C     Input chain 1(NC1) valence-diquark(NC1P)-valence-quark(NC1T)
C     Input chain 2(NC2) sea-quark(NC2P)-sea-antiquark(NC2T)
C
C     Create quark(qsP)-antiquark(aqsT) pair, energy from NC1P and NC1T
C     Split remaining valence diquark(NC1P) into quarks vq1P and vq2P
C
C     Create chains 3 valence quark(vq1P 1)-sea-antiquark(NC2T 2)
C                   6 valence quark(vq2P 4)-sea-quark(aqsT 5)
C                   9 diquark(qsP+NC2P 7)-valence quark(NC1T 8)
C
C       Put new chains into COMMON /HKKTMP/
C
      IIGLU1=NC1T-NC1P-1
      IIGLU2=NC2T-NC2P-1
      IGCOUN=0
C     WRITE(6,*)'MUSQBS1: IIGLU1,IIGLU2,IPIP ',IIGLU1,IIGLU2,IPIP
      CVQ=1.D0
      IREJ=0
      IF(IPIP.EQ.3)THEN
C     IF(NUMEV.EQ.-324)THEN
      WRITE(ErrorOut,
     * *)' MUSQBS1(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,',
     *             ' IP11,IP12,IP2,IPP1,IPP2,IPIP,IGCOUN)',
     *NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
     *              IP11,IP12,IP2,IPP1,IPP2,IPIP,IGCOUN
      ENDIF
C
C
C
C     determine x-values of NC1P diquark
      XDIQP=PHKK(4,NC1P)*2.D0/UMO
      XVQT=PHKK(4,NC1T)*2.D0/UMO
C
C     determine x-values of sea quark pair
C
      IPCO=1
      ICOU=0
 2234 CONTINUE
      ICOU=ICOU+1
      IF(ICOU.GE.500)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MUSQBS1 Rejection 2234 ICOU. GT.100'
        IPCO=0
        RETURN
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MUSQBS1 call  XSEAPA: UMO,XDIQP,XVQT ',
     * UMO, XDIQP,XVQT
      XSQ=0.D0
      XSAQ=0.D0
c*NEW
C     CALL XSEAPA(UMO,XDIQP/2.D0,ISQ,ISAQ,XSQ,XSAQ,IREJ)
      IF (IPIP.EQ.1) THEN
         XQMAX  = XDIQP/2.0D0
         XAQMAX = 2.D0*XVQT/3.0D0
      ELSE
         XQMAX  = 2.D0*XVQT/3.0D0
         XAQMAX = XDIQP/2.0D0
      ENDIF
      CALL DT_CQPAIR(XQMAX,XAQMAX,XSQ,XSAQ,ISQ,IREJ)
      ISAQ = 6+ISQ
C     write(*,*) 'MUSQBS1: ',ISQ,XSQ,XDIQP,XSAQ,XVQT
c*
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MUSQBS1 after XSEAPA',ISQ,ISAQ,XSQ,XSAQ
      IF(IREJ.GE.1)THEN
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MUSQBS1 reject XSEAPA',ISQ,ISAQ,XSQ,XSAQ
        IPCO=0
        RETURN
      ENDIF
      IF(IPIP.EQ.1)THEN
        IF(XSAQ.GE.2.D0*XVQT/3.D0)GO TO 2234
      ELSEIF(IPIP.EQ.2)THEN
        IF(XSQ.GE.2.D0*XVQT/3.D0)GO TO 2234
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,4E12.4)')' MUSQBS1 XDIQP,XVQT,XSQ,XSAQ ',
     *	XDIQP,XVQT,XSQ,XSAQ
      ENDIF
C
C     subtract xsq,xsaq from NC1P diquark and NC1T quark
C
C     XSQ=0.D0
      IF(IPIP.EQ.1)THEN
        XDIQP=XDIQP-XSQ
        XVQT =XVQT -XSAQ
      ELSEIF(IPIP.EQ.2)THEN
        XDIQP=XDIQP-XSAQ
        XVQT =XVQT -XSQ
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'XDIQP,XVQT after subtraction',XDIQP,XVQT
C
C     Split remaining valence diquark(NC1P) into quarks vq1P and vq2P
C
      XVTHRO=CVQ/UMO
      IVTHR=0
 3466 CONTINUE
      IF(IVTHR.EQ.10)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MUSQBS1 3466 reject IVTHR 10'
        IPCO=0
        RETURN
      ENDIF
      IVTHR=IVTHR+1
      XVTHR=XVTHRO/(201-IVTHR)
      UNOPRV=UNON
 380  CONTINUE
      IF(XVTHR.GT.0.66D0*XDIQP)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
	IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MUSQBS1 Rejection 380 XVTHR  large ',
     *  XVTHR
        IPCO=0
        RETURN
      ENDIF
      IF(DT_RNDM(V).LT.0.5D0)THEN
        XVPQI=DT_SAMPEX(XVTHR,0.66D0*XDIQP)
        XVPQII=XDIQP-XVPQI
      ELSE
        XVPQII=DT_SAMPEX(XVTHR,0.66D0*XDIQP)
        XVPQI=XDIQP-XVPQII
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,2E12.4)')'  MUSQBS1:XVPQI,XVPQII ',XVPQI,XVPQII
      ENDIF
C
C     Prepare 4 momenta of new chains and chain ends
C
C     COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
C    +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
C    +(4,NTMHKK)
C     Create chains 3 valence quark(vq1P 1)-sea-antiquark(NC2T 2)
C                   6 valence quark(vq2P 4)-sea-quark(aqsT 5)
C                   9 diquark(qsP+NC2P 7)-valence quark(NC1T 8)
      IF(IPIP.EQ.1)THEN
        XSQ1=XSQ
        XSAQ1=XSAQ
        ISQ1=ISQ
        ISAQ1=ISAQ
      ELSEIF(IPIP.EQ.2)THEN
        XSQ1=XSAQ
        XSAQ1=XSQ
        ISQ1=ISAQ
        ISAQ1=ISQ
      ENDIF
      IDHKT(1)   =IP11
      ISTHKT(1)  =931
      JMOHKT(1,1)=NC1P
      JMOHKT(2,1)=0
      JDAHKT(1,1)=3+IIGLU1
      JDAHKT(2,1)=0
C     Create chains 3 valence quark(vq1P 1)-sea-antiquark(NC2T 2)
      PHKT(1,1)  =PHKK(1,NC1P)*XVPQI/(XDIQP+XSQ1)
      PHKT(2,1)  =PHKK(2,NC1P)*XVPQI/(XDIQP+XSQ1)
      PHKT(3,1)  =PHKK(3,NC1P)*XVPQI/(XDIQP+XSQ1)
      PHKT(4,1)  =PHKK(4,NC1P)*XVPQI/(XDIQP+XSQ1)
C     PHKT(5,1)  =PHKK(5,NC1P)
      XMIST  =(PHKT(4,1)**2- PHKT(3,1)**2-PHKT(2,1)**2-
     *PHKT(1,1)**2)
      IF(XMIST.GE.0.D0)THEN
      PHKT(5,1)  =SQRT(PHKT(4,1)**2- PHKT(3,1)**2-PHKT(2,1)**2-
     *PHKT(1,1)**2)
      ELSE
C      WRITE(6,*)'MUSQBS1 parton 1 mass square LT.0 ',XMIST
       PHKT(5,1)=0.D0
      ENDIF
      VHKT(1,1)  =VHKK(1,NC1P)
      VHKT(2,1)  =VHKK(2,NC1P)
      VHKT(3,1)  =VHKK(3,NC1P)
      VHKT(4,1)  =VHKK(4,NC1P)
      WHKT(1,1)  =WHKK(1,NC1P)
      WHKT(2,1)  =WHKK(2,NC1P)
      WHKT(3,1)  =WHKK(3,NC1P)
      WHKT(4,1)  =WHKK(4,NC1P)
C     Add here IIGLU1 gluons to this chaina
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU1.GE.1)THEN
      JJG=NC1P
      DO 61 IIG=2,2+IIGLU1-1
        KKG=JJG+IIG-1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=3+IIGLU1
        JDAHKT(2,IIG)=0
        PHKT(1,IIG)=PHKK(1,KKG)
        PG1=PG1+ PHKT(1,IIG)
        PHKT(2,IIG)=PHKK(2,KKG)
        PG2=PG2+ PHKT(2,IIG)
        PHKT(3,IIG)=PHKK(3,KKG)
        PG3=PG3+ PHKT(3,IIG)
	PHKT(4,IIG)=PHKK(4,KKG)
	PG4=PG4+ PHKT(4,IIG)
        PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG) =WHKK(1,KKG)
	WHKT(2,IIG) =WHKK(2,KKG)
	WHKT(3,IIG) =WHKK(3,KKG)
	WHKT(4,IIG) =WHKK(4,KKG)
   61 CONTINUE
      ENDIF
      IDHKT(2+IIGLU1)   =IPP2
      ISTHKT(2+IIGLU1)  =932
      JMOHKT(1,2+IIGLU1)=NC2T
      JMOHKT(2,2+IIGLU1)=0
      JDAHKT(1,2+IIGLU1)=3+IIGLU1
      JDAHKT(2,2+IIGLU1)=0
      PHKT(1,2+IIGLU1)  =PHKK(1,NC2T)
      PHKT(2,2+IIGLU1)  =PHKK(2,NC2T)
      PHKT(3,2+IIGLU1)  =PHKK(3,NC2T)
      PHKT(4,2+IIGLU1)  =PHKK(4,NC2T)
C     PHKT(5,2+IIGLU1)  =PHKK(5,NC2T)
      XMIST=(PHKT(4,2+IIGLU1)**2-
     * PHKT(3,2+IIGLU1)**2-PHKT(2,2+IIGLU1)**2-
     *PHKT(1,2+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,2+IIGLU1)  =SQRT(PHKT(4,2+IIGLU1)**2-
     * PHKT(3,2+IIGLU1)**2-PHKT(2,2+IIGLU1)**2-
     *PHKT(1,2+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,2+IIGLU1)=0.D0
      ENDIF
      VHKT(1,2+IIGLU1)  =VHKK(1,NC2T)
      VHKT(2,2+IIGLU1)  =VHKK(2,NC2T)
      VHKT(3,2+IIGLU1)  =VHKK(3,NC2T)
      VHKT(4,2+IIGLU1)  =VHKK(4,NC2T)
      WHKT(1,2+IIGLU1)  =WHKK(1,NC2T)
      WHKT(2,2+IIGLU1)  =WHKK(2,NC2T)
      WHKT(3,2+IIGLU1)  =WHKK(3,NC2T)
      WHKT(4,2+IIGLU1)  =WHKK(4,NC2T)
      IDHKT(3+IIGLU1)   =88888
      ISTHKT(3+IIGLU1)  =94
      JMOHKT(1,3+IIGLU1)=1
      JMOHKT(2,3+IIGLU1)=2+IIGLU1
      JDAHKT(1,3+IIGLU1)=0
      JDAHKT(2,3+IIGLU1)=0
      PHKT(1,3+IIGLU1)  =PHKT(1,1)+PHKT(1,2+IIGLU1)+PG1
      PHKT(2,3+IIGLU1)  =PHKT(2,1)+PHKT(2,2+IIGLU1)+PG2
      PHKT(3,3+IIGLU1)  =PHKT(3,1)+PHKT(3,2+IIGLU1)+PG3
      PHKT(4,3+IIGLU1)  =PHKT(4,1)+PHKT(4,2+IIGLU1)+PG4
      XMIST
     * =(PHKT(4,3+IIGLU1)**2-PHKT(1,3+IIGLU1)**2-PHKT(2,3+IIGLU1)**2
     *            -PHKT(3,3+IIGLU1)**2)
      IF(XMIST.GE.0.D0)THEN
      PHKT(5,3+IIGLU1)
     * =SQRT(PHKT(4,3+IIGLU1)**2-PHKT(1,3+IIGLU1)**2-PHKT(2,3+IIGLU1)**2
     *            -PHKT(3,3+IIGLU1)**2)
      ELSE
C      WRITE(6,*)'MUSQBS1 parton 1 mass square LT.0 ',XMIST
       PHKT(5,1)=0.D0
      ENDIF
      IF(IPIP.GE.3)THEN
C     IF(NUMEV.EQ.-324)THEN
      WRITE(ErrorOut,*)1,ISTHKT(1),IDHKT(1),JMOHKT(1,1),
     * JMOHKT(2,1),JDAHKT(1,1),
     *JDAHKT(2,1),(PHKT(III,1),III=1,5)
      DO 71 IIG=2,2+IIGLU1-1
      WRITE(ErrorOut,
     * *)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
     * JDAHKT(1,IIG),
     *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
   71 CONTINUE
      WRITE(ErrorOut,
     * *)2+IIGLU1,ISTHKT(2+IIGLU1),IDHKT(2+IIGLU1),
     * JMOHKT(1,2+IIGLU1),JMOHKT(2,2+IIGLU1),JDAHKT(1,2+IIGLU1),
     *JDAHKT(2,2+IIGLU1),(PHKT(III,2+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)3+IIGLU1,ISTHKT(3+IIGLU1),IDHKT(3+IIGLU1),
     * JMOHKT(1,3+IIGLU1),JMOHKT(2,3+IIGLU1),JDAHKT(1,3+IIGLU1),
     *JDAHKT(2,3+IIGLU1),(PHKT(III,3+IIGLU1),III=1,5)
      ENDIF
      CHAMAL=CHAM1
      IF(IPIP.EQ.1)THEN
        IF(IP11.GE.3.OR.IPP2.GE.3)CHAMAL=CHAM3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP11.LE.-3.OR.IPP2.LE.-3)CHAMAL=CHAM3
      ENDIF
      IF(PHKT(5,3+IIGLU1).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MUSQBS1 jump back from chain 3'
	GO TO 3466
      ENDIF
      VHKT(1,3+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,3+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,3+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,3+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,3+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,3+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,3+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,3+IIGLU1)  =WHKK(4,NC1)
      IDHKT(4+IIGLU1)   =IP12
      ISTHKT(4+IIGLU1)  =931
      JMOHKT(1,4+IIGLU1)=NC1P
      JMOHKT(2,4+IIGLU1)=0
      JDAHKT(1,4+IIGLU1)=6+IIGLU1
      JDAHKT(2,4+IIGLU1)=0
C   create  chain   6 valence quark(vq2P 4)-sea-quark(aqsT 5)
      PHKT(1,4+IIGLU1)  =PHKK(1,NC1P)*XVPQII/(XDIQP+XSQ1)
      PHKT(2,4+IIGLU1)  =PHKK(2,NC1P)*XVPQII/(XDIQP+XSQ1)
      PHKT(3,4+IIGLU1)  =PHKK(3,NC1P)*XVPQII/(XDIQP+XSQ1)
      PHKT(4,4+IIGLU1)  =PHKK(4,NC1P)*XVPQII/(XDIQP+XSQ1)
C     PHKT(5,4+IIGLU1)  =PHKK(5,NC1P)
      XMIST  =(PHKT(4,4+IIGLU1)**2-
     * PHKT(3,4+IIGLU1)**2-PHKT(2,4+IIGLU1)**2-
     *PHKT(1,4+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,4+IIGLU1)  =SQRT(PHKT(4,4+IIGLU1)**2-
     * PHKT(3,4+IIGLU1)**2-PHKT(2,4+IIGLU1)**2-
     *PHKT(1,4+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,4+IIGLU1)=0.D0
      ENDIF
      VHKT(1,4+IIGLU1)  =VHKK(1,NC1P)
      VHKT(2,4+IIGLU1)  =VHKK(2,NC1P)
      VHKT(3,4+IIGLU1)  =VHKK(3,NC1P)
      VHKT(4,4+IIGLU1)  =VHKK(4,NC1P)
      WHKT(1,4+IIGLU1)  =WHKK(1,NC1P)
      WHKT(2,4+IIGLU1)  =WHKK(2,NC1P)
      WHKT(3,4+IIGLU1)  =WHKK(3,NC1P)
      WHKT(4,4+IIGLU1)  =WHKK(4,NC1P)
      IF(IPIP.EQ.1)THEN
        IDHKT(5+IIGLU1)   =-(ISAQ1-6)
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(5+IIGLU1)   =ISAQ1
      ENDIF
      ISTHKT(5+IIGLU1)  =932
      JMOHKT(1,5+IIGLU1)=NC1T
      JMOHKT(2,5+IIGLU1)=0
      JDAHKT(1,5+IIGLU1)=6+IIGLU1
      JDAHKT(2,5+IIGLU1)=0
      PHKT(1,5+IIGLU1)  =PHKK(1,NC1T)*XSAQ1/(XVQT+XSAQ1)
      PHKT(2,5+IIGLU1)  =PHKK(2,NC1T)*XSAQ1/(XVQT+XSAQ1)
      PHKT(3,5+IIGLU1)  =PHKK(3,NC1T)*XSAQ1/(XVQT+XSAQ1)
      PHKT(4,5+IIGLU1)  =PHKK(4,NC1T)*XSAQ1/(XVQT+XSAQ1)
C     IF( PHKT(4,5).EQ.0.D0)THEN
C       IREJ=1
CIPCO=0
CRETURN
C     ENDIF
C     PHKT(5,5)  =PHKK(5,NC1T)
      XMIST=(PHKT(4,5+IIGLU1)**2-
     * PHKT(3,5+IIGLU1)**2-PHKT(2,5+IIGLU1)**2-
     *PHKT(1,5+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,5+IIGLU1)  =SQRT(PHKT(4,5+IIGLU1)**2-
     * PHKT(3,5+IIGLU1)**2-PHKT(2,5+IIGLU1)**2-
     *PHKT(1,5+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
      VHKT(1,5+IIGLU1)  =VHKK(1,NC1T)
      VHKT(2,5+IIGLU1)  =VHKK(2,NC1T)
      VHKT(3,5+IIGLU1)  =VHKK(3,NC1T)
      VHKT(4,5+IIGLU1)  =VHKK(4,NC1T)
      WHKT(1,5+IIGLU1)  =WHKK(1,NC1T)
      WHKT(2,5+IIGLU1)  =WHKK(2,NC1T)
      WHKT(3,5+IIGLU1)  =WHKK(3,NC1T)
      WHKT(4,5+IIGLU1)  =WHKK(4,NC1T)
      IDHKT(6+IIGLU1)   =88888
      ISTHKT(6+IIGLU1)  =94
      JMOHKT(1,6+IIGLU1)=4+IIGLU1
      JMOHKT(2,6+IIGLU1)=5+IIGLU1
      JDAHKT(1,6+IIGLU1)=0
      JDAHKT(2,6+IIGLU1)=0
      PHKT(1,6+IIGLU1)  =PHKT(1,4+IIGLU1)+PHKT(1,5+IIGLU1)
      PHKT(2,6+IIGLU1)  =PHKT(2,4+IIGLU1)+PHKT(2,5+IIGLU1)
      PHKT(3,6+IIGLU1)  =PHKT(3,4+IIGLU1)+PHKT(3,5+IIGLU1)
      PHKT(4,6+IIGLU1)  =PHKT(4,4+IIGLU1)+PHKT(4,5+IIGLU1)
      XMIST
     * =(PHKT(4,6+IIGLU1)**2-PHKT(1,6+IIGLU1)**2-PHKT(2,6+IIGLU1)**2
     *            -PHKT(3,6+IIGLU1)**2)
      IF(XMIST.GE.0.D0)THEN
      PHKT(5,6+IIGLU1)
     * =SQRT(PHKT(4,6+IIGLU1)**2-PHKT(1,6+IIGLU1)**2-PHKT(2,6+IIGLU1)**2
     *            -PHKT(3,6+IIGLU1)**2)
      ELSE
C      WRITE(6,*)'MUSQBS1 parton 1 mass square LT.0 ',XMIST
       PHKT(5,1)=0.D0
      ENDIF
C     IF(IPIP.EQ.3)THEN
      CHAMAL=CHAM1
      IF(IPIP.EQ.1)THEN
        IF(IP12.GE.3.OR.ISAQ1.GE.9)CHAMAL=CHAM3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP12.LE.-3.OR.ISAQ1.GE.3)CHAMAL=CHAM3
      ENDIF
      IF(PHKT(5,6+IIGLU1).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MGSQBS1 jump back from chain 6',
C    *	CHAMAL,PHKT(5,6+IIGLU1)
	GO TO 3466
      ENDIF
      IF(IPIP.GE.3)THEN
C     IF(NUMEV.EQ.-324)THEN
      WRITE(ErrorOut,
     * *)4+IIGLU1,ISTHKT(4+IIGLU1),IDHKT(4+IIGLU1),
     * JMOHKT(1,4+IIGLU1),JMOHKT(2,4+IIGLU1),JDAHKT(1,4+IIGLU1),
     *JDAHKT(2,4+IIGLU1),(PHKT(III,4+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)5+IIGLU1,ISTHKT(5+IIGLU1),IDHKT(5+IIGLU1),
     * JMOHKT(1,5+IIGLU1),JMOHKT(2,5+IIGLU1),JDAHKT(1,5+IIGLU1),
     *JDAHKT(2,5+IIGLU1),(PHKT(III,5+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)6+IIGLU1,ISTHKT(6+IIGLU1),IDHKT(6+IIGLU1),
     * JMOHKT(1,6+IIGLU1),JMOHKT(2,6+IIGLU1),JDAHKT(1,6+IIGLU1),
     *JDAHKT(2,6+IIGLU1),(PHKT(III,6+IIGLU1),III=1,5)
      ENDIF
      VHKT(1,6+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,6+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,6+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,6+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,6+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,6+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,6+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,6+IIGLU1)  =WHKK(4,NC1)
      IF(IPIP.EQ.1)THEN
        IDHKT(7+IIGLU1)   =1000*IPP1+100*ISQ+3
	IF(IDHKT(7+IIGLU1).EQ.1203)IDHKT(7+IIGLU1)=2103
	IF(IDHKT(7+IIGLU1).EQ.1303)IDHKT(7+IIGLU1)=3103
	IF(IDHKT(7+IIGLU1).EQ.2303)IDHKT(7+IIGLU1)=3203
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(7+IIGLU1)   =1000*IPP1+100*(-ISQ1+6)-3
	IF(IDHKT(7+IIGLU1).EQ.-1203)IDHKT(7+IIGLU1)=-2103
	IF(IDHKT(7+IIGLU1).EQ.-1303)IDHKT(7+IIGLU1)=-3103
	IF(IDHKT(7+IIGLU1).EQ.-2303)IDHKT(7+IIGLU1)=-3203
C       WRITE(6,*)'IDHKT(7+IIGLU1),IPP1,ISQ1',IDHKT(7+IIGLU1),IPP1,ISQ1
      ENDIF
      ISTHKT(7+IIGLU1)  =931
      JMOHKT(1,7+IIGLU1)=NC2P
      JMOHKT(2,7+IIGLU1)=0
      JDAHKT(1,7+IIGLU1)=9+IIGLU1+IIGLU2
      JDAHKT(2,7+IIGLU1)=0
C    create chain     9 diquark(qsP+NC2P 7)-valence quark(NC1T 8)
      PHKT(1,7+IIGLU1)  =PHKK(1,NC2P)+PHKK(1,NC1P)*XSQ1/(XDIQP+XSQ1)
      PHKT(2,7+IIGLU1)  =PHKK(2,NC2P)+PHKK(2,NC1P)*XSQ1/(XDIQP+XSQ1)
      PHKT(3,7+IIGLU1)  =PHKK(3,NC2P)+PHKK(3,NC1P)*XSQ1/(XDIQP+XSQ1)
      PHKT(4,7+IIGLU1)  =PHKK(4,NC2P)+PHKK(4,NC1P)*XSQ1/(XDIQP+XSQ1)
C     WRITE(6,*)'PHKK(4,NC1P),PHKK(4,NC2P), PHKT(4,7)',
C    * PHKK(4,NC1P),PHKK(4,NC2P), PHKT(4,7)
      IF(PHKT(4,7+IIGLU1).GE. PHKK(4,NC1P))THEN
C       IREJ=1
C	WRITE(6,*)'reject PHKT(4,7+IIGLU1).GE. PHKK(4,NC1P)'
	IPCO=0
C	RETURN
	GO TO 3466
      ENDIF
C     PHKT(5,7)  =PHKK(5,NC2P)
      PHKT(5,7+IIGLU1)  =SQRT(PHKT(4,7+IIGLU1)**2-
     * PHKT(3,7+IIGLU1)**2-PHKT(2,7+IIGLU1)**2-
     *PHKT(1,7+IIGLU1)**2)
      VHKT(1,7+IIGLU1)  =VHKK(1,NC2P)
      VHKT(2,7+IIGLU1)  =VHKK(2,NC2P)
      VHKT(3,7+IIGLU1)  =VHKK(3,NC2P)
      VHKT(4,7+IIGLU1)  =VHKK(4,NC2P)
      WHKT(1,7+IIGLU1)  =WHKK(1,NC2P)
      WHKT(2,7+IIGLU1)  =WHKK(2,NC2P)
      WHKT(3,7+IIGLU1)  =WHKK(3,NC2P)
      WHKT(4,7+IIGLU1)  =WHKK(4,NC2P)
C     Insert here the IIGLU2 gluons
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU2.GE.1)THEN
      JJG=NC2P
      DO 81 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
        KKG=JJG+IIG-7-IIGLU1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=9+IIGLU1+IIGLU2
        JDAHKT(2,IIG)=0
        PHKT(1,IIG)=PHKK(1,KKG)
        PG1=PG1+ PHKT(1,IIG)
        PHKT(2,IIG)=PHKK(2,KKG)
        PG2=PG2+ PHKT(2,IIG)
        PHKT(3,IIG)=PHKK(3,KKG)
        PG3=PG3+ PHKT(3,IIG)
        PHKT(4,IIG)=PHKK(4,KKG)
        PG4=PG4+ PHKT(4,IIG)
	PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG)  =WHKK(1,KKG)
        WHKT(2,IIG) =WHKK(2,KKG)
	WHKT(3,IIG) =WHKK(3,KKG)
	WHKT(4,IIG) =WHKK(4,KKG)
   81 CONTINUE
      ENDIF
      IDHKT(8+IIGLU1+IIGLU2)   =IP2
      ISTHKT(8+IIGLU1+IIGLU2)  =932
      JMOHKT(1,8+IIGLU1+IIGLU2)=NC1T
      JMOHKT(2,8+IIGLU1+IIGLU2)=0
      JDAHKT(1,8+IIGLU1+IIGLU2)=9+IIGLU1+IIGLU2
      JDAHKT(2,8+IIGLU1+IIGLU2)=0
      PHKT(1,8+IIGLU1+IIGLU2)  =PHKK(1,NC1T)*XVQT/(XSAQ1+XVQT)
      PHKT(2,8+IIGLU1+IIGLU2)  =PHKK(2,NC1T)*XVQT/(XSAQ1+XVQT)
      PHKT(3,8+IIGLU1+IIGLU2)  =PHKK(3,NC1T)*XVQT/(XSAQ1+XVQT)
      PHKT(4,8+IIGLU1+IIGLU2)  =PHKK(4,NC1T)*XVQT/(XSAQ1+XVQT)
C     PHKT(5,8+IIGLU1+IIGLU2)  =PHKK(5,NC1T)
      XMIST=(PHKT(4,8+IIGLU1+IIGLU2)**2-
     * PHKT(3,8+IIGLU1+IIGLU2)**2-PHKT(2,8+IIGLU1+IIGLU2)**2-
     *PHKT(1,8+IIGLU1+IIGLU2)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,8+IIGLU1+IIGLU2)  =SQRT(PHKT(4,8+IIGLU1+IIGLU2)**2-
     * PHKT(3,8+IIGLU1+IIGLU2)**2-PHKT(2,8+IIGLU1+IIGLU2)**2-
     *PHKT(1,8+IIGLU1+IIGLU2)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,8+IIGLU1+IIGLU2)=0.D0
      ENDIF
      VHKT(1,8+IIGLU1+IIGLU2)  =VHKK(1,NC1T)
      VHKT(2,8+IIGLU1+IIGLU2)  =VHKK(2,NC1T)
      VHKT(3,8+IIGLU1+IIGLU2)  =VHKK(3,NC1T)
      VHKT(4,8+IIGLU1+IIGLU2)  =VHKK(4,NC1T)
      WHKT(1,8+IIGLU1+IIGLU2)  =WHKK(1,NC1T)
      WHKT(2,8+IIGLU1+IIGLU2)  =WHKK(2,NC1T)
      WHKT(3,8+IIGLU1+IIGLU2)  =WHKK(3,NC1T)
      WHKT(4,8+IIGLU1+IIGLU2)  =WHKK(4,NC1T)
      IDHKT(9+IIGLU1+IIGLU2)   =88888
      ISTHKT(9+IIGLU1+IIGLU2)  =94
      JMOHKT(1,9+IIGLU1+IIGLU2)=7+IIGLU1
      JMOHKT(2,9+IIGLU1+IIGLU2)=8+IIGLU1+IIGLU2
      JDAHKT(1,9+IIGLU1+IIGLU2)=0
      JDAHKT(2,9+IIGLU1+IIGLU2)=0
      PHKT(1,9+IIGLU1+IIGLU2)
     * =PHKT(1,7+IIGLU1)+PHKT(1,8+IIGLU1+IIGLU2)+PG1
      PHKT(2,9+IIGLU1+IIGLU2)
     * =PHKT(2,7+IIGLU1)+PHKT(2,8+IIGLU1+IIGLU2)+PG2
      PHKT(3,9+IIGLU1+IIGLU2)
     * =PHKT(3,7+IIGLU1)+PHKT(3,8+IIGLU1+IIGLU2)+PG3
      PHKT(4,9+IIGLU1+IIGLU2)
     * =PHKT(4,7+IIGLU1)+PHKT(4,8+IIGLU1+IIGLU2)+PG4
      XMIST
     *=(PHKT(4,9+IIGLU1+IIGLU2)**2-PHKT(1,9+IIGLU1+IIGLU2)**2
     * -PHKT(2,9+IIGLU1+IIGLU2)**2
     *            -PHKT(3,9+IIGLU1+IIGLU2)**2)
      IF(XMIST.GE.0.D0)THEN
      PHKT(5,9+IIGLU1+IIGLU2)
     *=SQRT(PHKT(4,9+IIGLU1+IIGLU2)**2-PHKT(1,9+IIGLU1+IIGLU2)**2
     * -PHKT(2,9+IIGLU1+IIGLU2)**2
     *            -PHKT(3,9+IIGLU1+IIGLU2)**2)
      ELSE
C      WRITE(6,*)'MUSQBS1 parton 1 mass square LT.0 ',XMIST
       PHKT(5,1)=0.D0
      ENDIF
      IF(IPIP.GE.3)THEN
C     IF(NUMEV.EQ.-324)THEN
      WRITE(ErrorOut,
     * *)7+IIGLU1,ISTHKT(7+IIGLU1),IDHKT(7+IIGLU1),
     * JMOHKT(1,7+IIGLU1),JMOHKT(2,7+IIGLU1),JDAHKT(1,7+IIGLU1),
     *JDAHKT(2,7+IIGLU1),(PHKT(III,7+IIGLU1),III=1,5)
      DO 91 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
      WRITE(ErrorOut,
     * *)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
     * JDAHKT(1,IIG),
     *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
   91 CONTINUE
      WRITE(ErrorOut,*)8+IIGLU1+IIGLU2,
     * ISTHKT(8+IIGLU1+IIGLU2),IDHKT(8+IIGLU1+IIGLU2),
     * JMOHKT(1,8+IIGLU1+IIGLU2),JMOHKT(2,8+IIGLU1+IIGLU2),
     *JDAHKT(1,8+IIGLU1+IIGLU2),
     *JDAHKT(2,8+IIGLU1+IIGLU2),(PHKT(III,8+IIGLU1+IIGLU2),III=1,5)
      WRITE(ErrorOut,*)9+IIGLU1+IIGLU2,ISTHKT(9+IIGLU1+IIGLU2),
     * IDHKT(9+IIGLU1+IIGLU2),JMOHKT(1,9+IIGLU1+IIGLU2),
     *JMOHKT(2,9+IIGLU1+IIGLU2),JDAHKT(1,9+IIGLU1+IIGLU2),
     *JDAHKT(2,9+IIGLU1+IIGLU2),(PHKT(III,9+IIGLU1+IIGLU2),III=1,5)
      ENDIF
      CHAMAL=CHAB1
      IF(IPIP.EQ.1)THEN
        IF(IP2.GE.3.OR.IPP1.GE.3.OR.ISQ1.GE.3)CHAMAL=CHAB3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP2.LE.-3.OR.IPP1.LE.-3.OR.ISQ1.GE.9)CHAMAL=CHAB3
      ENDIF
      IF(PHKT(5,9+IIGLU1+IIGLU2).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MGSQBS1 jump back from chain 9',
C    *  'CHAMAL,PHKT(5,9+IIGLU1+IIGLU2)',CHAMAL,PHKT(5,9+IIGLU1+IIGLU2)
	GO TO 3466
      ENDIF
      VHKT(1,9+IIGLU1+IIGLU2)  =VHKK(1,NC1)
      VHKT(2,9+IIGLU1+IIGLU2)  =VHKK(2,NC1)
      VHKT(3,9+IIGLU1+IIGLU2)  =VHKK(3,NC1)
      VHKT(4,9+IIGLU1+IIGLU2)  =VHKK(4,NC1)
      WHKT(1,9+IIGLU1+IIGLU2)  =WHKK(1,NC1)
      WHKT(2,9+IIGLU1+IIGLU2)  =WHKK(2,NC1)
      WHKT(3,9+IIGLU1+IIGLU2)  =WHKK(3,NC1)
      WHKT(4,9+IIGLU1+IIGLU2)  =WHKK(4,NC1)
C
      IPCO=0
      IGCOUN=9+IIGLU1+IIGLU2
       RETURN
       END
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      SUBROUTINE MGSQBS1(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
     *              IP11,IP12,IP2,IPP1,IPP21,IPP22,IPIP,ISQ,IGCOUN)
C
C                  GSQBS-1 diagram (split projectile diquark)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
#include "Zmanagerp.h"
      SAVE

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3


C
      PARAMETER (NTMHKK= 300)
      COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
     +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
     +(4,NTMHKK)
cKEEP,XSEADI.
      COMMON /XSEADI/ XSEACU,UNON,UNOM,UNOSEA,CVQ,CDQ,CSEA,SSMIMA,
     +SSMIMQ,VVMTHR
cKEEP,DPRIN.
      COMMON /DPRIN/ IPRI,IPEV,IPPA,IPCO,INIT,IPHKK,ITOPD,IPAUPR
C
C                  GSQBS-1 diagram (split projectile diquark)
C
C
C     Input chain 1(NC1) valence-diquark(NC1P)-valence-quark(NC1T)
C     Input chain 2(NC2) sea-quark(NC2P)-valence-diquark(NC2T)
C
C     Create quark(qs)-antiquark(aqs) pair energy from NC1P and NC1T
C     Split remaining valence diquark(NC1P) into quarks vq1P and vq2P
C
C     Create chains 3 valence quark(vq1P 1)-valence diquark(NC2T 2)
C                   6 valence quark(vq2P 4)-sea-quark(aqsP 5)
C                   9 diquark(qsP+NC2P 7)-valence quark(NC1T 8)
C
C       Put new chains into COMMON /HKKTMP/
C
      IIGLU1=NC1T-NC1P-1
      IIGLU2=NC2T-NC2P-1
      IGCOUN=0
C     WRITE(6,*)' IIGLU1,IIGLU2 ',IIGLU1,IIGLU2
      CVQ=1.D0
      NNNC1=IDHKK(NC1)/1000
      MMMC1=IDHKK(NC1)-NNNC1*1000
      KKKC1=ISTHKK(NC1)
      NNNC2=IDHKK(NC2)/1000
      MMMC2=IDHKK(NC2)-NNNC2*1000
      KKKC2=ISTHKK(NC2)
      IREJ=0
      IF(IPIP.EQ.3)THEN
      WRITE(ErrorOut,
     * *)' MGSQBS1(NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,',
     *             ' IP11,IP12,IP2,IPP1,IPP21,IPP22,IPIP,IGCOUN)',
     *NC1,NC1P,NC1T,NC2,NC2P,NC2T,IREJ,
     *              IP11,IP12,IP2,IPP1,IPP21,IPP22,IPIP,IGCOUN
      ENDIF
C
C
C
C     determine x-values of NC1P diquark
      XDIQP=PHKK(4,NC1P)*2.D0/UMO
      XVQT=PHKK(4,NC1T)*2.D0/UMO
C
C     determine x-values of sea quark pair
C
      IPCO=1
      ICOU=0
 2234 CONTINUE
      ICOU=ICOU+1
      IF(ICOU.GE.500)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MGSQBS1 Rejection 2234 ICOU. GT.100'
      IPCO=0
        RETURN
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MGSQBS1 call  XSEAPA: UMO,XDIQP,XVQT ',
     * UMO, XDIQP,XVQT
      XSQ=0.D0
      XSAQ=0.D0
c*NEW
C     CALL XSEAPA(UMO,XDIQP/2.D0,ISQ,ISAQ,XSQ,XSAQ,IREJ)
      IF (IPIP.EQ.1) THEN
         XQMAX  = XDIQP/2.0D0
         XAQMAX = 2.D0*XVQT/3.0D0
      ELSE
         XQMAX  = 2.D0*XVQT/3.0D0
         XAQMAX = XDIQP/2.0D0
      ENDIF
      CALL DT_CQPAIR(XQMAX,XAQMAX,XSQ,XSAQ,ISQ,IREJ)
      ISAQ = 6+ISQ
C     write(*,*) 'MGSQBS1: ',ISQ,XSQ,XDIQP,XSAQ,XVQT
c*
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MGSQBS1 after XSEAPA',ISQ,ISAQ,XSQ,XSAQ
      IF(IREJ.GE.1)THEN
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'MGSQBS1 reject XSEAPA',ISQ,ISAQ,XSQ,XSAQ
      IPCO=0
        RETURN
      ENDIF
      IF(IPIP.EQ.1)THEN
        IF(XSAQ.GE.2.D0*XVQT/3.D0)GO TO 2234
      ELSEIF(IPIP.EQ.2)THEN
        IF(XSQ.GE.2.D0*XVQT/3.D0)GO TO 2234
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,4E12.4)')' MGSQBS1 XDIQP,XVQT,XSQ,XSAQ ',
     *	XDIQP,XVQT,XSQ,XSAQ
      ENDIF
C
C     subtract xsq,xsaq from NC1P diquark and NC1T quark
C
C     XSQ=0.D0
      IF(IPIP.EQ.1)THEN
        XDIQP=XDIQP-XSQ
c*NEW
C       IF (XDIQP.LT.0.0D0) WRITE(*,*) ' mgsqbs1: XDIQP<0!!',XDIQP
c*
        XVQT =XVQT -XSAQ
      ELSEIF(IPIP.EQ.2)THEN
        XDIQP=XDIQP-XSAQ
        XVQT =XVQT -XSQ
      ENDIF
      IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)'XDIQP,XVQT after subtraction',XDIQP,XVQT
C
C     Split remaining valence diquark(NC1P) into quarks vq1P and vq2P
C
      XVTHRO=CVQ/UMO
      IVTHR=0
 3466 CONTINUE
      IF(IVTHR.EQ.10)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
        IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MGSQBS1 3466 reject IVTHR 10'
      IPCO=0
        RETURN
      ENDIF
      IVTHR=IVTHR+1
      XVTHR=XVTHRO/(201-IVTHR)
      UNOPRV=UNON
 380  CONTINUE
      IF(XVTHR.GT.0.66D0*XDIQP)THEN
        IREJ=1
        IF(ISQ.EQ.3)IREJ=3
	IF(IPCO.GE.3)WRITE(ErrorOut,
     * *)' MGSQBS1 Rejection 380 XVTHR  large ',
     *  XVTHR
      IPCO=0
        RETURN
      ENDIF
      IF(DT_RNDM(V).LT.0.5D0)THEN
        XVPQI=DT_SAMPEX(XVTHR,0.66D0*XDIQP)
        XVPQII=XDIQP-XVPQI
      ELSE
        XVPQII=DT_SAMPEX(XVTHR,0.66D0*XDIQP)
        XVPQI=XDIQP-XVPQII
      ENDIF
      IF(IPCO.GE.3)THEN
        WRITE(ErrorOut,
     * '(A,4E12.4)')'  MGSQBS1:XVTHR,XDIQP,XVPQI,XVPQII ',
     *	XVTHR,XDIQP,XVPQI,XVPQII
      ENDIF
C
C     Prepare 4 momenta of new chains and chain ends
C
C     COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
C    +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
C    +(4,NTMHKK)
C     Create chains 3 valence quark(vq1P 1)-valence diquark(NC2T 2)
C                   6 valence quark(vq2P 4)-sea-quark(aqsP 5)
C                   9 diquark(qsP+NC2P 7)-valence quark(NC1T 8)
      IF(IPIP.EQ.1)THEN
        XSQ1=XSQ
	XSAQ1=XSAQ
	ISQ1=ISQ
	ISAQ1=ISAQ
      ELSEIF(IPIP.EQ.2)THEN
        XSQ1=XSAQ
	XSAQ1=XSQ
	ISQ1=ISAQ
	ISAQ1=ISQ
      ENDIF
      KK11=IP11
C     IDHKT(2)   =1000*IPP21+100*IPP22+1
      KK21= IPP21
      KK22= IPP22
      XGIVE=0.D0
      IDHKT(4+IIGLU1)   =IP12
      ISTHKT(4+IIGLU1)  =921
      JMOHKT(1,4+IIGLU1)=NC1P
      JMOHKT(2,4+IIGLU1)=0
      JDAHKT(1,4+IIGLU1)=6+IIGLU1
      JDAHKT(2,4+IIGLU1)=0
c*NEW
      IF ((XDIQP.LT.0.0D0).OR.(XVPQII.LT.0.0D0).OR.
     &    (XSQ1.LT.0.0D0)) WRITE(*,*) ' mgsqbs1: ',XDIQP,XVPQII,XSQ1
c*
      PHKT(1,4+IIGLU1)  =PHKK(1,NC1P)*XVPQII/(XDIQP+XSQ1)
      PHKT(2,4+IIGLU1)  =PHKK(2,NC1P)*XVPQII/(XDIQP+XSQ1)
      PHKT(3,4+IIGLU1)  =PHKK(3,NC1P)*XVPQII/(XDIQP+XSQ1)
      PHKT(4,4+IIGLU1)  =PHKK(4,NC1P)*XVPQII/(XDIQP+XSQ1)
C     PHKT(5,4+IIGLU1)  =PHKK(5,NC1P)
      XXMIST=(PHKT(4,4+IIGLU1)**2-
     *              PHKT(3,4+IIGLU1)**2-PHKT(2,4+IIGLU1)**2-
     *              PHKT(1,4+IIGLU1)**2)
      IF(XXMIST.GT.0.D0)THEN
        PHKT(5,4+IIGLU1)  =SQRT(XXMIST)
      ELSE
        WRITE(ErrorOut,*)'MGSQBS1 XXMIST',XXMIST
        XXMIST=ABS(XXMIST)
        PHKT(5,4+IIGLU1)  =SQRT(XXMIST)
      ENDIF
      VHKT(1,4+IIGLU1)  =VHKK(1,NC1P)
      VHKT(2,4+IIGLU1)  =VHKK(2,NC1P)
      VHKT(3,4+IIGLU1)  =VHKK(3,NC1P)
      VHKT(4,4+IIGLU1)  =VHKK(4,NC1P)
      WHKT(1,4+IIGLU1)  =WHKK(1,NC1P)
      WHKT(2,4+IIGLU1)  =WHKK(2,NC1P)
      WHKT(3,4+IIGLU1)  =WHKK(3,NC1P)
      WHKT(4,4+IIGLU1)  =WHKK(4,NC1P)
      IF(IPIP.EQ.1)THEN
        IDHKT(5+IIGLU1)   =-(ISAQ1-6)
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(5+IIGLU1)   =ISAQ1
      ENDIF
      ISTHKT(5+IIGLU1)  =922
      JMOHKT(1,5+IIGLU1)=NC1T
      JMOHKT(2,5+IIGLU1)=0
      JDAHKT(1,5+IIGLU1)=6+IIGLU1
      JDAHKT(2,5+IIGLU1)=0
c*NEW
      IF ((XSAQ1.LT.0.0D0).OR.(XVQT  .LT.0.0D0))
     &    WRITE(*,*) ' mgsqbs2: ',XSAQ1,XVQT
c*
      PHKT(1,5+IIGLU1)  =PHKK(1,NC1T)*XSAQ1/(XVQT+XSAQ1)
      PHKT(2,5+IIGLU1)  =PHKK(2,NC1T)*XSAQ1/(XVQT+XSAQ1)
      PHKT(3,5+IIGLU1)  =PHKK(3,NC1T)*XSAQ1/(XVQT+XSAQ1)
      PHKT(4,5+IIGLU1)  =PHKK(4,NC1T)*XSAQ1/(XVQT+XSAQ1)
C     PHKT(5,5+IIGLU1)  =PHKK(5,NC1T)
      XMIST=(PHKT(4,5+IIGLU1)**2-
     * PHKT(3,5+IIGLU1)**2-PHKT(2,5+IIGLU1)**2-
     *PHKT(1,5+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,5+IIGLU1)  =SQRT(PHKT(4,5+IIGLU1)**2-
     * PHKT(3,5+IIGLU1)**2-PHKT(2,5+IIGLU1)**2-
     *PHKT(1,5+IIGLU1)**2)
      ELSE
C      WRITE(6,*)' parton 4 mass square LT.0 ',XMIST
        PHKT(5,5+IIGLU1)=0.D0
      ENDIF
      VHKT(1,5+IIGLU1)  =VHKK(1,NC1T)
      VHKT(2,5+IIGLU1)  =VHKK(2,NC1T)
      VHKT(3,5+IIGLU1)  =VHKK(3,NC1T)
      VHKT(4,5+IIGLU1)  =VHKK(4,NC1T)
      WHKT(1,5+IIGLU1)  =WHKK(1,NC1T)
      WHKT(2,5+IIGLU1)  =WHKK(2,NC1T)
      WHKT(3,5+IIGLU1)  =WHKK(3,NC1T)
      WHKT(4,5+IIGLU1)  =WHKK(4,NC1T)
      IDHKT(6+IIGLU1)   =88888
C     IDHKT(6)   =1000*NNNC1+MMMC1
      ISTHKT(6+IIGLU1)  =93
C     ISTHKT(6)  =KKKC1
      JMOHKT(1,6+IIGLU1)=4+IIGLU1
      JMOHKT(2,6+IIGLU1)=5+IIGLU1
      JDAHKT(1,6+IIGLU1)=0
      JDAHKT(2,6+IIGLU1)=0
      PHKT(1,6+IIGLU1)  =PHKT(1,4+IIGLU1)+PHKT(1,5+IIGLU1)
      PHKT(2,6+IIGLU1)  =PHKT(2,4+IIGLU1)+PHKT(2,5+IIGLU1)
      PHKT(3,6+IIGLU1)  =PHKT(3,4+IIGLU1)+PHKT(3,5+IIGLU1)
      PHKT(4,6+IIGLU1)  =PHKT(4,4+IIGLU1)+PHKT(4,5+IIGLU1)
      PHKT(5,6+IIGLU1)
     * =SQRT(PHKT(4,6+IIGLU1)**2-PHKT(1,6+IIGLU1)**2-PHKT(2,6+IIGLU1)**2
     *            -PHKT(3,6+IIGLU1)**2)
      CHAMAL=CHAM1
      IF(IPIP.EQ.1)THEN
        IF(IP12.GE.3.OR.ISAQ.GE.9)CHAMAL=CHAM3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP12.LE.-3.OR.ISAQ.GE.3)CHAMAL=CHAM3
      ENDIF
      IF(PHKT(5,6+IIGLU1).LT.CHAMAL)THEN
        IF(IDHKT(5+IIGLU1).EQ.-IDHKT(4+IIGLU1))THEN
C                    we drop chain 6 and give the energy to chain 3
          IDHKT(6+IIGLU1)=33888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1'
	  GO TO 7788
	ELSEIF(IDHKT(5+IIGLU1).EQ.-IP11)THEN
C                    we drop chain 6 and give the energy to chain 3
C                    and change KK11 to IDHKT(4)
          IDHKT(6+IIGLU1)=33888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1 KK11=IDHKT(4+IIGLU1)'
	  KK11=IDHKT(4+IIGLU1)
	  GO TO 7788
	ELSEIF(IDHKT(5+IIGLU1).EQ.-IPP21)THEN
C                    we drop chain 6 and give the energy to chain 3
C                    and change KK21 to IDHKT(4)
C     IDHKT(2)   =1000*IPP21+100*IPP22+1
          IDHKT(6+IIGLU1)=33888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1 KK21=IDHKT(4+IIGLU1)'
	  KK21=IDHKT(4+IIGLU1)
	  GO TO 7788
	ELSEIF(IDHKT(5+IIGLU1).EQ.-IPP22)THEN
C                    we drop chain 6 and give the energy to chain 3
C                    and change KK22 to IDHKT(4)
C     IDHKT(2)   =1000*IPP21+100*IPP22+1
          IDHKT(6+IIGLU1)=33888
	  XGIVE=1.D0
C	  WRITE(6,*)' drop chain 6 xgive=1 KK22=IDHKT(4+IIGLU1)'
	  KK22=IDHKT(4+IIGLU1)
	  GO TO 7788
	ENDIF
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MGSQBS1 jump back from chain 6'
        GO TO 3466
      ENDIF
 7788 CONTINUE
      IF(IPIP.GE.3)THEN
      WRITE(ErrorOut,
     * *)4+IIGLU1,ISTHKT(4+IIGLU1),IDHKT(4+IIGLU1),
     * JMOHKT(1,4+IIGLU1),
     * JMOHKT(2,4+IIGLU1),JDAHKT(1,4+IIGLU1),
     *JDAHKT(2,4+IIGLU1),(PHKT(III,4+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)5+IIGLU1,ISTHKT(5+IIGLU1),IDHKT(5+IIGLU1),
     * JMOHKT(1,5+IIGLU1),
     * JMOHKT(2,5+IIGLU1),JDAHKT(1,5+IIGLU1),
     *JDAHKT(2,5+IIGLU1),(PHKT(III,5+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)6+IIGLU1,ISTHKT(6+IIGLU1),IDHKT(6+IIGLU1),
     * JMOHKT(1,6+IIGLU1),
     * JMOHKT(2,6+IIGLU1),JDAHKT(1,6+IIGLU1),
     *JDAHKT(2,6+IIGLU1),(PHKT(III,6+IIGLU1),III=1,5)
      ENDIF
      VHKT(1,6+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,6+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,6+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,6+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,6+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,6+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,6+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,6+IIGLU1)  =WHKK(4,NC1)
C     IDHKT(1)   =IP11
      IDHKT(1)   =KK11
      ISTHKT(1)  =921
      JMOHKT(1,1)=NC1P
      JMOHKT(2,1)=0
      JDAHKT(1,1)=3+IIGLU1
      JDAHKT(2,1)=0
      PHKT(1,1)  =PHKK(1,NC1P)*XVPQI/(XDIQP+XSQ1)
C    * +0.5D0*PHKK(1,NC2P)
     *+XGIVE*PHKT(1,4+IIGLU1)
      PHKT(2,1)  =PHKK(2,NC1P)*XVPQI/(XDIQP+XSQ1)
C    * +0.5D0*PHKK(2,NC2P)
     *+XGIVE*PHKT(2,4+IIGLU1)
      PHKT(3,1)  =PHKK(3,NC1P)*XVPQI/(XDIQP+XSQ1)
C    * +0.5D0*PHKK(3,NC2P)
     *+XGIVE*PHKT(3,4+IIGLU1)
      PHKT(4,1)  =PHKK(4,NC1P)*XVPQI/(XDIQP+XSQ1)
C    * +0.5D0*PHKK(4,NC2P)
     *+XGIVE*PHKT(4,4+IIGLU1)
C     PHKT(5,1)  =PHKK(5,NC1P)
      XMIST  =(PHKT(4,1)**2- PHKT(3,1)**2-PHKT(2,1)**2-
     *PHKT(1,1)**2)
      IF(XMIST.GE.0.D0)THEN
      PHKT(5,1)  =SQRT(PHKT(4,1)**2- PHKT(3,1)**2-PHKT(2,1)**2-
     *PHKT(1,1)**2)
      ELSE
C      WRITE(6,*)'MGSQBS1 parton 1 mass square LT.0 ',XMIST
       PHKT(5,1)=0.D0
      ENDIF
      VHKT(1,1)  =VHKK(1,NC1P)
      VHKT(2,1)  =VHKK(2,NC1P)
      VHKT(3,1)  =VHKK(3,NC1P)
      VHKT(4,1)  =VHKK(4,NC1P)
      WHKT(1,1)  =WHKK(1,NC1P)
      WHKT(2,1)  =WHKK(2,NC1P)
      WHKT(3,1)  =WHKK(3,NC1P)
      WHKT(4,1)  =WHKK(4,NC1P)
C     Add here IIGLU1 gluons to this chaina
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU1.GE.1)THEN
      JJG=NC1P
      DO 61 IIG=2,2+IIGLU1-1
        KKG=JJG+IIG-1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=3+IIGLU1
        JDAHKT(2,IIG)=0
	PHKT(1,IIG)=PHKK(1,KKG)
	PG1=PG1+ PHKT(1,IIG)
	PHKT(2,IIG)=PHKK(2,KKG)
	PG2=PG2+ PHKT(2,IIG)
	PHKT(3,IIG)=PHKK(3,KKG)
	PG3=PG3+ PHKT(3,IIG)
	PHKT(4,IIG)=PHKK(4,KKG)
	PG4=PG4+ PHKT(4,IIG)
	PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG)  =WHKK(1,KKG)
        WHKT(2,IIG)  =WHKK(2,KKG)
        WHKT(3,IIG)  =WHKK(3,KKG)
        WHKT(4,IIG)  =WHKK(4,KKG)
   61 CONTINUE
      ENDIF
C     IDHKT(2)   =1000*IPP21+100*IPP22+1
      IF(IPIP.EQ.1)THEN
        IDHKT(2+IIGLU1)   =1000*KK21+100*KK22+3
	IF(IDHKT(2+IIGLU1).EQ.1203)IDHKT(2+IIGLU1)=2103
	IF(IDHKT(2+IIGLU1).EQ.1303)IDHKT(2+IIGLU1)=3103
	IF(IDHKT(2+IIGLU1).EQ.2303)IDHKT(2+IIGLU1)=3203
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(2+IIGLU1)   =1000*KK21+100*KK22-3
	IF(IDHKT(2+IIGLU1).EQ.-1203)IDHKT(2+IIGLU1)=-2103
	IF(IDHKT(2+IIGLU1).EQ.-1303)IDHKT(2+IIGLU1)=-3103
	IF(IDHKT(2+IIGLU1).EQ.-2303)IDHKT(2+IIGLU1)=-3203
      ENDIF
      ISTHKT(2+IIGLU1)  =922
      JMOHKT(1,2+IIGLU1)=NC2T
      JMOHKT(2,2+IIGLU1)=0
      JDAHKT(1,2+IIGLU1)=3+IIGLU1
      JDAHKT(2,2+IIGLU1)=0
      PHKT(1,2+IIGLU1)  =PHKK(1,NC2T)
     *+XGIVE*PHKT(1,5+IIGLU1)
      PHKT(2,2+IIGLU1)  =PHKK(2,NC2T)
     *+XGIVE*PHKT(2,5+IIGLU1)
      PHKT(3,2+IIGLU1)  =PHKK(3,NC2T)
     *+XGIVE*PHKT(3,5+IIGLU1)
      PHKT(4,2+IIGLU1)  =PHKK(4,NC2T)
     *+XGIVE*PHKT(4,5+IIGLU1)
C     PHKT(5,2)  =PHKK(5,NC2T)
      XMIST=(PHKT(4,2+IIGLU1)**2-
     * PHKT(3,2+IIGLU1)**2-PHKT(2,2+IIGLU1)**2-
     *PHKT(1,2+IIGLU1)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,2+IIGLU1)  =SQRT(PHKT(4,2+IIGLU1)**2-
     * PHKT(3,2+IIGLU1)**2-PHKT(2,2+IIGLU1)**2-
     *PHKT(1,2+IIGLU1)**2)
      ELSE
C     WRITE(6,*)'MUSQBS2 parton 1 mass square LT.0 ',XMIST
      PHKT(5,2+IIGLU1)=0.D0
      ENDIF
      VHKT(1,2+IIGLU1)  =VHKK(1,NC2T)
      VHKT(2,2+IIGLU1)  =VHKK(2,NC2T)
      VHKT(3,2+IIGLU1)  =VHKK(3,NC2T)
      VHKT(4,2+IIGLU1)  =VHKK(4,NC2T)
      WHKT(1,2+IIGLU1)  =WHKK(1,NC2T)
      WHKT(2,2+IIGLU1)  =WHKK(2,NC2T)
      WHKT(3,2+IIGLU1)  =WHKK(3,NC2T)
      WHKT(4,2+IIGLU1)  =WHKK(4,NC2T)
      IDHKT(3+IIGLU1)   =88888
C     IDHKT(3)   =1000*NNNC1+MMMC1+10
      ISTHKT(3+IIGLU1)  =93
C     ISTHKT(3)  =KKKC1
      JMOHKT(1,3+IIGLU1)=1
      JMOHKT(2,3+IIGLU1)=2+IIGLU1
      JDAHKT(1,3+IIGLU1)=0
      JDAHKT(2,3+IIGLU1)=0
      PHKT(1,3+IIGLU1)  =PHKT(1,1)+PHKT(1,2+IIGLU1)+PG1
      PHKT(2,3+IIGLU1)  =PHKT(2,1)+PHKT(2,2+IIGLU1)+PG2
      PHKT(3,3+IIGLU1)  =PHKT(3,1)+PHKT(3,2+IIGLU1)+PG3
      PHKT(4,3+IIGLU1)  =PHKT(4,1)+PHKT(4,2+IIGLU1)+PG4
      PHKT(5,3+IIGLU1)
     * =SQRT(PHKT(4,3+IIGLU1)**2-PHKT(1,3+IIGLU1)**2-PHKT(2,3+IIGLU1)**2
     *            -PHKT(3,3+IIGLU1)**2)
      IF(IPIP.GE.3)THEN
      WRITE(ErrorOut,
     * *)1,ISTHKT(1),IDHKT(1),JMOHKT(1,1),JMOHKT(2,1),
     * JDAHKT(1,1),
     *JDAHKT(2,1),(PHKT(III,1),III=1,5)
      DO 71 IIG=2,2+IIGLU1-1
      WRITE(ErrorOut,
     * *)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
     * JDAHKT(1,IIG),
     *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
   71 CONTINUE
      WRITE(ErrorOut,
     * *)2+IIGLU1,ISTHKT(2+IIGLU1),IDHKT(2),JMOHKT(1,2+IIGLU1),
     * JMOHKT(2,2+IIGLU1),JDAHKT(1,2+IIGLU1),
     *JDAHKT(2,2+IIGLU1),(PHKT(III,2+IIGLU1),III=1,5)
      WRITE(ErrorOut,
     * *)3+IIGLU1,ISTHKT(3+IIGLU1),IDHKT(3+IIGLU1),
     * JMOHKT(1,3+IIGLU1),
     * JMOHKT(2,3+IIGLU1),JDAHKT(1,3+IIGLU1),
     *JDAHKT(2,3+IIGLU1),(PHKT(III,3+IIGLU1),III=1,5)
      ENDIF
      CHAMAL=CHAB1
c*NEW
C     IF(IPIP.EQ.1)THEN
C       IF(IPP21.GE.3.OR.IPP22.GE.3.OR.IP11.GE.3)CHAMAL=CHAB3
C     ELSEIF(IPIP.EQ.2)THEN
C       IF(IPP21.LE.-3.OR.IPP22.LE.-3.OR.IP11.LE.-3)CHAMAL=CHAB3
C     ENDIF
      IF(IPIP.EQ.1)THEN
        IF(KK21.GE.3.OR.KK22.GE.3.OR.KK11.GE.3)CHAMAL=CHAB3
      ELSEIF(IPIP.EQ.2)THEN
        IF(KK21.LE.-3.OR.KK22.LE.-3.OR.KK11.LE.-3)CHAMAL=CHAB3
      ENDIF
c*
      IF(PHKT(5,3+IIGLU1).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MGSQBS1 jump back from chain 3'
        GO TO 3466
      ENDIF
      VHKT(1,3+IIGLU1)  =VHKK(1,NC1)
      VHKT(2,3+IIGLU1)  =VHKK(2,NC1)
      VHKT(3,3+IIGLU1)  =VHKK(3,NC1)
      VHKT(4,3+IIGLU1)  =VHKK(4,NC1)
      WHKT(1,3+IIGLU1)  =WHKK(1,NC1)
      WHKT(2,3+IIGLU1)  =WHKK(2,NC1)
      WHKT(3,3+IIGLU1)  =WHKK(3,NC1)
      WHKT(4,3+IIGLU1)  =WHKK(4,NC1)
      IF(IPIP.EQ.1)THEN
        IDHKT(7+IIGLU1)   =1000*IPP1+100*ISQ1+3
        IF(IDHKT(7+IIGLU1).EQ.1203)IDHKT(7+IIGLU1)=2103
        IF(IDHKT(7+IIGLU1).EQ.1303)IDHKT(7+IIGLU1)=3103
        IF(IDHKT(7+IIGLU1).EQ.2303)IDHKT(7+IIGLU1)=3203
      ELSEIF(IPIP.EQ.2)THEN
        IDHKT(7+IIGLU1)   =1000*IPP1+100*(-ISQ1+6)-3
        IF(IDHKT(7+IIGLU1).EQ.-1203)IDHKT(7+IIGLU1)=-2103
        IF(IDHKT(7+IIGLU1).EQ.-1303)IDHKT(7+IIGLU1)=-3103
        IF(IDHKT(7+IIGLU1).EQ.-2303)IDHKT(7+IIGLU1)=-3203
C	WRITE(6,*)'IDHKT(7),IPP1,ISQ1',IDHKT(7),IPP1,ISQ1
      ENDIF
      ISTHKT(7+IIGLU1)  =921
      JMOHKT(1,7+IIGLU1)=NC2P
      JMOHKT(2,7+IIGLU1)=0
      JDAHKT(1,7+IIGLU1)=9+IIGLU1+IIGLU2
      JDAHKT(2,7+IIGLU1)=0
C     PHKT(1,7)  =0.5D0*PHKK(1,NC2P)+PHKK(1,NC1P)*XSQ/(XDIQP+XSQ)
C     PHKT(2,7)  =0.5D0*PHKK(2,NC2P)+PHKK(2,NC1P)*XSQ/(XDIQP+XSQ)
C     PHKT(3,7)  =0.5D0*PHKK(3,NC2P)+PHKK(3,NC1P)*XSQ/(XDIQP+XSQ)
C     PHKT(4,7+IIGLU1)  =0.5D0*PHKK(4,NC2P)+PHKK(4,NC1P)*XSQ/(XDIQP+XSQ)
c*NEW
      IF ((XSQ1 .LT.0.0D0).OR.(XDIQP .LT.0.0D0))
     &    WRITE(*,*) ' mgsqbs3: ',XSQ1,XDIQP
c*
      PHKT(1,7+IIGLU1)  =PHKK(1,NC2P)+PHKK(1,NC1P)*XSQ1/(XDIQP+XSQ1)
      PHKT(2,7+IIGLU1)  =PHKK(2,NC2P)+PHKK(2,NC1P)*XSQ1/(XDIQP+XSQ1)
      PHKT(3,7+IIGLU1)  =PHKK(3,NC2P)+PHKK(3,NC1P)*XSQ1/(XDIQP+XSQ1)
      PHKT(4,7+IIGLU1)  =PHKK(4,NC2P)+PHKK(4,NC1P)*XSQ1/(XDIQP+XSQ1)
C     WRITE(6,*)'PHKK(4,NC1P),PHKK(4,NC2P), PHKT(4,7)',
C    * PHKK(4,NC1P),PHKK(4,NC2P), PHKT(4,7)
      IF(PHKT(4,7+IIGLU1).GE. PHKK(4,NC1P))THEN
C       IREJ=1
C	WRITE(6,*)'reject PHKT(4,7).GE. PHKK(4,NC1P)'
	IPCO=0
C	RETURN
        GO TO 3466
      ENDIF
C     PHKT(5,7)  =PHKK(5,NC2P)
      PHKT(5,7+IIGLU1)  =SQRT(PHKT(4,7+IIGLU1)**2-
     * PHKT(3,7+IIGLU1)**2-PHKT(2,7+IIGLU1)**2-
     *PHKT(1,7+IIGLU1)**2)
      VHKT(1,7+IIGLU1)  =VHKK(1,NC2P)
      VHKT(2,7+IIGLU1)  =VHKK(2,NC2P)
      VHKT(3,7+IIGLU1)  =VHKK(3,NC2P)
      VHKT(4,7+IIGLU1)  =VHKK(4,NC2P)
      WHKT(1,7+IIGLU1)  =WHKK(1,NC2P)
      WHKT(2,7+IIGLU1)  =WHKK(2,NC2P)
      WHKT(3,7+IIGLU1)  =WHKK(3,NC2P)
      WHKT(4,7+IIGLU1)  =WHKK(4,NC2P)
C     Insert here the IIGLU2 gluons
      PG1=0.D0
      PG2=0.D0
      PG3=0.D0
      PG4=0.D0
      IF(IIGLU2.GE.1)THEN
      JJG=NC2P
      DO 81 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
        KKG=JJG+IIG-7-IIGLU1
        IDHKT(IIG)   =IDHKK(KKG)
        ISTHKT(IIG)  =921
        JMOHKT(1,IIG)=KKG
        JMOHKT(2,IIG)=0
        JDAHKT(1,IIG)=9+IIGLU1+IIGLU2
        JDAHKT(2,IIG)=0
	PHKT(1,IIG)=PHKK(1,KKG)
	PG1=PG1+ PHKT(1,IIG)
	PHKT(2,IIG)=PHKK(2,KKG)
	PG2=PG2+ PHKT(2,IIG)
	PHKT(3,IIG)=PHKK(3,KKG)
	PG3=PG3+ PHKT(3,IIG)
	PHKT(4,IIG)=PHKK(4,KKG)
	PG4=PG4+ PHKT(4,IIG)
	PHKT(5,IIG)=PHKK(5,KKG)
        VHKT(1,IIG)  =VHKK(1,KKG)
        VHKT(2,IIG)  =VHKK(2,KKG)
        VHKT(3,IIG)  =VHKK(3,KKG)
        VHKT(4,IIG)  =VHKK(4,KKG)
        WHKT(1,IIG)  =WHKK(1,KKG)
        WHKT(2,IIG)  =WHKK(2,KKG)
        WHKT(3,IIG)  =WHKK(3,KKG)
        WHKT(4,IIG)  =WHKK(4,KKG)
   81 CONTINUE
      ENDIF
      IDHKT(8+IIGLU1+IIGLU2)   =IP2
      ISTHKT(8+IIGLU1+IIGLU2)  =922
      JMOHKT(1,8+IIGLU1+IIGLU2)=NC1T
      JMOHKT(2,8+IIGLU1+IIGLU2)=0
      JDAHKT(1,8+IIGLU1+IIGLU2)=9+IIGLU1+IIGLU2
      JDAHKT(2,8+IIGLU1+IIGLU2)=0
c*NEW
      IF ((XVQT.LT.0.0D0).OR.(XSAQ1 .LT.0.0D0))
     &    WRITE(*,*) ' mgsqbs4: ',XVQT,XSAQ1
c*
      PHKT(1,8+IIGLU1+IIGLU2)  =PHKK(1,NC1T)*XVQT/(XSAQ1+XVQT)
      PHKT(2,8+IIGLU1+IIGLU2)  =PHKK(2,NC1T)*XVQT/(XSAQ1+XVQT)
      PHKT(3,8+IIGLU1+IIGLU2)  =PHKK(3,NC1T)*XVQT/(XSAQ1+XVQT)
      PHKT(4,8+IIGLU1+IIGLU2)  =PHKK(4,NC1T)*XVQT/(XSAQ1+XVQT)
C     PHKT(5,8+IIGLU1+IIGLU2)  =PHKK(5,NC1T)
      XMIST=(PHKT(4,8+IIGLU1+IIGLU2)**2-
     * PHKT(3,8+IIGLU1+IIGLU2)**2-PHKT(2,8+IIGLU1+IIGLU2)**2-
     *PHKT(1,8+IIGLU1+IIGLU2)**2)
      IF(XMIST.GT.0.D0)THEN
      PHKT(5,8+IIGLU1+IIGLU2)  =SQRT(PHKT(4,8+IIGLU1+IIGLU2)**2-
     * PHKT(3,8+IIGLU1+IIGLU2)**2-PHKT(2,8+IIGLU1+IIGLU2)**2-
     *PHKT(1,8+IIGLU1+IIGLU2)**2)
      ELSE
C     WRITE(6,*)'MUSQBS2 parton 1 mass square LT.0 ',XMIST
      PHKT(5,8+IIGLU1+IIGLU2)=0.D0
      ENDIF
      VHKT(1,8+IIGLU1+IIGLU2)  =VHKK(1,NC1T)
      VHKT(2,8+IIGLU1+IIGLU2)  =VHKK(2,NC1T)
      VHKT(3,8+IIGLU1+IIGLU2)  =VHKK(3,NC1T)
      VHKT(4,8+IIGLU1+IIGLU2)  =VHKK(4,NC1T)
      WHKT(1,8+IIGLU1+IIGLU2)  =WHKK(1,NC1T)
      WHKT(2,8+IIGLU1+IIGLU2)  =WHKK(2,NC1T)
      WHKT(3,8+IIGLU1+IIGLU2)  =WHKK(3,NC1T)
      WHKT(4,8+IIGLU1+IIGLU2)  =WHKK(4,NC1T)
      IDHKT(9+IIGLU1+IIGLU2)   =88888
C     IDHKT(9)   =1000*NNNC2+MMMC2+10
      ISTHKT(9+IIGLU1+IIGLU2)  =93
C     ISTHKT(9)  =KKKC2
      JMOHKT(1,9+IIGLU1+IIGLU2)=7+IIGLU1
      JMOHKT(2,9+IIGLU1+IIGLU2)=8+IIGLU1+IIGLU2
      JDAHKT(1,9+IIGLU1+IIGLU2)=0
      JDAHKT(2,9+IIGLU1+IIGLU2)=0
      PHKT(1,9+IIGLU1+IIGLU2)  =PHKT(1,7+IIGLU1)
     * +PHKT(1,8+IIGLU1+IIGLU2)+PG1
      PHKT(2,9+IIGLU1+IIGLU2)  =PHKT(2,7+IIGLU1)
     * +PHKT(2,8+IIGLU1+IIGLU2)+PG2
      PHKT(3,9+IIGLU1+IIGLU2)  =PHKT(3,7+IIGLU1)
     * +PHKT(3,8+IIGLU1+IIGLU2)+PG3
      PHKT(4,9+IIGLU1+IIGLU2)  =PHKT(4,7+IIGLU1)
     * +PHKT(4,8+IIGLU1+IIGLU2)+PG4
      PHKT(5,9+IIGLU1+IIGLU2)
     * =SQRT(PHKT(4,9+IIGLU1+IIGLU2)**2-PHKT(1,9+IIGLU1+IIGLU2)**2-
     * PHKT(2,9+IIGLU1+IIGLU2)**2
     *            -PHKT(3,9+IIGLU1+IIGLU2)**2)
      IF(IPIP.GE.3)THEN
      WRITE(ErrorOut,
     * *)7+IIGLU1,ISTHKT(7+IIGLU1),IDHKT(7+IIGLU1),
     * JMOHKT(1,7+IIGLU1),
     * JMOHKT(2,7+IIGLU1),JDAHKT(1,7+IIGLU1),
     *JDAHKT(2,7+IIGLU1),(PHKT(III,7+IIGLU1),III=1,5)
      DO 91 IIG=7+IIGLU1+1,7+IIGLU1+IIGLU2
      WRITE(ErrorOut,
     * *)IIG,ISTHKT(IIG),IDHKT(IIG),JMOHKT(1,IIG),JMOHKT(2,IIG),
     * JDAHKT(1,IIG),
     *JDAHKT(2,IIG),(PHKT(III,IIG),III=1,5)
   91 CONTINUE
      WRITE(ErrorOut,*)8+IIGLU1+IIGLU2,ISTHKT(8+IIGLU1+IIGLU2),
     * IDHKT(8+IIGLU1+IIGLU2),
     * JMOHKT(1,8+IIGLU1+IIGLU2),JMOHKT(2,8+IIGLU1+IIGLU2),
     * JDAHKT(1,8+IIGLU1+IIGLU2),
     *JDAHKT(2,8+IIGLU1+IIGLU2),(PHKT(III,8+IIGLU1+IIGLU2),III=1,5)
      WRITE(ErrorOut,*)9+IIGLU1+IIGLU2,ISTHKT(9+IIGLU1+IIGLU2),
     * IDHKT(9+IIGLU1+IIGLU2),
     * JMOHKT(1,9+IIGLU1+IIGLU2),JMOHKT(2,9+IIGLU1+IIGLU2),
     * JDAHKT(1,9+IIGLU1+IIGLU2),
     *JDAHKT(2,9+IIGLU1+IIGLU2),(PHKT(III,9+IIGLU1+IIGLU2),III=1,5)
      ENDIF
      CHAMAL=CHAB1
      IF(IPIP.EQ.1)THEN
        IF(IP2.GE.3.OR.IPP1.GE.3.OR.ISQ1.GE.3)CHAMAL=CHAB3
      ELSEIF(IPIP.EQ.2)THEN
        IF(IP2.LE.-3.OR.IPP1.LE.-3.OR.ISQ1.GE.9)CHAMAL=CHAB3
      ENDIF
      IF(PHKT(5,9+IIGLU1+IIGLU2).LT.CHAMAL)THEN
C       IREJ=1
	IPCO=0
C	RETURN
C       WRITE(6,*)' MGSQBS1 jump back from chain 9',
C    *	'CHAMAL,PHKT(5,9+IIGLU1+IIGLU2)',CHAMAL,PHKT(5,9+IIGLU1+IIGLU2)
        GO TO 3466
      ENDIF
      VHKT(1,9+IIGLU1+IIGLU2)  =VHKK(1,NC1)
      VHKT(2,9+IIGLU1+IIGLU2)  =VHKK(2,NC1)
      VHKT(3,9+IIGLU1+IIGLU2)  =VHKK(3,NC1)
      VHKT(4,9+IIGLU1+IIGLU2)  =VHKK(4,NC1)
      WHKT(1,9+IIGLU1+IIGLU2)  =WHKK(1,NC1)
      WHKT(2,9+IIGLU1+IIGLU2)  =WHKK(2,NC1)
      WHKT(3,9+IIGLU1+IIGLU2)  =WHKK(3,NC1)
      WHKT(4,9+IIGLU1+IIGLU2)  =WHKK(4,NC1)
C
      IGCOUN=9+IIGLU1+IIGLU2
      IPCO=0
       RETURN
       END
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C
      SUBROUTINE HKKHKT(I,J)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE

C#include "dtu_dtevt1.inc"
C#include "dtu_dtevt2.inc"

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

      PARAMETER (NTMHKK= 300)
      COMMON /HKKTMP/NHKKT,NEVHKT,ISTHKT(NTMHKK),IDHKT(NTMHKK),JMOHKT
     +(2,NTMHKK),JDAHKT(2,NTMHKK), PHKT(5,NTMHKK),VHKT(4,NTMHKK),WHKT
     +(4,NTMHKK)
C
      ISTHKK(I)  =ISTHKT(J)
      IDHKK(I)   =IDHKT(J)
C     IF(J.EQ.3.OR.J.EQ.6.OR.J.EQ.9)THEN
      IF(IDHKK(I).EQ.88888)THEN
C       JMOHKK(1,I)=I-2
C       JMOHKK(2,I)=I-1
        JMOHKK(1,I)=I-(J-JMOHKT(1,J))
        JMOHKK(2,I)=I-(J-JMOHKT(2,J))
      ELSE
        JMOHKK(1,I)=JMOHKT(1,J)
        JMOHKK(2,I)=JMOHKT(2,J)
      ENDIF
      JDAHKK(1,I)=JDAHKT(1,J)
      JDAHKK(2,I)=JDAHKT(2,J)
C       IF(J.EQ.1.OR.J.EQ.4.OR.J.EQ.7)THEN
C       JDAHKK(1,I)=I+2
C     ELSEIF(J.EQ.2.OR.J.EQ.5.OR.J.EQ.8)THEN
C       JDAHKK(1,I)=I+1
C     ENDIF
      IF(JDAHKT(1,J).GT.0)THEN
        JDAHKK(1,I)=I+(JDAHKT(1,J)-J)
      ENDIF
      PHKK(1,I)  =PHKT(1,J)
      PHKK(2,I)  =PHKT(2,J)
      PHKK(3,I)  =PHKT(3,J)
      PHKK(4,I)  =PHKT(4,J)
      PHKK(5,I)  =PHKT(5,J)
      VHKK(1,I)  =VHKT(1,J)
      VHKK(2,I)  =VHKT(2,J)
      VHKK(3,I)  =VHKT(3,J)
      VHKK(4,I)  =VHKT(4,J)
      WHKK(1,I)  =WHKT(1,J)
      WHKK(2,I)  =WHKT(2,J)
      WHKK(3,I)  =WHKT(3,J)
      WHKK(4,I)  =WHKT(4,J)
      RETURN
      END
c
c===dbreak=============================================================*
c
CDECK  ID>, DT_DBREAK
      SUBROUTINE DT_DBREAK(MODE)

c***********************************************************************
c This is the steering subroutine for the different diquark breaking   *
c mechanisms.                                                          *
c                                                                      *
c MODE = 1  breaking of projectile diquark in qq-q chain using         *
c           a sea quark (q-qq chain) of the same projectile            *
c      = 2  breaking of target     diquark in q-qq chain using         *
c           a sea quark (qq-q chain) of the same target                *
c      = 3  breaking of projectile diquark in qq-q chain using         *
c           a sea quark (q-aq chain) of the same projectile            *
c      = 4  breaking of target     diquark in q-qq chain using         *
c           a sea quark (aq-q chain) of the same target                *
c      = 5  breaking of projectile anti-diquark in aqaq-aq chain using *
c           a sea anti-quark (aq-aqaq chain) of the same projectile    *
c      = 6  breaking of target     anti-diquark in aq-aqaq chain using *
c           a sea anti-quark (aqaq-aq chain) of the same target        *
c      = 7  breaking of projectile anti-diquark in aqaq-aq chain using *
c           a sea anti-quark (aq-q chain) of the same projectile       *
c      = 8  breaking of target     anti-diquark in aq-aqaq chain using *
c           a sea anti-quark (q-aq chain) of the same target           *
c                                                                      *
c Original version by J. Ranft.                                        *
c This version dated 17.5.00  is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c event history

      PARAMETER (NMXHKK=90000)

      COMMON /DTEVT1/ NHKK,NEVHKK,ISTHKK(NMXHKK),IDHKK(NMXHKK),
     &                JMOHKK(2,NMXHKK),JDAHKK(2,NMXHKK),
     &                PHKK(5,NMXHKK),VHKK(4,NMXHKK),WHKK(4,NMXHKK)

c extended event history
      COMMON /DTEVT2/ IDRES(NMXHKK),IDXRES(NMXHKK),NOBAM(NMXHKK),
     &                IDBAM(NMXHKK),IDCH(NMXHKK),NPOINT(10),
     &                IHIST(2,NMXHKK)

c flags for input different options
      LOGICAL LEMCCK,LHADRO,LSEADI,LEVAPO
      COMMON /DTFLG1/ IFRAG(2),IRESCO,IMSHL,IRESRJ,IOULEV(6),
     &                LEMCCK,LHADRO(0:9),LSEADI,LEVAPO,IFRAME

c pointer to chains in hkkevt common (used by qq-breaking mechanisms)
      PARAMETER (MAXCHN=10000)
      COMMON /DTIXCH/ IDXCHN(2,MAXCHN),NCHAIN

c diquark-breaking mechanism
      COMMON /DTDIQB/ DBRKR(3,8),DBRKA(3,8),CHAM1,CHAM3,CHAB1,CHAB3

c flags for particle decays
      COMMON /DTFRPA/ MSTUX(20),PARUX(20),MSTJX(20),PARJX(20),
     &                IMSTU(20),IPARU(20),IMSTJ(20),IPARJ(20),
     &                NMSTU,NPARU,NMSTJ,NPARJ,PDB,PDBSEA(3),ISIG0,IPI0


c
c chain identifiers
c ( 1 = q-aq,   2 = aq-q,   3 = q-qq,   4 = qq-q,
c   5 = aq-adq, 6 = adq-aq, 7 = dq-adq, 8 = adq-dq )
      DIMENSION IDCHN1(8),IDCHN2(8)
      DATA IDCHN1 / 4, 3, 4, 3, 6, 5, 6, 5/
      DATA IDCHN2 / 3, 4, 1, 2, 5, 6, 2, 1/
c
c parton identifiers
c ( +-21/22 = valence, +-31/32 = Glauber-sea, +-41/42 = Pomeron (diff),
c   +-51/52 = unitarity-sea, +-61/62 = gluons )
      DIMENSION ISP1P(8,3),ISP1T(8,3),ISP2P(8,3),ISP2T(8,3)
      DATA ISP1P / 21, 21, 21, 21, 21, 21, 21, 21,
     &             31, 31, 31, 31, 31, 31, 31, 31,
     &             41, 41, 41, 41, 51, 51, 51, 51/
      DATA ISP1T / 22, 22, 22, 22, 22, 22, 22, 22,
     &             32, 32, 32, 32, 32, 32, 32, 32,
     &             42, 42, 42, 42, 52, 52, 52, 52/
      DATA ISP2P / 31, 21, 31, 31, 21, 21, 21, 21,
     &             51, 31, 41, 41, 31, 31, 31, 31,
     &              0, 41, 51, 51, 51, 51, 51, 51/
      DATA ISP2T / 22, 32, 32, 32, 22, 22, 22, 22,
     &             32, 52, 42, 42, 32, 32, 32, 32,
     &             42,  0, 52, 52, 52, 52, 52, 52/

      IF (NCHAIN.LE.0) RETURN
      DO 1 I=1,NCHAIN
         IDX1 = IDXCHN(1,I)
         IS1P = ABS(ISTHKK(JMOHKK(1,IDX1)))
         IS1T = ABS(ISTHKK(JMOHKK(2,IDX1)))
         IF ( (IDXCHN(2,I).EQ.IDCHN1(MODE))
     &       .AND.
     &        ((IS1P.EQ.ISP1P(MODE,1)).OR.(IS1P.EQ.ISP1P(MODE,2)).OR.
     &                                    (IS1P.EQ.ISP1P(MODE,3)))
     &       .AND.
     &        ((IS1T.EQ.ISP1T(MODE,1)).OR.(IS1T.EQ.ISP1T(MODE,2)).OR.
     &                                    (IS1T.EQ.ISP1T(MODE,3)))
     &      ) THEN
            DO 2 J=1,NCHAIN
               IDX2 = IDXCHN(1,J)
               IS2P = ABS(ISTHKK(JMOHKK(1,IDX2)))
               IS2T = ABS(ISTHKK(JMOHKK(2,IDX2)))
               IF ( (IDXCHN(2,J).EQ.IDCHN2(MODE))
     &             .AND.
     &              ((IS2P.EQ.ISP2P(MODE,1)).OR.(IS2P.EQ.ISP2P(MODE,2))
     &                                      .OR.(IS2P.EQ.ISP2P(MODE,3)))
     &             .AND.
     &              ((IS2T.EQ.ISP2T(MODE,1)).OR.(IS2T.EQ.ISP2T(MODE,2))
     &                                      .OR.(IS2T.EQ.ISP2T(MODE,3)))
     &            ) THEN
c   find mother nucleons of the diquark to be splitted and of the
c   sea-quark and reject this combination if it is not the same
                  IF ((MODE.EQ.1).OR.(MODE.EQ.3).OR.
     &                (MODE.EQ.5).OR.(MODE.EQ.7)) THEN
                     IANCES = 1
                  ELSE
                     IANCES = 2
                  ENDIF
                  IDXMO1 = JMOHKK(IANCES,IDX1)
    4             CONTINUE
                  IF ((JMOHKK(1,IDXMO1).NE.0).AND.
     &                (JMOHKK(2,IDXMO1).NE.0)) THEN
                     IANC = IANCES
                  ELSE
                     IANC = 1
                  ENDIF
                  IF (JMOHKK(IANC,IDXMO1).NE.0) THEN
                     IDXMO1 = JMOHKK(IANC,IDXMO1)
                     GOTO 4
                  ENDIF
                  IDXMO2 = JMOHKK(IANCES,IDX2)
    5             CONTINUE
                  IF ((JMOHKK(1,IDXMO2).NE.0).AND.
     &                (JMOHKK(2,IDXMO2).NE.0)) THEN
                     IANC = IANCES
                  ELSE
                     IANC = 1
                  ENDIF
                  IF (JMOHKK(IANC,IDXMO2).NE.0) THEN
                     IDXMO2 = JMOHKK(IANC,IDXMO2)
                     GOTO 5
                  ENDIF
                  IF (IDXMO1.NE.IDXMO2) GOTO 2
c   quark content of projectile parton
                  IP1   = IDHKK(JMOHKK(1,IDX1))
                  IP11  = IP1/1000
                  IP12  = (IP1-1000*IP11)/100
                  IP2   = IDHKK(JMOHKK(2,IDX1))
                  IP21  = IP2/1000
                  IP22  = (IP2-1000*IP21)/100
c   quark content of target parton
                  IT1  = IDHKK(JMOHKK(1,IDX2))
                  IT11 = IT1/1000
                  IT12 = (IT1-1000*IT11)/100
                  IT2  = IDHKK(JMOHKK(2,IDX2))
                  IT21 = IT2/1000
                  IT22 = (IT2-1000*IT21)/100
c   split diquark and form new chains
                  IF (MODE.EQ.1) THEN
                     IF (IT1.EQ.4) GOTO 2
                     CALL MGSQBS1(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP11,IP12,IP2,IT1,IT21,IT22,1,IPQ,IGCOUN)
                  ELSEIF (MODE.EQ.2) THEN
                     IF (IT2.EQ.4) GOTO 2
                     CALL MGSQBS2(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP1,IP21,IP22,IT11,IT12,IT2,1,IPQ,IGCOUN)
                  ELSEIF (MODE.EQ.3) THEN
                     IF (IT1.EQ.4) GOTO 2
                     CALL MUSQBS1(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP11,IP12,IP2,IT1,IT2,1,IPQ,IGCOUN)
                  ELSEIF (MODE.EQ.4) THEN
                     IF (IT2.EQ.4) GOTO 2
                     CALL MUSQBS2(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP1,IP21,IP22,IT1,IT2,1,IPQ,IGCOUN)
                  ELSEIF (MODE.EQ.5) THEN
                     CALL MGSQBS1(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP11,IP12,IP2,IT1,IT21,IT22,2,IPQ,IGCOUN)
                  ELSEIF (MODE.EQ.6) THEN
                     CALL MGSQBS2(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP1,IP21,IP22,IT11,IT12,IT2,2,IPQ,IGCOUN)
                  ELSEIF (MODE.EQ.7) THEN
                     CALL MUSQBS1(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP11,IP12,IP2,IT1,IT2,2,IPQ,IGCOUN)
                  ELSEIF (MODE.EQ.8) THEN
                     CALL MUSQBS2(IDX1,JMOHKK(1,IDX1),JMOHKK(2,IDX1),
     &                         IDX2,JMOHKK(1,IDX2),JMOHKK(2,IDX2),IREJ,
     &                         IP1,IP21,IP22,IT1,IT2,2,IPQ,IGCOUN)
                  ENDIF
                  IF (IREJ.GE.1) THEN
                     IF ((IPQ.LT.0).OR.(IPQ.GE.4))
     &                  WRITE(*,*) 'ipq !!!',IPQ,MODE
                     DBRKR(IPQ,MODE) = DBRKR(IPQ,MODE)+1.0D0
c   accept or reject new chains corresponding to PDBSEA
                  ELSE
                     IF ((IPQ.EQ.1).OR.(IPQ.EQ.2)) THEN
                        ACC   = DBRKA(1,MODE)+DBRKA(2,MODE)
                        REJ   = DBRKR(1,MODE)+DBRKR(2,MODE)
                     ELSEIF (IPQ.EQ.3) THEN
                        ACC   = DBRKA(3,MODE)
                        REJ   = DBRKR(3,MODE)
                     ELSE
                        WRITE(*,*) ' inconsistent IPQ ! ',IPQ
                        STOP
                     ENDIF
                     IF (ACC/(ACC+REJ).LE.PDBSEA(IPQ)) THEN
                        DBRKA(IPQ,MODE) = DBRKA(IPQ,MODE)+1.0D0
                        IACC = 1
                     ELSE
                        DBRKR(IPQ,MODE) = DBRKR(IPQ,MODE)+1.0D0
                        IACC = 0
                     ENDIF
c   new chains have been accepted and are now copied into HKKEVT
                     IF (IACC.EQ.1) THEN
                        IF (LEMCCK) THEN
                           CALL DT_EVTEMC(PHKK(1,IDX1),PHKK(2,IDX1),
     &                                    PHKK(3,IDX1),PHKK(4,IDX1),
     &                                    1,IDUM1,IDUM2)
                           CALL DT_EVTEMC(PHKK(1,IDX2),PHKK(2,IDX2),
     &                                    PHKK(3,IDX2),PHKK(4,IDX2),
     &                                    2,IDUM1,IDUM2)
                        ENDIF
                        IDHKK(IDX1) = 99888
                        IDHKK(IDX2) = 99888
                        IDXCHN(2,I) = -1
                        IDXCHN(2,J) = -1
                        DO 3 K=1,IGCOUN
                           NHKK = NHKK+1
                           CALL HKKHKT(NHKK,K)
                           IF ((LEMCCK).AND.(IDHKK(NHKK).EQ.88888))THEN
                              PX = -PHKK(1,NHKK)
                              PY = -PHKK(2,NHKK)
                              PZ = -PHKK(3,NHKK)
                              PE = -PHKK(4,NHKK)
                              CALL DT_EVTEMC(PX,PY,PZ,PE,2,IDUM1,IDUM2)
                           ENDIF
    3                   CONTINUE
                        IF (LEMCCK) THEN
                           CHKLEV = 0.1D0
                           CALL DT_EVTEMC(DUM1,DUM2,DUM3,CHKLEV,-1,9000,
     &                                                             IREJ)
                           IF (IREJ.NE.0) CALL DT_EVTOUT(4)
                        ENDIF
                        GOTO 1
                     ENDIF
                  ENDIF
               ENDIF
    2       CONTINUE
         ENDIF
    1 CONTINUE
      RETURN
      END
c
c===cqpair=============================================================*
c
CDECK  ID>, DT_CQPAIR
      SUBROUTINE DT_CQPAIR(XQMAX,XAQMAX,XQ,XAQ,IFLV,IREJ)

c***********************************************************************
c This subroutine Creates a Quark-antiquark PAIR from the sea.         *
c                                                                      *
c   XQMAX   maxium energy fraction of quark (input)                    *
c   XAQMAX  maxium energy fraction of antiquark (input)                *
c   XQ      energy fraction of quark (output)                          *
c   XAQ     energy fraction of antiquark (output)                      *
c   IFLV    quark flavour (- antiquark flavor) (output)                *
c                                                                      *
c This version dated 14.5.00  is written by S. Roesler.                *
c***********************************************************************

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      PARAMETER (LOUT=6,LLOOK=9)

c Lorentz-parameters of the current interaction
      COMMON /DTLTRA/ GACMS(2),BGCMS(2),GALAB,BGLAB,BLAB,
     &                UMO,PPCM,EPROJ,PPROJ


c
      IREJ = 0
      XQ   = 0.0D0
      XAQ  = 0.0D0
c
c sample quark flavour
c
c  set seasq here (the one from DTCHAI should be used in the future)
      SEASQ = 0.5D0
      IFLV  = INT(1.0D0+DT_RNDM(XQMAX)*(2.0D0+SEASQ))
c
c sample energy fractions of sea pair
c we first sample the energy fraction of a gluon and then split the gluon
c
c  maximum energy fraction of the gluon forced via input
      XGMAXI = XQMAX+XAQMAX
c  minimum energy fraction of the gluon
      XTHR1 = 4.0D0 /UMO**2
      XTHR2 = 0.54D0/UMO**1.5D0
      XGMIN = MAX(XTHR1,XTHR2)
c  maximum energy fraction of the gluon
      XGMAX = 0.3D0
      XGMAX = MIN(XGMAXI,XGMAX)
      IF (XGMIN.GE.XGMAX) THEN
         IREJ = 1
         RETURN
      ENDIF
c
c  sample energy fraction of the gluon
      NLOOP = 0
    1 CONTINUE
      NLOOP = NLOOP+1
      IF (NLOOP.GE.50) THEN
         IREJ = 1
         RETURN
      ENDIF
      XGLUON = DT_SAMSQX(XGMIN,XGMAX)
      EGLUON = XGLUON*UMO/2.0D0
c
c  split gluon into q-aq pair (we follow PHOJET's subroutine PHO_GLU2QU)
      ZMIN = MIN(0.1D0,0.5D0/EGLUON)
      ZMAX = 1.0D0-ZMIN
      RZ   = DT_RNDM(ZMAX)
      XHLP = ((1.0D0-RZ)*ZMIN**3+RZ*ZMAX**3)**0.33333
      RQ   = DT_RNDM(ZMAX)
      IF (RQ.LT.0.5D0) THEN
         XQ  = XGLUON*XHLP
         XAQ = XGLUON-XQ
      ELSE
         XAQ = XGLUON*XHLP
         XQ  = XGLUON-XAQ
      ENDIF
      IF ((XQ.GT.XQMAX).OR.(XAQ.GT.XAQMAX)) GOTO 1

      RETURN
      END
#else
      SUBROUTINE DT_KKINC(NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,EPN,KKMAT,
     &                                                         IREJ)
      call cerrorMsg('Your system may be NEXTSTEP or',1)
      call cerrorMsg('You specified USEDPMJET 0 in Zcondc.h', 1)
      call cerrorMsg('so that you cannot use dpmjet3', 0)
      end
      subroutine 
     & DT_DTUINI(NEVTS,EPN,NPMASS,NPCHAR,NTMASS,NTCHAR,IDP,IEMU)
      call cerrorMsg('Your system may be NEXTSTEP or',1)
      call cerrorMsg('You specified USEDPMJET 0 in Zcondc.h', 1)
      call cerrorMsg('so that you cannot use dpmjet3', 0)
      end
#endif

